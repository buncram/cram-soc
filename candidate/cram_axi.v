// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : cram_axi.v
// Device     : 
// LiteX sha1 : 05d4b572
// Date       : 2022-12-12 17:58:29
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module cram_axi (
    input  wire          aclk,
    input  wire          rst,
    input  wire          hclk,
    input  wire          hrst,
    output wire          ibus_axi_awvalid,
    input  wire          ibus_axi_awready,
    output wire   [31:0] ibus_axi_awaddr,
    output wire    [1:0] ibus_axi_awburst,
    output wire    [7:0] ibus_axi_awlen,
    output wire    [2:0] ibus_axi_awsize,
    output wire          ibus_axi_awlock,
    output wire    [2:0] ibus_axi_awprot,
    output wire    [3:0] ibus_axi_awcache,
    output wire    [3:0] ibus_axi_awqos,
    output wire    [3:0] ibus_axi_awregion,
    output wire          ibus_axi_awid,
    output wire          ibus_axi_awuser,
    output wire          ibus_axi_wvalid,
    input  wire          ibus_axi_wready,
    output wire          ibus_axi_wlast,
    output wire   [63:0] ibus_axi_wdata,
    output wire    [7:0] ibus_axi_wstrb,
    output wire          ibus_axi_wuser,
    input  wire          ibus_axi_bvalid,
    output wire          ibus_axi_bready,
    input  wire    [1:0] ibus_axi_bresp,
    input  wire          ibus_axi_bid,
    input  wire          ibus_axi_buser,
    output wire          ibus_axi_arvalid,
    input  wire          ibus_axi_arready,
    output wire   [31:0] ibus_axi_araddr,
    output wire    [1:0] ibus_axi_arburst,
    output wire    [7:0] ibus_axi_arlen,
    output wire    [2:0] ibus_axi_arsize,
    output wire          ibus_axi_arlock,
    output wire    [2:0] ibus_axi_arprot,
    output wire    [3:0] ibus_axi_arcache,
    output wire    [3:0] ibus_axi_arqos,
    output wire    [3:0] ibus_axi_arregion,
    output wire          ibus_axi_arid,
    output wire          ibus_axi_aruser,
    input  wire          ibus_axi_rvalid,
    output wire          ibus_axi_rready,
    input  wire          ibus_axi_rlast,
    input  wire    [1:0] ibus_axi_rresp,
    input  wire   [63:0] ibus_axi_rdata,
    input  wire          ibus_axi_rid,
    input  wire          ibus_axi_ruser,
    output wire          dbus_axi_awvalid,
    input  wire          dbus_axi_awready,
    output wire   [31:0] dbus_axi_awaddr,
    output wire    [1:0] dbus_axi_awburst,
    output wire    [7:0] dbus_axi_awlen,
    output wire    [2:0] dbus_axi_awsize,
    output wire          dbus_axi_awlock,
    output wire    [2:0] dbus_axi_awprot,
    output wire    [3:0] dbus_axi_awcache,
    output wire    [3:0] dbus_axi_awqos,
    output wire    [3:0] dbus_axi_awregion,
    output wire          dbus_axi_awid,
    output wire          dbus_axi_awuser,
    output wire          dbus_axi_wvalid,
    input  wire          dbus_axi_wready,
    output wire          dbus_axi_wlast,
    output wire   [31:0] dbus_axi_wdata,
    output wire    [3:0] dbus_axi_wstrb,
    output wire          dbus_axi_wuser,
    input  wire          dbus_axi_bvalid,
    output wire          dbus_axi_bready,
    input  wire    [1:0] dbus_axi_bresp,
    input  wire          dbus_axi_bid,
    input  wire          dbus_axi_buser,
    output wire          dbus_axi_arvalid,
    input  wire          dbus_axi_arready,
    output wire   [31:0] dbus_axi_araddr,
    output wire    [1:0] dbus_axi_arburst,
    output wire    [7:0] dbus_axi_arlen,
    output wire    [2:0] dbus_axi_arsize,
    output wire          dbus_axi_arlock,
    output wire    [2:0] dbus_axi_arprot,
    output wire    [3:0] dbus_axi_arcache,
    output wire    [3:0] dbus_axi_arqos,
    output wire    [3:0] dbus_axi_arregion,
    output wire          dbus_axi_arid,
    output wire          dbus_axi_aruser,
    input  wire          dbus_axi_rvalid,
    output wire          dbus_axi_rready,
    input  wire          dbus_axi_rlast,
    input  wire    [1:0] dbus_axi_rresp,
    input  wire   [31:0] dbus_axi_rdata,
    input  wire          dbus_axi_rid,
    input  wire          dbus_axi_ruser,
    output reg           p_axi_awvalid,
    input  wire          p_axi_awready,
    output reg    [31:0] p_axi_awaddr,
    output reg     [2:0] p_axi_awprot,
    output reg           p_axi_wvalid,
    input  wire          p_axi_wready,
    output reg    [31:0] p_axi_wdata,
    output reg     [3:0] p_axi_wstrb,
    input  wire          p_axi_bvalid,
    output reg           p_axi_bready,
    input  wire    [1:0] p_axi_bresp,
    output reg           p_axi_arvalid,
    input  wire          p_axi_arready,
    output reg    [31:0] p_axi_araddr,
    output reg     [2:0] p_axi_arprot,
    input  wire          p_axi_rvalid,
    output reg           p_axi_rready,
    input  wire    [1:0] p_axi_rresp,
    input  wire   [31:0] p_axi_rdata,
    input  wire          jtag_tdi,
    output wire          jtag_tdo,
    input  wire          jtag_tms,
    input  wire          jtag_tck,
    input  wire          jtag_trst,
    input  wire   [31:0] interrupt
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
wire          por_clk;
reg           int_rst = 1'd1;
wire          hclk_clk;
wire          hclk_rst;
reg           reset = 1'd0;
reg    [31:0] interrupt_1 = 32'd0;
reg           ibus_axi_aw_valid = 1'd0;
wire          ibus_axi_aw_ready;
reg    [31:0] ibus_axi_aw_payload_addr = 32'd0;
reg     [1:0] ibus_axi_aw_payload_burst = 2'd0;
reg     [7:0] ibus_axi_aw_payload_len = 8'd0;
reg     [2:0] ibus_axi_aw_payload_size = 3'd0;
reg           ibus_axi_aw_payload_lock = 1'd0;
reg     [2:0] ibus_axi_aw_payload_prot = 3'd0;
reg     [3:0] ibus_axi_aw_payload_cache = 4'd0;
reg     [3:0] ibus_axi_aw_payload_qos = 4'd0;
reg     [3:0] ibus_axi_aw_payload_region = 4'd0;
reg           ibus_axi_aw_param_id = 1'd0;
reg           ibus_axi_aw_param_user = 1'd0;
reg           ibus_axi_w_valid = 1'd0;
wire          ibus_axi_w_ready;
reg           ibus_axi_w_last = 1'd0;
reg    [63:0] ibus_axi_w_payload_data = 64'd0;
reg     [7:0] ibus_axi_w_payload_strb = 8'd0;
reg           ibus_axi_w_param_user = 1'd0;
wire          ibus_axi_b_valid;
reg           ibus_axi_b_ready = 1'd0;
wire    [1:0] ibus_axi_b_payload_resp;
wire          ibus_axi_b_param_id;
wire          ibus_axi_b_param_user;
wire          ibus_axi_ar_valid;
wire          ibus_axi_ar_ready;
wire   [31:0] ibus_axi_ar_payload_addr;
wire    [1:0] ibus_axi_ar_payload_burst;
wire    [7:0] ibus_axi_ar_payload_len;
wire    [2:0] ibus_axi_ar_payload_size;
wire          ibus_axi_ar_payload_lock;
wire    [2:0] ibus_axi_ar_payload_prot;
wire    [3:0] ibus_axi_ar_payload_cache;
wire    [3:0] ibus_axi_ar_payload_qos;
wire    [3:0] ibus_axi_ar_payload_region;
wire          ibus_axi_ar_param_id;
reg           ibus_axi_ar_param_user = 1'd0;
wire          ibus_axi_r_valid;
wire          ibus_axi_r_ready;
wire          ibus_axi_r_last;
wire    [1:0] ibus_axi_r_payload_resp;
wire   [63:0] ibus_axi_r_payload_data;
wire          ibus_axi_r_param_id;
wire          ibus_axi_r_param_user;
wire          dbus_axi_aw_valid;
wire          dbus_axi_aw_ready;
reg           dbus_axi_aw_first = 1'd0;
reg           dbus_axi_aw_last = 1'd0;
wire   [31:0] dbus_axi_aw_payload_addr;
wire    [1:0] dbus_axi_aw_payload_burst;
wire    [7:0] dbus_axi_aw_payload_len;
wire    [2:0] dbus_axi_aw_payload_size;
wire          dbus_axi_aw_payload_lock;
wire    [2:0] dbus_axi_aw_payload_prot;
wire    [3:0] dbus_axi_aw_payload_cache;
wire    [3:0] dbus_axi_aw_payload_qos;
wire    [3:0] dbus_axi_aw_payload_region;
wire          dbus_axi_aw_param_id;
reg           dbus_axi_aw_param_dest = 1'd0;
reg           dbus_axi_aw_param_user = 1'd0;
wire          dbus_axi_w_valid;
wire          dbus_axi_w_ready;
reg           dbus_axi_w_first = 1'd0;
wire          dbus_axi_w_last;
wire   [31:0] dbus_axi_w_payload_data;
wire    [3:0] dbus_axi_w_payload_strb;
reg           dbus_axi_w_param_id = 1'd0;
reg           dbus_axi_w_param_dest = 1'd0;
reg           dbus_axi_w_param_user = 1'd0;
wire          dbus_axi_b_valid;
wire          dbus_axi_b_ready;
wire          dbus_axi_b_first;
wire          dbus_axi_b_last;
wire    [1:0] dbus_axi_b_payload_resp;
wire          dbus_axi_b_param_id;
wire          dbus_axi_b_param_dest;
wire          dbus_axi_b_param_user;
wire          dbus_axi_ar_valid;
wire          dbus_axi_ar_ready;
reg           dbus_axi_ar_first = 1'd0;
reg           dbus_axi_ar_last = 1'd0;
wire   [31:0] dbus_axi_ar_payload_addr;
wire    [1:0] dbus_axi_ar_payload_burst;
wire    [7:0] dbus_axi_ar_payload_len;
wire    [2:0] dbus_axi_ar_payload_size;
wire          dbus_axi_ar_payload_lock;
wire    [2:0] dbus_axi_ar_payload_prot;
wire    [3:0] dbus_axi_ar_payload_cache;
wire    [3:0] dbus_axi_ar_payload_qos;
wire    [3:0] dbus_axi_ar_payload_region;
wire          dbus_axi_ar_param_id;
reg           dbus_axi_ar_param_dest = 1'd0;
reg           dbus_axi_ar_param_user = 1'd0;
wire          dbus_axi_r_valid;
wire          dbus_axi_r_ready;
wire          dbus_axi_r_first;
wire          dbus_axi_r_last;
wire    [1:0] dbus_axi_r_payload_resp;
wire   [31:0] dbus_axi_r_payload_data;
wire          dbus_axi_r_param_id;
wire          dbus_axi_r_param_dest;
wire          dbus_axi_r_param_user;
wire          dbus_aw_valid;
wire          dbus_aw_ready;
wire          dbus_aw_first;
wire          dbus_aw_last;
wire   [31:0] dbus_aw_payload_addr;
wire    [1:0] dbus_aw_payload_burst;
wire    [7:0] dbus_aw_payload_len;
wire    [2:0] dbus_aw_payload_size;
wire          dbus_aw_payload_lock;
wire    [2:0] dbus_aw_payload_prot;
wire    [3:0] dbus_aw_payload_cache;
wire    [3:0] dbus_aw_payload_qos;
wire    [3:0] dbus_aw_payload_region;
wire          dbus_aw_param_id;
wire          dbus_aw_param_dest;
wire          dbus_aw_param_user;
wire          dbus_w_valid;
wire          dbus_w_ready;
wire          dbus_w_first;
wire          dbus_w_last;
wire   [31:0] dbus_w_payload_data;
wire    [3:0] dbus_w_payload_strb;
wire          dbus_w_param_id;
wire          dbus_w_param_dest;
wire          dbus_w_param_user;
wire          dbus_b_valid;
wire          dbus_b_ready;
reg           dbus_b_first = 1'd0;
reg           dbus_b_last = 1'd0;
wire    [1:0] dbus_b_payload_resp;
wire          dbus_b_param_id;
reg           dbus_b_param_dest = 1'd0;
wire          dbus_b_param_user;
wire          dbus_ar_valid;
wire          dbus_ar_ready;
wire          dbus_ar_first;
wire          dbus_ar_last;
wire   [31:0] dbus_ar_payload_addr;
wire    [1:0] dbus_ar_payload_burst;
wire    [7:0] dbus_ar_payload_len;
wire    [2:0] dbus_ar_payload_size;
wire          dbus_ar_payload_lock;
wire    [2:0] dbus_ar_payload_prot;
wire    [3:0] dbus_ar_payload_cache;
wire    [3:0] dbus_ar_payload_qos;
wire    [3:0] dbus_ar_payload_region;
wire          dbus_ar_param_id;
wire          dbus_ar_param_dest;
wire          dbus_ar_param_user;
wire          dbus_r_valid;
wire          dbus_r_ready;
reg           dbus_r_first = 1'd0;
wire          dbus_r_last;
wire    [1:0] dbus_r_payload_resp;
wire   [31:0] dbus_r_payload_data;
wire          dbus_r_param_id;
reg           dbus_r_param_dest = 1'd0;
wire          dbus_r_param_user;
reg           dbus_lite_aw_valid = 1'd0;
reg           dbus_lite_aw_ready = 1'd0;
reg    [31:0] dbus_lite_aw_payload_addr = 32'd0;
reg     [2:0] dbus_lite_aw_payload_prot = 3'd0;
reg           dbus_lite_w_valid = 1'd0;
reg           dbus_lite_w_ready = 1'd0;
reg    [31:0] dbus_lite_w_payload_data = 32'd0;
reg     [3:0] dbus_lite_w_payload_strb = 4'd0;
reg           dbus_lite_b_valid = 1'd0;
wire          dbus_lite_b_ready;
reg     [1:0] dbus_lite_b_payload_resp = 2'd0;
reg           dbus_lite_ar_valid = 1'd0;
reg           dbus_lite_ar_ready = 1'd0;
reg    [31:0] dbus_lite_ar_payload_addr = 32'd0;
reg     [2:0] dbus_lite_ar_payload_prot = 3'd0;
reg           dbus_lite_r_valid = 1'd0;
reg           dbus_lite_r_ready = 1'd0;
reg     [1:0] dbus_lite_r_payload_resp = 2'd0;
reg    [31:0] dbus_lite_r_payload_data = 32'd0;
wire          socbushandler_aw_valid;
reg           socbushandler_aw_ready = 1'd0;
wire          socbushandler_aw_first;
wire          socbushandler_aw_last;
wire   [31:0] socbushandler_aw_payload_addr;
wire    [1:0] socbushandler_aw_payload_burst;
wire    [7:0] socbushandler_aw_payload_len;
wire    [2:0] socbushandler_aw_payload_size;
wire          socbushandler_aw_payload_lock;
wire    [2:0] socbushandler_aw_payload_prot;
wire    [3:0] socbushandler_aw_payload_cache;
wire    [3:0] socbushandler_aw_payload_qos;
wire    [3:0] socbushandler_aw_payload_region;
wire          socbushandler_aw_param_id;
wire          socbushandler_aw_param_dest;
wire          socbushandler_aw_param_user;
wire          socbushandler_w_valid;
reg           socbushandler_w_ready = 1'd0;
wire          socbushandler_w_first;
wire          socbushandler_w_last;
wire   [31:0] socbushandler_w_payload_data;
wire    [3:0] socbushandler_w_payload_strb;
wire          socbushandler_w_param_id;
wire          socbushandler_w_param_dest;
wire          socbushandler_w_param_user;
reg           socbushandler_b_valid = 1'd0;
wire          socbushandler_b_ready;
reg           socbushandler_b_first = 1'd0;
reg           socbushandler_b_last = 1'd0;
reg     [1:0] socbushandler_b_payload_resp = 2'd0;
reg           socbushandler_b_param_id = 1'd0;
reg           socbushandler_b_param_dest = 1'd0;
reg           socbushandler_b_param_user = 1'd0;
wire          socbushandler_ar_valid;
reg           socbushandler_ar_ready = 1'd0;
wire          socbushandler_ar_first;
wire          socbushandler_ar_last;
wire   [31:0] socbushandler_ar_payload_addr;
wire    [1:0] socbushandler_ar_payload_burst;
wire    [7:0] socbushandler_ar_payload_len;
wire    [2:0] socbushandler_ar_payload_size;
wire          socbushandler_ar_payload_lock;
wire    [2:0] socbushandler_ar_payload_prot;
wire    [3:0] socbushandler_ar_payload_cache;
wire    [3:0] socbushandler_ar_payload_qos;
wire    [3:0] socbushandler_ar_payload_region;
wire          socbushandler_ar_param_id;
wire          socbushandler_ar_param_dest;
wire          socbushandler_ar_param_user;
reg           socbushandler_r_valid = 1'd0;
wire          socbushandler_r_ready;
reg           socbushandler_r_first = 1'd0;
reg           socbushandler_r_last = 1'd0;
reg     [1:0] socbushandler_r_payload_resp = 2'd0;
reg    [31:0] socbushandler_r_payload_data = 32'd0;
reg           socbushandler_r_param_id = 1'd0;
reg           socbushandler_r_param_dest = 1'd0;
reg           socbushandler_r_param_user = 1'd0;
reg           socbushandler_ax_burst_valid = 1'd0;
wire          socbushandler_ax_burst_ready;
reg           socbushandler_ax_burst_first = 1'd0;
reg           socbushandler_ax_burst_last = 1'd0;
reg    [31:0] socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] socbushandler_ax_burst_payload_burst = 2'd0;
reg     [7:0] socbushandler_ax_burst_payload_len = 8'd0;
reg     [2:0] socbushandler_ax_burst_payload_size = 3'd0;
reg           socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] socbushandler_ax_burst_payload_cache = 4'd0;
reg     [3:0] socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] socbushandler_ax_burst_payload_region = 4'd0;
reg           socbushandler_ax_burst_param_id = 1'd0;
reg           socbushandler_ax_burst_param_dest = 1'd0;
reg           socbushandler_ax_burst_param_user = 1'd0;
wire          socbushandler_ax_beat_valid;
reg           socbushandler_ax_beat_ready = 1'd0;
wire          socbushandler_ax_beat_first;
wire          socbushandler_ax_beat_last;
wire   [31:0] socbushandler_ax_beat_payload_addr;
wire          socbushandler_ax_beat_param_id;
wire          socbushandler_sink_sink_valid;
wire          socbushandler_sink_sink_ready;
wire          socbushandler_sink_sink_first;
wire          socbushandler_sink_sink_last;
wire   [31:0] socbushandler_sink_sink_payload_addr;
wire    [1:0] socbushandler_sink_sink_payload_burst;
wire    [7:0] socbushandler_sink_sink_payload_len;
wire    [2:0] socbushandler_sink_sink_payload_size;
wire          socbushandler_sink_sink_payload_lock;
wire    [2:0] socbushandler_sink_sink_payload_prot;
wire    [3:0] socbushandler_sink_sink_payload_cache;
wire    [3:0] socbushandler_sink_sink_payload_qos;
wire    [3:0] socbushandler_sink_sink_payload_region;
wire          socbushandler_sink_sink_param_id;
wire          socbushandler_sink_sink_param_dest;
wire          socbushandler_sink_sink_param_user;
wire          socbushandler_source_source_valid;
reg           socbushandler_source_source_ready = 1'd0;
wire          socbushandler_source_source_first;
wire          socbushandler_source_source_last;
wire   [31:0] socbushandler_source_source_payload_addr;
wire    [1:0] socbushandler_source_source_payload_burst;
wire    [7:0] socbushandler_source_source_payload_len;
wire    [2:0] socbushandler_source_source_payload_size;
wire          socbushandler_source_source_payload_lock;
wire    [2:0] socbushandler_source_source_payload_prot;
wire    [3:0] socbushandler_source_source_payload_cache;
wire    [3:0] socbushandler_source_source_payload_qos;
wire    [3:0] socbushandler_source_source_payload_region;
wire          socbushandler_source_source_param_id;
wire          socbushandler_source_source_param_dest;
wire          socbushandler_source_source_param_user;
wire          socbushandler_pipe_valid_sink_valid;
wire          socbushandler_pipe_valid_sink_ready;
wire          socbushandler_pipe_valid_sink_first;
wire          socbushandler_pipe_valid_sink_last;
wire   [31:0] socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] socbushandler_pipe_valid_sink_payload_burst;
wire    [7:0] socbushandler_pipe_valid_sink_payload_len;
wire    [2:0] socbushandler_pipe_valid_sink_payload_size;
wire          socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] socbushandler_pipe_valid_sink_payload_cache;
wire    [3:0] socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] socbushandler_pipe_valid_sink_payload_region;
wire          socbushandler_pipe_valid_sink_param_id;
wire          socbushandler_pipe_valid_sink_param_dest;
wire          socbushandler_pipe_valid_sink_param_user;
reg           socbushandler_pipe_valid_source_valid = 1'd0;
wire          socbushandler_pipe_valid_source_ready;
reg           socbushandler_pipe_valid_source_first = 1'd0;
reg           socbushandler_pipe_valid_source_last = 1'd0;
reg    [31:0] socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [7:0] socbushandler_pipe_valid_source_payload_len = 8'd0;
reg     [2:0] socbushandler_pipe_valid_source_payload_size = 3'd0;
reg           socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [3:0] socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] socbushandler_pipe_valid_source_payload_region = 4'd0;
reg           socbushandler_pipe_valid_source_param_id = 1'd0;
reg           socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           socbushandler_pipe_valid_source_param_user = 1'd0;
reg     [7:0] socbushandler_beat_count = 8'd0;
wire   [11:0] socbushandler_beat_size;
reg  signed  [12:0] socbushandler_beat_offset = 13'd0;
wire   [11:0] socbushandler_beat_wrap;
reg           socbushandler_cmd_done = 1'd0;
reg           socbushandler_last_ar_aw_n = 1'd0;
reg    [31:0] load_storage = 32'd0;
reg           load_re = 1'd0;
reg    [31:0] reload_storage = 32'd0;
reg           reload_re = 1'd0;
reg           en_storage = 1'd0;
reg           en_re = 1'd0;
reg           update_value_storage = 1'd0;
reg           update_value_re = 1'd0;
reg    [31:0] value_status = 32'd0;
wire          value_we;
reg           value_re = 1'd0;
wire          irq;
wire          zero_status;
reg           zero_pending = 1'd0;
wire          zero_trigger;
reg           zero_clear = 1'd0;
reg           zero_trigger_d = 1'd0;
wire          zero0;
wire          status_status;
wire          status_we;
reg           status_re = 1'd0;
wire          zero1;
wire          pending_status;
wire          pending_we;
reg           pending_re = 1'd0;
reg           pending_r = 1'd0;
wire          zero2;
reg           enable_storage = 1'd0;
reg           enable_re = 1'd0;
reg    [31:0] value = 32'd0;
reg           vexriscvaxi_debug_reset = 1'd0;
wire          vexriscvaxi_o_resetOut;
reg           vexriscvaxi_reset_debug_logic = 1'd0;
reg    [31:0] vexriscvaxi = 32'd1610612736;
reg    [15:0] cramsoc_adr = 16'd0;
wire          cramsoc_we;
wire   [31:0] cramsoc_dat_w;
wire   [31:0] cramsoc_dat_r;
reg           cramsoc_csr_bridge_aw_valid = 1'd0;
reg           cramsoc_csr_bridge_aw_ready = 1'd0;
reg    [31:0] cramsoc_csr_bridge_aw_payload_addr = 32'd0;
reg           cramsoc_csr_bridge_w_valid = 1'd0;
reg           cramsoc_csr_bridge_w_ready = 1'd0;
reg    [31:0] cramsoc_csr_bridge_w_payload_data = 32'd0;
reg     [3:0] cramsoc_csr_bridge_w_payload_strb = 4'd0;
reg           cramsoc_csr_bridge_b_valid = 1'd0;
wire          cramsoc_csr_bridge_b_ready;
reg     [1:0] cramsoc_csr_bridge_b_payload_resp = 2'd0;
reg           cramsoc_csr_bridge_ar_valid = 1'd0;
reg           cramsoc_csr_bridge_ar_ready = 1'd0;
reg    [31:0] cramsoc_csr_bridge_ar_payload_addr = 32'd0;
reg           cramsoc_csr_bridge_r_valid = 1'd0;
reg           cramsoc_csr_bridge_r_ready = 1'd0;
reg     [1:0] cramsoc_csr_bridge_r_payload_resp = 2'd0;
reg    [31:0] cramsoc_csr_bridge_r_payload_data = 32'd0;
reg           cramsoc_csr_bridge_do_read = 1'd0;
reg           cramsoc_csr_bridge_do_write = 1'd0;
reg           cramsoc_csr_bridge_last_was_read = 1'd0;
reg           cramsoc_socbushandler_aw_valid = 1'd0;
reg           cramsoc_socbushandler_aw_ready = 1'd0;
reg           cramsoc_socbushandler_aw_first = 1'd0;
reg           cramsoc_socbushandler_aw_last = 1'd0;
reg    [31:0] cramsoc_socbushandler_aw_payload_addr = 32'd0;
reg     [1:0] cramsoc_socbushandler_aw_payload_burst = 2'd0;
reg     [7:0] cramsoc_socbushandler_aw_payload_len = 8'd0;
reg     [2:0] cramsoc_socbushandler_aw_payload_size = 3'd0;
reg           cramsoc_socbushandler_aw_payload_lock = 1'd0;
reg     [2:0] cramsoc_socbushandler_aw_payload_prot = 3'd0;
reg     [3:0] cramsoc_socbushandler_aw_payload_cache = 4'd0;
reg     [3:0] cramsoc_socbushandler_aw_payload_qos = 4'd0;
reg     [3:0] cramsoc_socbushandler_aw_payload_region = 4'd0;
reg           cramsoc_socbushandler_aw_param_id = 1'd0;
reg           cramsoc_socbushandler_aw_param_dest = 1'd0;
reg           cramsoc_socbushandler_aw_param_user = 1'd0;
reg           cramsoc_socbushandler_w_valid = 1'd0;
reg           cramsoc_socbushandler_w_ready = 1'd0;
reg           cramsoc_socbushandler_w_last = 1'd0;
reg    [31:0] cramsoc_socbushandler_w_payload_data = 32'd0;
reg     [3:0] cramsoc_socbushandler_w_payload_strb = 4'd0;
reg           cramsoc_socbushandler_b_valid = 1'd0;
reg           cramsoc_socbushandler_b_ready = 1'd0;
reg     [1:0] cramsoc_socbushandler_b_payload_resp = 2'd0;
reg           cramsoc_socbushandler_b_param_id = 1'd0;
reg           cramsoc_socbushandler_ar_valid = 1'd0;
reg           cramsoc_socbushandler_ar_ready = 1'd0;
reg           cramsoc_socbushandler_ar_first = 1'd0;
reg           cramsoc_socbushandler_ar_last = 1'd0;
reg    [31:0] cramsoc_socbushandler_ar_payload_addr = 32'd0;
reg     [1:0] cramsoc_socbushandler_ar_payload_burst = 2'd0;
reg     [7:0] cramsoc_socbushandler_ar_payload_len = 8'd0;
reg     [2:0] cramsoc_socbushandler_ar_payload_size = 3'd0;
reg           cramsoc_socbushandler_ar_payload_lock = 1'd0;
reg     [2:0] cramsoc_socbushandler_ar_payload_prot = 3'd0;
reg     [3:0] cramsoc_socbushandler_ar_payload_cache = 4'd0;
reg     [3:0] cramsoc_socbushandler_ar_payload_qos = 4'd0;
reg     [3:0] cramsoc_socbushandler_ar_payload_region = 4'd0;
reg           cramsoc_socbushandler_ar_param_id = 1'd0;
reg           cramsoc_socbushandler_ar_param_dest = 1'd0;
reg           cramsoc_socbushandler_ar_param_user = 1'd0;
reg           cramsoc_socbushandler_r_valid = 1'd0;
reg           cramsoc_socbushandler_r_ready = 1'd0;
reg           cramsoc_socbushandler_r_last = 1'd0;
reg     [1:0] cramsoc_socbushandler_r_payload_resp = 2'd0;
reg    [31:0] cramsoc_socbushandler_r_payload_data = 32'd0;
reg           cramsoc_socbushandler_r_param_id = 1'd0;
reg           cramsoc_socbushandler_ax_burst_valid = 1'd0;
wire          cramsoc_socbushandler_ax_burst_ready;
reg           cramsoc_socbushandler_ax_burst_first = 1'd0;
reg           cramsoc_socbushandler_ax_burst_last = 1'd0;
reg    [31:0] cramsoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] cramsoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [7:0] cramsoc_socbushandler_ax_burst_payload_len = 8'd0;
reg     [2:0] cramsoc_socbushandler_ax_burst_payload_size = 3'd0;
reg           cramsoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] cramsoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] cramsoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [3:0] cramsoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] cramsoc_socbushandler_ax_burst_payload_region = 4'd0;
reg           cramsoc_socbushandler_ax_burst_param_id = 1'd0;
reg           cramsoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           cramsoc_socbushandler_ax_burst_param_user = 1'd0;
wire          cramsoc_socbushandler_ax_beat_valid;
reg           cramsoc_socbushandler_ax_beat_ready = 1'd0;
wire          cramsoc_socbushandler_ax_beat_first;
wire          cramsoc_socbushandler_ax_beat_last;
wire   [31:0] cramsoc_socbushandler_ax_beat_payload_addr;
wire          cramsoc_socbushandler_ax_beat_param_id;
wire          cramsoc_socbushandler_sink_sink_valid;
wire          cramsoc_socbushandler_sink_sink_ready;
wire          cramsoc_socbushandler_sink_sink_first;
wire          cramsoc_socbushandler_sink_sink_last;
wire   [31:0] cramsoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] cramsoc_socbushandler_sink_sink_payload_burst;
wire    [7:0] cramsoc_socbushandler_sink_sink_payload_len;
wire    [2:0] cramsoc_socbushandler_sink_sink_payload_size;
wire          cramsoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] cramsoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] cramsoc_socbushandler_sink_sink_payload_cache;
wire    [3:0] cramsoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] cramsoc_socbushandler_sink_sink_payload_region;
wire          cramsoc_socbushandler_sink_sink_param_id;
wire          cramsoc_socbushandler_sink_sink_param_dest;
wire          cramsoc_socbushandler_sink_sink_param_user;
wire          cramsoc_socbushandler_source_source_valid;
reg           cramsoc_socbushandler_source_source_ready = 1'd0;
wire          cramsoc_socbushandler_source_source_first;
wire          cramsoc_socbushandler_source_source_last;
wire   [31:0] cramsoc_socbushandler_source_source_payload_addr;
wire    [1:0] cramsoc_socbushandler_source_source_payload_burst;
wire    [7:0] cramsoc_socbushandler_source_source_payload_len;
wire    [2:0] cramsoc_socbushandler_source_source_payload_size;
wire          cramsoc_socbushandler_source_source_payload_lock;
wire    [2:0] cramsoc_socbushandler_source_source_payload_prot;
wire    [3:0] cramsoc_socbushandler_source_source_payload_cache;
wire    [3:0] cramsoc_socbushandler_source_source_payload_qos;
wire    [3:0] cramsoc_socbushandler_source_source_payload_region;
wire          cramsoc_socbushandler_source_source_param_id;
wire          cramsoc_socbushandler_source_source_param_dest;
wire          cramsoc_socbushandler_source_source_param_user;
wire          cramsoc_socbushandler_pipe_valid_sink_valid;
wire          cramsoc_socbushandler_pipe_valid_sink_ready;
wire          cramsoc_socbushandler_pipe_valid_sink_first;
wire          cramsoc_socbushandler_pipe_valid_sink_last;
wire   [31:0] cramsoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] cramsoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [7:0] cramsoc_socbushandler_pipe_valid_sink_payload_len;
wire    [2:0] cramsoc_socbushandler_pipe_valid_sink_payload_size;
wire          cramsoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] cramsoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] cramsoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [3:0] cramsoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] cramsoc_socbushandler_pipe_valid_sink_payload_region;
wire          cramsoc_socbushandler_pipe_valid_sink_param_id;
wire          cramsoc_socbushandler_pipe_valid_sink_param_dest;
wire          cramsoc_socbushandler_pipe_valid_sink_param_user;
reg           cramsoc_socbushandler_pipe_valid_source_valid = 1'd0;
wire          cramsoc_socbushandler_pipe_valid_source_ready;
reg           cramsoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           cramsoc_socbushandler_pipe_valid_source_last = 1'd0;
reg    [31:0] cramsoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] cramsoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [7:0] cramsoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg     [2:0] cramsoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
reg           cramsoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] cramsoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] cramsoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [3:0] cramsoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] cramsoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg           cramsoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           cramsoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           cramsoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg     [7:0] cramsoc_socbushandler_beat_count = 8'd0;
wire   [11:0] cramsoc_socbushandler_beat_size;
reg  signed  [12:0] cramsoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] cramsoc_socbushandler_beat_wrap;
reg           cramsoc_socbushandler_cmd_done = 1'd0;
reg           cramsoc_socbushandler_last_ar_aw_n = 1'd0;
reg     [1:0] state = 2'd0;
reg     [1:0] next_state = 2'd0;
reg           cramsoc_socbushandler_cmd_done_next_value0 = 1'd0;
reg           cramsoc_socbushandler_cmd_done_next_value_ce0 = 1'd0;
reg           cramsoc_socbushandler_last_ar_aw_n_next_value1 = 1'd0;
reg           cramsoc_socbushandler_last_ar_aw_n_next_value_ce1 = 1'd0;
wire   [15:0] csr_bankarray_adr;
wire          csr_bankarray_we;
wire   [31:0] csr_bankarray_dat_w;
reg    [31:0] csr_bankarray_dat_r = 32'd0;
reg           csr_bankarray_load0_re = 1'd0;
wire   [31:0] csr_bankarray_load0_r;
reg           csr_bankarray_load0_we = 1'd0;
wire   [31:0] csr_bankarray_load0_w;
reg           csr_bankarray_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_reload0_r;
reg           csr_bankarray_reload0_we = 1'd0;
wire   [31:0] csr_bankarray_reload0_w;
reg           csr_bankarray_en0_re = 1'd0;
wire          csr_bankarray_en0_r;
reg           csr_bankarray_en0_we = 1'd0;
wire          csr_bankarray_en0_w;
reg           csr_bankarray_update_value0_re = 1'd0;
wire          csr_bankarray_update_value0_r;
reg           csr_bankarray_update_value0_we = 1'd0;
wire          csr_bankarray_update_value0_w;
reg           csr_bankarray_value_re = 1'd0;
wire   [31:0] csr_bankarray_value_r;
reg           csr_bankarray_value_we = 1'd0;
wire   [31:0] csr_bankarray_value_w;
reg           csr_bankarray_ev_status_re = 1'd0;
wire          csr_bankarray_ev_status_r;
reg           csr_bankarray_ev_status_we = 1'd0;
wire          csr_bankarray_ev_status_w;
reg           csr_bankarray_ev_pending_re = 1'd0;
wire          csr_bankarray_ev_pending_r;
reg           csr_bankarray_ev_pending_we = 1'd0;
wire          csr_bankarray_ev_pending_w;
reg           csr_bankarray_ev_enable0_re = 1'd0;
wire          csr_bankarray_ev_enable0_r;
reg           csr_bankarray_ev_enable0_we = 1'd0;
wire          csr_bankarray_ev_enable0_w;
wire          csr_bankarray_sel;
wire   [15:0] csr_interconnect_adr;
wire          csr_interconnect_we;
wire   [31:0] csr_interconnect_dat_w;
wire   [31:0] csr_interconnect_dat_r;
reg     [1:0] cramsoc_vexriscvaxi_state = 2'd0;
reg     [1:0] cramsoc_vexriscvaxi_next_state = 2'd0;
reg           socbushandler_cmd_done_vexriscvaxi_next_value0 = 1'd0;
reg           socbushandler_cmd_done_vexriscvaxi_next_value_ce0 = 1'd0;
reg           socbushandler_last_ar_aw_n_vexriscvaxi_next_value1 = 1'd0;
reg           socbushandler_last_ar_aw_n_vexriscvaxi_next_value_ce1 = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface0_aw_valid;
reg           cramsoc_vexriscvaxi_axiinterface0_aw_ready = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface0_aw_first;
wire          cramsoc_vexriscvaxi_axiinterface0_aw_last;
wire   [31:0] cramsoc_vexriscvaxi_axiinterface0_aw_payload_addr;
wire    [1:0] cramsoc_vexriscvaxi_axiinterface0_aw_payload_burst;
wire    [7:0] cramsoc_vexriscvaxi_axiinterface0_aw_payload_len;
wire    [2:0] cramsoc_vexriscvaxi_axiinterface0_aw_payload_size;
wire          cramsoc_vexriscvaxi_axiinterface0_aw_payload_lock;
wire    [2:0] cramsoc_vexriscvaxi_axiinterface0_aw_payload_prot;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface0_aw_payload_cache;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface0_aw_payload_qos;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface0_aw_payload_region;
wire          cramsoc_vexriscvaxi_axiinterface0_aw_param_id;
wire          cramsoc_vexriscvaxi_axiinterface0_aw_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface0_aw_param_user;
wire          cramsoc_vexriscvaxi_axiinterface0_w_valid;
reg           cramsoc_vexriscvaxi_axiinterface0_w_ready = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface0_w_first;
wire          cramsoc_vexriscvaxi_axiinterface0_w_last;
wire   [31:0] cramsoc_vexriscvaxi_axiinterface0_w_payload_data;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface0_w_payload_strb;
wire          cramsoc_vexriscvaxi_axiinterface0_w_param_id;
wire          cramsoc_vexriscvaxi_axiinterface0_w_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface0_w_param_user;
reg           cramsoc_vexriscvaxi_axiinterface0_b_valid = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface0_b_ready;
wire          cramsoc_vexriscvaxi_axiinterface0_b_first;
wire          cramsoc_vexriscvaxi_axiinterface0_b_last;
wire    [1:0] cramsoc_vexriscvaxi_axiinterface0_b_payload_resp;
wire          cramsoc_vexriscvaxi_axiinterface0_b_param_id;
wire          cramsoc_vexriscvaxi_axiinterface0_b_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface0_b_param_user;
wire          cramsoc_vexriscvaxi_axiinterface0_ar_valid;
reg           cramsoc_vexriscvaxi_axiinterface0_ar_ready = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface0_ar_first;
wire          cramsoc_vexriscvaxi_axiinterface0_ar_last;
wire   [31:0] cramsoc_vexriscvaxi_axiinterface0_ar_payload_addr;
wire    [1:0] cramsoc_vexriscvaxi_axiinterface0_ar_payload_burst;
wire    [7:0] cramsoc_vexriscvaxi_axiinterface0_ar_payload_len;
wire    [2:0] cramsoc_vexriscvaxi_axiinterface0_ar_payload_size;
wire          cramsoc_vexriscvaxi_axiinterface0_ar_payload_lock;
wire    [2:0] cramsoc_vexriscvaxi_axiinterface0_ar_payload_prot;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface0_ar_payload_cache;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface0_ar_payload_qos;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface0_ar_payload_region;
wire          cramsoc_vexriscvaxi_axiinterface0_ar_param_id;
wire          cramsoc_vexriscvaxi_axiinterface0_ar_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface0_ar_param_user;
reg           cramsoc_vexriscvaxi_axiinterface0_r_valid = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface0_r_ready;
wire          cramsoc_vexriscvaxi_axiinterface0_r_first;
wire          cramsoc_vexriscvaxi_axiinterface0_r_last;
wire    [1:0] cramsoc_vexriscvaxi_axiinterface0_r_payload_resp;
wire   [31:0] cramsoc_vexriscvaxi_axiinterface0_r_payload_data;
wire          cramsoc_vexriscvaxi_axiinterface0_r_param_id;
wire          cramsoc_vexriscvaxi_axiinterface0_r_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface0_r_param_user;
wire          cramsoc_vexriscvaxi_axiinterface1_aw_valid;
reg           cramsoc_vexriscvaxi_axiinterface1_aw_ready = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface1_aw_first;
wire          cramsoc_vexriscvaxi_axiinterface1_aw_last;
wire   [31:0] cramsoc_vexriscvaxi_axiinterface1_aw_payload_addr;
wire    [1:0] cramsoc_vexriscvaxi_axiinterface1_aw_payload_burst;
wire    [7:0] cramsoc_vexriscvaxi_axiinterface1_aw_payload_len;
wire    [2:0] cramsoc_vexriscvaxi_axiinterface1_aw_payload_size;
wire          cramsoc_vexriscvaxi_axiinterface1_aw_payload_lock;
wire    [2:0] cramsoc_vexriscvaxi_axiinterface1_aw_payload_prot;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface1_aw_payload_cache;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface1_aw_payload_qos;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface1_aw_payload_region;
wire          cramsoc_vexriscvaxi_axiinterface1_aw_param_id;
wire          cramsoc_vexriscvaxi_axiinterface1_aw_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface1_aw_param_user;
wire          cramsoc_vexriscvaxi_axiinterface1_w_valid;
reg           cramsoc_vexriscvaxi_axiinterface1_w_ready = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface1_w_first;
wire          cramsoc_vexriscvaxi_axiinterface1_w_last;
wire   [31:0] cramsoc_vexriscvaxi_axiinterface1_w_payload_data;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface1_w_payload_strb;
wire          cramsoc_vexriscvaxi_axiinterface1_w_param_id;
wire          cramsoc_vexriscvaxi_axiinterface1_w_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface1_w_param_user;
reg           cramsoc_vexriscvaxi_axiinterface1_b_valid = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface1_b_ready;
wire          cramsoc_vexriscvaxi_axiinterface1_b_first;
wire          cramsoc_vexriscvaxi_axiinterface1_b_last;
wire    [1:0] cramsoc_vexriscvaxi_axiinterface1_b_payload_resp;
wire          cramsoc_vexriscvaxi_axiinterface1_b_param_id;
wire          cramsoc_vexriscvaxi_axiinterface1_b_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface1_b_param_user;
wire          cramsoc_vexriscvaxi_axiinterface1_ar_valid;
reg           cramsoc_vexriscvaxi_axiinterface1_ar_ready = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface1_ar_first;
wire          cramsoc_vexriscvaxi_axiinterface1_ar_last;
wire   [31:0] cramsoc_vexriscvaxi_axiinterface1_ar_payload_addr;
wire    [1:0] cramsoc_vexriscvaxi_axiinterface1_ar_payload_burst;
wire    [7:0] cramsoc_vexriscvaxi_axiinterface1_ar_payload_len;
wire    [2:0] cramsoc_vexriscvaxi_axiinterface1_ar_payload_size;
wire          cramsoc_vexriscvaxi_axiinterface1_ar_payload_lock;
wire    [2:0] cramsoc_vexriscvaxi_axiinterface1_ar_payload_prot;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface1_ar_payload_cache;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface1_ar_payload_qos;
wire    [3:0] cramsoc_vexriscvaxi_axiinterface1_ar_payload_region;
wire          cramsoc_vexriscvaxi_axiinterface1_ar_param_id;
wire          cramsoc_vexriscvaxi_axiinterface1_ar_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface1_ar_param_user;
reg           cramsoc_vexriscvaxi_axiinterface1_r_valid = 1'd0;
wire          cramsoc_vexriscvaxi_axiinterface1_r_ready;
wire          cramsoc_vexriscvaxi_axiinterface1_r_first;
wire          cramsoc_vexriscvaxi_axiinterface1_r_last;
wire    [1:0] cramsoc_vexriscvaxi_axiinterface1_r_payload_resp;
wire   [31:0] cramsoc_vexriscvaxi_axiinterface1_r_payload_data;
wire          cramsoc_vexriscvaxi_axiinterface1_r_param_id;
wire          cramsoc_vexriscvaxi_axiinterface1_r_param_dest;
wire          cramsoc_vexriscvaxi_axiinterface1_r_param_user;
reg     [1:0] cramsoc_vexriscvaxi_slave_sel_dec0 = 2'd0;
reg     [1:0] cramsoc_vexriscvaxi_slave_sel_dec1 = 2'd0;
reg     [1:0] cramsoc_vexriscvaxi_slave_sel_reg0 = 2'd0;
reg     [1:0] cramsoc_vexriscvaxi_slave_sel_reg1 = 2'd0;
reg     [1:0] cramsoc_vexriscvaxi_slave_sel0 = 2'd0;
reg     [1:0] cramsoc_vexriscvaxi_slave_sel1 = 2'd0;
reg     [7:0] cramsoc_vexriscvaxi_axirequestcounter0_counter = 8'd0;
wire          cramsoc_vexriscvaxi_axirequestcounter0_full;
wire          cramsoc_vexriscvaxi_axirequestcounter0_empty;
wire          cramsoc_vexriscvaxi_axirequestcounter0_stall;
reg     [7:0] cramsoc_vexriscvaxi_axirequestcounter1_counter = 8'd0;
wire          cramsoc_vexriscvaxi_axirequestcounter1_full;
wire          cramsoc_vexriscvaxi_axirequestcounter1_empty;
wire          cramsoc_vexriscvaxi_axirequestcounter1_stall;
wire          cramsoc_vexriscvaxi_axiarbiter0_rr_write_request;
wire          cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant;
wire          cramsoc_vexriscvaxi_axiarbiter0_rr_write_ce;
wire          cramsoc_vexriscvaxi_axiarbiter0_rr_read_request;
wire          cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant;
wire          cramsoc_vexriscvaxi_axiarbiter0_rr_read_ce;
reg     [7:0] cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter = 8'd0;
wire          cramsoc_vexriscvaxi_axiarbiter0_wr_lock_full;
wire          cramsoc_vexriscvaxi_axiarbiter0_wr_lock_empty;
wire          cramsoc_vexriscvaxi_axiarbiter0_wr_lock_stall;
reg     [7:0] cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter = 8'd0;
wire          cramsoc_vexriscvaxi_axiarbiter0_rd_lock_full;
wire          cramsoc_vexriscvaxi_axiarbiter0_rd_lock_empty;
wire          cramsoc_vexriscvaxi_axiarbiter0_rd_lock_stall;
wire          cramsoc_vexriscvaxi_axiarbiter1_rr_write_request;
wire          cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant;
wire          cramsoc_vexriscvaxi_axiarbiter1_rr_write_ce;
wire          cramsoc_vexriscvaxi_axiarbiter1_rr_read_request;
wire          cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant;
wire          cramsoc_vexriscvaxi_axiarbiter1_rr_read_ce;
reg     [7:0] cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter = 8'd0;
wire          cramsoc_vexriscvaxi_axiarbiter1_wr_lock_full;
wire          cramsoc_vexriscvaxi_axiarbiter1_wr_lock_empty;
wire          cramsoc_vexriscvaxi_axiarbiter1_wr_lock_stall;
reg     [7:0] cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter = 8'd0;
wire          cramsoc_vexriscvaxi_axiarbiter1_rd_lock_full;
wire          cramsoc_vexriscvaxi_axiarbiter1_rd_lock_empty;
wire          cramsoc_vexriscvaxi_axiarbiter1_rd_lock_stall;
reg     [1:0] cramsoc_axilite2csr_state = 2'd0;
reg     [1:0] cramsoc_axilite2csr_next_state = 2'd0;
reg           cramsoc_csr_bridge_last_was_read_axilite2csr_next_value = 1'd0;
reg           cramsoc_csr_bridge_last_was_read_axilite2csr_next_value_ce = 1'd0;
wire   [29:0] slice_proxy0;
wire   [29:0] slice_proxy1;
wire   [29:0] slice_proxy2;
wire   [29:0] slice_proxy3;
reg           array_muxed0 = 1'd0;
reg           array_muxed1 = 1'd0;
reg           array_muxed2 = 1'd0;
reg    [31:0] array_muxed3 = 32'd0;
reg     [1:0] array_muxed4 = 2'd0;
reg     [7:0] array_muxed5 = 8'd0;
reg     [2:0] array_muxed6 = 3'd0;
reg           array_muxed7 = 1'd0;
reg     [2:0] array_muxed8 = 3'd0;
reg     [3:0] array_muxed9 = 4'd0;
reg     [3:0] array_muxed10 = 4'd0;
reg     [3:0] array_muxed11 = 4'd0;
reg           array_muxed12 = 1'd0;
reg           array_muxed13 = 1'd0;
reg           array_muxed14 = 1'd0;
reg           array_muxed15 = 1'd0;
reg           array_muxed16 = 1'd0;
reg           array_muxed17 = 1'd0;
reg    [31:0] array_muxed18 = 32'd0;
reg     [3:0] array_muxed19 = 4'd0;
reg           array_muxed20 = 1'd0;
reg           array_muxed21 = 1'd0;
reg           array_muxed22 = 1'd0;
reg           array_muxed23 = 1'd0;
reg           array_muxed24 = 1'd0;
reg           array_muxed25 = 1'd0;
reg           array_muxed26 = 1'd0;
reg    [31:0] array_muxed27 = 32'd0;
reg     [1:0] array_muxed28 = 2'd0;
reg     [7:0] array_muxed29 = 8'd0;
reg     [2:0] array_muxed30 = 3'd0;
reg           array_muxed31 = 1'd0;
reg     [2:0] array_muxed32 = 3'd0;
reg     [3:0] array_muxed33 = 4'd0;
reg     [3:0] array_muxed34 = 4'd0;
reg     [3:0] array_muxed35 = 4'd0;
reg           array_muxed36 = 1'd0;
reg           array_muxed37 = 1'd0;
reg           array_muxed38 = 1'd0;
reg           array_muxed39 = 1'd0;
reg           array_muxed40 = 1'd0;
reg           array_muxed41 = 1'd0;
reg           array_muxed42 = 1'd0;
reg    [31:0] array_muxed43 = 32'd0;
reg     [1:0] array_muxed44 = 2'd0;
reg     [7:0] array_muxed45 = 8'd0;
reg     [2:0] array_muxed46 = 3'd0;
reg           array_muxed47 = 1'd0;
reg     [2:0] array_muxed48 = 3'd0;
reg     [3:0] array_muxed49 = 4'd0;
reg     [3:0] array_muxed50 = 4'd0;
reg     [3:0] array_muxed51 = 4'd0;
reg           array_muxed52 = 1'd0;
reg           array_muxed53 = 1'd0;
reg           array_muxed54 = 1'd0;
reg           array_muxed55 = 1'd0;
reg           array_muxed56 = 1'd0;
reg           array_muxed57 = 1'd0;
reg    [31:0] array_muxed58 = 32'd0;
reg     [3:0] array_muxed59 = 4'd0;
reg           array_muxed60 = 1'd0;
reg           array_muxed61 = 1'd0;
reg           array_muxed62 = 1'd0;
reg           array_muxed63 = 1'd0;
reg           array_muxed64 = 1'd0;
reg           array_muxed65 = 1'd0;
reg           array_muxed66 = 1'd0;
reg    [31:0] array_muxed67 = 32'd0;
reg     [1:0] array_muxed68 = 2'd0;
reg     [7:0] array_muxed69 = 8'd0;
reg     [2:0] array_muxed70 = 3'd0;
reg           array_muxed71 = 1'd0;
reg     [2:0] array_muxed72 = 3'd0;
reg     [3:0] array_muxed73 = 4'd0;
reg     [3:0] array_muxed74 = 4'd0;
reg     [3:0] array_muxed75 = 4'd0;
reg           array_muxed76 = 1'd0;
reg           array_muxed77 = 1'd0;
reg           array_muxed78 = 1'd0;
reg           array_muxed79 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign hclk_clk = hclk;
assign hclk_rst = hrst;
assign ibus_axi_awvalid = ibus_axi_aw_valid;
assign ibus_axi_awaddr = ibus_axi_aw_payload_addr;
assign ibus_axi_awburst = ibus_axi_aw_payload_burst;
assign ibus_axi_awlen = ibus_axi_aw_payload_len;
assign ibus_axi_awsize = ibus_axi_aw_payload_size;
assign ibus_axi_awlock = ibus_axi_aw_payload_lock;
assign ibus_axi_awprot = ibus_axi_aw_payload_prot;
assign ibus_axi_awcache = ibus_axi_aw_payload_cache;
assign ibus_axi_awqos = ibus_axi_aw_payload_qos;
assign ibus_axi_awregion = ibus_axi_aw_payload_region;
assign ibus_axi_awid = ibus_axi_aw_param_id;
assign ibus_axi_awuser = ibus_axi_aw_param_user;
assign ibus_axi_aw_ready = ibus_axi_awready;
assign ibus_axi_wvalid = ibus_axi_w_valid;
assign ibus_axi_wdata = ibus_axi_w_payload_data;
assign ibus_axi_wstrb = ibus_axi_w_payload_strb;
assign ibus_axi_wuser = ibus_axi_w_param_user;
assign ibus_axi_wlast = ibus_axi_w_last;
assign ibus_axi_w_ready = ibus_axi_wready;
assign ibus_axi_b_valid = ibus_axi_bvalid;
assign ibus_axi_b_payload_resp = ibus_axi_bresp;
assign ibus_axi_b_param_id = ibus_axi_bid;
assign ibus_axi_b_param_user = ibus_axi_buser;
assign ibus_axi_bready = ibus_axi_b_ready;
assign ibus_axi_arvalid = ibus_axi_ar_valid;
assign ibus_axi_araddr = ibus_axi_ar_payload_addr;
assign ibus_axi_arburst = ibus_axi_ar_payload_burst;
assign ibus_axi_arlen = ibus_axi_ar_payload_len;
assign ibus_axi_arsize = ibus_axi_ar_payload_size;
assign ibus_axi_arlock = ibus_axi_ar_payload_lock;
assign ibus_axi_arprot = ibus_axi_ar_payload_prot;
assign ibus_axi_arcache = ibus_axi_ar_payload_cache;
assign ibus_axi_arqos = ibus_axi_ar_payload_qos;
assign ibus_axi_arregion = ibus_axi_ar_payload_region;
assign ibus_axi_arid = ibus_axi_ar_param_id;
assign ibus_axi_aruser = ibus_axi_ar_param_user;
assign ibus_axi_ar_ready = ibus_axi_arready;
assign ibus_axi_r_valid = ibus_axi_rvalid;
assign ibus_axi_r_payload_resp = ibus_axi_rresp;
assign ibus_axi_r_payload_data = ibus_axi_rdata;
assign ibus_axi_r_param_id = ibus_axi_rid;
assign ibus_axi_r_param_user = ibus_axi_ruser;
assign ibus_axi_r_last = ibus_axi_rlast;
assign ibus_axi_rready = ibus_axi_r_ready;
assign dbus_axi_awvalid = dbus_aw_valid;
assign dbus_axi_awaddr = dbus_aw_payload_addr;
assign dbus_axi_awburst = dbus_aw_payload_burst;
assign dbus_axi_awlen = dbus_aw_payload_len;
assign dbus_axi_awsize = dbus_aw_payload_size;
assign dbus_axi_awlock = dbus_aw_payload_lock;
assign dbus_axi_awprot = dbus_aw_payload_prot;
assign dbus_axi_awcache = dbus_aw_payload_cache;
assign dbus_axi_awqos = dbus_aw_payload_qos;
assign dbus_axi_awregion = dbus_aw_payload_region;
assign dbus_axi_awid = dbus_aw_param_id;
assign dbus_axi_awuser = dbus_aw_param_user;
assign dbus_aw_ready = dbus_axi_awready;
assign dbus_axi_wvalid = dbus_w_valid;
assign dbus_axi_wdata = dbus_w_payload_data;
assign dbus_axi_wstrb = dbus_w_payload_strb;
assign dbus_axi_wuser = dbus_w_param_user;
assign dbus_axi_wlast = dbus_w_last;
assign dbus_w_ready = dbus_axi_wready;
assign dbus_b_valid = dbus_axi_bvalid;
assign dbus_b_payload_resp = dbus_axi_bresp;
assign dbus_b_param_id = dbus_axi_bid;
assign dbus_b_param_user = dbus_axi_buser;
assign dbus_axi_bready = dbus_b_ready;
assign dbus_axi_arvalid = dbus_ar_valid;
assign dbus_axi_araddr = dbus_ar_payload_addr;
assign dbus_axi_arburst = dbus_ar_payload_burst;
assign dbus_axi_arlen = dbus_ar_payload_len;
assign dbus_axi_arsize = dbus_ar_payload_size;
assign dbus_axi_arlock = dbus_ar_payload_lock;
assign dbus_axi_arprot = dbus_ar_payload_prot;
assign dbus_axi_arcache = dbus_ar_payload_cache;
assign dbus_axi_arqos = dbus_ar_payload_qos;
assign dbus_axi_arregion = dbus_ar_payload_region;
assign dbus_axi_arid = dbus_ar_param_id;
assign dbus_axi_aruser = dbus_ar_param_user;
assign dbus_ar_ready = dbus_axi_arready;
assign dbus_r_valid = dbus_axi_rvalid;
assign dbus_r_payload_resp = dbus_axi_rresp;
assign dbus_r_payload_data = dbus_axi_rdata;
assign dbus_r_param_id = dbus_axi_rid;
assign dbus_r_param_user = dbus_axi_ruser;
assign dbus_r_last = dbus_axi_rlast;
assign dbus_axi_rready = dbus_r_ready;
always @(*) begin
    interrupt_1 <= 32'd0;
    interrupt_1 <= interrupt;
    interrupt_1[0] <= irq;
end
assign sys_clk = aclk;
assign por_clk = aclk;
assign sys_rst = int_rst;
assign cramsoc_socbushandler_sink_sink_valid = cramsoc_socbushandler_ax_burst_valid;
assign cramsoc_socbushandler_ax_burst_ready = cramsoc_socbushandler_sink_sink_ready;
assign cramsoc_socbushandler_sink_sink_first = cramsoc_socbushandler_ax_burst_first;
assign cramsoc_socbushandler_sink_sink_last = cramsoc_socbushandler_ax_burst_last;
assign cramsoc_socbushandler_sink_sink_payload_addr = cramsoc_socbushandler_ax_burst_payload_addr;
assign cramsoc_socbushandler_sink_sink_payload_burst = cramsoc_socbushandler_ax_burst_payload_burst;
assign cramsoc_socbushandler_sink_sink_payload_len = cramsoc_socbushandler_ax_burst_payload_len;
assign cramsoc_socbushandler_sink_sink_payload_size = cramsoc_socbushandler_ax_burst_payload_size;
assign cramsoc_socbushandler_sink_sink_payload_lock = cramsoc_socbushandler_ax_burst_payload_lock;
assign cramsoc_socbushandler_sink_sink_payload_prot = cramsoc_socbushandler_ax_burst_payload_prot;
assign cramsoc_socbushandler_sink_sink_payload_cache = cramsoc_socbushandler_ax_burst_payload_cache;
assign cramsoc_socbushandler_sink_sink_payload_qos = cramsoc_socbushandler_ax_burst_payload_qos;
assign cramsoc_socbushandler_sink_sink_payload_region = cramsoc_socbushandler_ax_burst_payload_region;
assign cramsoc_socbushandler_sink_sink_param_id = cramsoc_socbushandler_ax_burst_param_id;
assign cramsoc_socbushandler_sink_sink_param_dest = cramsoc_socbushandler_ax_burst_param_dest;
assign cramsoc_socbushandler_sink_sink_param_user = cramsoc_socbushandler_ax_burst_param_user;
assign cramsoc_csr_bridge_b_ready = 1'd1;
assign cramsoc_socbushandler_pipe_valid_sink_ready = ((~cramsoc_socbushandler_pipe_valid_source_valid) | cramsoc_socbushandler_pipe_valid_source_ready);
assign cramsoc_socbushandler_pipe_valid_sink_valid = cramsoc_socbushandler_sink_sink_valid;
assign cramsoc_socbushandler_sink_sink_ready = cramsoc_socbushandler_pipe_valid_sink_ready;
assign cramsoc_socbushandler_pipe_valid_sink_first = cramsoc_socbushandler_sink_sink_first;
assign cramsoc_socbushandler_pipe_valid_sink_last = cramsoc_socbushandler_sink_sink_last;
assign cramsoc_socbushandler_pipe_valid_sink_payload_addr = cramsoc_socbushandler_sink_sink_payload_addr;
assign cramsoc_socbushandler_pipe_valid_sink_payload_burst = cramsoc_socbushandler_sink_sink_payload_burst;
assign cramsoc_socbushandler_pipe_valid_sink_payload_len = cramsoc_socbushandler_sink_sink_payload_len;
assign cramsoc_socbushandler_pipe_valid_sink_payload_size = cramsoc_socbushandler_sink_sink_payload_size;
assign cramsoc_socbushandler_pipe_valid_sink_payload_lock = cramsoc_socbushandler_sink_sink_payload_lock;
assign cramsoc_socbushandler_pipe_valid_sink_payload_prot = cramsoc_socbushandler_sink_sink_payload_prot;
assign cramsoc_socbushandler_pipe_valid_sink_payload_cache = cramsoc_socbushandler_sink_sink_payload_cache;
assign cramsoc_socbushandler_pipe_valid_sink_payload_qos = cramsoc_socbushandler_sink_sink_payload_qos;
assign cramsoc_socbushandler_pipe_valid_sink_payload_region = cramsoc_socbushandler_sink_sink_payload_region;
assign cramsoc_socbushandler_pipe_valid_sink_param_id = cramsoc_socbushandler_sink_sink_param_id;
assign cramsoc_socbushandler_pipe_valid_sink_param_dest = cramsoc_socbushandler_sink_sink_param_dest;
assign cramsoc_socbushandler_pipe_valid_sink_param_user = cramsoc_socbushandler_sink_sink_param_user;
assign cramsoc_socbushandler_source_source_valid = cramsoc_socbushandler_pipe_valid_source_valid;
assign cramsoc_socbushandler_pipe_valid_source_ready = cramsoc_socbushandler_source_source_ready;
assign cramsoc_socbushandler_source_source_first = cramsoc_socbushandler_pipe_valid_source_first;
assign cramsoc_socbushandler_source_source_last = cramsoc_socbushandler_pipe_valid_source_last;
assign cramsoc_socbushandler_source_source_payload_addr = cramsoc_socbushandler_pipe_valid_source_payload_addr;
assign cramsoc_socbushandler_source_source_payload_burst = cramsoc_socbushandler_pipe_valid_source_payload_burst;
assign cramsoc_socbushandler_source_source_payload_len = cramsoc_socbushandler_pipe_valid_source_payload_len;
assign cramsoc_socbushandler_source_source_payload_size = cramsoc_socbushandler_pipe_valid_source_payload_size;
assign cramsoc_socbushandler_source_source_payload_lock = cramsoc_socbushandler_pipe_valid_source_payload_lock;
assign cramsoc_socbushandler_source_source_payload_prot = cramsoc_socbushandler_pipe_valid_source_payload_prot;
assign cramsoc_socbushandler_source_source_payload_cache = cramsoc_socbushandler_pipe_valid_source_payload_cache;
assign cramsoc_socbushandler_source_source_payload_qos = cramsoc_socbushandler_pipe_valid_source_payload_qos;
assign cramsoc_socbushandler_source_source_payload_region = cramsoc_socbushandler_pipe_valid_source_payload_region;
assign cramsoc_socbushandler_source_source_param_id = cramsoc_socbushandler_pipe_valid_source_param_id;
assign cramsoc_socbushandler_source_source_param_dest = cramsoc_socbushandler_pipe_valid_source_param_dest;
assign cramsoc_socbushandler_source_source_param_user = cramsoc_socbushandler_pipe_valid_source_param_user;
assign cramsoc_socbushandler_beat_size = (1'd1 <<< cramsoc_socbushandler_source_source_payload_size);
assign cramsoc_socbushandler_beat_wrap = (cramsoc_socbushandler_source_source_payload_len <<< cramsoc_socbushandler_source_source_payload_size);
assign cramsoc_socbushandler_ax_beat_valid = (cramsoc_socbushandler_source_source_valid | (~cramsoc_socbushandler_ax_beat_first));
assign cramsoc_socbushandler_ax_beat_first = (cramsoc_socbushandler_beat_count == 1'd0);
assign cramsoc_socbushandler_ax_beat_last = (cramsoc_socbushandler_beat_count == cramsoc_socbushandler_source_source_payload_len);
assign cramsoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, cramsoc_socbushandler_source_source_payload_addr}) + cramsoc_socbushandler_beat_offset);
assign cramsoc_socbushandler_ax_beat_param_id = cramsoc_socbushandler_source_source_param_id;
always @(*) begin
    cramsoc_socbushandler_source_source_ready <= 1'd0;
    if (cramsoc_socbushandler_ax_beat_ready) begin
        if (cramsoc_socbushandler_ax_beat_last) begin
            cramsoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    cramsoc_socbushandler_w_ready <= 1'd0;
    cramsoc_csr_bridge_aw_valid <= 1'd0;
    cramsoc_socbushandler_b_valid <= 1'd0;
    cramsoc_csr_bridge_aw_payload_addr <= 32'd0;
    cramsoc_csr_bridge_w_valid <= 1'd0;
    cramsoc_socbushandler_b_payload_resp <= 2'd0;
    cramsoc_socbushandler_b_param_id <= 1'd0;
    cramsoc_csr_bridge_w_payload_data <= 32'd0;
    cramsoc_socbushandler_ar_ready <= 1'd0;
    cramsoc_csr_bridge_w_payload_strb <= 4'd0;
    cramsoc_csr_bridge_ar_valid <= 1'd0;
    cramsoc_csr_bridge_ar_payload_addr <= 32'd0;
    cramsoc_csr_bridge_r_ready <= 1'd0;
    cramsoc_socbushandler_r_valid <= 1'd0;
    cramsoc_socbushandler_r_last <= 1'd0;
    cramsoc_socbushandler_r_payload_resp <= 2'd0;
    cramsoc_socbushandler_r_payload_data <= 32'd0;
    cramsoc_socbushandler_r_param_id <= 1'd0;
    cramsoc_socbushandler_ax_burst_valid <= 1'd0;
    cramsoc_socbushandler_ax_burst_first <= 1'd0;
    cramsoc_socbushandler_ax_burst_last <= 1'd0;
    cramsoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    cramsoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    cramsoc_socbushandler_ax_burst_payload_len <= 8'd0;
    cramsoc_socbushandler_aw_ready <= 1'd0;
    cramsoc_socbushandler_ax_burst_payload_size <= 3'd0;
    cramsoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    next_state <= 2'd0;
    cramsoc_socbushandler_cmd_done_next_value0 <= 1'd0;
    cramsoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    cramsoc_socbushandler_cmd_done_next_value_ce0 <= 1'd0;
    cramsoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    cramsoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    cramsoc_socbushandler_ax_burst_payload_region <= 4'd0;
    cramsoc_socbushandler_last_ar_aw_n_next_value1 <= 1'd0;
    cramsoc_socbushandler_ax_burst_param_id <= 1'd0;
    cramsoc_socbushandler_last_ar_aw_n_next_value_ce1 <= 1'd0;
    cramsoc_socbushandler_ax_burst_param_dest <= 1'd0;
    cramsoc_socbushandler_ax_burst_param_user <= 1'd0;
    cramsoc_socbushandler_ax_beat_ready <= 1'd0;
    next_state <= state;
    case (state)
        1'd1: begin
            cramsoc_csr_bridge_ar_valid <= ((cramsoc_socbushandler_ax_beat_valid & (~cramsoc_socbushandler_cmd_done)) & (~((cramsoc_socbushandler_ax_beat_valid & cramsoc_socbushandler_ax_beat_last) & cramsoc_csr_bridge_ar_ready)));
            cramsoc_csr_bridge_ar_payload_addr <= cramsoc_socbushandler_ax_beat_payload_addr;
            cramsoc_socbushandler_ax_beat_ready <= cramsoc_csr_bridge_ar_ready;
            if ((cramsoc_socbushandler_ax_beat_valid & cramsoc_socbushandler_ax_beat_last)) begin
                if (cramsoc_csr_bridge_ar_ready) begin
                    cramsoc_socbushandler_cmd_done_next_value0 <= 1'd1;
                    cramsoc_socbushandler_cmd_done_next_value_ce0 <= 1'd1;
                end
            end
            cramsoc_socbushandler_r_valid <= cramsoc_csr_bridge_r_valid;
            cramsoc_socbushandler_r_last <= cramsoc_socbushandler_cmd_done;
            cramsoc_socbushandler_r_payload_resp <= 1'd0;
            cramsoc_socbushandler_r_param_id <= cramsoc_socbushandler_ax_beat_param_id;
            cramsoc_socbushandler_r_payload_data <= cramsoc_csr_bridge_r_payload_data;
            cramsoc_csr_bridge_r_ready <= cramsoc_socbushandler_r_ready;
            if (((cramsoc_csr_bridge_r_valid & cramsoc_socbushandler_cmd_done) & cramsoc_socbushandler_r_ready)) begin
                cramsoc_socbushandler_ax_beat_ready <= 1'd1;
                next_state <= 1'd0;
            end
        end
        2'd2: begin
            cramsoc_csr_bridge_aw_valid <= ((cramsoc_socbushandler_ax_beat_valid & (~cramsoc_socbushandler_cmd_done)) & (~((cramsoc_socbushandler_ax_beat_valid & cramsoc_socbushandler_ax_beat_last) & cramsoc_csr_bridge_aw_ready)));
            cramsoc_csr_bridge_aw_payload_addr <= cramsoc_socbushandler_ax_beat_payload_addr;
            cramsoc_socbushandler_ax_beat_ready <= (cramsoc_csr_bridge_aw_ready & (~cramsoc_socbushandler_cmd_done));
            if ((cramsoc_socbushandler_ax_beat_valid & cramsoc_socbushandler_ax_beat_last)) begin
                if (cramsoc_csr_bridge_aw_ready) begin
                    cramsoc_socbushandler_ax_beat_ready <= 1'd0;
                    cramsoc_socbushandler_cmd_done_next_value0 <= 1'd1;
                    cramsoc_socbushandler_cmd_done_next_value_ce0 <= 1'd1;
                end
            end
            cramsoc_csr_bridge_w_valid <= cramsoc_socbushandler_w_valid;
            cramsoc_csr_bridge_w_payload_data <= cramsoc_socbushandler_w_payload_data;
            cramsoc_csr_bridge_w_payload_strb <= cramsoc_socbushandler_w_payload_strb;
            cramsoc_socbushandler_w_ready <= cramsoc_csr_bridge_w_ready;
            if (((cramsoc_socbushandler_w_valid & cramsoc_socbushandler_w_last) & cramsoc_csr_bridge_w_ready)) begin
                next_state <= 2'd3;
            end
        end
        2'd3: begin
            cramsoc_socbushandler_b_valid <= 1'd1;
            cramsoc_socbushandler_b_payload_resp <= 1'd0;
            cramsoc_socbushandler_b_param_id <= cramsoc_socbushandler_ax_beat_param_id;
            if (cramsoc_socbushandler_b_ready) begin
                cramsoc_socbushandler_ax_beat_ready <= 1'd1;
                next_state <= 1'd0;
            end
        end
        default: begin
            cramsoc_socbushandler_cmd_done_next_value0 <= 1'd0;
            cramsoc_socbushandler_cmd_done_next_value_ce0 <= 1'd1;
            if ((cramsoc_socbushandler_ar_valid & cramsoc_socbushandler_aw_valid)) begin
                if (cramsoc_socbushandler_last_ar_aw_n) begin
                    cramsoc_socbushandler_ax_burst_valid <= cramsoc_socbushandler_aw_valid;
                    cramsoc_socbushandler_aw_ready <= cramsoc_socbushandler_ax_burst_ready;
                    cramsoc_socbushandler_ax_burst_first <= cramsoc_socbushandler_aw_first;
                    cramsoc_socbushandler_ax_burst_last <= cramsoc_socbushandler_aw_last;
                    cramsoc_socbushandler_ax_burst_payload_addr <= cramsoc_socbushandler_aw_payload_addr;
                    cramsoc_socbushandler_ax_burst_payload_burst <= cramsoc_socbushandler_aw_payload_burst;
                    cramsoc_socbushandler_ax_burst_payload_len <= cramsoc_socbushandler_aw_payload_len;
                    cramsoc_socbushandler_ax_burst_payload_size <= cramsoc_socbushandler_aw_payload_size;
                    cramsoc_socbushandler_ax_burst_payload_lock <= cramsoc_socbushandler_aw_payload_lock;
                    cramsoc_socbushandler_ax_burst_payload_prot <= cramsoc_socbushandler_aw_payload_prot;
                    cramsoc_socbushandler_ax_burst_payload_cache <= cramsoc_socbushandler_aw_payload_cache;
                    cramsoc_socbushandler_ax_burst_payload_qos <= cramsoc_socbushandler_aw_payload_qos;
                    cramsoc_socbushandler_ax_burst_payload_region <= cramsoc_socbushandler_aw_payload_region;
                    cramsoc_socbushandler_ax_burst_param_id <= cramsoc_socbushandler_aw_param_id;
                    cramsoc_socbushandler_ax_burst_param_dest <= cramsoc_socbushandler_aw_param_dest;
                    cramsoc_socbushandler_ax_burst_param_user <= cramsoc_socbushandler_aw_param_user;
                    cramsoc_socbushandler_last_ar_aw_n_next_value1 <= 1'd0;
                    cramsoc_socbushandler_last_ar_aw_n_next_value_ce1 <= 1'd1;
                    next_state <= 2'd2;
                end else begin
                    cramsoc_socbushandler_ax_burst_valid <= cramsoc_socbushandler_ar_valid;
                    cramsoc_socbushandler_ar_ready <= cramsoc_socbushandler_ax_burst_ready;
                    cramsoc_socbushandler_ax_burst_first <= cramsoc_socbushandler_ar_first;
                    cramsoc_socbushandler_ax_burst_last <= cramsoc_socbushandler_ar_last;
                    cramsoc_socbushandler_ax_burst_payload_addr <= cramsoc_socbushandler_ar_payload_addr;
                    cramsoc_socbushandler_ax_burst_payload_burst <= cramsoc_socbushandler_ar_payload_burst;
                    cramsoc_socbushandler_ax_burst_payload_len <= cramsoc_socbushandler_ar_payload_len;
                    cramsoc_socbushandler_ax_burst_payload_size <= cramsoc_socbushandler_ar_payload_size;
                    cramsoc_socbushandler_ax_burst_payload_lock <= cramsoc_socbushandler_ar_payload_lock;
                    cramsoc_socbushandler_ax_burst_payload_prot <= cramsoc_socbushandler_ar_payload_prot;
                    cramsoc_socbushandler_ax_burst_payload_cache <= cramsoc_socbushandler_ar_payload_cache;
                    cramsoc_socbushandler_ax_burst_payload_qos <= cramsoc_socbushandler_ar_payload_qos;
                    cramsoc_socbushandler_ax_burst_payload_region <= cramsoc_socbushandler_ar_payload_region;
                    cramsoc_socbushandler_ax_burst_param_id <= cramsoc_socbushandler_ar_param_id;
                    cramsoc_socbushandler_ax_burst_param_dest <= cramsoc_socbushandler_ar_param_dest;
                    cramsoc_socbushandler_ax_burst_param_user <= cramsoc_socbushandler_ar_param_user;
                    cramsoc_socbushandler_last_ar_aw_n_next_value1 <= 1'd1;
                    cramsoc_socbushandler_last_ar_aw_n_next_value_ce1 <= 1'd1;
                    next_state <= 1'd1;
                end
            end else begin
                if (cramsoc_socbushandler_ar_valid) begin
                    cramsoc_socbushandler_ax_burst_valid <= cramsoc_socbushandler_ar_valid;
                    cramsoc_socbushandler_ar_ready <= cramsoc_socbushandler_ax_burst_ready;
                    cramsoc_socbushandler_ax_burst_first <= cramsoc_socbushandler_ar_first;
                    cramsoc_socbushandler_ax_burst_last <= cramsoc_socbushandler_ar_last;
                    cramsoc_socbushandler_ax_burst_payload_addr <= cramsoc_socbushandler_ar_payload_addr;
                    cramsoc_socbushandler_ax_burst_payload_burst <= cramsoc_socbushandler_ar_payload_burst;
                    cramsoc_socbushandler_ax_burst_payload_len <= cramsoc_socbushandler_ar_payload_len;
                    cramsoc_socbushandler_ax_burst_payload_size <= cramsoc_socbushandler_ar_payload_size;
                    cramsoc_socbushandler_ax_burst_payload_lock <= cramsoc_socbushandler_ar_payload_lock;
                    cramsoc_socbushandler_ax_burst_payload_prot <= cramsoc_socbushandler_ar_payload_prot;
                    cramsoc_socbushandler_ax_burst_payload_cache <= cramsoc_socbushandler_ar_payload_cache;
                    cramsoc_socbushandler_ax_burst_payload_qos <= cramsoc_socbushandler_ar_payload_qos;
                    cramsoc_socbushandler_ax_burst_payload_region <= cramsoc_socbushandler_ar_payload_region;
                    cramsoc_socbushandler_ax_burst_param_id <= cramsoc_socbushandler_ar_param_id;
                    cramsoc_socbushandler_ax_burst_param_dest <= cramsoc_socbushandler_ar_param_dest;
                    cramsoc_socbushandler_ax_burst_param_user <= cramsoc_socbushandler_ar_param_user;
                    cramsoc_socbushandler_last_ar_aw_n_next_value1 <= 1'd1;
                    cramsoc_socbushandler_last_ar_aw_n_next_value_ce1 <= 1'd1;
                    next_state <= 1'd1;
                end else begin
                    if (cramsoc_socbushandler_aw_valid) begin
                        cramsoc_socbushandler_ax_burst_valid <= cramsoc_socbushandler_aw_valid;
                        cramsoc_socbushandler_aw_ready <= cramsoc_socbushandler_ax_burst_ready;
                        cramsoc_socbushandler_ax_burst_first <= cramsoc_socbushandler_aw_first;
                        cramsoc_socbushandler_ax_burst_last <= cramsoc_socbushandler_aw_last;
                        cramsoc_socbushandler_ax_burst_payload_addr <= cramsoc_socbushandler_aw_payload_addr;
                        cramsoc_socbushandler_ax_burst_payload_burst <= cramsoc_socbushandler_aw_payload_burst;
                        cramsoc_socbushandler_ax_burst_payload_len <= cramsoc_socbushandler_aw_payload_len;
                        cramsoc_socbushandler_ax_burst_payload_size <= cramsoc_socbushandler_aw_payload_size;
                        cramsoc_socbushandler_ax_burst_payload_lock <= cramsoc_socbushandler_aw_payload_lock;
                        cramsoc_socbushandler_ax_burst_payload_prot <= cramsoc_socbushandler_aw_payload_prot;
                        cramsoc_socbushandler_ax_burst_payload_cache <= cramsoc_socbushandler_aw_payload_cache;
                        cramsoc_socbushandler_ax_burst_payload_qos <= cramsoc_socbushandler_aw_payload_qos;
                        cramsoc_socbushandler_ax_burst_payload_region <= cramsoc_socbushandler_aw_payload_region;
                        cramsoc_socbushandler_ax_burst_param_id <= cramsoc_socbushandler_aw_param_id;
                        cramsoc_socbushandler_ax_burst_param_dest <= cramsoc_socbushandler_aw_param_dest;
                        cramsoc_socbushandler_ax_burst_param_user <= cramsoc_socbushandler_aw_param_user;
                        cramsoc_socbushandler_last_ar_aw_n_next_value1 <= 1'd0;
                        cramsoc_socbushandler_last_ar_aw_n_next_value_ce1 <= 1'd1;
                        next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign socbushandler_sink_sink_valid = socbushandler_ax_burst_valid;
assign socbushandler_ax_burst_ready = socbushandler_sink_sink_ready;
assign socbushandler_sink_sink_first = socbushandler_ax_burst_first;
assign socbushandler_sink_sink_last = socbushandler_ax_burst_last;
assign socbushandler_sink_sink_payload_addr = socbushandler_ax_burst_payload_addr;
assign socbushandler_sink_sink_payload_burst = socbushandler_ax_burst_payload_burst;
assign socbushandler_sink_sink_payload_len = socbushandler_ax_burst_payload_len;
assign socbushandler_sink_sink_payload_size = socbushandler_ax_burst_payload_size;
assign socbushandler_sink_sink_payload_lock = socbushandler_ax_burst_payload_lock;
assign socbushandler_sink_sink_payload_prot = socbushandler_ax_burst_payload_prot;
assign socbushandler_sink_sink_payload_cache = socbushandler_ax_burst_payload_cache;
assign socbushandler_sink_sink_payload_qos = socbushandler_ax_burst_payload_qos;
assign socbushandler_sink_sink_payload_region = socbushandler_ax_burst_payload_region;
assign socbushandler_sink_sink_param_id = socbushandler_ax_burst_param_id;
assign socbushandler_sink_sink_param_dest = socbushandler_ax_burst_param_dest;
assign socbushandler_sink_sink_param_user = socbushandler_ax_burst_param_user;
assign dbus_lite_b_ready = 1'd1;
assign socbushandler_pipe_valid_sink_ready = ((~socbushandler_pipe_valid_source_valid) | socbushandler_pipe_valid_source_ready);
assign socbushandler_pipe_valid_sink_valid = socbushandler_sink_sink_valid;
assign socbushandler_sink_sink_ready = socbushandler_pipe_valid_sink_ready;
assign socbushandler_pipe_valid_sink_first = socbushandler_sink_sink_first;
assign socbushandler_pipe_valid_sink_last = socbushandler_sink_sink_last;
assign socbushandler_pipe_valid_sink_payload_addr = socbushandler_sink_sink_payload_addr;
assign socbushandler_pipe_valid_sink_payload_burst = socbushandler_sink_sink_payload_burst;
assign socbushandler_pipe_valid_sink_payload_len = socbushandler_sink_sink_payload_len;
assign socbushandler_pipe_valid_sink_payload_size = socbushandler_sink_sink_payload_size;
assign socbushandler_pipe_valid_sink_payload_lock = socbushandler_sink_sink_payload_lock;
assign socbushandler_pipe_valid_sink_payload_prot = socbushandler_sink_sink_payload_prot;
assign socbushandler_pipe_valid_sink_payload_cache = socbushandler_sink_sink_payload_cache;
assign socbushandler_pipe_valid_sink_payload_qos = socbushandler_sink_sink_payload_qos;
assign socbushandler_pipe_valid_sink_payload_region = socbushandler_sink_sink_payload_region;
assign socbushandler_pipe_valid_sink_param_id = socbushandler_sink_sink_param_id;
assign socbushandler_pipe_valid_sink_param_dest = socbushandler_sink_sink_param_dest;
assign socbushandler_pipe_valid_sink_param_user = socbushandler_sink_sink_param_user;
assign socbushandler_source_source_valid = socbushandler_pipe_valid_source_valid;
assign socbushandler_pipe_valid_source_ready = socbushandler_source_source_ready;
assign socbushandler_source_source_first = socbushandler_pipe_valid_source_first;
assign socbushandler_source_source_last = socbushandler_pipe_valid_source_last;
assign socbushandler_source_source_payload_addr = socbushandler_pipe_valid_source_payload_addr;
assign socbushandler_source_source_payload_burst = socbushandler_pipe_valid_source_payload_burst;
assign socbushandler_source_source_payload_len = socbushandler_pipe_valid_source_payload_len;
assign socbushandler_source_source_payload_size = socbushandler_pipe_valid_source_payload_size;
assign socbushandler_source_source_payload_lock = socbushandler_pipe_valid_source_payload_lock;
assign socbushandler_source_source_payload_prot = socbushandler_pipe_valid_source_payload_prot;
assign socbushandler_source_source_payload_cache = socbushandler_pipe_valid_source_payload_cache;
assign socbushandler_source_source_payload_qos = socbushandler_pipe_valid_source_payload_qos;
assign socbushandler_source_source_payload_region = socbushandler_pipe_valid_source_payload_region;
assign socbushandler_source_source_param_id = socbushandler_pipe_valid_source_param_id;
assign socbushandler_source_source_param_dest = socbushandler_pipe_valid_source_param_dest;
assign socbushandler_source_source_param_user = socbushandler_pipe_valid_source_param_user;
assign socbushandler_beat_size = (1'd1 <<< socbushandler_source_source_payload_size);
assign socbushandler_beat_wrap = (socbushandler_source_source_payload_len <<< socbushandler_source_source_payload_size);
assign socbushandler_ax_beat_valid = (socbushandler_source_source_valid | (~socbushandler_ax_beat_first));
assign socbushandler_ax_beat_first = (socbushandler_beat_count == 1'd0);
assign socbushandler_ax_beat_last = (socbushandler_beat_count == socbushandler_source_source_payload_len);
assign socbushandler_ax_beat_payload_addr = ($signed({1'd0, socbushandler_source_source_payload_addr}) + socbushandler_beat_offset);
assign socbushandler_ax_beat_param_id = socbushandler_source_source_param_id;
always @(*) begin
    socbushandler_source_source_ready <= 1'd0;
    if (socbushandler_ax_beat_ready) begin
        if (socbushandler_ax_beat_last) begin
            socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    dbus_lite_aw_payload_addr <= 32'd0;
    dbus_lite_w_valid <= 1'd0;
    dbus_lite_w_payload_data <= 32'd0;
    dbus_lite_w_payload_strb <= 4'd0;
    socbushandler_r_valid <= 1'd0;
    dbus_lite_ar_valid <= 1'd0;
    socbushandler_r_last <= 1'd0;
    socbushandler_r_payload_resp <= 2'd0;
    socbushandler_r_payload_data <= 32'd0;
    socbushandler_r_param_id <= 1'd0;
    dbus_lite_ar_payload_addr <= 32'd0;
    socbushandler_ax_burst_valid <= 1'd0;
    dbus_lite_r_ready <= 1'd0;
    socbushandler_ax_burst_first <= 1'd0;
    socbushandler_ax_burst_last <= 1'd0;
    socbushandler_ax_burst_payload_addr <= 32'd0;
    socbushandler_ax_burst_payload_burst <= 2'd0;
    socbushandler_ax_burst_payload_len <= 8'd0;
    socbushandler_ax_burst_payload_size <= 3'd0;
    socbushandler_aw_ready <= 1'd0;
    socbushandler_ax_burst_payload_lock <= 1'd0;
    socbushandler_ax_burst_payload_prot <= 3'd0;
    socbushandler_ax_burst_payload_cache <= 4'd0;
    socbushandler_ax_burst_payload_qos <= 4'd0;
    socbushandler_ax_burst_payload_region <= 4'd0;
    socbushandler_ax_burst_param_id <= 1'd0;
    socbushandler_ax_burst_param_dest <= 1'd0;
    socbushandler_ax_burst_param_user <= 1'd0;
    cramsoc_vexriscvaxi_next_state <= 2'd0;
    socbushandler_cmd_done_vexriscvaxi_next_value0 <= 1'd0;
    socbushandler_cmd_done_vexriscvaxi_next_value_ce0 <= 1'd0;
    socbushandler_ax_beat_ready <= 1'd0;
    socbushandler_last_ar_aw_n_vexriscvaxi_next_value1 <= 1'd0;
    socbushandler_last_ar_aw_n_vexriscvaxi_next_value_ce1 <= 1'd0;
    socbushandler_w_ready <= 1'd0;
    socbushandler_b_valid <= 1'd0;
    socbushandler_b_payload_resp <= 2'd0;
    socbushandler_b_param_id <= 1'd0;
    socbushandler_ar_ready <= 1'd0;
    dbus_lite_aw_valid <= 1'd0;
    cramsoc_vexriscvaxi_next_state <= cramsoc_vexriscvaxi_state;
    case (cramsoc_vexriscvaxi_state)
        1'd1: begin
            dbus_lite_ar_valid <= ((socbushandler_ax_beat_valid & (~socbushandler_cmd_done)) & (~((socbushandler_ax_beat_valid & socbushandler_ax_beat_last) & dbus_lite_ar_ready)));
            dbus_lite_ar_payload_addr <= socbushandler_ax_beat_payload_addr;
            socbushandler_ax_beat_ready <= dbus_lite_ar_ready;
            if ((socbushandler_ax_beat_valid & socbushandler_ax_beat_last)) begin
                if (dbus_lite_ar_ready) begin
                    socbushandler_cmd_done_vexriscvaxi_next_value0 <= 1'd1;
                    socbushandler_cmd_done_vexriscvaxi_next_value_ce0 <= 1'd1;
                end
            end
            socbushandler_r_valid <= dbus_lite_r_valid;
            socbushandler_r_last <= socbushandler_cmd_done;
            socbushandler_r_payload_resp <= 1'd0;
            socbushandler_r_param_id <= socbushandler_ax_beat_param_id;
            socbushandler_r_payload_data <= dbus_lite_r_payload_data;
            dbus_lite_r_ready <= socbushandler_r_ready;
            if (((dbus_lite_r_valid & socbushandler_cmd_done) & socbushandler_r_ready)) begin
                socbushandler_ax_beat_ready <= 1'd1;
                cramsoc_vexriscvaxi_next_state <= 1'd0;
            end
        end
        2'd2: begin
            dbus_lite_aw_valid <= ((socbushandler_ax_beat_valid & (~socbushandler_cmd_done)) & (~((socbushandler_ax_beat_valid & socbushandler_ax_beat_last) & dbus_lite_aw_ready)));
            dbus_lite_aw_payload_addr <= socbushandler_ax_beat_payload_addr;
            socbushandler_ax_beat_ready <= (dbus_lite_aw_ready & (~socbushandler_cmd_done));
            if ((socbushandler_ax_beat_valid & socbushandler_ax_beat_last)) begin
                if (dbus_lite_aw_ready) begin
                    socbushandler_ax_beat_ready <= 1'd0;
                    socbushandler_cmd_done_vexriscvaxi_next_value0 <= 1'd1;
                    socbushandler_cmd_done_vexriscvaxi_next_value_ce0 <= 1'd1;
                end
            end
            dbus_lite_w_valid <= socbushandler_w_valid;
            dbus_lite_w_payload_data <= socbushandler_w_payload_data;
            dbus_lite_w_payload_strb <= socbushandler_w_payload_strb;
            socbushandler_w_ready <= dbus_lite_w_ready;
            if (((socbushandler_w_valid & socbushandler_w_last) & dbus_lite_w_ready)) begin
                cramsoc_vexriscvaxi_next_state <= 2'd3;
            end
        end
        2'd3: begin
            socbushandler_b_valid <= 1'd1;
            socbushandler_b_payload_resp <= 1'd0;
            socbushandler_b_param_id <= socbushandler_ax_beat_param_id;
            if (socbushandler_b_ready) begin
                socbushandler_ax_beat_ready <= 1'd1;
                cramsoc_vexriscvaxi_next_state <= 1'd0;
            end
        end
        default: begin
            socbushandler_cmd_done_vexriscvaxi_next_value0 <= 1'd0;
            socbushandler_cmd_done_vexriscvaxi_next_value_ce0 <= 1'd1;
            if ((socbushandler_ar_valid & socbushandler_aw_valid)) begin
                if (socbushandler_last_ar_aw_n) begin
                    socbushandler_ax_burst_valid <= socbushandler_aw_valid;
                    socbushandler_aw_ready <= socbushandler_ax_burst_ready;
                    socbushandler_ax_burst_first <= socbushandler_aw_first;
                    socbushandler_ax_burst_last <= socbushandler_aw_last;
                    socbushandler_ax_burst_payload_addr <= socbushandler_aw_payload_addr;
                    socbushandler_ax_burst_payload_burst <= socbushandler_aw_payload_burst;
                    socbushandler_ax_burst_payload_len <= socbushandler_aw_payload_len;
                    socbushandler_ax_burst_payload_size <= socbushandler_aw_payload_size;
                    socbushandler_ax_burst_payload_lock <= socbushandler_aw_payload_lock;
                    socbushandler_ax_burst_payload_prot <= socbushandler_aw_payload_prot;
                    socbushandler_ax_burst_payload_cache <= socbushandler_aw_payload_cache;
                    socbushandler_ax_burst_payload_qos <= socbushandler_aw_payload_qos;
                    socbushandler_ax_burst_payload_region <= socbushandler_aw_payload_region;
                    socbushandler_ax_burst_param_id <= socbushandler_aw_param_id;
                    socbushandler_ax_burst_param_dest <= socbushandler_aw_param_dest;
                    socbushandler_ax_burst_param_user <= socbushandler_aw_param_user;
                    socbushandler_last_ar_aw_n_vexriscvaxi_next_value1 <= 1'd0;
                    socbushandler_last_ar_aw_n_vexriscvaxi_next_value_ce1 <= 1'd1;
                    cramsoc_vexriscvaxi_next_state <= 2'd2;
                end else begin
                    socbushandler_ax_burst_valid <= socbushandler_ar_valid;
                    socbushandler_ar_ready <= socbushandler_ax_burst_ready;
                    socbushandler_ax_burst_first <= socbushandler_ar_first;
                    socbushandler_ax_burst_last <= socbushandler_ar_last;
                    socbushandler_ax_burst_payload_addr <= socbushandler_ar_payload_addr;
                    socbushandler_ax_burst_payload_burst <= socbushandler_ar_payload_burst;
                    socbushandler_ax_burst_payload_len <= socbushandler_ar_payload_len;
                    socbushandler_ax_burst_payload_size <= socbushandler_ar_payload_size;
                    socbushandler_ax_burst_payload_lock <= socbushandler_ar_payload_lock;
                    socbushandler_ax_burst_payload_prot <= socbushandler_ar_payload_prot;
                    socbushandler_ax_burst_payload_cache <= socbushandler_ar_payload_cache;
                    socbushandler_ax_burst_payload_qos <= socbushandler_ar_payload_qos;
                    socbushandler_ax_burst_payload_region <= socbushandler_ar_payload_region;
                    socbushandler_ax_burst_param_id <= socbushandler_ar_param_id;
                    socbushandler_ax_burst_param_dest <= socbushandler_ar_param_dest;
                    socbushandler_ax_burst_param_user <= socbushandler_ar_param_user;
                    socbushandler_last_ar_aw_n_vexriscvaxi_next_value1 <= 1'd1;
                    socbushandler_last_ar_aw_n_vexriscvaxi_next_value_ce1 <= 1'd1;
                    cramsoc_vexriscvaxi_next_state <= 1'd1;
                end
            end else begin
                if (socbushandler_ar_valid) begin
                    socbushandler_ax_burst_valid <= socbushandler_ar_valid;
                    socbushandler_ar_ready <= socbushandler_ax_burst_ready;
                    socbushandler_ax_burst_first <= socbushandler_ar_first;
                    socbushandler_ax_burst_last <= socbushandler_ar_last;
                    socbushandler_ax_burst_payload_addr <= socbushandler_ar_payload_addr;
                    socbushandler_ax_burst_payload_burst <= socbushandler_ar_payload_burst;
                    socbushandler_ax_burst_payload_len <= socbushandler_ar_payload_len;
                    socbushandler_ax_burst_payload_size <= socbushandler_ar_payload_size;
                    socbushandler_ax_burst_payload_lock <= socbushandler_ar_payload_lock;
                    socbushandler_ax_burst_payload_prot <= socbushandler_ar_payload_prot;
                    socbushandler_ax_burst_payload_cache <= socbushandler_ar_payload_cache;
                    socbushandler_ax_burst_payload_qos <= socbushandler_ar_payload_qos;
                    socbushandler_ax_burst_payload_region <= socbushandler_ar_payload_region;
                    socbushandler_ax_burst_param_id <= socbushandler_ar_param_id;
                    socbushandler_ax_burst_param_dest <= socbushandler_ar_param_dest;
                    socbushandler_ax_burst_param_user <= socbushandler_ar_param_user;
                    socbushandler_last_ar_aw_n_vexriscvaxi_next_value1 <= 1'd1;
                    socbushandler_last_ar_aw_n_vexriscvaxi_next_value_ce1 <= 1'd1;
                    cramsoc_vexriscvaxi_next_state <= 1'd1;
                end else begin
                    if (socbushandler_aw_valid) begin
                        socbushandler_ax_burst_valid <= socbushandler_aw_valid;
                        socbushandler_aw_ready <= socbushandler_ax_burst_ready;
                        socbushandler_ax_burst_first <= socbushandler_aw_first;
                        socbushandler_ax_burst_last <= socbushandler_aw_last;
                        socbushandler_ax_burst_payload_addr <= socbushandler_aw_payload_addr;
                        socbushandler_ax_burst_payload_burst <= socbushandler_aw_payload_burst;
                        socbushandler_ax_burst_payload_len <= socbushandler_aw_payload_len;
                        socbushandler_ax_burst_payload_size <= socbushandler_aw_payload_size;
                        socbushandler_ax_burst_payload_lock <= socbushandler_aw_payload_lock;
                        socbushandler_ax_burst_payload_prot <= socbushandler_aw_payload_prot;
                        socbushandler_ax_burst_payload_cache <= socbushandler_aw_payload_cache;
                        socbushandler_ax_burst_payload_qos <= socbushandler_aw_payload_qos;
                        socbushandler_ax_burst_payload_region <= socbushandler_aw_payload_region;
                        socbushandler_ax_burst_param_id <= socbushandler_aw_param_id;
                        socbushandler_ax_burst_param_dest <= socbushandler_aw_param_dest;
                        socbushandler_ax_burst_param_user <= socbushandler_aw_param_user;
                        socbushandler_last_ar_aw_n_vexriscvaxi_next_value1 <= 1'd0;
                        socbushandler_last_ar_aw_n_vexriscvaxi_next_value_ce1 <= 1'd1;
                        cramsoc_vexriscvaxi_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    cramsoc_vexriscvaxi_slave_sel_dec0 <= 2'd0;
    cramsoc_vexriscvaxi_slave_sel_dec0[0] <= (slice_proxy0[29:27] == 2'd2);
    cramsoc_vexriscvaxi_slave_sel_dec0[1] <= (slice_proxy2[29:27] == 2'd3);
end
always @(*) begin
    cramsoc_vexriscvaxi_slave_sel_dec1 <= 2'd0;
    cramsoc_vexriscvaxi_slave_sel_dec1[0] <= (slice_proxy1[29:27] == 2'd2);
    cramsoc_vexriscvaxi_slave_sel_dec1[1] <= (slice_proxy3[29:27] == 2'd3);
end
always @(*) begin
    cramsoc_vexriscvaxi_slave_sel0 <= 2'd0;
    if (cramsoc_vexriscvaxi_axirequestcounter0_empty) begin
        cramsoc_vexriscvaxi_slave_sel0 <= cramsoc_vexriscvaxi_slave_sel_dec0;
    end else begin
        cramsoc_vexriscvaxi_slave_sel0 <= cramsoc_vexriscvaxi_slave_sel_reg0;
    end
end
always @(*) begin
    cramsoc_vexriscvaxi_slave_sel1 <= 2'd0;
    if (cramsoc_vexriscvaxi_axirequestcounter1_empty) begin
        cramsoc_vexriscvaxi_slave_sel1 <= cramsoc_vexriscvaxi_slave_sel_dec1;
    end else begin
        cramsoc_vexriscvaxi_slave_sel1 <= cramsoc_vexriscvaxi_slave_sel_reg1;
    end
end
assign cramsoc_vexriscvaxi_axiinterface0_aw_valid = (dbus_axi_aw_valid & cramsoc_vexriscvaxi_slave_sel0[0]);
assign cramsoc_vexriscvaxi_axiinterface0_aw_first = dbus_axi_aw_first;
assign cramsoc_vexriscvaxi_axiinterface0_aw_last = dbus_axi_aw_last;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_addr = dbus_axi_aw_payload_addr;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_burst = dbus_axi_aw_payload_burst;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_len = dbus_axi_aw_payload_len;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_size = dbus_axi_aw_payload_size;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_lock = dbus_axi_aw_payload_lock;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_prot = dbus_axi_aw_payload_prot;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_cache = dbus_axi_aw_payload_cache;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_qos = dbus_axi_aw_payload_qos;
assign cramsoc_vexriscvaxi_axiinterface0_aw_payload_region = dbus_axi_aw_payload_region;
assign cramsoc_vexriscvaxi_axiinterface0_aw_param_id = dbus_axi_aw_param_id;
assign cramsoc_vexriscvaxi_axiinterface0_aw_param_dest = dbus_axi_aw_param_dest;
assign cramsoc_vexriscvaxi_axiinterface0_aw_param_user = dbus_axi_aw_param_user;
assign cramsoc_vexriscvaxi_axiinterface0_w_valid = (dbus_axi_w_valid & cramsoc_vexriscvaxi_slave_sel0[0]);
assign cramsoc_vexriscvaxi_axiinterface0_w_first = dbus_axi_w_first;
assign cramsoc_vexriscvaxi_axiinterface0_w_last = dbus_axi_w_last;
assign cramsoc_vexriscvaxi_axiinterface0_w_payload_data = dbus_axi_w_payload_data;
assign cramsoc_vexriscvaxi_axiinterface0_w_payload_strb = dbus_axi_w_payload_strb;
assign cramsoc_vexriscvaxi_axiinterface0_w_param_id = dbus_axi_w_param_id;
assign cramsoc_vexriscvaxi_axiinterface0_w_param_dest = dbus_axi_w_param_dest;
assign cramsoc_vexriscvaxi_axiinterface0_w_param_user = dbus_axi_w_param_user;
assign cramsoc_vexriscvaxi_axiinterface0_b_ready = (dbus_axi_b_ready & cramsoc_vexriscvaxi_slave_sel0[0]);
assign cramsoc_vexriscvaxi_axiinterface0_ar_valid = (dbus_axi_ar_valid & cramsoc_vexriscvaxi_slave_sel1[0]);
assign cramsoc_vexriscvaxi_axiinterface0_ar_first = dbus_axi_ar_first;
assign cramsoc_vexriscvaxi_axiinterface0_ar_last = dbus_axi_ar_last;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_addr = dbus_axi_ar_payload_addr;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_burst = dbus_axi_ar_payload_burst;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_len = dbus_axi_ar_payload_len;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_size = dbus_axi_ar_payload_size;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_lock = dbus_axi_ar_payload_lock;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_prot = dbus_axi_ar_payload_prot;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_cache = dbus_axi_ar_payload_cache;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_qos = dbus_axi_ar_payload_qos;
assign cramsoc_vexriscvaxi_axiinterface0_ar_payload_region = dbus_axi_ar_payload_region;
assign cramsoc_vexriscvaxi_axiinterface0_ar_param_id = dbus_axi_ar_param_id;
assign cramsoc_vexriscvaxi_axiinterface0_ar_param_dest = dbus_axi_ar_param_dest;
assign cramsoc_vexriscvaxi_axiinterface0_ar_param_user = dbus_axi_ar_param_user;
assign cramsoc_vexriscvaxi_axiinterface0_r_ready = (dbus_axi_r_ready & cramsoc_vexriscvaxi_slave_sel1[0]);
assign cramsoc_vexriscvaxi_axiinterface1_aw_valid = (dbus_axi_aw_valid & cramsoc_vexriscvaxi_slave_sel0[1]);
assign cramsoc_vexriscvaxi_axiinterface1_aw_first = dbus_axi_aw_first;
assign cramsoc_vexriscvaxi_axiinterface1_aw_last = dbus_axi_aw_last;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_addr = dbus_axi_aw_payload_addr;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_burst = dbus_axi_aw_payload_burst;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_len = dbus_axi_aw_payload_len;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_size = dbus_axi_aw_payload_size;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_lock = dbus_axi_aw_payload_lock;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_prot = dbus_axi_aw_payload_prot;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_cache = dbus_axi_aw_payload_cache;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_qos = dbus_axi_aw_payload_qos;
assign cramsoc_vexriscvaxi_axiinterface1_aw_payload_region = dbus_axi_aw_payload_region;
assign cramsoc_vexriscvaxi_axiinterface1_aw_param_id = dbus_axi_aw_param_id;
assign cramsoc_vexriscvaxi_axiinterface1_aw_param_dest = dbus_axi_aw_param_dest;
assign cramsoc_vexriscvaxi_axiinterface1_aw_param_user = dbus_axi_aw_param_user;
assign cramsoc_vexriscvaxi_axiinterface1_w_valid = (dbus_axi_w_valid & cramsoc_vexriscvaxi_slave_sel0[1]);
assign cramsoc_vexriscvaxi_axiinterface1_w_first = dbus_axi_w_first;
assign cramsoc_vexriscvaxi_axiinterface1_w_last = dbus_axi_w_last;
assign cramsoc_vexriscvaxi_axiinterface1_w_payload_data = dbus_axi_w_payload_data;
assign cramsoc_vexriscvaxi_axiinterface1_w_payload_strb = dbus_axi_w_payload_strb;
assign cramsoc_vexriscvaxi_axiinterface1_w_param_id = dbus_axi_w_param_id;
assign cramsoc_vexriscvaxi_axiinterface1_w_param_dest = dbus_axi_w_param_dest;
assign cramsoc_vexriscvaxi_axiinterface1_w_param_user = dbus_axi_w_param_user;
assign cramsoc_vexriscvaxi_axiinterface1_b_ready = (dbus_axi_b_ready & cramsoc_vexriscvaxi_slave_sel0[1]);
assign cramsoc_vexriscvaxi_axiinterface1_ar_valid = (dbus_axi_ar_valid & cramsoc_vexriscvaxi_slave_sel1[1]);
assign cramsoc_vexriscvaxi_axiinterface1_ar_first = dbus_axi_ar_first;
assign cramsoc_vexriscvaxi_axiinterface1_ar_last = dbus_axi_ar_last;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_addr = dbus_axi_ar_payload_addr;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_burst = dbus_axi_ar_payload_burst;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_len = dbus_axi_ar_payload_len;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_size = dbus_axi_ar_payload_size;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_lock = dbus_axi_ar_payload_lock;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_prot = dbus_axi_ar_payload_prot;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_cache = dbus_axi_ar_payload_cache;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_qos = dbus_axi_ar_payload_qos;
assign cramsoc_vexriscvaxi_axiinterface1_ar_payload_region = dbus_axi_ar_payload_region;
assign cramsoc_vexriscvaxi_axiinterface1_ar_param_id = dbus_axi_ar_param_id;
assign cramsoc_vexriscvaxi_axiinterface1_ar_param_dest = dbus_axi_ar_param_dest;
assign cramsoc_vexriscvaxi_axiinterface1_ar_param_user = dbus_axi_ar_param_user;
assign cramsoc_vexriscvaxi_axiinterface1_r_ready = (dbus_axi_r_ready & cramsoc_vexriscvaxi_slave_sel1[1]);
assign dbus_axi_aw_ready = ((cramsoc_vexriscvaxi_axiinterface0_aw_ready & {1{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_aw_ready & {1{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_w_ready = ((cramsoc_vexriscvaxi_axiinterface0_w_ready & {1{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_w_ready & {1{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_b_valid = ((cramsoc_vexriscvaxi_axiinterface0_b_valid & {1{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_b_valid & {1{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_b_first = ((cramsoc_vexriscvaxi_axiinterface0_b_first & {1{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_b_first & {1{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_b_last = ((cramsoc_vexriscvaxi_axiinterface0_b_last & {1{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_b_last & {1{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_b_payload_resp = ((cramsoc_vexriscvaxi_axiinterface0_b_payload_resp & {2{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_b_payload_resp & {2{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_b_param_id = ((cramsoc_vexriscvaxi_axiinterface0_b_param_id & {1{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_b_param_id & {1{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_b_param_dest = ((cramsoc_vexriscvaxi_axiinterface0_b_param_dest & {1{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_b_param_dest & {1{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_b_param_user = ((cramsoc_vexriscvaxi_axiinterface0_b_param_user & {1{cramsoc_vexriscvaxi_slave_sel0[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_b_param_user & {1{cramsoc_vexriscvaxi_slave_sel0[1]}}));
assign dbus_axi_ar_ready = ((cramsoc_vexriscvaxi_axiinterface0_ar_ready & {1{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_ar_ready & {1{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign dbus_axi_r_valid = ((cramsoc_vexriscvaxi_axiinterface0_r_valid & {1{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_r_valid & {1{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign dbus_axi_r_first = ((cramsoc_vexriscvaxi_axiinterface0_r_first & {1{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_r_first & {1{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign dbus_axi_r_last = ((cramsoc_vexriscvaxi_axiinterface0_r_last & {1{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_r_last & {1{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign dbus_axi_r_payload_resp = ((cramsoc_vexriscvaxi_axiinterface0_r_payload_resp & {2{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_r_payload_resp & {2{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign dbus_axi_r_payload_data = ((cramsoc_vexriscvaxi_axiinterface0_r_payload_data & {32{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_r_payload_data & {32{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign dbus_axi_r_param_id = ((cramsoc_vexriscvaxi_axiinterface0_r_param_id & {1{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_r_param_id & {1{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign dbus_axi_r_param_dest = ((cramsoc_vexriscvaxi_axiinterface0_r_param_dest & {1{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_r_param_dest & {1{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign dbus_axi_r_param_user = ((cramsoc_vexriscvaxi_axiinterface0_r_param_user & {1{cramsoc_vexriscvaxi_slave_sel1[0]}}) | (cramsoc_vexriscvaxi_axiinterface1_r_param_user & {1{cramsoc_vexriscvaxi_slave_sel1[1]}}));
assign cramsoc_vexriscvaxi_axirequestcounter0_full = (cramsoc_vexriscvaxi_axirequestcounter0_counter == 8'd255);
assign cramsoc_vexriscvaxi_axirequestcounter0_empty = (cramsoc_vexriscvaxi_axirequestcounter0_counter == 1'd0);
assign cramsoc_vexriscvaxi_axirequestcounter0_stall = ((dbus_axi_aw_valid & dbus_axi_aw_ready) & cramsoc_vexriscvaxi_axirequestcounter0_full);
assign cramsoc_vexriscvaxi_axirequestcounter1_full = (cramsoc_vexriscvaxi_axirequestcounter1_counter == 8'd255);
assign cramsoc_vexriscvaxi_axirequestcounter1_empty = (cramsoc_vexriscvaxi_axirequestcounter1_counter == 1'd0);
assign cramsoc_vexriscvaxi_axirequestcounter1_stall = ((dbus_axi_ar_valid & dbus_axi_ar_ready) & cramsoc_vexriscvaxi_axirequestcounter1_full);
assign socbushandler_aw_valid = array_muxed0;
assign socbushandler_aw_first = array_muxed1;
assign socbushandler_aw_last = array_muxed2;
assign socbushandler_aw_payload_addr = array_muxed3;
assign socbushandler_aw_payload_burst = array_muxed4;
assign socbushandler_aw_payload_len = array_muxed5;
assign socbushandler_aw_payload_size = array_muxed6;
assign socbushandler_aw_payload_lock = array_muxed7;
assign socbushandler_aw_payload_prot = array_muxed8;
assign socbushandler_aw_payload_cache = array_muxed9;
assign socbushandler_aw_payload_qos = array_muxed10;
assign socbushandler_aw_payload_region = array_muxed11;
assign socbushandler_aw_param_id = array_muxed12;
assign socbushandler_aw_param_dest = array_muxed13;
assign socbushandler_aw_param_user = array_muxed14;
assign socbushandler_w_valid = array_muxed15;
assign socbushandler_w_first = array_muxed16;
assign socbushandler_w_last = array_muxed17;
assign socbushandler_w_payload_data = array_muxed18;
assign socbushandler_w_payload_strb = array_muxed19;
assign socbushandler_w_param_id = array_muxed20;
assign socbushandler_w_param_dest = array_muxed21;
assign socbushandler_w_param_user = array_muxed22;
assign socbushandler_b_ready = array_muxed23;
assign socbushandler_ar_valid = array_muxed24;
assign socbushandler_ar_first = array_muxed25;
assign socbushandler_ar_last = array_muxed26;
assign socbushandler_ar_payload_addr = array_muxed27;
assign socbushandler_ar_payload_burst = array_muxed28;
assign socbushandler_ar_payload_len = array_muxed29;
assign socbushandler_ar_payload_size = array_muxed30;
assign socbushandler_ar_payload_lock = array_muxed31;
assign socbushandler_ar_payload_prot = array_muxed32;
assign socbushandler_ar_payload_cache = array_muxed33;
assign socbushandler_ar_payload_qos = array_muxed34;
assign socbushandler_ar_payload_region = array_muxed35;
assign socbushandler_ar_param_id = array_muxed36;
assign socbushandler_ar_param_dest = array_muxed37;
assign socbushandler_ar_param_user = array_muxed38;
assign socbushandler_r_ready = array_muxed39;
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface0_aw_ready <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface0_aw_ready <= socbushandler_aw_ready;
    end
end
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface0_w_ready <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface0_w_ready <= socbushandler_w_ready;
    end
end
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface0_b_valid <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface0_b_valid <= socbushandler_b_valid;
    end
end
assign cramsoc_vexriscvaxi_axiinterface0_b_first = socbushandler_b_first;
assign cramsoc_vexriscvaxi_axiinterface0_b_last = socbushandler_b_last;
assign cramsoc_vexriscvaxi_axiinterface0_b_payload_resp = socbushandler_b_payload_resp;
assign cramsoc_vexriscvaxi_axiinterface0_b_param_id = socbushandler_b_param_id;
assign cramsoc_vexriscvaxi_axiinterface0_b_param_dest = socbushandler_b_param_dest;
assign cramsoc_vexriscvaxi_axiinterface0_b_param_user = socbushandler_b_param_user;
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface0_ar_ready <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface0_ar_ready <= socbushandler_ar_ready;
    end
end
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface0_r_valid <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface0_r_valid <= socbushandler_r_valid;
    end
end
assign cramsoc_vexriscvaxi_axiinterface0_r_first = socbushandler_r_first;
assign cramsoc_vexriscvaxi_axiinterface0_r_last = socbushandler_r_last;
assign cramsoc_vexriscvaxi_axiinterface0_r_payload_resp = socbushandler_r_payload_resp;
assign cramsoc_vexriscvaxi_axiinterface0_r_payload_data = socbushandler_r_payload_data;
assign cramsoc_vexriscvaxi_axiinterface0_r_param_id = socbushandler_r_param_id;
assign cramsoc_vexriscvaxi_axiinterface0_r_param_dest = socbushandler_r_param_dest;
assign cramsoc_vexriscvaxi_axiinterface0_r_param_user = socbushandler_r_param_user;
assign cramsoc_vexriscvaxi_axiarbiter0_rr_write_ce = ((~((socbushandler_aw_valid | socbushandler_w_valid) | socbushandler_b_valid)) & cramsoc_vexriscvaxi_axiarbiter0_wr_lock_empty);
assign cramsoc_vexriscvaxi_axiarbiter0_rr_read_ce = ((~(socbushandler_ar_valid | socbushandler_r_valid)) & cramsoc_vexriscvaxi_axiarbiter0_rd_lock_empty);
assign cramsoc_vexriscvaxi_axiarbiter0_rr_write_request = {((cramsoc_vexriscvaxi_axiinterface0_aw_valid | cramsoc_vexriscvaxi_axiinterface0_w_valid) | cramsoc_vexriscvaxi_axiinterface0_b_valid)};
assign cramsoc_vexriscvaxi_axiarbiter0_rr_read_request = {(cramsoc_vexriscvaxi_axiinterface0_ar_valid | cramsoc_vexriscvaxi_axiinterface0_r_valid)};
assign cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant = 1'd0;
assign cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant = 1'd0;
assign cramsoc_vexriscvaxi_axiarbiter0_wr_lock_full = (cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter == 8'd255);
assign cramsoc_vexriscvaxi_axiarbiter0_wr_lock_empty = (cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter == 1'd0);
assign cramsoc_vexriscvaxi_axiarbiter0_wr_lock_stall = ((socbushandler_aw_valid & socbushandler_aw_ready) & cramsoc_vexriscvaxi_axiarbiter0_wr_lock_full);
assign cramsoc_vexriscvaxi_axiarbiter0_rd_lock_full = (cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter == 8'd255);
assign cramsoc_vexriscvaxi_axiarbiter0_rd_lock_empty = (cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter == 1'd0);
assign cramsoc_vexriscvaxi_axiarbiter0_rd_lock_stall = ((socbushandler_ar_valid & socbushandler_ar_ready) & cramsoc_vexriscvaxi_axiarbiter0_rd_lock_full);
assign dbus_aw_valid = array_muxed40;
assign dbus_aw_first = array_muxed41;
assign dbus_aw_last = array_muxed42;
assign dbus_aw_payload_addr = array_muxed43;
assign dbus_aw_payload_burst = array_muxed44;
assign dbus_aw_payload_len = array_muxed45;
assign dbus_aw_payload_size = array_muxed46;
assign dbus_aw_payload_lock = array_muxed47;
assign dbus_aw_payload_prot = array_muxed48;
assign dbus_aw_payload_cache = array_muxed49;
assign dbus_aw_payload_qos = array_muxed50;
assign dbus_aw_payload_region = array_muxed51;
assign dbus_aw_param_id = array_muxed52;
assign dbus_aw_param_dest = array_muxed53;
assign dbus_aw_param_user = array_muxed54;
assign dbus_w_valid = array_muxed55;
assign dbus_w_first = array_muxed56;
assign dbus_w_last = array_muxed57;
assign dbus_w_payload_data = array_muxed58;
assign dbus_w_payload_strb = array_muxed59;
assign dbus_w_param_id = array_muxed60;
assign dbus_w_param_dest = array_muxed61;
assign dbus_w_param_user = array_muxed62;
assign dbus_b_ready = array_muxed63;
assign dbus_ar_valid = array_muxed64;
assign dbus_ar_first = array_muxed65;
assign dbus_ar_last = array_muxed66;
assign dbus_ar_payload_addr = array_muxed67;
assign dbus_ar_payload_burst = array_muxed68;
assign dbus_ar_payload_len = array_muxed69;
assign dbus_ar_payload_size = array_muxed70;
assign dbus_ar_payload_lock = array_muxed71;
assign dbus_ar_payload_prot = array_muxed72;
assign dbus_ar_payload_cache = array_muxed73;
assign dbus_ar_payload_qos = array_muxed74;
assign dbus_ar_payload_region = array_muxed75;
assign dbus_ar_param_id = array_muxed76;
assign dbus_ar_param_dest = array_muxed77;
assign dbus_ar_param_user = array_muxed78;
assign dbus_r_ready = array_muxed79;
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface1_aw_ready <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface1_aw_ready <= dbus_aw_ready;
    end
end
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface1_w_ready <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface1_w_ready <= dbus_w_ready;
    end
end
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface1_b_valid <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface1_b_valid <= dbus_b_valid;
    end
end
assign cramsoc_vexriscvaxi_axiinterface1_b_first = dbus_b_first;
assign cramsoc_vexriscvaxi_axiinterface1_b_last = dbus_b_last;
assign cramsoc_vexriscvaxi_axiinterface1_b_payload_resp = dbus_b_payload_resp;
assign cramsoc_vexriscvaxi_axiinterface1_b_param_id = dbus_b_param_id;
assign cramsoc_vexriscvaxi_axiinterface1_b_param_dest = dbus_b_param_dest;
assign cramsoc_vexriscvaxi_axiinterface1_b_param_user = dbus_b_param_user;
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface1_ar_ready <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface1_ar_ready <= dbus_ar_ready;
    end
end
always @(*) begin
    cramsoc_vexriscvaxi_axiinterface1_r_valid <= 1'd0;
    if ((cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant == 1'd0)) begin
        cramsoc_vexriscvaxi_axiinterface1_r_valid <= dbus_r_valid;
    end
end
assign cramsoc_vexriscvaxi_axiinterface1_r_first = dbus_r_first;
assign cramsoc_vexriscvaxi_axiinterface1_r_last = dbus_r_last;
assign cramsoc_vexriscvaxi_axiinterface1_r_payload_resp = dbus_r_payload_resp;
assign cramsoc_vexriscvaxi_axiinterface1_r_payload_data = dbus_r_payload_data;
assign cramsoc_vexriscvaxi_axiinterface1_r_param_id = dbus_r_param_id;
assign cramsoc_vexriscvaxi_axiinterface1_r_param_dest = dbus_r_param_dest;
assign cramsoc_vexriscvaxi_axiinterface1_r_param_user = dbus_r_param_user;
assign cramsoc_vexriscvaxi_axiarbiter1_rr_write_ce = ((~((dbus_aw_valid | dbus_w_valid) | dbus_b_valid)) & cramsoc_vexriscvaxi_axiarbiter1_wr_lock_empty);
assign cramsoc_vexriscvaxi_axiarbiter1_rr_read_ce = ((~(dbus_ar_valid | dbus_r_valid)) & cramsoc_vexriscvaxi_axiarbiter1_rd_lock_empty);
assign cramsoc_vexriscvaxi_axiarbiter1_rr_write_request = {((cramsoc_vexriscvaxi_axiinterface1_aw_valid | cramsoc_vexriscvaxi_axiinterface1_w_valid) | cramsoc_vexriscvaxi_axiinterface1_b_valid)};
assign cramsoc_vexriscvaxi_axiarbiter1_rr_read_request = {(cramsoc_vexriscvaxi_axiinterface1_ar_valid | cramsoc_vexriscvaxi_axiinterface1_r_valid)};
assign cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant = 1'd0;
assign cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant = 1'd0;
assign cramsoc_vexriscvaxi_axiarbiter1_wr_lock_full = (cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter == 8'd255);
assign cramsoc_vexriscvaxi_axiarbiter1_wr_lock_empty = (cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter == 1'd0);
assign cramsoc_vexriscvaxi_axiarbiter1_wr_lock_stall = ((dbus_aw_valid & dbus_aw_ready) & cramsoc_vexriscvaxi_axiarbiter1_wr_lock_full);
assign cramsoc_vexriscvaxi_axiarbiter1_rd_lock_full = (cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter == 8'd255);
assign cramsoc_vexriscvaxi_axiarbiter1_rd_lock_empty = (cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter == 1'd0);
assign cramsoc_vexriscvaxi_axiarbiter1_rd_lock_stall = ((dbus_ar_valid & dbus_ar_ready) & cramsoc_vexriscvaxi_axiarbiter1_rd_lock_full);
assign zero_trigger = (value == 1'd0);
assign zero0 = zero_status;
assign zero1 = zero_pending;
always @(*) begin
    zero_clear <= 1'd0;
    if ((pending_re & pending_r)) begin
        zero_clear <= 1'd1;
    end
end
assign irq = (pending_status & enable_storage);
assign zero_status = zero_trigger;
assign cramsoc_dat_w = cramsoc_csr_bridge_w_payload_data;
assign cramsoc_we = ((cramsoc_csr_bridge_w_valid & cramsoc_csr_bridge_w_ready) & (cramsoc_csr_bridge_w_payload_strb != 1'd0));
always @(*) begin
    cramsoc_csr_bridge_do_read <= 1'd0;
    cramsoc_csr_bridge_do_write <= 1'd0;
    if ((cramsoc_csr_bridge_aw_valid & cramsoc_csr_bridge_ar_valid)) begin
        cramsoc_csr_bridge_do_write <= cramsoc_csr_bridge_last_was_read;
        cramsoc_csr_bridge_do_read <= (~cramsoc_csr_bridge_last_was_read);
    end else begin
        cramsoc_csr_bridge_do_write <= cramsoc_csr_bridge_aw_valid;
        cramsoc_csr_bridge_do_read <= cramsoc_csr_bridge_ar_valid;
    end
end
always @(*) begin
    cramsoc_csr_bridge_r_payload_resp <= 2'd0;
    cramsoc_adr <= 16'd0;
    cramsoc_csr_bridge_r_payload_data <= 32'd0;
    cramsoc_csr_bridge_b_valid <= 1'd0;
    cramsoc_axilite2csr_next_state <= 2'd0;
    cramsoc_csr_bridge_b_payload_resp <= 2'd0;
    cramsoc_csr_bridge_aw_ready <= 1'd0;
    cramsoc_csr_bridge_ar_ready <= 1'd0;
    cramsoc_csr_bridge_last_was_read_axilite2csr_next_value <= 1'd0;
    cramsoc_csr_bridge_last_was_read_axilite2csr_next_value_ce <= 1'd0;
    cramsoc_csr_bridge_r_valid <= 1'd0;
    cramsoc_csr_bridge_w_ready <= 1'd0;
    cramsoc_axilite2csr_next_state <= cramsoc_axilite2csr_state;
    case (cramsoc_axilite2csr_state)
        1'd1: begin
            cramsoc_csr_bridge_last_was_read_axilite2csr_next_value <= 1'd1;
            cramsoc_csr_bridge_last_was_read_axilite2csr_next_value_ce <= 1'd1;
            if (cramsoc_csr_bridge_r_valid) begin
                cramsoc_adr <= cramsoc_csr_bridge_ar_payload_addr[31:2];
            end else begin
                cramsoc_adr <= 1'd0;
            end
            cramsoc_csr_bridge_r_payload_data <= cramsoc_dat_r;
            cramsoc_csr_bridge_r_payload_resp <= 1'd0;
            cramsoc_csr_bridge_r_valid <= 1'd1;
            if (cramsoc_csr_bridge_r_ready) begin
                cramsoc_axilite2csr_next_state <= 1'd0;
            end
        end
        2'd2: begin
            cramsoc_csr_bridge_last_was_read_axilite2csr_next_value <= 1'd0;
            cramsoc_csr_bridge_last_was_read_axilite2csr_next_value_ce <= 1'd1;
            cramsoc_csr_bridge_b_valid <= 1'd1;
            cramsoc_csr_bridge_b_payload_resp <= 1'd0;
            if (cramsoc_csr_bridge_b_ready) begin
                cramsoc_axilite2csr_next_state <= 1'd0;
            end
        end
        default: begin
            if (cramsoc_csr_bridge_do_write) begin
                cramsoc_adr <= cramsoc_csr_bridge_aw_payload_addr[31:2];
                if (cramsoc_csr_bridge_w_valid) begin
                    cramsoc_csr_bridge_aw_ready <= 1'd1;
                    cramsoc_csr_bridge_w_ready <= 1'd1;
                    cramsoc_axilite2csr_next_state <= 2'd2;
                end
            end else begin
                if (cramsoc_csr_bridge_do_read) begin
                    if (cramsoc_csr_bridge_r_valid) begin
                        cramsoc_adr <= cramsoc_csr_bridge_ar_payload_addr[31:2];
                    end else begin
                        cramsoc_adr <= 1'd0;
                    end
                    cramsoc_csr_bridge_ar_ready <= 1'd1;
                    cramsoc_axilite2csr_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign csr_bankarray_sel = (csr_bankarray_adr[15:10] == 1'd0);
assign csr_bankarray_load0_r = csr_bankarray_dat_w[31:0];
always @(*) begin
    csr_bankarray_load0_re <= 1'd0;
    csr_bankarray_load0_we <= 1'd0;
    if ((csr_bankarray_sel & (csr_bankarray_adr[9:0] == 1'd0))) begin
        csr_bankarray_load0_re <= csr_bankarray_we;
        csr_bankarray_load0_we <= (~csr_bankarray_we);
    end
end
assign csr_bankarray_reload0_r = csr_bankarray_dat_w[31:0];
always @(*) begin
    csr_bankarray_reload0_we <= 1'd0;
    csr_bankarray_reload0_re <= 1'd0;
    if ((csr_bankarray_sel & (csr_bankarray_adr[9:0] == 1'd1))) begin
        csr_bankarray_reload0_re <= csr_bankarray_we;
        csr_bankarray_reload0_we <= (~csr_bankarray_we);
    end
end
assign csr_bankarray_en0_r = csr_bankarray_dat_w[0];
always @(*) begin
    csr_bankarray_en0_re <= 1'd0;
    csr_bankarray_en0_we <= 1'd0;
    if ((csr_bankarray_sel & (csr_bankarray_adr[9:0] == 2'd2))) begin
        csr_bankarray_en0_re <= csr_bankarray_we;
        csr_bankarray_en0_we <= (~csr_bankarray_we);
    end
end
assign csr_bankarray_update_value0_r = csr_bankarray_dat_w[0];
always @(*) begin
    csr_bankarray_update_value0_re <= 1'd0;
    csr_bankarray_update_value0_we <= 1'd0;
    if ((csr_bankarray_sel & (csr_bankarray_adr[9:0] == 2'd3))) begin
        csr_bankarray_update_value0_re <= csr_bankarray_we;
        csr_bankarray_update_value0_we <= (~csr_bankarray_we);
    end
end
assign csr_bankarray_value_r = csr_bankarray_dat_w[31:0];
always @(*) begin
    csr_bankarray_value_we <= 1'd0;
    csr_bankarray_value_re <= 1'd0;
    if ((csr_bankarray_sel & (csr_bankarray_adr[9:0] == 3'd4))) begin
        csr_bankarray_value_re <= csr_bankarray_we;
        csr_bankarray_value_we <= (~csr_bankarray_we);
    end
end
assign csr_bankarray_ev_status_r = csr_bankarray_dat_w[0];
always @(*) begin
    csr_bankarray_ev_status_re <= 1'd0;
    csr_bankarray_ev_status_we <= 1'd0;
    if ((csr_bankarray_sel & (csr_bankarray_adr[9:0] == 3'd5))) begin
        csr_bankarray_ev_status_re <= csr_bankarray_we;
        csr_bankarray_ev_status_we <= (~csr_bankarray_we);
    end
end
assign csr_bankarray_ev_pending_r = csr_bankarray_dat_w[0];
always @(*) begin
    csr_bankarray_ev_pending_re <= 1'd0;
    csr_bankarray_ev_pending_we <= 1'd0;
    if ((csr_bankarray_sel & (csr_bankarray_adr[9:0] == 3'd6))) begin
        csr_bankarray_ev_pending_re <= csr_bankarray_we;
        csr_bankarray_ev_pending_we <= (~csr_bankarray_we);
    end
end
assign csr_bankarray_ev_enable0_r = csr_bankarray_dat_w[0];
always @(*) begin
    csr_bankarray_ev_enable0_we <= 1'd0;
    csr_bankarray_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_sel & (csr_bankarray_adr[9:0] == 3'd7))) begin
        csr_bankarray_ev_enable0_re <= csr_bankarray_we;
        csr_bankarray_ev_enable0_we <= (~csr_bankarray_we);
    end
end
assign csr_bankarray_load0_w = load_storage[31:0];
assign csr_bankarray_reload0_w = reload_storage[31:0];
assign csr_bankarray_en0_w = en_storage;
assign csr_bankarray_update_value0_w = update_value_storage;
assign csr_bankarray_value_w = value_status[31:0];
assign value_we = csr_bankarray_value_we;
assign status_status = zero0;
assign csr_bankarray_ev_status_w = status_status;
assign status_we = csr_bankarray_ev_status_we;
assign pending_status = zero1;
assign csr_bankarray_ev_pending_w = pending_status;
assign pending_we = csr_bankarray_ev_pending_we;
assign zero2 = enable_storage;
assign csr_bankarray_ev_enable0_w = enable_storage;
assign csr_interconnect_adr = cramsoc_adr;
assign csr_interconnect_we = cramsoc_we;
assign csr_interconnect_dat_w = cramsoc_dat_w;
assign cramsoc_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_adr = csr_interconnect_adr;
assign csr_bankarray_we = csr_interconnect_we;
assign csr_bankarray_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = csr_bankarray_dat_r;
assign slice_proxy0 = dbus_axi_aw_payload_addr[31:2];
assign slice_proxy1 = dbus_axi_ar_payload_addr[31:2];
assign slice_proxy2 = dbus_axi_aw_payload_addr[31:2];
assign slice_proxy3 = dbus_axi_ar_payload_addr[31:2];
always @(*) begin
    array_muxed0 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed0 <= cramsoc_vexriscvaxi_axiinterface0_aw_valid;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed1 <= cramsoc_vexriscvaxi_axiinterface0_aw_first;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed2 <= cramsoc_vexriscvaxi_axiinterface0_aw_last;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 32'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed3 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_addr;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 2'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed4 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_burst;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 8'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed5 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_len;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 3'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed6 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_size;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed7 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_lock;
        end
    endcase
end
always @(*) begin
    array_muxed8 <= 3'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed8 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_prot;
        end
    endcase
end
always @(*) begin
    array_muxed9 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed9 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_cache;
        end
    endcase
end
always @(*) begin
    array_muxed10 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed10 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_qos;
        end
    endcase
end
always @(*) begin
    array_muxed11 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed11 <= cramsoc_vexriscvaxi_axiinterface0_aw_payload_region;
        end
    endcase
end
always @(*) begin
    array_muxed12 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed12 <= cramsoc_vexriscvaxi_axiinterface0_aw_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed13 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed13 <= cramsoc_vexriscvaxi_axiinterface0_aw_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed14 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed14 <= cramsoc_vexriscvaxi_axiinterface0_aw_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed15 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed15 <= cramsoc_vexriscvaxi_axiinterface0_w_valid;
        end
    endcase
end
always @(*) begin
    array_muxed16 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed16 <= cramsoc_vexriscvaxi_axiinterface0_w_first;
        end
    endcase
end
always @(*) begin
    array_muxed17 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed17 <= cramsoc_vexriscvaxi_axiinterface0_w_last;
        end
    endcase
end
always @(*) begin
    array_muxed18 <= 32'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed18 <= cramsoc_vexriscvaxi_axiinterface0_w_payload_data;
        end
    endcase
end
always @(*) begin
    array_muxed19 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed19 <= cramsoc_vexriscvaxi_axiinterface0_w_payload_strb;
        end
    endcase
end
always @(*) begin
    array_muxed20 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed20 <= cramsoc_vexriscvaxi_axiinterface0_w_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed21 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed21 <= cramsoc_vexriscvaxi_axiinterface0_w_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed22 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed22 <= cramsoc_vexriscvaxi_axiinterface0_w_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed23 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_write_grant)
        default: begin
            array_muxed23 <= cramsoc_vexriscvaxi_axiinterface0_b_ready;
        end
    endcase
end
always @(*) begin
    array_muxed24 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed24 <= cramsoc_vexriscvaxi_axiinterface0_ar_valid;
        end
    endcase
end
always @(*) begin
    array_muxed25 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed25 <= cramsoc_vexriscvaxi_axiinterface0_ar_first;
        end
    endcase
end
always @(*) begin
    array_muxed26 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed26 <= cramsoc_vexriscvaxi_axiinterface0_ar_last;
        end
    endcase
end
always @(*) begin
    array_muxed27 <= 32'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed27 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_addr;
        end
    endcase
end
always @(*) begin
    array_muxed28 <= 2'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed28 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_burst;
        end
    endcase
end
always @(*) begin
    array_muxed29 <= 8'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed29 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_len;
        end
    endcase
end
always @(*) begin
    array_muxed30 <= 3'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed30 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_size;
        end
    endcase
end
always @(*) begin
    array_muxed31 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed31 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_lock;
        end
    endcase
end
always @(*) begin
    array_muxed32 <= 3'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed32 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_prot;
        end
    endcase
end
always @(*) begin
    array_muxed33 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed33 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_cache;
        end
    endcase
end
always @(*) begin
    array_muxed34 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed34 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_qos;
        end
    endcase
end
always @(*) begin
    array_muxed35 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed35 <= cramsoc_vexriscvaxi_axiinterface0_ar_payload_region;
        end
    endcase
end
always @(*) begin
    array_muxed36 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed36 <= cramsoc_vexriscvaxi_axiinterface0_ar_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed37 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed37 <= cramsoc_vexriscvaxi_axiinterface0_ar_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed38 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed38 <= cramsoc_vexriscvaxi_axiinterface0_ar_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed39 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter0_rr_read_grant)
        default: begin
            array_muxed39 <= cramsoc_vexriscvaxi_axiinterface0_r_ready;
        end
    endcase
end
always @(*) begin
    array_muxed40 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed40 <= cramsoc_vexriscvaxi_axiinterface1_aw_valid;
        end
    endcase
end
always @(*) begin
    array_muxed41 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed41 <= cramsoc_vexriscvaxi_axiinterface1_aw_first;
        end
    endcase
end
always @(*) begin
    array_muxed42 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed42 <= cramsoc_vexriscvaxi_axiinterface1_aw_last;
        end
    endcase
end
always @(*) begin
    array_muxed43 <= 32'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed43 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_addr;
        end
    endcase
end
always @(*) begin
    array_muxed44 <= 2'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed44 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_burst;
        end
    endcase
end
always @(*) begin
    array_muxed45 <= 8'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed45 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_len;
        end
    endcase
end
always @(*) begin
    array_muxed46 <= 3'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed46 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_size;
        end
    endcase
end
always @(*) begin
    array_muxed47 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed47 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_lock;
        end
    endcase
end
always @(*) begin
    array_muxed48 <= 3'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed48 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_prot;
        end
    endcase
end
always @(*) begin
    array_muxed49 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed49 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_cache;
        end
    endcase
end
always @(*) begin
    array_muxed50 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed50 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_qos;
        end
    endcase
end
always @(*) begin
    array_muxed51 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed51 <= cramsoc_vexriscvaxi_axiinterface1_aw_payload_region;
        end
    endcase
end
always @(*) begin
    array_muxed52 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed52 <= cramsoc_vexriscvaxi_axiinterface1_aw_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed53 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed53 <= cramsoc_vexriscvaxi_axiinterface1_aw_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed54 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed54 <= cramsoc_vexriscvaxi_axiinterface1_aw_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed55 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed55 <= cramsoc_vexriscvaxi_axiinterface1_w_valid;
        end
    endcase
end
always @(*) begin
    array_muxed56 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed56 <= cramsoc_vexriscvaxi_axiinterface1_w_first;
        end
    endcase
end
always @(*) begin
    array_muxed57 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed57 <= cramsoc_vexriscvaxi_axiinterface1_w_last;
        end
    endcase
end
always @(*) begin
    array_muxed58 <= 32'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed58 <= cramsoc_vexriscvaxi_axiinterface1_w_payload_data;
        end
    endcase
end
always @(*) begin
    array_muxed59 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed59 <= cramsoc_vexriscvaxi_axiinterface1_w_payload_strb;
        end
    endcase
end
always @(*) begin
    array_muxed60 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed60 <= cramsoc_vexriscvaxi_axiinterface1_w_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed61 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed61 <= cramsoc_vexriscvaxi_axiinterface1_w_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed62 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed62 <= cramsoc_vexriscvaxi_axiinterface1_w_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed63 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_write_grant)
        default: begin
            array_muxed63 <= cramsoc_vexriscvaxi_axiinterface1_b_ready;
        end
    endcase
end
always @(*) begin
    array_muxed64 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed64 <= cramsoc_vexriscvaxi_axiinterface1_ar_valid;
        end
    endcase
end
always @(*) begin
    array_muxed65 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed65 <= cramsoc_vexriscvaxi_axiinterface1_ar_first;
        end
    endcase
end
always @(*) begin
    array_muxed66 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed66 <= cramsoc_vexriscvaxi_axiinterface1_ar_last;
        end
    endcase
end
always @(*) begin
    array_muxed67 <= 32'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed67 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_addr;
        end
    endcase
end
always @(*) begin
    array_muxed68 <= 2'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed68 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_burst;
        end
    endcase
end
always @(*) begin
    array_muxed69 <= 8'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed69 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_len;
        end
    endcase
end
always @(*) begin
    array_muxed70 <= 3'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed70 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_size;
        end
    endcase
end
always @(*) begin
    array_muxed71 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed71 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_lock;
        end
    endcase
end
always @(*) begin
    array_muxed72 <= 3'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed72 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_prot;
        end
    endcase
end
always @(*) begin
    array_muxed73 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed73 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_cache;
        end
    endcase
end
always @(*) begin
    array_muxed74 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed74 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_qos;
        end
    endcase
end
always @(*) begin
    array_muxed75 <= 4'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed75 <= cramsoc_vexriscvaxi_axiinterface1_ar_payload_region;
        end
    endcase
end
always @(*) begin
    array_muxed76 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed76 <= cramsoc_vexriscvaxi_axiinterface1_ar_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed77 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed77 <= cramsoc_vexriscvaxi_axiinterface1_ar_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed78 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed78 <= cramsoc_vexriscvaxi_axiinterface1_ar_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed79 <= 1'd0;
    case (cramsoc_vexriscvaxi_axiarbiter1_rr_read_grant)
        default: begin
            array_muxed79 <= cramsoc_vexriscvaxi_axiinterface1_r_ready;
        end
    endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= rst;
end

always @(posedge sys_clk) begin
    p_axi_awvalid <= dbus_lite_aw_valid;
    p_axi_awaddr <= dbus_lite_aw_payload_addr;
    p_axi_awprot <= dbus_lite_aw_payload_prot;
    dbus_lite_aw_ready <= p_axi_awready;
    p_axi_wvalid <= dbus_lite_w_valid;
    p_axi_wdata <= dbus_lite_w_payload_data;
    p_axi_wstrb <= dbus_lite_w_payload_strb;
    dbus_lite_w_ready <= p_axi_wready;
    dbus_lite_b_valid <= p_axi_bvalid;
    dbus_lite_b_payload_resp <= p_axi_bresp;
    p_axi_bready <= dbus_lite_b_ready;
    p_axi_arvalid <= dbus_lite_ar_valid;
    p_axi_araddr <= dbus_lite_ar_payload_addr;
    p_axi_arprot <= dbus_lite_ar_payload_prot;
    dbus_lite_ar_ready <= p_axi_arready;
    dbus_lite_r_valid <= p_axi_rvalid;
    dbus_lite_r_payload_resp <= p_axi_rresp;
    dbus_lite_r_payload_data <= p_axi_rdata;
    p_axi_rready <= dbus_lite_r_ready;
    if (((~cramsoc_socbushandler_pipe_valid_source_valid) | cramsoc_socbushandler_pipe_valid_source_ready)) begin
        cramsoc_socbushandler_pipe_valid_source_valid <= cramsoc_socbushandler_pipe_valid_sink_valid;
        cramsoc_socbushandler_pipe_valid_source_first <= cramsoc_socbushandler_pipe_valid_sink_first;
        cramsoc_socbushandler_pipe_valid_source_last <= cramsoc_socbushandler_pipe_valid_sink_last;
        cramsoc_socbushandler_pipe_valid_source_payload_addr <= cramsoc_socbushandler_pipe_valid_sink_payload_addr;
        cramsoc_socbushandler_pipe_valid_source_payload_burst <= cramsoc_socbushandler_pipe_valid_sink_payload_burst;
        cramsoc_socbushandler_pipe_valid_source_payload_len <= cramsoc_socbushandler_pipe_valid_sink_payload_len;
        cramsoc_socbushandler_pipe_valid_source_payload_size <= cramsoc_socbushandler_pipe_valid_sink_payload_size;
        cramsoc_socbushandler_pipe_valid_source_payload_lock <= cramsoc_socbushandler_pipe_valid_sink_payload_lock;
        cramsoc_socbushandler_pipe_valid_source_payload_prot <= cramsoc_socbushandler_pipe_valid_sink_payload_prot;
        cramsoc_socbushandler_pipe_valid_source_payload_cache <= cramsoc_socbushandler_pipe_valid_sink_payload_cache;
        cramsoc_socbushandler_pipe_valid_source_payload_qos <= cramsoc_socbushandler_pipe_valid_sink_payload_qos;
        cramsoc_socbushandler_pipe_valid_source_payload_region <= cramsoc_socbushandler_pipe_valid_sink_payload_region;
        cramsoc_socbushandler_pipe_valid_source_param_id <= cramsoc_socbushandler_pipe_valid_sink_param_id;
        cramsoc_socbushandler_pipe_valid_source_param_dest <= cramsoc_socbushandler_pipe_valid_sink_param_dest;
        cramsoc_socbushandler_pipe_valid_source_param_user <= cramsoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((cramsoc_socbushandler_ax_beat_valid & cramsoc_socbushandler_ax_beat_ready)) begin
        if (cramsoc_socbushandler_ax_beat_last) begin
            cramsoc_socbushandler_beat_count <= 1'd0;
            cramsoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            cramsoc_socbushandler_beat_count <= (cramsoc_socbushandler_beat_count + 1'd1);
            if ((((cramsoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((cramsoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                cramsoc_socbushandler_beat_offset <= (cramsoc_socbushandler_beat_offset + $signed({1'd0, cramsoc_socbushandler_beat_size}));
            end
        end
        if (((cramsoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((cramsoc_socbushandler_ax_beat_payload_addr & cramsoc_socbushandler_beat_wrap) == cramsoc_socbushandler_beat_wrap)) begin
                cramsoc_socbushandler_beat_offset <= (cramsoc_socbushandler_beat_offset - $signed({1'd0, cramsoc_socbushandler_beat_wrap}));
            end
        end
    end
    state <= next_state;
    if (cramsoc_socbushandler_cmd_done_next_value_ce0) begin
        cramsoc_socbushandler_cmd_done <= cramsoc_socbushandler_cmd_done_next_value0;
    end
    if (cramsoc_socbushandler_last_ar_aw_n_next_value_ce1) begin
        cramsoc_socbushandler_last_ar_aw_n <= cramsoc_socbushandler_last_ar_aw_n_next_value1;
    end
    vexriscvaxi_debug_reset <= (vexriscvaxi_reset_debug_logic | sys_rst);
    if (vexriscvaxi_o_resetOut) begin
        vexriscvaxi_reset_debug_logic <= 1'd1;
    end else begin
        vexriscvaxi_reset_debug_logic <= 1'd0;
    end
    if (((~socbushandler_pipe_valid_source_valid) | socbushandler_pipe_valid_source_ready)) begin
        socbushandler_pipe_valid_source_valid <= socbushandler_pipe_valid_sink_valid;
        socbushandler_pipe_valid_source_first <= socbushandler_pipe_valid_sink_first;
        socbushandler_pipe_valid_source_last <= socbushandler_pipe_valid_sink_last;
        socbushandler_pipe_valid_source_payload_addr <= socbushandler_pipe_valid_sink_payload_addr;
        socbushandler_pipe_valid_source_payload_burst <= socbushandler_pipe_valid_sink_payload_burst;
        socbushandler_pipe_valid_source_payload_len <= socbushandler_pipe_valid_sink_payload_len;
        socbushandler_pipe_valid_source_payload_size <= socbushandler_pipe_valid_sink_payload_size;
        socbushandler_pipe_valid_source_payload_lock <= socbushandler_pipe_valid_sink_payload_lock;
        socbushandler_pipe_valid_source_payload_prot <= socbushandler_pipe_valid_sink_payload_prot;
        socbushandler_pipe_valid_source_payload_cache <= socbushandler_pipe_valid_sink_payload_cache;
        socbushandler_pipe_valid_source_payload_qos <= socbushandler_pipe_valid_sink_payload_qos;
        socbushandler_pipe_valid_source_payload_region <= socbushandler_pipe_valid_sink_payload_region;
        socbushandler_pipe_valid_source_param_id <= socbushandler_pipe_valid_sink_param_id;
        socbushandler_pipe_valid_source_param_dest <= socbushandler_pipe_valid_sink_param_dest;
        socbushandler_pipe_valid_source_param_user <= socbushandler_pipe_valid_sink_param_user;
    end
    if ((socbushandler_ax_beat_valid & socbushandler_ax_beat_ready)) begin
        if (socbushandler_ax_beat_last) begin
            socbushandler_beat_count <= 1'd0;
            socbushandler_beat_offset <= 1'd0;
        end else begin
            socbushandler_beat_count <= (socbushandler_beat_count + 1'd1);
            if ((((socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                socbushandler_beat_offset <= (socbushandler_beat_offset + $signed({1'd0, socbushandler_beat_size}));
            end
        end
        if (((socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((socbushandler_ax_beat_payload_addr & socbushandler_beat_wrap) == socbushandler_beat_wrap)) begin
                socbushandler_beat_offset <= (socbushandler_beat_offset - $signed({1'd0, socbushandler_beat_wrap}));
            end
        end
    end
    cramsoc_vexriscvaxi_state <= cramsoc_vexriscvaxi_next_state;
    if (socbushandler_cmd_done_vexriscvaxi_next_value_ce0) begin
        socbushandler_cmd_done <= socbushandler_cmd_done_vexriscvaxi_next_value0;
    end
    if (socbushandler_last_ar_aw_n_vexriscvaxi_next_value_ce1) begin
        socbushandler_last_ar_aw_n <= socbushandler_last_ar_aw_n_vexriscvaxi_next_value1;
    end
    if (cramsoc_vexriscvaxi_axirequestcounter0_empty) begin
        cramsoc_vexriscvaxi_slave_sel_reg0 <= cramsoc_vexriscvaxi_slave_sel_dec0;
    end
    if (cramsoc_vexriscvaxi_axirequestcounter1_empty) begin
        cramsoc_vexriscvaxi_slave_sel_reg1 <= cramsoc_vexriscvaxi_slave_sel_dec1;
    end
    if (((dbus_axi_aw_valid & dbus_axi_aw_ready) & (dbus_axi_b_valid & dbus_axi_b_ready))) begin
        cramsoc_vexriscvaxi_axirequestcounter0_counter <= cramsoc_vexriscvaxi_axirequestcounter0_counter;
    end else begin
        if (((dbus_axi_aw_valid & dbus_axi_aw_ready) & (~cramsoc_vexriscvaxi_axirequestcounter0_full))) begin
            cramsoc_vexriscvaxi_axirequestcounter0_counter <= (cramsoc_vexriscvaxi_axirequestcounter0_counter + 1'd1);
        end else begin
            if (((dbus_axi_b_valid & dbus_axi_b_ready) & (~cramsoc_vexriscvaxi_axirequestcounter0_empty))) begin
                cramsoc_vexriscvaxi_axirequestcounter0_counter <= (cramsoc_vexriscvaxi_axirequestcounter0_counter - 1'd1);
            end
        end
    end
    if (((dbus_axi_ar_valid & dbus_axi_ar_ready) & ((dbus_axi_r_valid & dbus_axi_r_ready) & dbus_axi_r_last))) begin
        cramsoc_vexriscvaxi_axirequestcounter1_counter <= cramsoc_vexriscvaxi_axirequestcounter1_counter;
    end else begin
        if (((dbus_axi_ar_valid & dbus_axi_ar_ready) & (~cramsoc_vexriscvaxi_axirequestcounter1_full))) begin
            cramsoc_vexriscvaxi_axirequestcounter1_counter <= (cramsoc_vexriscvaxi_axirequestcounter1_counter + 1'd1);
        end else begin
            if ((((dbus_axi_r_valid & dbus_axi_r_ready) & dbus_axi_r_last) & (~cramsoc_vexriscvaxi_axirequestcounter1_empty))) begin
                cramsoc_vexriscvaxi_axirequestcounter1_counter <= (cramsoc_vexriscvaxi_axirequestcounter1_counter - 1'd1);
            end
        end
    end
    if (((socbushandler_aw_valid & socbushandler_aw_ready) & (socbushandler_b_valid & socbushandler_b_ready))) begin
        cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter <= cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter;
    end else begin
        if (((socbushandler_aw_valid & socbushandler_aw_ready) & (~cramsoc_vexriscvaxi_axiarbiter0_wr_lock_full))) begin
            cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter <= (cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter + 1'd1);
        end else begin
            if (((socbushandler_b_valid & socbushandler_b_ready) & (~cramsoc_vexriscvaxi_axiarbiter0_wr_lock_empty))) begin
                cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter <= (cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter - 1'd1);
            end
        end
    end
    if (((socbushandler_ar_valid & socbushandler_ar_ready) & ((socbushandler_r_valid & socbushandler_r_ready) & socbushandler_r_last))) begin
        cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter <= cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter;
    end else begin
        if (((socbushandler_ar_valid & socbushandler_ar_ready) & (~cramsoc_vexriscvaxi_axiarbiter0_rd_lock_full))) begin
            cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter <= (cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter + 1'd1);
        end else begin
            if ((((socbushandler_r_valid & socbushandler_r_ready) & socbushandler_r_last) & (~cramsoc_vexriscvaxi_axiarbiter0_rd_lock_empty))) begin
                cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter <= (cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter - 1'd1);
            end
        end
    end
    if (((dbus_aw_valid & dbus_aw_ready) & (dbus_b_valid & dbus_b_ready))) begin
        cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter <= cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter;
    end else begin
        if (((dbus_aw_valid & dbus_aw_ready) & (~cramsoc_vexriscvaxi_axiarbiter1_wr_lock_full))) begin
            cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter <= (cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter + 1'd1);
        end else begin
            if (((dbus_b_valid & dbus_b_ready) & (~cramsoc_vexriscvaxi_axiarbiter1_wr_lock_empty))) begin
                cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter <= (cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter - 1'd1);
            end
        end
    end
    if (((dbus_ar_valid & dbus_ar_ready) & ((dbus_r_valid & dbus_r_ready) & dbus_r_last))) begin
        cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter <= cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter;
    end else begin
        if (((dbus_ar_valid & dbus_ar_ready) & (~cramsoc_vexriscvaxi_axiarbiter1_rd_lock_full))) begin
            cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter <= (cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter + 1'd1);
        end else begin
            if ((((dbus_r_valid & dbus_r_ready) & dbus_r_last) & (~cramsoc_vexriscvaxi_axiarbiter1_rd_lock_empty))) begin
                cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter <= (cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter - 1'd1);
            end
        end
    end
    if (en_storage) begin
        if ((value == 1'd0)) begin
            value <= reload_storage;
        end else begin
            value <= (value - 1'd1);
        end
    end else begin
        value <= load_storage;
    end
    if (update_value_re) begin
        value_status <= value;
    end
    if (zero_clear) begin
        zero_pending <= 1'd0;
    end
    zero_trigger_d <= zero_trigger;
    if ((zero_trigger & (~zero_trigger_d))) begin
        zero_pending <= 1'd1;
    end
    cramsoc_axilite2csr_state <= cramsoc_axilite2csr_next_state;
    if (cramsoc_csr_bridge_last_was_read_axilite2csr_next_value_ce) begin
        cramsoc_csr_bridge_last_was_read <= cramsoc_csr_bridge_last_was_read_axilite2csr_next_value;
    end
    csr_bankarray_dat_r <= 1'd0;
    if (csr_bankarray_sel) begin
        case (csr_bankarray_adr[9:0])
            1'd0: begin
                csr_bankarray_dat_r <= csr_bankarray_load0_w;
            end
            1'd1: begin
                csr_bankarray_dat_r <= csr_bankarray_reload0_w;
            end
            2'd2: begin
                csr_bankarray_dat_r <= csr_bankarray_en0_w;
            end
            2'd3: begin
                csr_bankarray_dat_r <= csr_bankarray_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_dat_r <= csr_bankarray_value_w;
            end
            3'd5: begin
                csr_bankarray_dat_r <= csr_bankarray_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_dat_r <= csr_bankarray_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_dat_r <= csr_bankarray_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_load0_re) begin
        load_storage[31:0] <= csr_bankarray_load0_r;
    end
    load_re <= csr_bankarray_load0_re;
    if (csr_bankarray_reload0_re) begin
        reload_storage[31:0] <= csr_bankarray_reload0_r;
    end
    reload_re <= csr_bankarray_reload0_re;
    if (csr_bankarray_en0_re) begin
        en_storage <= csr_bankarray_en0_r;
    end
    en_re <= csr_bankarray_en0_re;
    if (csr_bankarray_update_value0_re) begin
        update_value_storage <= csr_bankarray_update_value0_r;
    end
    update_value_re <= csr_bankarray_update_value0_re;
    value_re <= csr_bankarray_value_re;
    status_re <= csr_bankarray_ev_status_re;
    if (csr_bankarray_ev_pending_re) begin
        pending_r <= csr_bankarray_ev_pending_r;
    end
    pending_re <= csr_bankarray_ev_pending_re;
    if (csr_bankarray_ev_enable0_re) begin
        enable_storage <= csr_bankarray_ev_enable0_r;
    end
    enable_re <= csr_bankarray_ev_enable0_re;
    if (sys_rst) begin
        dbus_lite_aw_ready <= 1'd0;
        dbus_lite_w_ready <= 1'd0;
        dbus_lite_b_valid <= 1'd0;
        dbus_lite_b_payload_resp <= 2'd0;
        dbus_lite_ar_ready <= 1'd0;
        dbus_lite_r_valid <= 1'd0;
        dbus_lite_r_payload_resp <= 2'd0;
        dbus_lite_r_payload_data <= 32'd0;
        socbushandler_pipe_valid_source_valid <= 1'd0;
        socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        socbushandler_pipe_valid_source_payload_len <= 8'd0;
        socbushandler_pipe_valid_source_payload_size <= 3'd0;
        socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        socbushandler_pipe_valid_source_payload_region <= 4'd0;
        socbushandler_beat_count <= 8'd0;
        socbushandler_beat_offset <= 13'd0;
        socbushandler_cmd_done <= 1'd0;
        socbushandler_last_ar_aw_n <= 1'd0;
        load_storage <= 32'd0;
        load_re <= 1'd0;
        reload_storage <= 32'd0;
        reload_re <= 1'd0;
        en_storage <= 1'd0;
        en_re <= 1'd0;
        update_value_storage <= 1'd0;
        update_value_re <= 1'd0;
        value_status <= 32'd0;
        value_re <= 1'd0;
        zero_pending <= 1'd0;
        zero_trigger_d <= 1'd0;
        status_re <= 1'd0;
        pending_re <= 1'd0;
        pending_r <= 1'd0;
        enable_storage <= 1'd0;
        enable_re <= 1'd0;
        value <= 32'd0;
        vexriscvaxi_debug_reset <= 1'd0;
        vexriscvaxi_reset_debug_logic <= 1'd0;
        p_axi_awvalid <= 1'd0;
        p_axi_awaddr <= 32'd0;
        p_axi_awprot <= 3'd0;
        p_axi_wvalid <= 1'd0;
        p_axi_wdata <= 32'd0;
        p_axi_wstrb <= 4'd0;
        p_axi_bready <= 1'd0;
        p_axi_arvalid <= 1'd0;
        p_axi_araddr <= 32'd0;
        p_axi_arprot <= 3'd0;
        p_axi_rready <= 1'd0;
        cramsoc_csr_bridge_last_was_read <= 1'd0;
        cramsoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        cramsoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        cramsoc_socbushandler_beat_count <= 8'd0;
        cramsoc_socbushandler_beat_offset <= 13'd0;
        cramsoc_socbushandler_cmd_done <= 1'd0;
        cramsoc_socbushandler_last_ar_aw_n <= 1'd0;
        state <= 2'd0;
        cramsoc_vexriscvaxi_state <= 2'd0;
        cramsoc_vexriscvaxi_slave_sel_reg0 <= 2'd0;
        cramsoc_vexriscvaxi_slave_sel_reg1 <= 2'd0;
        cramsoc_vexriscvaxi_axirequestcounter0_counter <= 8'd0;
        cramsoc_vexriscvaxi_axirequestcounter1_counter <= 8'd0;
        cramsoc_vexriscvaxi_axiarbiter0_wr_lock_counter <= 8'd0;
        cramsoc_vexriscvaxi_axiarbiter0_rd_lock_counter <= 8'd0;
        cramsoc_vexriscvaxi_axiarbiter1_wr_lock_counter <= 8'd0;
        cramsoc_vexriscvaxi_axiarbiter1_rd_lock_counter <= 8'd0;
        cramsoc_axilite2csr_state <= 2'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

VexRiscvAxi4 VexRiscvAxi4(
	.clk(sys_clk),
	.dBusAxi_ar_ready(dbus_axi_ar_ready),
	.dBusAxi_aw_ready(dbus_axi_aw_ready),
	.dBusAxi_b_payload_id(dbus_axi_b_param_id),
	.dBusAxi_b_payload_resp(dbus_axi_b_payload_resp),
	.dBusAxi_b_valid(dbus_axi_b_valid),
	.dBusAxi_r_payload_data(dbus_axi_r_payload_data),
	.dBusAxi_r_payload_id(dbus_axi_r_param_id),
	.dBusAxi_r_payload_last(dbus_axi_r_last),
	.dBusAxi_r_payload_resp(dbus_axi_r_payload_resp),
	.dBusAxi_r_valid(dbus_axi_r_valid),
	.dBusAxi_w_ready(dbus_axi_w_ready),
	.debugReset(jtag_trst),
	.externalInterruptArray(interrupt_1),
	.externalResetVector(vexriscvaxi),
	.iBusAxi_ar_ready(ibus_axi_ar_ready),
	.iBusAxi_r_payload_data(ibus_axi_r_payload_data),
	.iBusAxi_r_payload_id(ibus_axi_r_param_id),
	.iBusAxi_r_payload_last(ibus_axi_r_last),
	.iBusAxi_r_payload_resp(ibus_axi_r_payload_resp),
	.iBusAxi_r_valid(ibus_axi_r_valid),
	.jtag_tck(jtag_tck),
	.jtag_tdi(jtag_tdi),
	.jtag_tms(jtag_tms),
	.reset(((sys_rst | reset) | vexriscvaxi_debug_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusAxi_ar_payload_addr(dbus_axi_ar_payload_addr),
	.dBusAxi_ar_payload_burst(dbus_axi_ar_payload_burst),
	.dBusAxi_ar_payload_cache(dbus_axi_ar_payload_cache),
	.dBusAxi_ar_payload_id(dbus_axi_ar_param_id),
	.dBusAxi_ar_payload_len(dbus_axi_ar_payload_len),
	.dBusAxi_ar_payload_lock(dbus_axi_ar_payload_lock),
	.dBusAxi_ar_payload_prot(dbus_axi_ar_payload_prot),
	.dBusAxi_ar_payload_qos(dbus_axi_ar_payload_qos),
	.dBusAxi_ar_payload_region(dbus_axi_ar_payload_region),
	.dBusAxi_ar_payload_size(dbus_axi_ar_payload_size),
	.dBusAxi_ar_valid(dbus_axi_ar_valid),
	.dBusAxi_aw_payload_addr(dbus_axi_aw_payload_addr),
	.dBusAxi_aw_payload_burst(dbus_axi_aw_payload_burst),
	.dBusAxi_aw_payload_cache(dbus_axi_aw_payload_cache),
	.dBusAxi_aw_payload_id(dbus_axi_aw_param_id),
	.dBusAxi_aw_payload_len(dbus_axi_aw_payload_len),
	.dBusAxi_aw_payload_lock(dbus_axi_aw_payload_lock),
	.dBusAxi_aw_payload_prot(dbus_axi_aw_payload_prot),
	.dBusAxi_aw_payload_qos(dbus_axi_aw_payload_qos),
	.dBusAxi_aw_payload_region(dbus_axi_aw_payload_region),
	.dBusAxi_aw_payload_size(dbus_axi_aw_payload_size),
	.dBusAxi_aw_valid(dbus_axi_aw_valid),
	.dBusAxi_b_ready(dbus_axi_b_ready),
	.dBusAxi_r_ready(dbus_axi_r_ready),
	.dBusAxi_w_payload_data(dbus_axi_w_payload_data),
	.dBusAxi_w_payload_last(dbus_axi_w_last),
	.dBusAxi_w_payload_strb(dbus_axi_w_payload_strb),
	.dBusAxi_w_valid(dbus_axi_w_valid),
	.debug_resetOut(vexriscvaxi_o_resetOut),
	.iBusAxi_ar_payload_addr(ibus_axi_ar_payload_addr),
	.iBusAxi_ar_payload_burst(ibus_axi_ar_payload_burst),
	.iBusAxi_ar_payload_cache(ibus_axi_ar_payload_cache),
	.iBusAxi_ar_payload_id(ibus_axi_ar_param_id),
	.iBusAxi_ar_payload_len(ibus_axi_ar_payload_len),
	.iBusAxi_ar_payload_lock(ibus_axi_ar_payload_lock),
	.iBusAxi_ar_payload_prot(ibus_axi_ar_payload_prot),
	.iBusAxi_ar_payload_qos(ibus_axi_ar_payload_qos),
	.iBusAxi_ar_payload_region(ibus_axi_ar_payload_region),
	.iBusAxi_ar_payload_size(ibus_axi_ar_payload_size),
	.iBusAxi_ar_valid(ibus_axi_ar_valid),
	.iBusAxi_r_ready(ibus_axi_r_ready),
	.jtag_tdo(jtag_tdo)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-12-12 17:58:29.
//------------------------------------------------------------------------------
