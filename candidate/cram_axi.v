// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : cram_axi.v
// Device     : 
// LiteX sha1 : f68253f6
// Date       : 2022-12-19 03:36:14
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module cram_axi (
    input  wire          aclk,
    input  wire          rst,
    input  wire   [31:0] trimming_reset,
    input  wire          trimming_reset_ena,
    output wire          ibus_axi_awvalid,
    input  wire          ibus_axi_awready,
    output wire   [31:0] ibus_axi_awaddr,
    output wire    [1:0] ibus_axi_awburst,
    output wire    [7:0] ibus_axi_awlen,
    output wire    [2:0] ibus_axi_awsize,
    output wire          ibus_axi_awlock,
    output wire    [2:0] ibus_axi_awprot,
    output wire    [3:0] ibus_axi_awcache,
    output wire    [3:0] ibus_axi_awqos,
    output wire    [3:0] ibus_axi_awregion,
    output wire          ibus_axi_awid,
    output wire          ibus_axi_awuser,
    output wire          ibus_axi_wvalid,
    input  wire          ibus_axi_wready,
    output wire          ibus_axi_wlast,
    output wire   [63:0] ibus_axi_wdata,
    output wire    [7:0] ibus_axi_wstrb,
    output wire          ibus_axi_wuser,
    input  wire          ibus_axi_bvalid,
    output wire          ibus_axi_bready,
    input  wire    [1:0] ibus_axi_bresp,
    input  wire          ibus_axi_bid,
    input  wire          ibus_axi_buser,
    output wire          ibus_axi_arvalid,
    input  wire          ibus_axi_arready,
    output wire   [31:0] ibus_axi_araddr,
    output wire    [1:0] ibus_axi_arburst,
    output wire    [7:0] ibus_axi_arlen,
    output wire    [2:0] ibus_axi_arsize,
    output wire          ibus_axi_arlock,
    output wire    [2:0] ibus_axi_arprot,
    output wire    [3:0] ibus_axi_arcache,
    output wire    [3:0] ibus_axi_arqos,
    output wire    [3:0] ibus_axi_arregion,
    output wire          ibus_axi_arid,
    output wire          ibus_axi_aruser,
    input  wire          ibus_axi_rvalid,
    output wire          ibus_axi_rready,
    input  wire          ibus_axi_rlast,
    input  wire    [1:0] ibus_axi_rresp,
    input  wire   [63:0] ibus_axi_rdata,
    input  wire          ibus_axi_rid,
    input  wire          ibus_axi_ruser,
    output wire          dbus_axi_awvalid,
    input  wire          dbus_axi_awready,
    output wire   [31:0] dbus_axi_awaddr,
    output wire    [1:0] dbus_axi_awburst,
    output wire    [7:0] dbus_axi_awlen,
    output wire    [2:0] dbus_axi_awsize,
    output wire          dbus_axi_awlock,
    output wire    [2:0] dbus_axi_awprot,
    output wire    [3:0] dbus_axi_awcache,
    output wire    [3:0] dbus_axi_awqos,
    output wire    [3:0] dbus_axi_awregion,
    output wire          dbus_axi_awid,
    output wire          dbus_axi_awuser,
    output wire          dbus_axi_wvalid,
    input  wire          dbus_axi_wready,
    output wire          dbus_axi_wlast,
    output wire   [31:0] dbus_axi_wdata,
    output wire    [3:0] dbus_axi_wstrb,
    output wire          dbus_axi_wuser,
    input  wire          dbus_axi_bvalid,
    output wire          dbus_axi_bready,
    input  wire    [1:0] dbus_axi_bresp,
    input  wire          dbus_axi_bid,
    input  wire          dbus_axi_buser,
    output wire          dbus_axi_arvalid,
    input  wire          dbus_axi_arready,
    output wire   [31:0] dbus_axi_araddr,
    output wire    [1:0] dbus_axi_arburst,
    output wire    [7:0] dbus_axi_arlen,
    output wire    [2:0] dbus_axi_arsize,
    output wire          dbus_axi_arlock,
    output wire    [2:0] dbus_axi_arprot,
    output wire    [3:0] dbus_axi_arcache,
    output wire    [3:0] dbus_axi_arqos,
    output wire    [3:0] dbus_axi_arregion,
    output wire          dbus_axi_arid,
    output wire          dbus_axi_aruser,
    input  wire          dbus_axi_rvalid,
    output wire          dbus_axi_rready,
    input  wire          dbus_axi_rlast,
    input  wire    [1:0] dbus_axi_rresp,
    input  wire   [31:0] dbus_axi_rdata,
    input  wire          dbus_axi_rid,
    input  wire          dbus_axi_ruser,
    output reg           p_axi_awvalid,
    input  wire          p_axi_awready,
    output reg    [31:0] p_axi_awaddr,
    output reg     [2:0] p_axi_awprot,
    output reg           p_axi_wvalid,
    input  wire          p_axi_wready,
    output reg    [31:0] p_axi_wdata,
    output reg     [3:0] p_axi_wstrb,
    input  wire          p_axi_bvalid,
    output reg           p_axi_bready,
    input  wire    [1:0] p_axi_bresp,
    output reg           p_axi_arvalid,
    input  wire          p_axi_arready,
    output reg    [31:0] p_axi_araddr,
    output reg     [2:0] p_axi_arprot,
    input  wire          p_axi_rvalid,
    output reg           p_axi_rready,
    input  wire    [1:0] p_axi_rresp,
    input  wire   [31:0] p_axi_rdata,
    input  wire          jtag_tdi,
    output wire          jtag_tdo,
    input  wire          jtag_tms,
    input  wire          jtag_tck,
    input  wire          jtag_trst,
    input  wire   [31:0] interrupt
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
wire          por_clk;
reg           int_rst = 1'd1;
reg           reset = 1'd0;
wire   [31:0] interrupt_1;
wire   [31:0] trimming_reset0;
wire          trimming_reset_ena0;
reg           ibus_axi_aw_valid = 1'd0;
wire          ibus_axi_aw_ready;
reg    [31:0] ibus_axi_aw_payload_addr = 32'd0;
reg     [1:0] ibus_axi_aw_payload_burst = 2'd0;
reg     [7:0] ibus_axi_aw_payload_len = 8'd0;
reg     [2:0] ibus_axi_aw_payload_size = 3'd0;
reg           ibus_axi_aw_payload_lock = 1'd0;
reg     [2:0] ibus_axi_aw_payload_prot = 3'd0;
reg     [3:0] ibus_axi_aw_payload_cache = 4'd0;
reg     [3:0] ibus_axi_aw_payload_qos = 4'd0;
reg     [3:0] ibus_axi_aw_payload_region = 4'd0;
reg           ibus_axi_aw_param_id = 1'd0;
reg           ibus_axi_aw_param_user = 1'd0;
reg           ibus_axi_w_valid = 1'd0;
wire          ibus_axi_w_ready;
reg           ibus_axi_w_last = 1'd0;
reg    [63:0] ibus_axi_w_payload_data = 64'd0;
reg     [7:0] ibus_axi_w_payload_strb = 8'd0;
reg           ibus_axi_w_param_user = 1'd0;
wire          ibus_axi_b_valid;
reg           ibus_axi_b_ready = 1'd0;
wire    [1:0] ibus_axi_b_payload_resp;
wire          ibus_axi_b_param_id;
wire          ibus_axi_b_param_user;
wire          ibus_axi_ar_valid;
wire          ibus_axi_ar_ready;
wire   [31:0] ibus_axi_ar_payload_addr;
wire    [1:0] ibus_axi_ar_payload_burst;
wire    [7:0] ibus_axi_ar_payload_len;
wire    [2:0] ibus_axi_ar_payload_size;
wire          ibus_axi_ar_payload_lock;
wire    [2:0] ibus_axi_ar_payload_prot;
wire    [3:0] ibus_axi_ar_payload_cache;
wire    [3:0] ibus_axi_ar_payload_qos;
wire    [3:0] ibus_axi_ar_payload_region;
wire          ibus_axi_ar_param_id;
reg           ibus_axi_ar_param_user = 1'd0;
wire          ibus_axi_r_valid;
wire          ibus_axi_r_ready;
wire          ibus_axi_r_last;
wire    [1:0] ibus_axi_r_payload_resp;
wire   [63:0] ibus_axi_r_payload_data;
wire          ibus_axi_r_param_id;
wire          ibus_axi_r_param_user;
wire          dbus_axi_aw_valid;
wire          dbus_axi_aw_ready;
wire   [31:0] dbus_axi_aw_payload_addr;
wire    [1:0] dbus_axi_aw_payload_burst;
wire    [7:0] dbus_axi_aw_payload_len;
wire    [2:0] dbus_axi_aw_payload_size;
wire          dbus_axi_aw_payload_lock;
wire    [2:0] dbus_axi_aw_payload_prot;
wire    [3:0] dbus_axi_aw_payload_cache;
wire    [3:0] dbus_axi_aw_payload_qos;
wire    [3:0] dbus_axi_aw_payload_region;
wire          dbus_axi_aw_param_id;
reg           dbus_axi_aw_param_user = 1'd0;
wire          dbus_axi_w_valid;
wire          dbus_axi_w_ready;
wire          dbus_axi_w_last;
wire   [31:0] dbus_axi_w_payload_data;
wire    [3:0] dbus_axi_w_payload_strb;
reg           dbus_axi_w_param_user = 1'd0;
wire          dbus_axi_b_valid;
wire          dbus_axi_b_ready;
wire    [1:0] dbus_axi_b_payload_resp;
wire          dbus_axi_b_param_id;
wire          dbus_axi_b_param_user;
wire          dbus_axi_ar_valid;
wire          dbus_axi_ar_ready;
wire   [31:0] dbus_axi_ar_payload_addr;
wire    [1:0] dbus_axi_ar_payload_burst;
wire    [7:0] dbus_axi_ar_payload_len;
wire    [2:0] dbus_axi_ar_payload_size;
wire          dbus_axi_ar_payload_lock;
wire    [2:0] dbus_axi_ar_payload_prot;
wire    [3:0] dbus_axi_ar_payload_cache;
wire    [3:0] dbus_axi_ar_payload_qos;
wire    [3:0] dbus_axi_ar_payload_region;
wire          dbus_axi_ar_param_id;
reg           dbus_axi_ar_param_user = 1'd0;
wire          dbus_axi_r_valid;
wire          dbus_axi_r_ready;
wire          dbus_axi_r_last;
wire    [1:0] dbus_axi_r_payload_resp;
wire   [31:0] dbus_axi_r_payload_data;
wire          dbus_axi_r_param_id;
wire          dbus_axi_r_param_user;
wire          dbus_peri_aw_valid;
wire          dbus_peri_aw_ready;
wire   [31:0] dbus_peri_aw_payload_addr;
wire    [1:0] dbus_peri_aw_payload_burst;
wire    [7:0] dbus_peri_aw_payload_len;
wire    [2:0] dbus_peri_aw_payload_size;
wire          dbus_peri_aw_payload_lock;
wire    [2:0] dbus_peri_aw_payload_prot;
wire    [3:0] dbus_peri_aw_payload_cache;
wire    [3:0] dbus_peri_aw_payload_qos;
wire    [3:0] dbus_peri_aw_payload_region;
wire          dbus_peri_aw_param_id;
wire          dbus_peri_aw_param_user;
wire          dbus_peri_w_valid;
wire          dbus_peri_w_ready;
wire          dbus_peri_w_last;
wire   [31:0] dbus_peri_w_payload_data;
wire    [3:0] dbus_peri_w_payload_strb;
wire          dbus_peri_w_param_user;
wire          dbus_peri_b_valid;
wire          dbus_peri_b_ready;
wire    [1:0] dbus_peri_b_payload_resp;
wire          dbus_peri_b_param_id;
reg           dbus_peri_b_param_user = 1'd0;
wire          dbus_peri_ar_valid;
wire          dbus_peri_ar_ready;
wire   [31:0] dbus_peri_ar_payload_addr;
wire    [1:0] dbus_peri_ar_payload_burst;
wire    [7:0] dbus_peri_ar_payload_len;
wire    [2:0] dbus_peri_ar_payload_size;
wire          dbus_peri_ar_payload_lock;
wire    [2:0] dbus_peri_ar_payload_prot;
wire    [3:0] dbus_peri_ar_payload_cache;
wire    [3:0] dbus_peri_ar_payload_qos;
wire    [3:0] dbus_peri_ar_payload_region;
wire          dbus_peri_ar_param_id;
wire          dbus_peri_ar_param_user;
wire          dbus_peri_r_valid;
wire          dbus_peri_r_ready;
wire          dbus_peri_r_last;
wire    [1:0] dbus_peri_r_payload_resp;
wire   [31:0] dbus_peri_r_payload_data;
wire          dbus_peri_r_param_id;
reg           dbus_peri_r_param_user = 1'd0;
wire          peripherals_aw_valid;
reg           peripherals_aw_ready = 1'd0;
wire   [31:0] peripherals_aw_payload_addr;
reg     [2:0] peripherals_aw_payload_prot = 3'd0;
wire          peripherals_w_valid;
reg           peripherals_w_ready = 1'd0;
wire   [31:0] peripherals_w_payload_data;
wire    [3:0] peripherals_w_payload_strb;
reg           peripherals_b_valid = 1'd0;
wire          peripherals_b_ready;
reg     [1:0] peripherals_b_payload_resp = 2'd0;
wire          peripherals_ar_valid;
reg           peripherals_ar_ready = 1'd0;
wire   [31:0] peripherals_ar_payload_addr;
reg     [2:0] peripherals_ar_payload_prot = 3'd0;
reg           peripherals_r_valid = 1'd0;
wire          peripherals_r_ready;
reg     [1:0] peripherals_r_payload_resp = 2'd0;
reg    [31:0] peripherals_r_payload_data = 32'd0;
wire          axi2axiliteadapter00;
wire          axi2axiliteadapter01;
wire          axi_csr_aw_valid;
wire          axi_csr_aw_ready;
wire   [31:0] axi_csr_aw_payload_addr;
wire    [1:0] axi_csr_aw_payload_burst;
wire    [7:0] axi_csr_aw_payload_len;
wire    [2:0] axi_csr_aw_payload_size;
wire          axi_csr_aw_payload_lock;
wire    [2:0] axi_csr_aw_payload_prot;
wire    [3:0] axi_csr_aw_payload_cache;
wire    [3:0] axi_csr_aw_payload_qos;
wire    [3:0] axi_csr_aw_payload_region;
wire          axi_csr_aw_param_id;
wire          axi_csr_aw_param_user;
wire          axi_csr_w_valid;
wire          axi_csr_w_ready;
wire          axi_csr_w_last;
wire   [31:0] axi_csr_w_payload_data;
wire    [3:0] axi_csr_w_payload_strb;
wire          axi_csr_w_param_user;
wire          axi_csr_b_valid;
wire          axi_csr_b_ready;
wire    [1:0] axi_csr_b_payload_resp;
wire          axi_csr_b_param_id;
reg           axi_csr_b_param_user = 1'd0;
wire          axi_csr_ar_valid;
wire          axi_csr_ar_ready;
wire   [31:0] axi_csr_ar_payload_addr;
wire    [1:0] axi_csr_ar_payload_burst;
wire    [7:0] axi_csr_ar_payload_len;
wire    [2:0] axi_csr_ar_payload_size;
wire          axi_csr_ar_payload_lock;
wire    [2:0] axi_csr_ar_payload_prot;
wire    [3:0] axi_csr_ar_payload_cache;
wire    [3:0] axi_csr_ar_payload_qos;
wire    [3:0] axi_csr_ar_payload_region;
wire          axi_csr_ar_param_id;
wire          axi_csr_ar_param_user;
wire          axi_csr_r_valid;
wire          axi_csr_r_ready;
wire          axi_csr_r_last;
wire    [1:0] axi_csr_r_payload_resp;
wire   [31:0] axi_csr_r_payload_data;
wire          axi_csr_r_param_id;
reg           axi_csr_r_param_user = 1'd0;
wire          corecsr_aw_valid;
wire          corecsr_aw_ready;
reg           corecsr_aw_first = 1'd0;
reg           corecsr_aw_last = 1'd0;
wire   [31:0] corecsr_aw_payload_addr;
reg     [2:0] corecsr_aw_payload_prot = 3'd0;
wire          corecsr_w_valid;
wire          corecsr_w_ready;
reg           corecsr_w_first = 1'd0;
reg           corecsr_w_last = 1'd0;
wire   [31:0] corecsr_w_payload_data;
wire    [3:0] corecsr_w_payload_strb;
wire          corecsr_b_valid;
wire          corecsr_b_ready;
wire          corecsr_b_first;
wire          corecsr_b_last;
wire    [1:0] corecsr_b_payload_resp;
wire          corecsr_ar_valid;
wire          corecsr_ar_ready;
reg           corecsr_ar_first = 1'd0;
reg           corecsr_ar_last = 1'd0;
wire   [31:0] corecsr_ar_payload_addr;
reg     [2:0] corecsr_ar_payload_prot = 3'd0;
wire          corecsr_r_valid;
wire          corecsr_r_ready;
wire          corecsr_r_first;
wire          corecsr_r_last;
wire    [1:0] corecsr_r_payload_resp;
wire   [31:0] corecsr_r_payload_data;
wire          axi2axiliteadapter10;
wire          axi2axiliteadapter11;
wire          dbus_aw_valid;
wire          dbus_aw_ready;
wire   [31:0] dbus_aw_payload_addr;
wire    [1:0] dbus_aw_payload_burst;
wire    [7:0] dbus_aw_payload_len;
wire    [2:0] dbus_aw_payload_size;
wire          dbus_aw_payload_lock;
wire    [2:0] dbus_aw_payload_prot;
wire    [3:0] dbus_aw_payload_cache;
wire    [3:0] dbus_aw_payload_qos;
wire    [3:0] dbus_aw_payload_region;
wire          dbus_aw_param_id;
wire          dbus_aw_param_user;
wire          dbus_w_valid;
wire          dbus_w_ready;
wire          dbus_w_last;
wire   [31:0] dbus_w_payload_data;
wire    [3:0] dbus_w_payload_strb;
wire          dbus_w_param_user;
wire          dbus_b_valid;
wire          dbus_b_ready;
wire    [1:0] dbus_b_payload_resp;
wire          dbus_b_param_id;
wire          dbus_b_param_user;
wire          dbus_ar_valid;
wire          dbus_ar_ready;
wire   [31:0] dbus_ar_payload_addr;
wire    [1:0] dbus_ar_payload_burst;
wire    [7:0] dbus_ar_payload_len;
wire    [2:0] dbus_ar_payload_size;
wire          dbus_ar_payload_lock;
wire    [2:0] dbus_ar_payload_prot;
wire    [3:0] dbus_ar_payload_cache;
wire    [3:0] dbus_ar_payload_qos;
wire    [3:0] dbus_ar_payload_region;
wire          dbus_ar_param_id;
wire          dbus_ar_param_user;
wire          dbus_r_valid;
wire          dbus_r_ready;
wire          dbus_r_last;
wire    [1:0] dbus_r_payload_resp;
wire   [31:0] dbus_r_payload_data;
wire          dbus_r_param_id;
wire          dbus_r_param_user;
reg    [31:0] vexriscvaxi_reset_mux = 32'd1610612736;
reg    [31:0] vexriscvaxi = 32'd1610612736;
reg           debug_reset = 1'd0;
wire          o_resetOut;
reg           reset_debug_logic = 1'd0;
wire   [31:0] trimming_reset1;
wire          trimming_reset_ena1;
wire   [31:0] status;
wire          we;
reg           re = 1'd0;
reg    [31:0] latched_value = 32'd0;
reg    [31:0] csr_wtest_storage = 32'd0;
reg           csr_wtest_re = 1'd0;
wire   [31:0] csr_rtest_status;
wire          csr_rtest_we;
reg           csr_rtest_re = 1'd0;
reg    [15:0] cramsoc_adr = 16'd0;
wire          cramsoc_we;
wire   [31:0] cramsoc_dat_w;
wire   [31:0] cramsoc_dat_r;
wire          cramsoc_re;
wire          cramsoc_aw_valid;
wire          cramsoc_aw_ready;
wire          cramsoc_aw_first;
wire          cramsoc_aw_last;
wire   [31:0] cramsoc_aw_payload_addr;
wire    [2:0] cramsoc_aw_payload_prot;
wire          cramsoc_w_valid;
wire          cramsoc_w_ready;
wire          cramsoc_w_first;
wire          cramsoc_w_last;
wire   [31:0] cramsoc_w_payload_data;
wire    [3:0] cramsoc_w_payload_strb;
wire          cramsoc_b_valid;
wire          cramsoc_b_ready;
reg           cramsoc_b_first = 1'd0;
reg           cramsoc_b_last = 1'd0;
reg     [1:0] cramsoc_b_payload_resp = 2'd0;
wire          cramsoc_ar_valid;
wire          cramsoc_ar_ready;
wire          cramsoc_ar_first;
wire          cramsoc_ar_last;
wire   [31:0] cramsoc_ar_payload_addr;
wire    [2:0] cramsoc_ar_payload_prot;
wire          cramsoc_r_valid;
wire          cramsoc_r_ready;
reg           cramsoc_r_first = 1'd0;
reg           cramsoc_r_last = 1'd0;
reg     [1:0] cramsoc_r_payload_resp = 2'd0;
reg    [31:0] cramsoc_r_payload_data = 32'd0;
reg           cramsoc_do_read = 1'd0;
reg           cramsoc_do_write = 1'd0;
reg           cramsoc_last_was_read = 1'd0;
reg           cramsoc_nocomb_axl_r_valid = 1'd0;
reg           cramsoc_nocomb_axl_w_ready = 1'd0;
reg           cramsoc_nocomb_axl_aw_ready = 1'd0;
reg           cramsoc_nocomb_axl_ar_ready = 1'd0;
reg           cramsoc_nocomb_axl_b_valid = 1'd0;
wire          socbushandler_aw_valid;
reg           socbushandler_aw_ready = 1'd0;
wire          socbushandler_aw_first;
wire          socbushandler_aw_last;
wire   [31:0] socbushandler_aw_payload_addr;
wire    [2:0] socbushandler_aw_payload_prot;
wire          socbushandler_w_valid;
reg           socbushandler_w_ready = 1'd0;
wire          socbushandler_w_first;
wire          socbushandler_w_last;
wire   [31:0] socbushandler_w_payload_data;
wire    [3:0] socbushandler_w_payload_strb;
reg           socbushandler_b_valid = 1'd0;
wire          socbushandler_b_ready;
wire          socbushandler_b_first;
wire          socbushandler_b_last;
wire    [1:0] socbushandler_b_payload_resp;
wire          socbushandler_ar_valid;
reg           socbushandler_ar_ready = 1'd0;
wire          socbushandler_ar_first;
wire          socbushandler_ar_last;
wire   [31:0] socbushandler_ar_payload_addr;
wire    [2:0] socbushandler_ar_payload_prot;
reg           socbushandler_r_valid = 1'd0;
wire          socbushandler_r_ready;
wire          socbushandler_r_first;
wire          socbushandler_r_last;
wire    [1:0] socbushandler_r_payload_resp;
wire   [31:0] socbushandler_r_payload_data;
wire          socbushandler_slave_sel_dec0;
wire          socbushandler_slave_sel_dec1;
reg           socbushandler_slave_sel_reg0 = 1'd0;
reg           socbushandler_slave_sel_reg1 = 1'd0;
reg           socbushandler_slave_sel0 = 1'd0;
reg           socbushandler_slave_sel1 = 1'd0;
reg     [7:0] socbushandler_axiliterequestcounter0_counter = 8'd0;
wire          socbushandler_axiliterequestcounter0_full;
wire          socbushandler_axiliterequestcounter0_empty;
wire          socbushandler_axiliterequestcounter0_stall;
reg     [7:0] socbushandler_axiliterequestcounter1_counter = 8'd0;
wire          socbushandler_axiliterequestcounter1_full;
wire          socbushandler_axiliterequestcounter1_empty;
wire          socbushandler_axiliterequestcounter1_stall;
wire          socbushandler_rr_write_request;
wire          socbushandler_rr_write_grant;
wire          socbushandler_rr_write_ce;
wire          socbushandler_rr_read_request;
wire          socbushandler_rr_read_grant;
wire          socbushandler_rr_read_ce;
reg     [7:0] socbushandler_wr_lock_counter = 8'd0;
wire          socbushandler_wr_lock_full;
wire          socbushandler_wr_lock_empty;
wire          socbushandler_wr_lock_stall;
reg     [7:0] socbushandler_rd_lock_counter = 8'd0;
wire          socbushandler_rd_lock_full;
wire          socbushandler_rd_lock_empty;
wire          socbushandler_rd_lock_stall;
wire   [15:0] interface0_adr;
wire          interface0_we;
wire   [31:0] interface0_dat_w;
reg    [31:0] interface0_dat_r = 32'd0;
wire          interface0_re;
reg           csrbank0_wtest0_re = 1'd0;
wire   [31:0] csrbank0_wtest0_r;
reg           csrbank0_wtest0_we = 1'd0;
wire   [31:0] csrbank0_wtest0_w;
reg           csrbank0_rtest_re = 1'd0;
wire   [31:0] csrbank0_rtest_r;
reg           csrbank0_rtest_we = 1'd0;
wire   [31:0] csrbank0_rtest_w;
wire          csrbank0_sel;
wire          csrbank0_re;
wire   [15:0] interface1_adr;
wire          interface1_we;
wire   [31:0] interface1_dat_w;
reg    [31:0] interface1_dat_r = 32'd0;
wire          interface1_re;
reg           csrbank1_pc_re = 1'd0;
wire   [31:0] csrbank1_pc_r;
reg           csrbank1_pc_we = 1'd0;
wire   [31:0] csrbank1_pc_w;
wire          csrbank1_sel;
wire          csrbank1_re;
wire   [15:0] csr_interconnect_adr;
wire          csr_interconnect_we;
wire   [31:0] csr_interconnect_dat_w;
wire   [31:0] csr_interconnect_dat_r;
wire          csr_interconnect_re;
reg     [1:0] cramsoc_state = 2'd0;
reg     [1:0] cramsoc_next_state = 2'd0;
reg           cramsoc_last_was_read_next_value = 1'd0;
reg           cramsoc_last_was_read_next_value_ce = 1'd0;
wire   [29:0] slice_proxy0;
wire   [29:0] slice_proxy1;
reg           array_muxed0 = 1'd0;
reg           array_muxed1 = 1'd0;
reg           array_muxed2 = 1'd0;
reg    [31:0] array_muxed3 = 32'd0;
reg     [2:0] array_muxed4 = 3'd0;
reg           array_muxed5 = 1'd0;
reg           array_muxed6 = 1'd0;
reg           array_muxed7 = 1'd0;
reg    [31:0] array_muxed8 = 32'd0;
reg     [3:0] array_muxed9 = 4'd0;
reg           array_muxed10 = 1'd0;
reg           array_muxed11 = 1'd0;
reg           array_muxed12 = 1'd0;
reg           array_muxed13 = 1'd0;
reg    [31:0] array_muxed14 = 32'd0;
reg     [2:0] array_muxed15 = 3'd0;
reg           array_muxed16 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign trimming_reset1 = trimming_reset;
assign trimming_reset_ena1 = trimming_reset_ena;
assign trimming_reset0 = trimming_reset1;
assign trimming_reset_ena0 = trimming_reset_ena1;
assign ibus_axi_awvalid = ibus_axi_aw_valid;
assign ibus_axi_awaddr = ibus_axi_aw_payload_addr;
assign ibus_axi_awburst = ibus_axi_aw_payload_burst;
assign ibus_axi_awlen = ibus_axi_aw_payload_len;
assign ibus_axi_awsize = ibus_axi_aw_payload_size;
assign ibus_axi_awlock = ibus_axi_aw_payload_lock;
assign ibus_axi_awprot = ibus_axi_aw_payload_prot;
assign ibus_axi_awcache = ibus_axi_aw_payload_cache;
assign ibus_axi_awqos = ibus_axi_aw_payload_qos;
assign ibus_axi_awregion = ibus_axi_aw_payload_region;
assign ibus_axi_awid = ibus_axi_aw_param_id;
assign ibus_axi_awuser = ibus_axi_aw_param_user;
assign ibus_axi_aw_ready = ibus_axi_awready;
assign ibus_axi_wvalid = ibus_axi_w_valid;
assign ibus_axi_wdata = ibus_axi_w_payload_data;
assign ibus_axi_wstrb = ibus_axi_w_payload_strb;
assign ibus_axi_wuser = ibus_axi_w_param_user;
assign ibus_axi_wlast = ibus_axi_w_last;
assign ibus_axi_w_ready = ibus_axi_wready;
assign ibus_axi_b_valid = ibus_axi_bvalid;
assign ibus_axi_b_payload_resp = ibus_axi_bresp;
assign ibus_axi_b_param_id = ibus_axi_bid;
assign ibus_axi_b_param_user = ibus_axi_buser;
assign ibus_axi_bready = ibus_axi_b_ready;
assign ibus_axi_arvalid = ibus_axi_ar_valid;
assign ibus_axi_araddr = ibus_axi_ar_payload_addr;
assign ibus_axi_arburst = ibus_axi_ar_payload_burst;
assign ibus_axi_arlen = ibus_axi_ar_payload_len;
assign ibus_axi_arsize = ibus_axi_ar_payload_size;
assign ibus_axi_arlock = ibus_axi_ar_payload_lock;
assign ibus_axi_arprot = ibus_axi_ar_payload_prot;
assign ibus_axi_arcache = ibus_axi_ar_payload_cache;
assign ibus_axi_arqos = ibus_axi_ar_payload_qos;
assign ibus_axi_arregion = ibus_axi_ar_payload_region;
assign ibus_axi_arid = ibus_axi_ar_param_id;
assign ibus_axi_aruser = ibus_axi_ar_param_user;
assign ibus_axi_ar_ready = ibus_axi_arready;
assign ibus_axi_r_valid = ibus_axi_rvalid;
assign ibus_axi_r_payload_resp = ibus_axi_rresp;
assign ibus_axi_r_payload_data = ibus_axi_rdata;
assign ibus_axi_r_param_id = ibus_axi_rid;
assign ibus_axi_r_param_user = ibus_axi_ruser;
assign ibus_axi_r_last = ibus_axi_rlast;
assign ibus_axi_rready = ibus_axi_r_ready;
assign dbus_axi_awvalid = dbus_aw_valid;
assign dbus_axi_awaddr = dbus_aw_payload_addr;
assign dbus_axi_awburst = dbus_aw_payload_burst;
assign dbus_axi_awlen = dbus_aw_payload_len;
assign dbus_axi_awsize = dbus_aw_payload_size;
assign dbus_axi_awlock = dbus_aw_payload_lock;
assign dbus_axi_awprot = dbus_aw_payload_prot;
assign dbus_axi_awcache = dbus_aw_payload_cache;
assign dbus_axi_awqos = dbus_aw_payload_qos;
assign dbus_axi_awregion = dbus_aw_payload_region;
assign dbus_axi_awid = dbus_aw_param_id;
assign dbus_axi_awuser = dbus_aw_param_user;
assign dbus_aw_ready = dbus_axi_awready;
assign dbus_axi_wvalid = dbus_w_valid;
assign dbus_axi_wdata = dbus_w_payload_data;
assign dbus_axi_wstrb = dbus_w_payload_strb;
assign dbus_axi_wuser = dbus_w_param_user;
assign dbus_axi_wlast = dbus_w_last;
assign dbus_w_ready = dbus_axi_wready;
assign dbus_b_valid = dbus_axi_bvalid;
assign dbus_b_payload_resp = dbus_axi_bresp;
assign dbus_b_param_id = dbus_axi_bid;
assign dbus_b_param_user = dbus_axi_buser;
assign dbus_axi_bready = dbus_b_ready;
assign dbus_axi_arvalid = dbus_ar_valid;
assign dbus_axi_araddr = dbus_ar_payload_addr;
assign dbus_axi_arburst = dbus_ar_payload_burst;
assign dbus_axi_arlen = dbus_ar_payload_len;
assign dbus_axi_arsize = dbus_ar_payload_size;
assign dbus_axi_arlock = dbus_ar_payload_lock;
assign dbus_axi_arprot = dbus_ar_payload_prot;
assign dbus_axi_arcache = dbus_ar_payload_cache;
assign dbus_axi_arqos = dbus_ar_payload_qos;
assign dbus_axi_arregion = dbus_ar_payload_region;
assign dbus_axi_arid = dbus_ar_param_id;
assign dbus_axi_aruser = dbus_ar_param_user;
assign dbus_ar_ready = dbus_axi_arready;
assign dbus_r_valid = dbus_axi_rvalid;
assign dbus_r_payload_resp = dbus_axi_rresp;
assign dbus_r_payload_data = dbus_axi_rdata;
assign dbus_r_param_id = dbus_axi_rid;
assign dbus_r_param_user = dbus_axi_ruser;
assign dbus_r_last = dbus_axi_rlast;
assign dbus_axi_rready = dbus_r_ready;
assign interrupt_1 = interrupt;
assign sys_clk = aclk;
assign por_clk = aclk;
assign sys_rst = int_rst;
assign socbushandler_slave_sel_dec0 = (slice_proxy0[29:16] == 13'd5632);
assign socbushandler_slave_sel_dec1 = (slice_proxy1[29:16] == 13'd5632);
always @(*) begin
    socbushandler_slave_sel0 <= 1'd0;
    if (socbushandler_axiliterequestcounter0_empty) begin
        socbushandler_slave_sel0 <= socbushandler_slave_sel_dec0;
    end else begin
        socbushandler_slave_sel0 <= socbushandler_slave_sel_reg0;
    end
end
always @(*) begin
    socbushandler_slave_sel1 <= 1'd0;
    if (socbushandler_axiliterequestcounter1_empty) begin
        socbushandler_slave_sel1 <= socbushandler_slave_sel_dec1;
    end else begin
        socbushandler_slave_sel1 <= socbushandler_slave_sel_reg1;
    end
end
assign socbushandler_aw_valid = (corecsr_aw_valid & socbushandler_slave_sel0);
assign socbushandler_aw_first = corecsr_aw_first;
assign socbushandler_aw_last = corecsr_aw_last;
assign socbushandler_aw_payload_addr = corecsr_aw_payload_addr;
assign socbushandler_aw_payload_prot = corecsr_aw_payload_prot;
assign socbushandler_w_valid = (corecsr_w_valid & socbushandler_slave_sel0);
assign socbushandler_w_first = corecsr_w_first;
assign socbushandler_w_last = corecsr_w_last;
assign socbushandler_w_payload_data = corecsr_w_payload_data;
assign socbushandler_w_payload_strb = corecsr_w_payload_strb;
assign socbushandler_b_ready = (corecsr_b_ready & socbushandler_slave_sel0);
assign socbushandler_ar_valid = (corecsr_ar_valid & socbushandler_slave_sel1);
assign socbushandler_ar_first = corecsr_ar_first;
assign socbushandler_ar_last = corecsr_ar_last;
assign socbushandler_ar_payload_addr = corecsr_ar_payload_addr;
assign socbushandler_ar_payload_prot = corecsr_ar_payload_prot;
assign socbushandler_r_ready = (corecsr_r_ready & socbushandler_slave_sel1);
assign corecsr_aw_ready = (socbushandler_aw_ready & {1{socbushandler_slave_sel0}});
assign corecsr_w_ready = (socbushandler_w_ready & {1{socbushandler_slave_sel0}});
assign corecsr_b_valid = (socbushandler_b_valid & {1{socbushandler_slave_sel0}});
assign corecsr_b_first = (socbushandler_b_first & {1{socbushandler_slave_sel0}});
assign corecsr_b_last = (socbushandler_b_last & {1{socbushandler_slave_sel0}});
assign corecsr_b_payload_resp = (socbushandler_b_payload_resp & {2{socbushandler_slave_sel0}});
assign corecsr_ar_ready = (socbushandler_ar_ready & {1{socbushandler_slave_sel1}});
assign corecsr_r_valid = (socbushandler_r_valid & {1{socbushandler_slave_sel1}});
assign corecsr_r_first = (socbushandler_r_first & {1{socbushandler_slave_sel1}});
assign corecsr_r_last = (socbushandler_r_last & {1{socbushandler_slave_sel1}});
assign corecsr_r_payload_resp = (socbushandler_r_payload_resp & {2{socbushandler_slave_sel1}});
assign corecsr_r_payload_data = (socbushandler_r_payload_data & {32{socbushandler_slave_sel1}});
assign socbushandler_axiliterequestcounter0_full = (socbushandler_axiliterequestcounter0_counter == 8'd255);
assign socbushandler_axiliterequestcounter0_empty = (socbushandler_axiliterequestcounter0_counter == 1'd0);
assign socbushandler_axiliterequestcounter0_stall = ((corecsr_aw_valid & corecsr_aw_ready) & socbushandler_axiliterequestcounter0_full);
assign socbushandler_axiliterequestcounter1_full = (socbushandler_axiliterequestcounter1_counter == 8'd255);
assign socbushandler_axiliterequestcounter1_empty = (socbushandler_axiliterequestcounter1_counter == 1'd0);
assign socbushandler_axiliterequestcounter1_stall = ((corecsr_ar_valid & corecsr_ar_ready) & socbushandler_axiliterequestcounter1_full);
assign cramsoc_aw_valid = array_muxed0;
assign cramsoc_aw_first = array_muxed1;
assign cramsoc_aw_last = array_muxed2;
assign cramsoc_aw_payload_addr = array_muxed3;
assign cramsoc_aw_payload_prot = array_muxed4;
assign cramsoc_w_valid = array_muxed5;
assign cramsoc_w_first = array_muxed6;
assign cramsoc_w_last = array_muxed7;
assign cramsoc_w_payload_data = array_muxed8;
assign cramsoc_w_payload_strb = array_muxed9;
assign cramsoc_b_ready = array_muxed10;
assign cramsoc_ar_valid = array_muxed11;
assign cramsoc_ar_first = array_muxed12;
assign cramsoc_ar_last = array_muxed13;
assign cramsoc_ar_payload_addr = array_muxed14;
assign cramsoc_ar_payload_prot = array_muxed15;
assign cramsoc_r_ready = array_muxed16;
always @(*) begin
    socbushandler_aw_ready <= 1'd0;
    if ((socbushandler_rr_write_grant == 1'd0)) begin
        socbushandler_aw_ready <= cramsoc_aw_ready;
    end
end
always @(*) begin
    socbushandler_w_ready <= 1'd0;
    if ((socbushandler_rr_write_grant == 1'd0)) begin
        socbushandler_w_ready <= cramsoc_w_ready;
    end
end
always @(*) begin
    socbushandler_b_valid <= 1'd0;
    if ((socbushandler_rr_write_grant == 1'd0)) begin
        socbushandler_b_valid <= cramsoc_b_valid;
    end
end
assign socbushandler_b_first = cramsoc_b_first;
assign socbushandler_b_last = cramsoc_b_last;
assign socbushandler_b_payload_resp = cramsoc_b_payload_resp;
always @(*) begin
    socbushandler_ar_ready <= 1'd0;
    if ((socbushandler_rr_read_grant == 1'd0)) begin
        socbushandler_ar_ready <= cramsoc_ar_ready;
    end
end
always @(*) begin
    socbushandler_r_valid <= 1'd0;
    if ((socbushandler_rr_read_grant == 1'd0)) begin
        socbushandler_r_valid <= cramsoc_r_valid;
    end
end
assign socbushandler_r_first = cramsoc_r_first;
assign socbushandler_r_last = cramsoc_r_last;
assign socbushandler_r_payload_resp = cramsoc_r_payload_resp;
assign socbushandler_r_payload_data = cramsoc_r_payload_data;
assign socbushandler_rr_write_ce = ((~((cramsoc_aw_valid | cramsoc_w_valid) | cramsoc_b_valid)) & socbushandler_wr_lock_empty);
assign socbushandler_rr_read_ce = ((~(cramsoc_ar_valid | cramsoc_r_valid)) & socbushandler_rd_lock_empty);
assign socbushandler_rr_write_request = {((socbushandler_aw_valid | socbushandler_w_valid) | socbushandler_b_valid)};
assign socbushandler_rr_read_request = {(socbushandler_ar_valid | socbushandler_r_valid)};
assign socbushandler_rr_write_grant = 1'd0;
assign socbushandler_rr_read_grant = 1'd0;
assign socbushandler_wr_lock_full = (socbushandler_wr_lock_counter == 8'd255);
assign socbushandler_wr_lock_empty = (socbushandler_wr_lock_counter == 1'd0);
assign socbushandler_wr_lock_stall = ((cramsoc_aw_valid & cramsoc_aw_ready) & socbushandler_wr_lock_full);
assign socbushandler_rd_lock_full = (socbushandler_rd_lock_counter == 8'd255);
assign socbushandler_rd_lock_empty = (socbushandler_rd_lock_counter == 1'd0);
assign socbushandler_rd_lock_stall = ((cramsoc_ar_valid & cramsoc_ar_ready) & socbushandler_rd_lock_full);
always @(*) begin
    vexriscvaxi_reset_mux <= 32'd1610612736;
    if (trimming_reset_ena0) begin
        vexriscvaxi_reset_mux <= trimming_reset0;
    end else begin
        vexriscvaxi_reset_mux <= vexriscvaxi;
    end
end
assign status = latched_value;
assign csr_rtest_status = (csr_wtest_storage + 29'd268435456);
assign cramsoc_dat_w = cramsoc_w_payload_data;
assign cramsoc_we = ((cramsoc_w_valid & cramsoc_w_ready) & (cramsoc_w_payload_strb != 1'd0));
assign cramsoc_re = cramsoc_r_ready;
always @(*) begin
    cramsoc_do_read <= 1'd0;
    cramsoc_do_write <= 1'd0;
    if ((cramsoc_aw_valid & cramsoc_ar_valid)) begin
        cramsoc_do_write <= cramsoc_last_was_read;
        cramsoc_do_read <= (~cramsoc_last_was_read);
    end else begin
        cramsoc_do_write <= cramsoc_aw_valid;
        cramsoc_do_read <= cramsoc_ar_valid;
    end
end
assign cramsoc_r_valid = cramsoc_nocomb_axl_r_valid;
assign cramsoc_aw_ready = cramsoc_nocomb_axl_aw_ready;
assign cramsoc_w_ready = cramsoc_nocomb_axl_w_ready;
assign cramsoc_ar_ready = cramsoc_nocomb_axl_ar_ready;
assign cramsoc_b_valid = cramsoc_nocomb_axl_b_valid;
always @(*) begin
    cramsoc_last_was_read_next_value_ce <= 1'd0;
    cramsoc_adr <= 16'd0;
    cramsoc_r_payload_resp <= 2'd0;
    cramsoc_r_payload_data <= 32'd0;
    cramsoc_b_payload_resp <= 2'd0;
    cramsoc_nocomb_axl_r_valid <= 1'd0;
    cramsoc_nocomb_axl_w_ready <= 1'd0;
    cramsoc_nocomb_axl_aw_ready <= 1'd0;
    cramsoc_next_state <= 2'd0;
    cramsoc_nocomb_axl_ar_ready <= 1'd0;
    cramsoc_nocomb_axl_b_valid <= 1'd0;
    cramsoc_last_was_read_next_value <= 1'd0;
    cramsoc_next_state <= cramsoc_state;
    case (cramsoc_state)
        1'd1: begin
            cramsoc_last_was_read_next_value <= 1'd1;
            cramsoc_last_was_read_next_value_ce <= 1'd1;
            cramsoc_adr <= cramsoc_ar_payload_addr[31:2];
            cramsoc_r_payload_data <= cramsoc_dat_r;
            cramsoc_r_payload_resp <= 1'd0;
            cramsoc_nocomb_axl_r_valid <= 1'd1;
            if (cramsoc_r_ready) begin
                cramsoc_next_state <= 1'd0;
            end
        end
        2'd2: begin
            cramsoc_last_was_read_next_value <= 1'd0;
            cramsoc_last_was_read_next_value_ce <= 1'd1;
            cramsoc_nocomb_axl_b_valid <= 1'd1;
            cramsoc_b_payload_resp <= 1'd0;
            if (cramsoc_b_ready) begin
                cramsoc_next_state <= 1'd0;
            end
        end
        default: begin
            if (cramsoc_do_write) begin
                cramsoc_adr <= cramsoc_aw_payload_addr[31:2];
                if (cramsoc_w_valid) begin
                    cramsoc_nocomb_axl_aw_ready <= 1'd1;
                    cramsoc_nocomb_axl_w_ready <= 1'd1;
                    cramsoc_next_state <= 2'd2;
                end
            end else begin
                if (cramsoc_do_read) begin
                    cramsoc_nocomb_axl_ar_ready <= 1'd1;
                    cramsoc_adr <= cramsoc_ar_payload_addr[31:2];
                    cramsoc_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign csrbank0_sel = (interface0_adr[15:10] == 1'd0);
assign csrbank0_re = interface0_re;
assign csrbank0_wtest0_r = interface0_dat_w[31:0];
always @(*) begin
    csrbank0_wtest0_we <= 1'd0;
    csrbank0_wtest0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_adr[9:0] == 1'd0))) begin
        csrbank0_wtest0_re <= interface0_we;
        csrbank0_wtest0_we <= csrbank0_re;
    end
end
assign csrbank0_rtest_r = interface0_dat_w[31:0];
always @(*) begin
    csrbank0_rtest_re <= 1'd0;
    csrbank0_rtest_we <= 1'd0;
    if ((csrbank0_sel & (interface0_adr[9:0] == 1'd1))) begin
        csrbank0_rtest_re <= interface0_we;
        csrbank0_rtest_we <= csrbank0_re;
    end
end
assign csrbank0_wtest0_w = csr_wtest_storage[31:0];
assign csrbank0_rtest_w = csr_rtest_status[31:0];
assign csr_rtest_we = csrbank0_rtest_we;
assign csrbank1_sel = (interface1_adr[15:10] == 1'd1);
assign csrbank1_re = interface1_re;
assign csrbank1_pc_r = interface1_dat_w[31:0];
always @(*) begin
    csrbank1_pc_re <= 1'd0;
    csrbank1_pc_we <= 1'd0;
    if ((csrbank1_sel & (interface1_adr[9:0] == 1'd0))) begin
        csrbank1_pc_re <= interface1_we;
        csrbank1_pc_we <= csrbank1_re;
    end
end
assign csrbank1_pc_w = status[31:0];
assign we = csrbank1_pc_we;
assign csr_interconnect_adr = cramsoc_adr;
assign csr_interconnect_we = cramsoc_we;
assign csr_interconnect_dat_w = cramsoc_dat_w;
assign csr_interconnect_re = cramsoc_re;
assign cramsoc_dat_r = csr_interconnect_dat_r;
assign interface0_adr = csr_interconnect_adr;
assign interface1_adr = csr_interconnect_adr;
assign interface0_we = csr_interconnect_we;
assign interface1_we = csr_interconnect_we;
assign interface0_dat_w = csr_interconnect_dat_w;
assign interface1_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (interface0_dat_r | interface1_dat_r);
assign interface0_re = csr_interconnect_re;
assign interface1_re = csr_interconnect_re;
assign slice_proxy0 = corecsr_aw_payload_addr[31:2];
assign slice_proxy1 = corecsr_ar_payload_addr[31:2];
always @(*) begin
    array_muxed0 <= 1'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed0 <= socbushandler_aw_valid;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 1'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed1 <= socbushandler_aw_first;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 1'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed2 <= socbushandler_aw_last;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 32'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed3 <= socbushandler_aw_payload_addr;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 3'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed4 <= socbushandler_aw_payload_prot;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed5 <= socbushandler_w_valid;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 1'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed6 <= socbushandler_w_first;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 1'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed7 <= socbushandler_w_last;
        end
    endcase
end
always @(*) begin
    array_muxed8 <= 32'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed8 <= socbushandler_w_payload_data;
        end
    endcase
end
always @(*) begin
    array_muxed9 <= 4'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed9 <= socbushandler_w_payload_strb;
        end
    endcase
end
always @(*) begin
    array_muxed10 <= 1'd0;
    case (socbushandler_rr_write_grant)
        default: begin
            array_muxed10 <= socbushandler_b_ready;
        end
    endcase
end
always @(*) begin
    array_muxed11 <= 1'd0;
    case (socbushandler_rr_read_grant)
        default: begin
            array_muxed11 <= socbushandler_ar_valid;
        end
    endcase
end
always @(*) begin
    array_muxed12 <= 1'd0;
    case (socbushandler_rr_read_grant)
        default: begin
            array_muxed12 <= socbushandler_ar_first;
        end
    endcase
end
always @(*) begin
    array_muxed13 <= 1'd0;
    case (socbushandler_rr_read_grant)
        default: begin
            array_muxed13 <= socbushandler_ar_last;
        end
    endcase
end
always @(*) begin
    array_muxed14 <= 32'd0;
    case (socbushandler_rr_read_grant)
        default: begin
            array_muxed14 <= socbushandler_ar_payload_addr;
        end
    endcase
end
always @(*) begin
    array_muxed15 <= 3'd0;
    case (socbushandler_rr_read_grant)
        default: begin
            array_muxed15 <= socbushandler_ar_payload_prot;
        end
    endcase
end
always @(*) begin
    array_muxed16 <= 1'd0;
    case (socbushandler_rr_read_grant)
        default: begin
            array_muxed16 <= socbushandler_r_ready;
        end
    endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= rst;
end

always @(posedge sys_clk) begin
    p_axi_awvalid <= peripherals_aw_valid;
    p_axi_awaddr <= peripherals_aw_payload_addr;
    p_axi_awprot <= peripherals_aw_payload_prot;
    peripherals_aw_ready <= p_axi_awready;
    p_axi_wvalid <= peripherals_w_valid;
    p_axi_wdata <= peripherals_w_payload_data;
    p_axi_wstrb <= peripherals_w_payload_strb;
    peripherals_w_ready <= p_axi_wready;
    peripherals_b_valid <= p_axi_bvalid;
    peripherals_b_payload_resp <= p_axi_bresp;
    p_axi_bready <= peripherals_b_ready;
    p_axi_arvalid <= peripherals_ar_valid;
    p_axi_araddr <= peripherals_ar_payload_addr;
    p_axi_arprot <= peripherals_ar_payload_prot;
    peripherals_ar_ready <= p_axi_arready;
    peripherals_r_valid <= p_axi_rvalid;
    peripherals_r_payload_resp <= p_axi_rresp;
    peripherals_r_payload_data <= p_axi_rdata;
    p_axi_rready <= peripherals_r_ready;
    if (socbushandler_axiliterequestcounter0_empty) begin
        socbushandler_slave_sel_reg0 <= socbushandler_slave_sel_dec0;
    end
    if (socbushandler_axiliterequestcounter1_empty) begin
        socbushandler_slave_sel_reg1 <= socbushandler_slave_sel_dec1;
    end
    if (((corecsr_aw_valid & corecsr_aw_ready) & (corecsr_b_valid & corecsr_b_ready))) begin
        socbushandler_axiliterequestcounter0_counter <= socbushandler_axiliterequestcounter0_counter;
    end else begin
        if (((corecsr_aw_valid & corecsr_aw_ready) & (~socbushandler_axiliterequestcounter0_full))) begin
            socbushandler_axiliterequestcounter0_counter <= (socbushandler_axiliterequestcounter0_counter + 1'd1);
        end else begin
            if (((corecsr_b_valid & corecsr_b_ready) & (~socbushandler_axiliterequestcounter0_empty))) begin
                socbushandler_axiliterequestcounter0_counter <= (socbushandler_axiliterequestcounter0_counter - 1'd1);
            end
        end
    end
    if (((corecsr_ar_valid & corecsr_ar_ready) & (corecsr_r_valid & corecsr_r_ready))) begin
        socbushandler_axiliterequestcounter1_counter <= socbushandler_axiliterequestcounter1_counter;
    end else begin
        if (((corecsr_ar_valid & corecsr_ar_ready) & (~socbushandler_axiliterequestcounter1_full))) begin
            socbushandler_axiliterequestcounter1_counter <= (socbushandler_axiliterequestcounter1_counter + 1'd1);
        end else begin
            if (((corecsr_r_valid & corecsr_r_ready) & (~socbushandler_axiliterequestcounter1_empty))) begin
                socbushandler_axiliterequestcounter1_counter <= (socbushandler_axiliterequestcounter1_counter - 1'd1);
            end
        end
    end
    if (((cramsoc_aw_valid & cramsoc_aw_ready) & (cramsoc_b_valid & cramsoc_b_ready))) begin
        socbushandler_wr_lock_counter <= socbushandler_wr_lock_counter;
    end else begin
        if (((cramsoc_aw_valid & cramsoc_aw_ready) & (~socbushandler_wr_lock_full))) begin
            socbushandler_wr_lock_counter <= (socbushandler_wr_lock_counter + 1'd1);
        end else begin
            if (((cramsoc_b_valid & cramsoc_b_ready) & (~socbushandler_wr_lock_empty))) begin
                socbushandler_wr_lock_counter <= (socbushandler_wr_lock_counter - 1'd1);
            end
        end
    end
    if (((cramsoc_ar_valid & cramsoc_ar_ready) & (cramsoc_r_valid & cramsoc_r_ready))) begin
        socbushandler_rd_lock_counter <= socbushandler_rd_lock_counter;
    end else begin
        if (((cramsoc_ar_valid & cramsoc_ar_ready) & (~socbushandler_rd_lock_full))) begin
            socbushandler_rd_lock_counter <= (socbushandler_rd_lock_counter + 1'd1);
        end else begin
            if (((cramsoc_r_valid & cramsoc_r_ready) & (~socbushandler_rd_lock_empty))) begin
                socbushandler_rd_lock_counter <= (socbushandler_rd_lock_counter - 1'd1);
            end
        end
    end
    debug_reset <= (reset_debug_logic | sys_rst);
    if (o_resetOut) begin
        reset_debug_logic <= 1'd1;
    end else begin
        reset_debug_logic <= 1'd0;
    end
    if (sys_rst) begin
        if (trimming_reset_ena1) begin
            latched_value <= trimming_reset1;
        end else begin
            latched_value <= 31'd1610612736;
        end
    end else begin
        latched_value <= latched_value;
    end
    cramsoc_state <= cramsoc_next_state;
    if (cramsoc_last_was_read_next_value_ce) begin
        cramsoc_last_was_read <= cramsoc_last_was_read_next_value;
    end
    interface0_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_adr[9:0])
            1'd0: begin
                interface0_dat_r <= csrbank0_wtest0_w;
            end
            1'd1: begin
                interface0_dat_r <= csrbank0_rtest_w;
            end
        endcase
    end
    if (csrbank0_wtest0_re) begin
        csr_wtest_storage[31:0] <= csrbank0_wtest0_r;
    end
    csr_wtest_re <= csrbank0_wtest0_re;
    csr_rtest_re <= csrbank0_rtest_re;
    interface1_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_adr[9:0])
            1'd0: begin
                interface1_dat_r <= csrbank1_pc_w;
            end
        endcase
    end
    re <= csrbank1_pc_re;
    if (sys_rst) begin
        peripherals_aw_ready <= 1'd0;
        peripherals_w_ready <= 1'd0;
        peripherals_b_valid <= 1'd0;
        peripherals_b_payload_resp <= 2'd0;
        peripherals_ar_ready <= 1'd0;
        peripherals_r_valid <= 1'd0;
        peripherals_r_payload_resp <= 2'd0;
        peripherals_r_payload_data <= 32'd0;
        debug_reset <= 1'd0;
        reset_debug_logic <= 1'd0;
        re <= 1'd0;
        p_axi_awvalid <= 1'd0;
        p_axi_awaddr <= 32'd0;
        p_axi_awprot <= 3'd0;
        p_axi_wvalid <= 1'd0;
        p_axi_wdata <= 32'd0;
        p_axi_wstrb <= 4'd0;
        p_axi_bready <= 1'd0;
        p_axi_arvalid <= 1'd0;
        p_axi_araddr <= 32'd0;
        p_axi_arprot <= 3'd0;
        p_axi_rready <= 1'd0;
        csr_wtest_storage <= 32'd0;
        csr_wtest_re <= 1'd0;
        csr_rtest_re <= 1'd0;
        cramsoc_last_was_read <= 1'd0;
        socbushandler_slave_sel_reg0 <= 1'd0;
        socbushandler_slave_sel_reg1 <= 1'd0;
        socbushandler_axiliterequestcounter0_counter <= 8'd0;
        socbushandler_axiliterequestcounter1_counter <= 8'd0;
        socbushandler_wr_lock_counter <= 8'd0;
        socbushandler_rd_lock_counter <= 8'd0;
        cramsoc_state <= 2'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

axi_axil_adapter #(
	.ADDR_WIDTH(6'd32),
	.AXIL_DATA_WIDTH(6'd32),
	.AXI_DATA_WIDTH(6'd32),
	.CONVERT_BURST(1'd1),
	.CONVERT_NARROW_BURST(1'd0)
) axi_axil_adapter (
	.clk(sys_clk),
	.m_axil_arready(peripherals_ar_ready),
	.m_axil_awready(peripherals_aw_ready),
	.m_axil_bresp(peripherals_b_payload_resp),
	.m_axil_bvalid(peripherals_b_valid),
	.m_axil_rdata(peripherals_r_payload_data),
	.m_axil_rresp(peripherals_r_payload_resp),
	.m_axil_rvalid(peripherals_r_valid),
	.m_axil_wready(peripherals_w_ready),
	.rst(sys_rst),
	.s_axi_araddr(dbus_peri_ar_payload_addr),
	.s_axi_arburst(dbus_peri_ar_payload_burst),
	.s_axi_arcache(dbus_peri_ar_payload_cache),
	.s_axi_arid(dbus_peri_ar_param_id),
	.s_axi_arlen(dbus_peri_ar_payload_len),
	.s_axi_arlock(dbus_peri_ar_payload_lock),
	.s_axi_arprot(dbus_peri_ar_payload_prot),
	.s_axi_arsize(dbus_peri_ar_payload_size),
	.s_axi_arvalid(dbus_peri_ar_valid),
	.s_axi_awaddr(dbus_peri_aw_payload_addr),
	.s_axi_awburst(dbus_peri_aw_payload_burst),
	.s_axi_awcache(dbus_peri_aw_payload_cache),
	.s_axi_awid(dbus_peri_aw_param_id),
	.s_axi_awlen(dbus_peri_aw_payload_len),
	.s_axi_awlock(dbus_peri_aw_payload_lock),
	.s_axi_awprot(dbus_peri_aw_payload_prot),
	.s_axi_awsize(dbus_peri_aw_payload_size),
	.s_axi_awvalid(dbus_peri_aw_valid),
	.s_axi_bready(dbus_peri_b_ready),
	.s_axi_rready(dbus_peri_r_ready),
	.s_axi_wdata(dbus_peri_w_payload_data),
	.s_axi_wlast(dbus_peri_w_last),
	.s_axi_wstrb(dbus_peri_w_payload_strb),
	.s_axi_wvalid(dbus_peri_w_valid),
	.m_axil_araddr(peripherals_ar_payload_addr),
	.m_axil_arprot(axi2axiliteadapter01),
	.m_axil_arvalid(peripherals_ar_valid),
	.m_axil_awaddr(peripherals_aw_payload_addr),
	.m_axil_awprot(axi2axiliteadapter00),
	.m_axil_awvalid(peripherals_aw_valid),
	.m_axil_bready(peripherals_b_ready),
	.m_axil_rready(peripherals_r_ready),
	.m_axil_wdata(peripherals_w_payload_data),
	.m_axil_wstrb(peripherals_w_payload_strb),
	.m_axil_wvalid(peripherals_w_valid),
	.s_axi_arready(dbus_peri_ar_ready),
	.s_axi_awready(dbus_peri_aw_ready),
	.s_axi_bid(dbus_peri_b_param_id),
	.s_axi_bresp(dbus_peri_b_payload_resp),
	.s_axi_bvalid(dbus_peri_b_valid),
	.s_axi_rdata(dbus_peri_r_payload_data),
	.s_axi_rid(dbus_peri_r_param_id),
	.s_axi_rlast(dbus_peri_r_last),
	.s_axi_rresp(dbus_peri_r_payload_resp),
	.s_axi_rvalid(dbus_peri_r_valid),
	.s_axi_wready(dbus_peri_w_ready)
);

axi_axil_adapter #(
	.ADDR_WIDTH(6'd32),
	.AXIL_DATA_WIDTH(6'd32),
	.AXI_DATA_WIDTH(6'd32),
	.CONVERT_BURST(1'd1),
	.CONVERT_NARROW_BURST(1'd0)
) axi_axil_adapter_1 (
	.clk(sys_clk),
	.m_axil_arready(corecsr_ar_ready),
	.m_axil_awready(corecsr_aw_ready),
	.m_axil_bresp(corecsr_b_payload_resp),
	.m_axil_bvalid(corecsr_b_valid),
	.m_axil_rdata(corecsr_r_payload_data),
	.m_axil_rresp(corecsr_r_payload_resp),
	.m_axil_rvalid(corecsr_r_valid),
	.m_axil_wready(corecsr_w_ready),
	.rst(sys_rst),
	.s_axi_araddr(axi_csr_ar_payload_addr),
	.s_axi_arburst(axi_csr_ar_payload_burst),
	.s_axi_arcache(axi_csr_ar_payload_cache),
	.s_axi_arid(axi_csr_ar_param_id),
	.s_axi_arlen(axi_csr_ar_payload_len),
	.s_axi_arlock(axi_csr_ar_payload_lock),
	.s_axi_arprot(axi_csr_ar_payload_prot),
	.s_axi_arsize(axi_csr_ar_payload_size),
	.s_axi_arvalid(axi_csr_ar_valid),
	.s_axi_awaddr(axi_csr_aw_payload_addr),
	.s_axi_awburst(axi_csr_aw_payload_burst),
	.s_axi_awcache(axi_csr_aw_payload_cache),
	.s_axi_awid(axi_csr_aw_param_id),
	.s_axi_awlen(axi_csr_aw_payload_len),
	.s_axi_awlock(axi_csr_aw_payload_lock),
	.s_axi_awprot(axi_csr_aw_payload_prot),
	.s_axi_awsize(axi_csr_aw_payload_size),
	.s_axi_awvalid(axi_csr_aw_valid),
	.s_axi_bready(axi_csr_b_ready),
	.s_axi_rready(axi_csr_r_ready),
	.s_axi_wdata(axi_csr_w_payload_data),
	.s_axi_wlast(axi_csr_w_last),
	.s_axi_wstrb(axi_csr_w_payload_strb),
	.s_axi_wvalid(axi_csr_w_valid),
	.m_axil_araddr(corecsr_ar_payload_addr),
	.m_axil_arprot(axi2axiliteadapter11),
	.m_axil_arvalid(corecsr_ar_valid),
	.m_axil_awaddr(corecsr_aw_payload_addr),
	.m_axil_awprot(axi2axiliteadapter10),
	.m_axil_awvalid(corecsr_aw_valid),
	.m_axil_bready(corecsr_b_ready),
	.m_axil_rready(corecsr_r_ready),
	.m_axil_wdata(corecsr_w_payload_data),
	.m_axil_wstrb(corecsr_w_payload_strb),
	.m_axil_wvalid(corecsr_w_valid),
	.s_axi_arready(axi_csr_ar_ready),
	.s_axi_awready(axi_csr_aw_ready),
	.s_axi_bid(axi_csr_b_param_id),
	.s_axi_bresp(axi_csr_b_payload_resp),
	.s_axi_bvalid(axi_csr_b_valid),
	.s_axi_rdata(axi_csr_r_payload_data),
	.s_axi_rid(axi_csr_r_param_id),
	.s_axi_rlast(axi_csr_r_last),
	.s_axi_rresp(axi_csr_r_payload_resp),
	.s_axi_rvalid(axi_csr_r_valid),
	.s_axi_wready(axi_csr_w_ready)
);

axi_crossbar #(
	.ADDR_WIDTH(6'd32),
	.ARUSER_ENABLE(1'd0),
	.ARUSER_WIDTH(7'd68),
	.AWUSER_ENABLE(1'd0),
	.AWUSER_WIDTH(7'd68),
	.BUSER_ENABLE(1'd0),
	.BUSER_WIDTH(4'd9),
	.DATA_WIDTH(6'd32),
	.M_ADDR_WIDTH(96'd534955578244951179292),
	.M_AR_REG_TYPE(6'd21),
	.M_AW_REG_TYPE(6'd21),
	.M_BASE_ADDR(96'd29710560949190194873990381568),
	.M_B_REG_TYPE(6'd21),
	.M_COUNT(2'd3),
	.M_ID_WIDTH(1'd1),
	.M_R_REG_TYPE(6'd42),
	.M_W_REG_TYPE(6'd42),
	.RUSER_ENABLE(1'd0),
	.RUSER_WIDTH(6'd41),
	.S_AR_REG_TYPE(2'd1),
	.S_AW_REG_TYPE(2'd1),
	.S_B_REG_TYPE(2'd1),
	.S_COUNT(1'd1),
	.S_ID_WIDTH(1'd1),
	.S_R_REG_TYPE(2'd2),
	.S_W_REG_TYPE(2'd2),
	.WUSER_ENABLE(1'd0),
	.WUSER_WIDTH(6'd43)
) axi_crossbar (
	.clk(sys_clk),
	.m_axi_arready({dbus_ar_ready, axi_csr_ar_ready, dbus_peri_ar_ready}),
	.m_axi_awready({dbus_aw_ready, axi_csr_aw_ready, dbus_peri_aw_ready}),
	.m_axi_bid({dbus_b_param_id, axi_csr_b_param_id, dbus_peri_b_param_id}),
	.m_axi_bresp({dbus_b_payload_resp, axi_csr_b_payload_resp, dbus_peri_b_payload_resp}),
	.m_axi_buser({dbus_b_param_user, axi_csr_b_param_user, dbus_peri_b_param_user}),
	.m_axi_bvalid({dbus_b_valid, axi_csr_b_valid, dbus_peri_b_valid}),
	.m_axi_rdata({dbus_r_payload_data, axi_csr_r_payload_data, dbus_peri_r_payload_data}),
	.m_axi_rid({dbus_r_param_id, axi_csr_r_param_id, dbus_peri_r_param_id}),
	.m_axi_rlast({dbus_r_last, axi_csr_r_last, dbus_peri_r_last}),
	.m_axi_rresp({dbus_r_payload_resp, axi_csr_r_payload_resp, dbus_peri_r_payload_resp}),
	.m_axi_ruser({dbus_r_param_user, axi_csr_r_param_user, dbus_peri_r_param_user}),
	.m_axi_rvalid({dbus_r_valid, axi_csr_r_valid, dbus_peri_r_valid}),
	.m_axi_wready({dbus_w_ready, axi_csr_w_ready, dbus_peri_w_ready}),
	.rst(sys_rst),
	.s_axi_araddr({dbus_axi_ar_payload_addr}),
	.s_axi_arburst({dbus_axi_ar_payload_burst}),
	.s_axi_arcache({dbus_axi_ar_payload_cache}),
	.s_axi_arid({dbus_axi_ar_param_id}),
	.s_axi_arlen({dbus_axi_ar_payload_len}),
	.s_axi_arlock({dbus_axi_ar_payload_lock}),
	.s_axi_arprot({dbus_axi_ar_payload_prot}),
	.s_axi_arqos({dbus_axi_ar_payload_qos}),
	.s_axi_arsize({dbus_axi_ar_payload_size}),
	.s_axi_aruser({dbus_axi_ar_param_user}),
	.s_axi_arvalid({dbus_axi_ar_valid}),
	.s_axi_awaddr({dbus_axi_aw_payload_addr}),
	.s_axi_awburst({dbus_axi_aw_payload_burst}),
	.s_axi_awcache({dbus_axi_aw_payload_cache}),
	.s_axi_awid({dbus_axi_aw_param_id}),
	.s_axi_awlen({dbus_axi_aw_payload_len}),
	.s_axi_awlock({dbus_axi_aw_payload_lock}),
	.s_axi_awprot({dbus_axi_aw_payload_prot}),
	.s_axi_awqos({dbus_axi_aw_payload_qos}),
	.s_axi_awsize({dbus_axi_aw_payload_size}),
	.s_axi_awuser({dbus_axi_aw_param_user}),
	.s_axi_awvalid({dbus_axi_aw_valid}),
	.s_axi_bready({dbus_axi_b_ready}),
	.s_axi_rready({dbus_axi_r_ready}),
	.s_axi_wdata({dbus_axi_w_payload_data}),
	.s_axi_wlast({dbus_axi_w_last}),
	.s_axi_wstrb({dbus_axi_w_payload_strb}),
	.s_axi_wuser({dbus_axi_w_param_user}),
	.s_axi_wvalid({dbus_axi_w_valid}),
	.m_axi_araddr({dbus_ar_payload_addr, axi_csr_ar_payload_addr, dbus_peri_ar_payload_addr}),
	.m_axi_arburst({dbus_ar_payload_burst, axi_csr_ar_payload_burst, dbus_peri_ar_payload_burst}),
	.m_axi_arcache({dbus_ar_payload_cache, axi_csr_ar_payload_cache, dbus_peri_ar_payload_cache}),
	.m_axi_arid({dbus_ar_param_id, axi_csr_ar_param_id, dbus_peri_ar_param_id}),
	.m_axi_arlen({dbus_ar_payload_len, axi_csr_ar_payload_len, dbus_peri_ar_payload_len}),
	.m_axi_arlock({dbus_ar_payload_lock, axi_csr_ar_payload_lock, dbus_peri_ar_payload_lock}),
	.m_axi_arprot({dbus_ar_payload_prot, axi_csr_ar_payload_prot, dbus_peri_ar_payload_prot}),
	.m_axi_arqos({dbus_ar_payload_qos, axi_csr_ar_payload_qos, dbus_peri_ar_payload_qos}),
	.m_axi_arregion({dbus_ar_payload_region, axi_csr_ar_payload_region, dbus_peri_ar_payload_region}),
	.m_axi_arsize({dbus_ar_payload_size, axi_csr_ar_payload_size, dbus_peri_ar_payload_size}),
	.m_axi_aruser({dbus_ar_param_user, axi_csr_ar_param_user, dbus_peri_ar_param_user}),
	.m_axi_arvalid({dbus_ar_valid, axi_csr_ar_valid, dbus_peri_ar_valid}),
	.m_axi_awaddr({dbus_aw_payload_addr, axi_csr_aw_payload_addr, dbus_peri_aw_payload_addr}),
	.m_axi_awburst({dbus_aw_payload_burst, axi_csr_aw_payload_burst, dbus_peri_aw_payload_burst}),
	.m_axi_awcache({dbus_aw_payload_cache, axi_csr_aw_payload_cache, dbus_peri_aw_payload_cache}),
	.m_axi_awid({dbus_aw_param_id, axi_csr_aw_param_id, dbus_peri_aw_param_id}),
	.m_axi_awlen({dbus_aw_payload_len, axi_csr_aw_payload_len, dbus_peri_aw_payload_len}),
	.m_axi_awlock({dbus_aw_payload_lock, axi_csr_aw_payload_lock, dbus_peri_aw_payload_lock}),
	.m_axi_awprot({dbus_aw_payload_prot, axi_csr_aw_payload_prot, dbus_peri_aw_payload_prot}),
	.m_axi_awqos({dbus_aw_payload_qos, axi_csr_aw_payload_qos, dbus_peri_aw_payload_qos}),
	.m_axi_awregion({dbus_aw_payload_region, axi_csr_aw_payload_region, dbus_peri_aw_payload_region}),
	.m_axi_awsize({dbus_aw_payload_size, axi_csr_aw_payload_size, dbus_peri_aw_payload_size}),
	.m_axi_awuser({dbus_aw_param_user, axi_csr_aw_param_user, dbus_peri_aw_param_user}),
	.m_axi_awvalid({dbus_aw_valid, axi_csr_aw_valid, dbus_peri_aw_valid}),
	.m_axi_bready({dbus_b_ready, axi_csr_b_ready, dbus_peri_b_ready}),
	.m_axi_rready({dbus_r_ready, axi_csr_r_ready, dbus_peri_r_ready}),
	.m_axi_wdata({dbus_w_payload_data, axi_csr_w_payload_data, dbus_peri_w_payload_data}),
	.m_axi_wlast({dbus_w_last, axi_csr_w_last, dbus_peri_w_last}),
	.m_axi_wstrb({dbus_w_payload_strb, axi_csr_w_payload_strb, dbus_peri_w_payload_strb}),
	.m_axi_wuser({dbus_w_param_user, axi_csr_w_param_user, dbus_peri_w_param_user}),
	.m_axi_wvalid({dbus_w_valid, axi_csr_w_valid, dbus_peri_w_valid}),
	.s_axi_arready({dbus_axi_ar_ready}),
	.s_axi_awready({dbus_axi_aw_ready}),
	.s_axi_bid({dbus_axi_b_param_id}),
	.s_axi_bresp({dbus_axi_b_payload_resp}),
	.s_axi_buser({dbus_axi_b_param_user}),
	.s_axi_bvalid({dbus_axi_b_valid}),
	.s_axi_rdata({dbus_axi_r_payload_data}),
	.s_axi_rid({dbus_axi_r_param_id}),
	.s_axi_rlast({dbus_axi_r_last}),
	.s_axi_rresp({dbus_axi_r_payload_resp}),
	.s_axi_ruser({dbus_axi_r_param_user}),
	.s_axi_rvalid({dbus_axi_r_valid}),
	.s_axi_wready({dbus_axi_w_ready})
);

VexRiscvAxi4 VexRiscvAxi4(
	.clk(sys_clk),
	.dBusAxi_ar_ready(dbus_axi_ar_ready),
	.dBusAxi_aw_ready(dbus_axi_aw_ready),
	.dBusAxi_b_payload_id(dbus_axi_b_param_id),
	.dBusAxi_b_payload_resp(dbus_axi_b_payload_resp),
	.dBusAxi_b_valid(dbus_axi_b_valid),
	.dBusAxi_r_payload_data(dbus_axi_r_payload_data),
	.dBusAxi_r_payload_id(dbus_axi_r_param_id),
	.dBusAxi_r_payload_last(dbus_axi_r_last),
	.dBusAxi_r_payload_resp(dbus_axi_r_payload_resp),
	.dBusAxi_r_valid(dbus_axi_r_valid),
	.dBusAxi_w_ready(dbus_axi_w_ready),
	.debugReset(jtag_trst),
	.externalInterruptArray(interrupt_1),
	.externalResetVector(vexriscvaxi_reset_mux),
	.iBusAxi_ar_ready(ibus_axi_ar_ready),
	.iBusAxi_r_payload_data(ibus_axi_r_payload_data),
	.iBusAxi_r_payload_id(ibus_axi_r_param_id),
	.iBusAxi_r_payload_last(ibus_axi_r_last),
	.iBusAxi_r_payload_resp(ibus_axi_r_payload_resp),
	.iBusAxi_r_valid(ibus_axi_r_valid),
	.jtag_tck(jtag_tck),
	.jtag_tdi(jtag_tdi),
	.jtag_tms(jtag_tms),
	.reset(((sys_rst | reset) | debug_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusAxi_ar_payload_addr(dbus_axi_ar_payload_addr),
	.dBusAxi_ar_payload_burst(dbus_axi_ar_payload_burst),
	.dBusAxi_ar_payload_cache(dbus_axi_ar_payload_cache),
	.dBusAxi_ar_payload_id(dbus_axi_ar_param_id),
	.dBusAxi_ar_payload_len(dbus_axi_ar_payload_len),
	.dBusAxi_ar_payload_lock(dbus_axi_ar_payload_lock),
	.dBusAxi_ar_payload_prot(dbus_axi_ar_payload_prot),
	.dBusAxi_ar_payload_qos(dbus_axi_ar_payload_qos),
	.dBusAxi_ar_payload_region(dbus_axi_ar_payload_region),
	.dBusAxi_ar_payload_size(dbus_axi_ar_payload_size),
	.dBusAxi_ar_valid(dbus_axi_ar_valid),
	.dBusAxi_aw_payload_addr(dbus_axi_aw_payload_addr),
	.dBusAxi_aw_payload_burst(dbus_axi_aw_payload_burst),
	.dBusAxi_aw_payload_cache(dbus_axi_aw_payload_cache),
	.dBusAxi_aw_payload_id(dbus_axi_aw_param_id),
	.dBusAxi_aw_payload_len(dbus_axi_aw_payload_len),
	.dBusAxi_aw_payload_lock(dbus_axi_aw_payload_lock),
	.dBusAxi_aw_payload_prot(dbus_axi_aw_payload_prot),
	.dBusAxi_aw_payload_qos(dbus_axi_aw_payload_qos),
	.dBusAxi_aw_payload_region(dbus_axi_aw_payload_region),
	.dBusAxi_aw_payload_size(dbus_axi_aw_payload_size),
	.dBusAxi_aw_valid(dbus_axi_aw_valid),
	.dBusAxi_b_ready(dbus_axi_b_ready),
	.dBusAxi_r_ready(dbus_axi_r_ready),
	.dBusAxi_w_payload_data(dbus_axi_w_payload_data),
	.dBusAxi_w_payload_last(dbus_axi_w_last),
	.dBusAxi_w_payload_strb(dbus_axi_w_payload_strb),
	.dBusAxi_w_valid(dbus_axi_w_valid),
	.debug_resetOut(o_resetOut),
	.iBusAxi_ar_payload_addr(ibus_axi_ar_payload_addr),
	.iBusAxi_ar_payload_burst(ibus_axi_ar_payload_burst),
	.iBusAxi_ar_payload_cache(ibus_axi_ar_payload_cache),
	.iBusAxi_ar_payload_id(ibus_axi_ar_param_id),
	.iBusAxi_ar_payload_len(ibus_axi_ar_payload_len),
	.iBusAxi_ar_payload_lock(ibus_axi_ar_payload_lock),
	.iBusAxi_ar_payload_prot(ibus_axi_ar_payload_prot),
	.iBusAxi_ar_payload_qos(ibus_axi_ar_payload_qos),
	.iBusAxi_ar_payload_region(ibus_axi_ar_payload_region),
	.iBusAxi_ar_payload_size(ibus_axi_ar_payload_size),
	.iBusAxi_ar_valid(ibus_axi_ar_valid),
	.iBusAxi_r_ready(ibus_axi_r_ready),
	.jtag_tdo(jtag_tdo)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-12-19 03:36:14.
//------------------------------------------------------------------------------
