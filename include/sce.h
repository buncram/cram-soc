//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (37d630db) on 2023-05-01 02:13:57
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x4002d000L
#endif

/* aes */
#define CSR_AES_BASE (CSR_BASE + 0x0L)
#define CSR_AES_SFR_CRFUNC_ADDR (CSR_BASE + 0x0L)
#define CSR_AES_SFR_CRFUNC_SIZE 1
static inline uint32_t aes_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void aes_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
#define CSR_AES_SFR_CRFUNC_SFR_CRFUNC_OFFSET 0
#define CSR_AES_SFR_CRFUNC_SFR_CRFUNC_SIZE 8
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_read(void) {
	uint32_t word = aes_sfr_crfunc_read();
	return aes_sfr_crfunc_sfr_crfunc_extract(word);
}
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_crfunc_sfr_crfunc_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_crfunc_read();
	uint32_t newword = aes_sfr_crfunc_sfr_crfunc_replace(oldword, plain_value);
	aes_sfr_crfunc_write(newword);
}
#define CSR_AES_SFR_AR_ADDR (CSR_BASE + 0x4L)
#define CSR_AES_SFR_AR_SIZE 1
static inline uint32_t aes_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void aes_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
#define CSR_AES_SFR_AR_SFR_AR_OFFSET 0
#define CSR_AES_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t aes_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_ar_sfr_ar_read(void) {
	uint32_t word = aes_sfr_ar_read();
	return aes_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t aes_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_ar_read();
	uint32_t newword = aes_sfr_ar_sfr_ar_replace(oldword, plain_value);
	aes_sfr_ar_write(newword);
}
#define CSR_AES_SFR_SRMFSM_ADDR (CSR_BASE + 0x8L)
#define CSR_AES_SFR_SRMFSM_SIZE 1
static inline uint32_t aes_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
#define CSR_AES_SFR_SRMFSM_SFR_SRMFSM_OFFSET 0
#define CSR_AES_SFR_SRMFSM_SFR_SRMFSM_SIZE 8
static inline uint32_t aes_sfr_srmfsm_sfr_srmfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_srmfsm_sfr_srmfsm_read(void) {
	uint32_t word = aes_sfr_srmfsm_read();
	return aes_sfr_srmfsm_sfr_srmfsm_extract(word);
}
#define CSR_AES_SFR_FR_ADDR (CSR_BASE + 0xcL)
#define CSR_AES_SFR_FR_SIZE 1
static inline uint32_t aes_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + 0xcL));
}
#define CSR_AES_SFR_FR_CHNLI_DONE_OFFSET 0
#define CSR_AES_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_fr_chnli_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_chnli_done_extract(word);
}
#define CSR_AES_SFR_FR_CHNLO_DONE_OFFSET 1
#define CSR_AES_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t aes_sfr_fr_chnlo_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_chnlo_done_extract(word);
}
#define CSR_AES_SFR_FR_ACORE_DONE_OFFSET 2
#define CSR_AES_SFR_FR_ACORE_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_acore_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t aes_sfr_fr_acore_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_acore_done_extract(word);
}
#define CSR_AES_SFR_FR_MFSM_DONE_OFFSET 3
#define CSR_AES_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t aes_sfr_fr_mfsm_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_mfsm_done_extract(word);
}
#define CSR_AES_SFR_OPT_ADDR (CSR_BASE + 0x10L)
#define CSR_AES_SFR_OPT_SIZE 1
static inline uint32_t aes_sfr_opt_read(void) {
	return csr_read_simple((CSR_BASE + 0x10L));
}
static inline void aes_sfr_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10L));
}
#define CSR_AES_SFR_OPT_OPT_IFSTART0_OFFSET 0
#define CSR_AES_SFR_OPT_OPT_IFSTART0_SIZE 1
static inline uint32_t aes_sfr_opt_opt_ifstart0_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_opt_opt_ifstart0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_ifstart0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_ifstart0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_opt_opt_ifstart0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_ifstart0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT_OPT_MODE0_OFFSET 1
#define CSR_AES_SFR_OPT_OPT_MODE0_SIZE 4
static inline uint32_t aes_sfr_opt_opt_mode0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t aes_sfr_opt_opt_mode0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_mode0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_mode0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void aes_sfr_opt_opt_mode0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_mode0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT_OPT_KLEN0_OFFSET 5
#define CSR_AES_SFR_OPT_OPT_KLEN0_SIZE 4
static inline uint32_t aes_sfr_opt_opt_klen0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t aes_sfr_opt_opt_klen0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_klen0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_klen0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void aes_sfr_opt_opt_klen0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_klen0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT1_ADDR (CSR_BASE + 0x14L)
#define CSR_AES_SFR_OPT1_SIZE 1
static inline uint32_t aes_sfr_opt1_read(void) {
	return csr_read_simple((CSR_BASE + 0x14L));
}
static inline void aes_sfr_opt1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x14L));
}
#define CSR_AES_SFR_OPT1_SFR_OPT1_OFFSET 0
#define CSR_AES_SFR_OPT1_SFR_OPT1_SIZE 16
static inline uint32_t aes_sfr_opt1_sfr_opt1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_opt1_sfr_opt1_read(void) {
	uint32_t word = aes_sfr_opt1_read();
	return aes_sfr_opt1_sfr_opt1_extract(word);
}
static inline uint32_t aes_sfr_opt1_sfr_opt1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_opt1_sfr_opt1_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt1_read();
	uint32_t newword = aes_sfr_opt1_sfr_opt1_replace(oldword, plain_value);
	aes_sfr_opt1_write(newword);
}
#define CSR_AES_RESERVED6_ADDR (CSR_BASE + 0x18L)
#define CSR_AES_RESERVED6_SIZE 1
static inline uint32_t aes_reserved6_read(void) {
	return csr_read_simple((CSR_BASE + 0x18L));
}
static inline void aes_reserved6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x18L));
}
#define CSR_AES_RESERVED7_ADDR (CSR_BASE + 0x1cL)
#define CSR_AES_RESERVED7_SIZE 1
static inline uint32_t aes_reserved7_read(void) {
	return csr_read_simple((CSR_BASE + 0x1cL));
}
static inline void aes_reserved7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1cL));
}
#define CSR_AES_RESERVED8_ADDR (CSR_BASE + 0x20L)
#define CSR_AES_RESERVED8_SIZE 1
static inline uint32_t aes_reserved8_read(void) {
	return csr_read_simple((CSR_BASE + 0x20L));
}
static inline void aes_reserved8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x20L));
}
#define CSR_AES_RESERVED9_ADDR (CSR_BASE + 0x24L)
#define CSR_AES_RESERVED9_SIZE 1
static inline uint32_t aes_reserved9_read(void) {
	return csr_read_simple((CSR_BASE + 0x24L));
}
static inline void aes_reserved9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24L));
}
#define CSR_AES_RESERVED10_ADDR (CSR_BASE + 0x28L)
#define CSR_AES_RESERVED10_SIZE 1
static inline uint32_t aes_reserved10_read(void) {
	return csr_read_simple((CSR_BASE + 0x28L));
}
static inline void aes_reserved10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x28L));
}
#define CSR_AES_RESERVED11_ADDR (CSR_BASE + 0x2cL)
#define CSR_AES_RESERVED11_SIZE 1
static inline uint32_t aes_reserved11_read(void) {
	return csr_read_simple((CSR_BASE + 0x2cL));
}
static inline void aes_reserved11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2cL));
}
#define CSR_AES_SFR_SEGPTR_PTRID_IV_ADDR (CSR_BASE + 0x30L)
#define CSR_AES_SFR_SEGPTR_PTRID_IV_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_IV_read(void) {
	return csr_read_simple((CSR_BASE + 0x30L));
}
static inline void aes_sfr_segptr_PTRID_IV_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x30L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_IV_PTRID_IV_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_IV_PTRID_IV_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_iv_read();
	return aes_sfr_segptr_ptrid_iv_ptrid_iv_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_iv_ptrid_iv_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_iv_read();
	uint32_t newword = aes_sfr_segptr_ptrid_iv_ptrid_iv_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_iv_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_ADDR (CSR_BASE + 0x34L)
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AKEY_read(void) {
	return csr_read_simple((CSR_BASE + 0x34L));
}
static inline void aes_sfr_segptr_PTRID_AKEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x34L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_akey_read();
	return aes_sfr_segptr_ptrid_akey_ptrid_akey_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_akey_ptrid_akey_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_akey_read();
	uint32_t newword = aes_sfr_segptr_ptrid_akey_ptrid_akey_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_akey_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_ADDR (CSR_BASE + 0x38L)
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AIB_read(void) {
	return csr_read_simple((CSR_BASE + 0x38L));
}
static inline void aes_sfr_segptr_PTRID_AIB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x38L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_PTRID_AIB_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_PTRID_AIB_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_aib_read();
	return aes_sfr_segptr_ptrid_aib_ptrid_aib_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_aib_ptrid_aib_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_aib_read();
	uint32_t newword = aes_sfr_segptr_ptrid_aib_ptrid_aib_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_aib_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_ADDR (CSR_BASE + 0x3cL)
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AOB_read(void) {
	return csr_read_simple((CSR_BASE + 0x3cL));
}
static inline void aes_sfr_segptr_PTRID_AOB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3cL));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_PTRID_AOB_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_PTRID_AOB_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_aob_read();
	return aes_sfr_segptr_ptrid_aob_ptrid_aob_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_aob_ptrid_aob_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_aob_read();
	uint32_t newword = aes_sfr_segptr_ptrid_aob_ptrid_aob_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_aob_write(newword);
}

/* combohash */
#define CSR_COMBOHASH_BASE (CSR_BASE + -0x2000L)
#define CSR_COMBOHASH_SFR_CRFUNC_ADDR (CSR_BASE + -0x2000L)
#define CSR_COMBOHASH_SFR_CRFUNC_SIZE 1
static inline uint32_t combohash_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + -0x2000L));
}
static inline void combohash_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2000L));
}
#define CSR_COMBOHASH_SFR_CRFUNC_CR_FUNC_OFFSET 0
#define CSR_COMBOHASH_SFR_CRFUNC_CR_FUNC_SIZE 8
static inline uint32_t combohash_sfr_crfunc_cr_func_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_crfunc_cr_func_read(void) {
	uint32_t word = combohash_sfr_crfunc_read();
	return combohash_sfr_crfunc_cr_func_extract(word);
}
static inline uint32_t combohash_sfr_crfunc_cr_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_crfunc_cr_func_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_crfunc_read();
	uint32_t newword = combohash_sfr_crfunc_cr_func_replace(oldword, plain_value);
	combohash_sfr_crfunc_write(newword);
}
#define CSR_COMBOHASH_SFR_AR_ADDR (CSR_BASE + -0x1ffcL)
#define CSR_COMBOHASH_SFR_AR_SIZE 1
static inline uint32_t combohash_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x1ffcL));
}
static inline void combohash_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1ffcL));
}
#define CSR_COMBOHASH_SFR_AR_SFR_AR_OFFSET 0
#define CSR_COMBOHASH_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t combohash_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_ar_sfr_ar_read(void) {
	uint32_t word = combohash_sfr_ar_read();
	return combohash_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t combohash_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_ar_read();
	uint32_t newword = combohash_sfr_ar_sfr_ar_replace(oldword, plain_value);
	combohash_sfr_ar_write(newword);
}
#define CSR_COMBOHASH_SFR_SRMFSM_ADDR (CSR_BASE + -0x1ff8L)
#define CSR_COMBOHASH_SFR_SRMFSM_SIZE 1
static inline uint32_t combohash_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + -0x1ff8L));
}
#define CSR_COMBOHASH_SFR_SRMFSM_MFSM_OFFSET 0
#define CSR_COMBOHASH_SFR_SRMFSM_MFSM_SIZE 8
static inline uint32_t combohash_sfr_srmfsm_mfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_srmfsm_mfsm_read(void) {
	uint32_t word = combohash_sfr_srmfsm_read();
	return combohash_sfr_srmfsm_mfsm_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_ADDR (CSR_BASE + -0x1ff4L)
#define CSR_COMBOHASH_SFR_FR_SIZE 1
static inline uint32_t combohash_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + -0x1ff4L));
}
#define CSR_COMBOHASH_SFR_FR_CHNLI_DONE_OFFSET 0
#define CSR_COMBOHASH_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_fr_chnli_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_chnli_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_CHNLO_DONE_OFFSET 1
#define CSR_COMBOHASH_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t combohash_sfr_fr_chnlo_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_chnlo_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_HASH_DONE_OFFSET 2
#define CSR_COMBOHASH_SFR_FR_HASH_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_hash_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t combohash_sfr_fr_hash_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_hash_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_MFSM_DONE_OFFSET 3
#define CSR_COMBOHASH_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t combohash_sfr_fr_mfsm_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_mfsm_done_extract(word);
}
#define CSR_COMBOHASH_SFR_OPT1_ADDR (CSR_BASE + -0x1ff0L)
#define CSR_COMBOHASH_SFR_OPT1_SIZE 1
static inline uint32_t combohash_sfr_opt1_read(void) {
	return csr_read_simple((CSR_BASE + -0x1ff0L));
}
static inline void combohash_sfr_opt1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1ff0L));
}
#define CSR_COMBOHASH_SFR_OPT1_CR_OPT_HASHCNT_OFFSET 0
#define CSR_COMBOHASH_SFR_OPT1_CR_OPT_HASHCNT_SIZE 16
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_read(void) {
	uint32_t word = combohash_sfr_opt1_read();
	return combohash_sfr_opt1_cr_opt_hashcnt_extract(word);
}
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_opt1_cr_opt_hashcnt_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt1_read();
	uint32_t newword = combohash_sfr_opt1_cr_opt_hashcnt_replace(oldword, plain_value);
	combohash_sfr_opt1_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_ADDR (CSR_BASE + -0x1fecL)
#define CSR_COMBOHASH_SFR_OPT2_SIZE 1
static inline uint32_t combohash_sfr_opt2_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fecL));
}
static inline void combohash_sfr_opt2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fecL));
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSTART_OFFSET 0
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSTART_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_ifstart_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_opt2_cr_opt_ifstart_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_ifstart_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSOB_OFFSET 1
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSOB_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_ifsob_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void combohash_sfr_opt2_cr_opt_ifsob_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_ifsob_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_SCRTCHK_OFFSET 2
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_SCRTCHK_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_scrtchk_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void combohash_sfr_opt2_cr_opt_scrtchk_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_scrtchk_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_RESERVED6_ADDR (CSR_BASE + -0x1fe8L)
#define CSR_COMBOHASH_RESERVED6_SIZE 1
static inline uint32_t combohash_reserved6_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fe8L));
}
static inline void combohash_reserved6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fe8L));
}
#define CSR_COMBOHASH_RESERVED7_ADDR (CSR_BASE + -0x1fe4L)
#define CSR_COMBOHASH_RESERVED7_SIZE 1
static inline uint32_t combohash_reserved7_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fe4L));
}
static inline void combohash_reserved7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fe4L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_ADDR (CSR_BASE + -0x1fe0L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_LKEY_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fe0L));
}
static inline void combohash_sfr_segptr_SEGID_LKEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fe0L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_lkey_read();
	return combohash_sfr_segptr_segid_lkey_segid_lkey_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_lkey_segid_lkey_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_lkey_read();
	uint32_t newword = combohash_sfr_segptr_segid_lkey_segid_lkey_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_lkey_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_ADDR (CSR_BASE + -0x1fdcL)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_KEY_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fdcL));
}
static inline void combohash_sfr_segptr_SEGID_KEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fdcL));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SEGID_KEY_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SEGID_KEY_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_key_read();
	return combohash_sfr_segptr_segid_key_segid_key_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_key_segid_key_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_key_read();
	uint32_t newword = combohash_sfr_segptr_segid_key_segid_key_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_key_write(newword);
}
#define CSR_COMBOHASH_RESERVED10_ADDR (CSR_BASE + -0x1fd8L)
#define CSR_COMBOHASH_RESERVED10_SIZE 1
static inline uint32_t combohash_reserved10_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fd8L));
}
static inline void combohash_reserved10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fd8L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_ADDR (CSR_BASE + -0x1fd4L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_SCRT_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fd4L));
}
static inline void combohash_sfr_segptr_SEGID_SCRT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fd4L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_scrt_read();
	return combohash_sfr_segptr_segid_scrt_segid_scrt_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_scrt_segid_scrt_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_scrt_read();
	uint32_t newword = combohash_sfr_segptr_segid_scrt_segid_scrt_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_scrt_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_ADDR (CSR_BASE + -0x1fd0L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_MSG_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fd0L));
}
static inline void combohash_sfr_segptr_SEGID_MSG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fd0L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SEGID_MSG_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SEGID_MSG_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_msg_read();
	return combohash_sfr_segptr_segid_msg_segid_msg_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_msg_segid_msg_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_msg_read();
	uint32_t newword = combohash_sfr_segptr_segid_msg_segid_msg_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_msg_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_ADDR (CSR_BASE + -0x1fccL)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_HOUT_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fccL));
}
static inline void combohash_sfr_segptr_SEGID_HOUT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fccL));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_hout_read();
	return combohash_sfr_segptr_segid_hout_segid_hout_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_hout_segid_hout_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_hout_read();
	uint32_t newword = combohash_sfr_segptr_segid_hout_segid_hout_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_hout_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SOB_ADDR (CSR_BASE + -0x1fc8L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SOB_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_SOB_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fc8L));
}
static inline void combohash_sfr_segptr_SEGID_SOB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fc8L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SOB_SEGID_SOB_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SOB_SEGID_SOB_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_sob_segid_sob_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_sob_segid_sob_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_sob_read();
	return combohash_sfr_segptr_segid_sob_segid_sob_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_sob_segid_sob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_sob_segid_sob_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_sob_read();
	uint32_t newword = combohash_sfr_segptr_segid_sob_segid_sob_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_sob_write(newword);
}

/* pke */
#define CSR_PKE_BASE (CSR_BASE + -0x1000L)
#define CSR_PKE_SFR_CRFUNC_ADDR (CSR_BASE + -0x1000L)
#define CSR_PKE_SFR_CRFUNC_SIZE 1
static inline uint32_t pke_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + -0x1000L));
}
static inline void pke_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1000L));
}
#define CSR_PKE_SFR_CRFUNC_SFR_CRFUNC_OFFSET 0
#define CSR_PKE_SFR_CRFUNC_SFR_CRFUNC_SIZE 8
static inline uint32_t pke_sfr_crfunc_sfr_crfunc_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_crfunc_sfr_crfunc_read(void) {
	uint32_t word = pke_sfr_crfunc_read();
	return pke_sfr_crfunc_sfr_crfunc_extract(word);
}
static inline uint32_t pke_sfr_crfunc_sfr_crfunc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_crfunc_sfr_crfunc_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_crfunc_read();
	uint32_t newword = pke_sfr_crfunc_sfr_crfunc_replace(oldword, plain_value);
	pke_sfr_crfunc_write(newword);
}
#define CSR_PKE_SFR_AR_ADDR (CSR_BASE + -0xffcL)
#define CSR_PKE_SFR_AR_SIZE 1
static inline uint32_t pke_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0xffcL));
}
static inline void pke_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xffcL));
}
#define CSR_PKE_SFR_AR_SFR_AR_OFFSET 0
#define CSR_PKE_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t pke_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_ar_sfr_ar_read(void) {
	uint32_t word = pke_sfr_ar_read();
	return pke_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t pke_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_ar_read();
	uint32_t newword = pke_sfr_ar_sfr_ar_replace(oldword, plain_value);
	pke_sfr_ar_write(newword);
}
#define CSR_PKE_SFR_SRMFSM_ADDR (CSR_BASE + -0xff8L)
#define CSR_PKE_SFR_SRMFSM_SIZE 1
static inline uint32_t pke_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + -0xff8L));
}
#define CSR_PKE_SFR_SRMFSM_MODINVREADY_OFFSET 0
#define CSR_PKE_SFR_SRMFSM_MODINVREADY_SIZE 1
static inline uint32_t pke_sfr_srmfsm_modinvready_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_srmfsm_modinvready_read(void) {
	uint32_t word = pke_sfr_srmfsm_read();
	return pke_sfr_srmfsm_modinvready_extract(word);
}
#define CSR_PKE_SFR_SRMFSM_MFSM_OFFSET 1
#define CSR_PKE_SFR_SRMFSM_MFSM_SIZE 8
static inline uint32_t pke_sfr_srmfsm_mfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t pke_sfr_srmfsm_mfsm_read(void) {
	uint32_t word = pke_sfr_srmfsm_read();
	return pke_sfr_srmfsm_mfsm_extract(word);
}
#define CSR_PKE_SFR_FR_ADDR (CSR_BASE + -0xff4L)
#define CSR_PKE_SFR_FR_SIZE 1
static inline uint32_t pke_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + -0xff4L));
}
#define CSR_PKE_SFR_FR_CHNLX_DONE_OFFSET 0
#define CSR_PKE_SFR_FR_CHNLX_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnlx_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_fr_chnlx_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnlx_done_extract(word);
}
#define CSR_PKE_SFR_FR_CHNLI_DONE_OFFSET 1
#define CSR_PKE_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t pke_sfr_fr_chnli_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnli_done_extract(word);
}
#define CSR_PKE_SFR_FR_CHNLO_DONE_OFFSET 2
#define CSR_PKE_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t pke_sfr_fr_chnlo_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnlo_done_extract(word);
}
#define CSR_PKE_SFR_FR_PCORE_DONE_OFFSET 3
#define CSR_PKE_SFR_FR_PCORE_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_pcore_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t pke_sfr_fr_pcore_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_pcore_done_extract(word);
}
#define CSR_PKE_SFR_FR_MFSM_DONE_OFFSET 4
#define CSR_PKE_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t pke_sfr_fr_mfsm_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_mfsm_done_extract(word);
}
#define CSR_PKE_SFR_OPTNW_ADDR (CSR_BASE + -0xff0L)
#define CSR_PKE_SFR_OPTNW_SIZE 1
static inline uint32_t pke_sfr_optnw_read(void) {
	return csr_read_simple((CSR_BASE + -0xff0L));
}
static inline void pke_sfr_optnw_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xff0L));
}
#define CSR_PKE_SFR_OPTNW_SFR_OPTNW_OFFSET 0
#define CSR_PKE_SFR_OPTNW_SFR_OPTNW_SIZE 13
static inline uint32_t pke_sfr_optnw_sfr_optnw_extract(uint32_t oldword) {
	uint32_t mask = 0x1fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optnw_sfr_optnw_read(void) {
	uint32_t word = pke_sfr_optnw_read();
	return pke_sfr_optnw_sfr_optnw_extract(word);
}
static inline uint32_t pke_sfr_optnw_sfr_optnw_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optnw_sfr_optnw_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optnw_read();
	uint32_t newword = pke_sfr_optnw_sfr_optnw_replace(oldword, plain_value);
	pke_sfr_optnw_write(newword);
}
#define CSR_PKE_SFR_OPTEW_ADDR (CSR_BASE + -0xfecL)
#define CSR_PKE_SFR_OPTEW_SIZE 1
static inline uint32_t pke_sfr_optew_read(void) {
	return csr_read_simple((CSR_BASE + -0xfecL));
}
static inline void pke_sfr_optew_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfecL));
}
#define CSR_PKE_SFR_OPTEW_SFR_OPTEW_OFFSET 0
#define CSR_PKE_SFR_OPTEW_SFR_OPTEW_SIZE 13
static inline uint32_t pke_sfr_optew_sfr_optew_extract(uint32_t oldword) {
	uint32_t mask = 0x1fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optew_sfr_optew_read(void) {
	uint32_t word = pke_sfr_optew_read();
	return pke_sfr_optew_sfr_optew_extract(word);
}
static inline uint32_t pke_sfr_optew_sfr_optew_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optew_sfr_optew_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optew_read();
	uint32_t newword = pke_sfr_optew_sfr_optew_replace(oldword, plain_value);
	pke_sfr_optew_write(newword);
}
#define CSR_PKE_RESERVED6_ADDR (CSR_BASE + -0xfe8L)
#define CSR_PKE_RESERVED6_SIZE 1
static inline uint32_t pke_reserved6_read(void) {
	return csr_read_simple((CSR_BASE + -0xfe8L));
}
static inline void pke_reserved6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfe8L));
}
#define CSR_PKE_RESERVED7_ADDR (CSR_BASE + -0xfe4L)
#define CSR_PKE_RESERVED7_SIZE 1
static inline uint32_t pke_reserved7_read(void) {
	return csr_read_simple((CSR_BASE + -0xfe4L));
}
static inline void pke_reserved7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfe4L));
}
#define CSR_PKE_SFR_OPTMASK_ADDR (CSR_BASE + -0xfe0L)
#define CSR_PKE_SFR_OPTMASK_SIZE 1
static inline uint32_t pke_sfr_optmask_read(void) {
	return csr_read_simple((CSR_BASE + -0xfe0L));
}
static inline void pke_sfr_optmask_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfe0L));
}
#define CSR_PKE_SFR_OPTMASK_SFR_OPTMASK_OFFSET 0
#define CSR_PKE_SFR_OPTMASK_SFR_OPTMASK_SIZE 16
static inline uint32_t pke_sfr_optmask_sfr_optmask_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optmask_sfr_optmask_read(void) {
	uint32_t word = pke_sfr_optmask_read();
	return pke_sfr_optmask_sfr_optmask_extract(word);
}
static inline uint32_t pke_sfr_optmask_sfr_optmask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optmask_sfr_optmask_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optmask_read();
	uint32_t newword = pke_sfr_optmask_sfr_optmask_replace(oldword, plain_value);
	pke_sfr_optmask_write(newword);
}
#define CSR_PKE_RESERVED9_ADDR (CSR_BASE + -0xfdcL)
#define CSR_PKE_RESERVED9_SIZE 1
static inline uint32_t pke_reserved9_read(void) {
	return csr_read_simple((CSR_BASE + -0xfdcL));
}
static inline void pke_reserved9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfdcL));
}
#define CSR_PKE_RESERVED10_ADDR (CSR_BASE + -0xfd8L)
#define CSR_PKE_RESERVED10_SIZE 1
static inline uint32_t pke_reserved10_read(void) {
	return csr_read_simple((CSR_BASE + -0xfd8L));
}
static inline void pke_reserved10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfd8L));
}
#define CSR_PKE_RESERVED11_ADDR (CSR_BASE + -0xfd4L)
#define CSR_PKE_RESERVED11_SIZE 1
static inline uint32_t pke_reserved11_read(void) {
	return csr_read_simple((CSR_BASE + -0xfd4L));
}
static inline void pke_reserved11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfd4L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_ADDR (CSR_BASE + -0xfd0L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PCON_read(void) {
	return csr_read_simple((CSR_BASE + -0xfd0L));
}
static inline void pke_sfr_segptr_PTRID_PCON_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfd0L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_PTRID_PCON_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_PTRID_PCON_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pcon_read();
	return pke_sfr_segptr_ptrid_pcon_ptrid_pcon_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pcon_ptrid_pcon_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pcon_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pcon_ptrid_pcon_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pcon_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_ADDR (CSR_BASE + -0xfccL)
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PIB0_read(void) {
	return csr_read_simple((CSR_BASE + -0xfccL));
}
static inline void pke_sfr_segptr_PTRID_PIB0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfccL));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pib0_read();
	return pke_sfr_segptr_ptrid_pib0_ptrid_pib0_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pib0_ptrid_pib0_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pib0_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pib0_ptrid_pib0_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pib0_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_ADDR (CSR_BASE + -0xfc8L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PIB1_read(void) {
	return csr_read_simple((CSR_BASE + -0xfc8L));
}
static inline void pke_sfr_segptr_PTRID_PIB1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfc8L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pib1_read();
	return pke_sfr_segptr_ptrid_pib1_ptrid_pib1_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pib1_ptrid_pib1_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pib1_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pib1_ptrid_pib1_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pib1_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_ADDR (CSR_BASE + -0xfc4L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PKB_read(void) {
	return csr_read_simple((CSR_BASE + -0xfc4L));
}
static inline void pke_sfr_segptr_PTRID_PKB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfc4L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_PTRID_PKB_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_PTRID_PKB_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pkb_read();
	return pke_sfr_segptr_ptrid_pkb_ptrid_pkb_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pkb_ptrid_pkb_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pkb_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pkb_ptrid_pkb_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pkb_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_ADDR (CSR_BASE + -0xfc0L)
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_POB_read(void) {
	return csr_read_simple((CSR_BASE + -0xfc0L));
}
static inline void pke_sfr_segptr_PTRID_POB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfc0L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_PTRID_POB_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_PTRID_POB_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pob_read();
	return pke_sfr_segptr_ptrid_pob_ptrid_pob_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pob_ptrid_pob_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pob_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pob_ptrid_pob_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pob_write(newword);
}

/* scedma */
#define CSR_SCEDMA_BASE (CSR_BASE + -0x4000L)
#define CSR_SCEDMA_SFR_SCHSTART_AR_ADDR (CSR_BASE + -0x4000L)
#define CSR_SCEDMA_SFR_SCHSTART_AR_SIZE 1
static inline uint32_t scedma_sfr_schstart_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x4000L));
}
static inline void scedma_sfr_schstart_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4000L));
}
#define CSR_SCEDMA_SFR_SCHSTART_AR_SFR_SCHSTART_AR_OFFSET 0
#define CSR_SCEDMA_SFR_SCHSTART_AR_SFR_SCHSTART_AR_SIZE 32
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_read(void) {
	uint32_t word = scedma_sfr_schstart_ar_read();
	return scedma_sfr_schstart_ar_sfr_schstart_ar_extract(word);
}
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_schstart_ar_sfr_schstart_ar_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_schstart_ar_read();
	uint32_t newword = scedma_sfr_schstart_ar_sfr_schstart_ar_replace(oldword, plain_value);
	scedma_sfr_schstart_ar_write(newword);
}
#define CSR_SCEDMA_RESERVED1_ADDR (CSR_BASE + -0x3ffcL)
#define CSR_SCEDMA_RESERVED1_SIZE 1
static inline uint32_t scedma_reserved1_read(void) {
	return csr_read_simple((CSR_BASE + -0x3ffcL));
}
static inline void scedma_reserved1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3ffcL));
}
#define CSR_SCEDMA_RESERVED2_ADDR (CSR_BASE + -0x3ff8L)
#define CSR_SCEDMA_RESERVED2_SIZE 1
static inline uint32_t scedma_reserved2_read(void) {
	return csr_read_simple((CSR_BASE + -0x3ff8L));
}
static inline void scedma_reserved2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3ff8L));
}
#define CSR_SCEDMA_RESERVED3_ADDR (CSR_BASE + -0x3ff4L)
#define CSR_SCEDMA_RESERVED3_SIZE 1
static inline uint32_t scedma_reserved3_read(void) {
	return csr_read_simple((CSR_BASE + -0x3ff4L));
}
static inline void scedma_reserved3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3ff4L));
}
#define CSR_SCEDMA_SFR_XCH_FUNC_ADDR (CSR_BASE + -0x3ff0L)
#define CSR_SCEDMA_SFR_XCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_xch_func_read(void) {
	return csr_read_simple((CSR_BASE + -0x3ff0L));
}
static inline void scedma_sfr_xch_func_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3ff0L));
}
#define CSR_SCEDMA_SFR_XCH_FUNC_SFR_XCH_FUNC_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_FUNC_SFR_XCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_read(void) {
	uint32_t word = scedma_sfr_xch_func_read();
	return scedma_sfr_xch_func_sfr_xch_func_extract(word);
}
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_func_sfr_xch_func_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_func_read();
	uint32_t newword = scedma_sfr_xch_func_sfr_xch_func_replace(oldword, plain_value);
	scedma_sfr_xch_func_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_OPT_ADDR (CSR_BASE + -0x3fecL)
#define CSR_SCEDMA_SFR_XCH_OPT_SIZE 1
static inline uint32_t scedma_sfr_xch_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fecL));
}
static inline void scedma_sfr_xch_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fecL));
}
#define CSR_SCEDMA_SFR_XCH_OPT_SFR_XCH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_OPT_SFR_XCH_OPT_SIZE 8
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_read(void) {
	uint32_t word = scedma_sfr_xch_opt_read();
	return scedma_sfr_xch_opt_sfr_xch_opt_extract(word);
}
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_opt_sfr_xch_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_opt_read();
	uint32_t newword = scedma_sfr_xch_opt_sfr_xch_opt_replace(oldword, plain_value);
	scedma_sfr_xch_opt_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_AXSTART_ADDR (CSR_BASE + -0x3fe8L)
#define CSR_SCEDMA_SFR_XCH_AXSTART_SIZE 1
static inline uint32_t scedma_sfr_xch_axstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fe8L));
}
static inline void scedma_sfr_xch_axstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fe8L));
}
#define CSR_SCEDMA_SFR_XCH_AXSTART_SFR_XCH_AXSTART_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_AXSTART_SFR_XCH_AXSTART_SIZE 32
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_read(void) {
	uint32_t word = scedma_sfr_xch_axstart_read();
	return scedma_sfr_xch_axstart_sfr_xch_axstart_extract(word);
}
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_axstart_sfr_xch_axstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_axstart_read();
	uint32_t newword = scedma_sfr_xch_axstart_sfr_xch_axstart_replace(oldword, plain_value);
	scedma_sfr_xch_axstart_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_SEGID_ADDR (CSR_BASE + -0x3fe4L)
#define CSR_SCEDMA_SFR_XCH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_xch_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fe4L));
}
static inline void scedma_sfr_xch_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fe4L));
}
#define CSR_SCEDMA_SFR_XCH_SEGID_SFR_XCH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_SEGID_SFR_XCH_SEGID_SIZE 8
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_read(void) {
	uint32_t word = scedma_sfr_xch_segid_read();
	return scedma_sfr_xch_segid_sfr_xch_segid_extract(word);
}
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_segid_sfr_xch_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_segid_read();
	uint32_t newword = scedma_sfr_xch_segid_sfr_xch_segid_replace(oldword, plain_value);
	scedma_sfr_xch_segid_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_SEGSTART_ADDR (CSR_BASE + -0x3fe0L)
#define CSR_SCEDMA_SFR_XCH_SEGSTART_SIZE 1
static inline uint32_t scedma_sfr_xch_segstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fe0L));
}
static inline void scedma_sfr_xch_segstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fe0L));
}
#define CSR_SCEDMA_SFR_XCH_SEGSTART_XCHCR_SEGSTART_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_SEGSTART_XCHCR_SEGSTART_SIZE 12
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_read(void) {
	uint32_t word = scedma_sfr_xch_segstart_read();
	return scedma_sfr_xch_segstart_xchcr_segstart_extract(word);
}
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_segstart_xchcr_segstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_segstart_read();
	uint32_t newword = scedma_sfr_xch_segstart_xchcr_segstart_replace(oldword, plain_value);
	scedma_sfr_xch_segstart_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_ADDR (CSR_BASE + -0x3fdcL)
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_xch_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fdcL));
}
static inline void scedma_sfr_xch_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fdcL));
}
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_XCHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_XCHCR_TRANSIZE_SIZE 30
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0x3fffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_read(void) {
	uint32_t word = scedma_sfr_xch_transize_read();
	return scedma_sfr_xch_transize_xchcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3fffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_transize_xchcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_transize_read();
	uint32_t newword = scedma_sfr_xch_transize_xchcr_transize_replace(oldword, plain_value);
	scedma_sfr_xch_transize_write(newword);
}
#define CSR_SCEDMA_RESERVED10_ADDR (CSR_BASE + -0x3fd8L)
#define CSR_SCEDMA_RESERVED10_SIZE 1
static inline uint32_t scedma_reserved10_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fd8L));
}
static inline void scedma_reserved10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fd8L));
}
#define CSR_SCEDMA_RESERVED11_ADDR (CSR_BASE + -0x3fd4L)
#define CSR_SCEDMA_RESERVED11_SIZE 1
static inline uint32_t scedma_reserved11_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fd4L));
}
static inline void scedma_reserved11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fd4L));
}
#define CSR_SCEDMA_SFR_SCH_FUNC_ADDR (CSR_BASE + -0x3fd0L)
#define CSR_SCEDMA_SFR_SCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_sch_func_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fd0L));
}
static inline void scedma_sfr_sch_func_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fd0L));
}
#define CSR_SCEDMA_SFR_SCH_FUNC_SFR_SCH_FUNC_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_FUNC_SFR_SCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_read(void) {
	uint32_t word = scedma_sfr_sch_func_read();
	return scedma_sfr_sch_func_sfr_sch_func_extract(word);
}
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_func_sfr_sch_func_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_func_read();
	uint32_t newword = scedma_sfr_sch_func_sfr_sch_func_replace(oldword, plain_value);
	scedma_sfr_sch_func_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_OPT_ADDR (CSR_BASE + -0x3fccL)
#define CSR_SCEDMA_SFR_SCH_OPT_SIZE 1
static inline uint32_t scedma_sfr_sch_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fccL));
}
static inline void scedma_sfr_sch_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fccL));
}
#define CSR_SCEDMA_SFR_SCH_OPT_SFR_SCH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_OPT_SFR_SCH_OPT_SIZE 8
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_read(void) {
	uint32_t word = scedma_sfr_sch_opt_read();
	return scedma_sfr_sch_opt_sfr_sch_opt_extract(word);
}
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_opt_sfr_sch_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_opt_read();
	uint32_t newword = scedma_sfr_sch_opt_sfr_sch_opt_replace(oldword, plain_value);
	scedma_sfr_sch_opt_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_AXSTART_ADDR (CSR_BASE + -0x3fc8L)
#define CSR_SCEDMA_SFR_SCH_AXSTART_SIZE 1
static inline uint32_t scedma_sfr_sch_axstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fc8L));
}
static inline void scedma_sfr_sch_axstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fc8L));
}
#define CSR_SCEDMA_SFR_SCH_AXSTART_SFR_SCH_AXSTART_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_AXSTART_SFR_SCH_AXSTART_SIZE 32
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_read(void) {
	uint32_t word = scedma_sfr_sch_axstart_read();
	return scedma_sfr_sch_axstart_sfr_sch_axstart_extract(word);
}
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_axstart_sfr_sch_axstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_axstart_read();
	uint32_t newword = scedma_sfr_sch_axstart_sfr_sch_axstart_replace(oldword, plain_value);
	scedma_sfr_sch_axstart_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_SEGID_ADDR (CSR_BASE + -0x3fc4L)
#define CSR_SCEDMA_SFR_SCH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_sch_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fc4L));
}
static inline void scedma_sfr_sch_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fc4L));
}
#define CSR_SCEDMA_SFR_SCH_SEGID_SFR_SCH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_SEGID_SFR_SCH_SEGID_SIZE 8
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_read(void) {
	uint32_t word = scedma_sfr_sch_segid_read();
	return scedma_sfr_sch_segid_sfr_sch_segid_extract(word);
}
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_segid_sfr_sch_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_segid_read();
	uint32_t newword = scedma_sfr_sch_segid_sfr_sch_segid_replace(oldword, plain_value);
	scedma_sfr_sch_segid_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_SEGSTART_ADDR (CSR_BASE + -0x3fc0L)
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SIZE 1
static inline uint32_t scedma_sfr_sch_segstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fc0L));
}
static inline void scedma_sfr_sch_segstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fc0L));
}
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SCHCR_SEGSTART_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SCHCR_SEGSTART_SIZE 12
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_read(void) {
	uint32_t word = scedma_sfr_sch_segstart_read();
	return scedma_sfr_sch_segstart_schcr_segstart_extract(word);
}
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_segstart_schcr_segstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_segstart_read();
	uint32_t newword = scedma_sfr_sch_segstart_schcr_segstart_replace(oldword, plain_value);
	scedma_sfr_sch_segstart_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_ADDR (CSR_BASE + -0x3fbcL)
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_sch_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fbcL));
}
static inline void scedma_sfr_sch_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fbcL));
}
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SCHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SCHCR_TRANSIZE_SIZE 30
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0x3fffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_read(void) {
	uint32_t word = scedma_sfr_sch_transize_read();
	return scedma_sfr_sch_transize_schcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3fffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_transize_schcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_transize_read();
	uint32_t newword = scedma_sfr_sch_transize_schcr_transize_replace(oldword, plain_value);
	scedma_sfr_sch_transize_write(newword);
}
#define CSR_SCEDMA_RESERVED18_ADDR (CSR_BASE + -0x3fb8L)
#define CSR_SCEDMA_RESERVED18_SIZE 1
static inline uint32_t scedma_reserved18_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fb8L));
}
static inline void scedma_reserved18_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fb8L));
}
#define CSR_SCEDMA_RESERVED19_ADDR (CSR_BASE + -0x3fb4L)
#define CSR_SCEDMA_RESERVED19_SIZE 1
static inline uint32_t scedma_reserved19_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fb4L));
}
static inline void scedma_reserved19_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fb4L));
}
#define CSR_SCEDMA_SFR_ICH_OPT_ADDR (CSR_BASE + -0x3fb0L)
#define CSR_SCEDMA_SFR_ICH_OPT_SIZE 1
static inline uint32_t scedma_sfr_ich_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fb0L));
}
static inline void scedma_sfr_ich_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fb0L));
}
#define CSR_SCEDMA_SFR_ICH_OPT_SFR_ICH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_OPT_SFR_ICH_OPT_SIZE 4
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_read(void) {
	uint32_t word = scedma_sfr_ich_opt_read();
	return scedma_sfr_ich_opt_sfr_ich_opt_extract(word);
}
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_opt_sfr_ich_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_opt_read();
	uint32_t newword = scedma_sfr_ich_opt_sfr_ich_opt_replace(oldword, plain_value);
	scedma_sfr_ich_opt_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_SEGID_ADDR (CSR_BASE + -0x3facL)
#define CSR_SCEDMA_SFR_ICH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_ich_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x3facL));
}
static inline void scedma_sfr_ich_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3facL));
}
#define CSR_SCEDMA_SFR_ICH_SEGID_SFR_ICH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_SEGID_SFR_ICH_SEGID_SIZE 16
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_read(void) {
	uint32_t word = scedma_sfr_ich_segid_read();
	return scedma_sfr_ich_segid_sfr_ich_segid_extract(word);
}
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_segid_sfr_ich_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_segid_read();
	uint32_t newword = scedma_sfr_ich_segid_sfr_ich_segid_replace(oldword, plain_value);
	scedma_sfr_ich_segid_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_RPSTART_ADDR (CSR_BASE + -0x3fa8L)
#define CSR_SCEDMA_SFR_ICH_RPSTART_SIZE 1
static inline uint32_t scedma_sfr_ich_rpstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fa8L));
}
static inline void scedma_sfr_ich_rpstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fa8L));
}
#define CSR_SCEDMA_SFR_ICH_RPSTART_ICHCR_RPSTART_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_RPSTART_ICHCR_RPSTART_SIZE 12
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_read(void) {
	uint32_t word = scedma_sfr_ich_rpstart_read();
	return scedma_sfr_ich_rpstart_ichcr_rpstart_extract(word);
}
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_rpstart_ichcr_rpstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_rpstart_read();
	uint32_t newword = scedma_sfr_ich_rpstart_ichcr_rpstart_replace(oldword, plain_value);
	scedma_sfr_ich_rpstart_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_WPSTART_ADDR (CSR_BASE + -0x3fa4L)
#define CSR_SCEDMA_SFR_ICH_WPSTART_SIZE 1
static inline uint32_t scedma_sfr_ich_wpstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fa4L));
}
static inline void scedma_sfr_ich_wpstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fa4L));
}
#define CSR_SCEDMA_SFR_ICH_WPSTART_ICHCR_WPSTART_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_WPSTART_ICHCR_WPSTART_SIZE 12
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_read(void) {
	uint32_t word = scedma_sfr_ich_wpstart_read();
	return scedma_sfr_ich_wpstart_ichcr_wpstart_extract(word);
}
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_wpstart_ichcr_wpstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_wpstart_read();
	uint32_t newword = scedma_sfr_ich_wpstart_ichcr_wpstart_replace(oldword, plain_value);
	scedma_sfr_ich_wpstart_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ADDR (CSR_BASE + -0x3fa0L)
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_ich_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fa0L));
}
static inline void scedma_sfr_ich_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fa0L));
}
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ICHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ICHCR_TRANSIZE_SIZE 12
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_read(void) {
	uint32_t word = scedma_sfr_ich_transize_read();
	return scedma_sfr_ich_transize_ichcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_transize_ichcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_transize_read();
	uint32_t newword = scedma_sfr_ich_transize_ichcr_transize_replace(oldword, plain_value);
	scedma_sfr_ich_transize_write(newword);
}

/* sce_glbsfr */
#define CSR_SCE_GLBSFR_BASE (CSR_BASE + -0x5000L)
#define CSR_SCE_GLBSFR_SFR_SCEMODE_ADDR (CSR_BASE + -0x5000L)
#define CSR_SCE_GLBSFR_SFR_SCEMODE_SIZE 1
static inline uint32_t sce_glbsfr_sfr_scemode_read(void) {
	return csr_read_simple((CSR_BASE + -0x5000L));
}
static inline void sce_glbsfr_sfr_scemode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x5000L));
}
#define CSR_SCE_GLBSFR_SFR_SCEMODE_CR_SCEMODE_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SCEMODE_CR_SCEMODE_SIZE 2
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_read(void) {
	uint32_t word = sce_glbsfr_sfr_scemode_read();
	return sce_glbsfr_sfr_scemode_cr_scemode_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_scemode_cr_scemode_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_scemode_read();
	uint32_t newword = sce_glbsfr_sfr_scemode_cr_scemode_replace(oldword, plain_value);
	sce_glbsfr_sfr_scemode_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_SUBEN_ADDR (CSR_BASE + -0x4ffcL)
#define CSR_SCE_GLBSFR_SFR_SUBEN_SIZE 1
static inline uint32_t sce_glbsfr_sfr_suben_read(void) {
	return csr_read_simple((CSR_BASE + -0x4ffcL));
}
static inline void sce_glbsfr_sfr_suben_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4ffcL));
}
#define CSR_SCE_GLBSFR_SFR_SUBEN_CR_SUBEN_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SUBEN_CR_SUBEN_SIZE 16
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_read(void) {
	uint32_t word = sce_glbsfr_sfr_suben_read();
	return sce_glbsfr_sfr_suben_cr_suben_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_suben_cr_suben_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_suben_read();
	uint32_t newword = sce_glbsfr_sfr_suben_cr_suben_replace(oldword, plain_value);
	sce_glbsfr_sfr_suben_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_AHBS_ADDR (CSR_BASE + -0x4ff8L)
#define CSR_SCE_GLBSFR_SFR_AHBS_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ahbs_read(void) {
	return csr_read_simple((CSR_BASE + -0x4ff8L));
}
static inline void sce_glbsfr_sfr_ahbs_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4ff8L));
}
#define CSR_SCE_GLBSFR_SFR_AHBS_CR_AHBSOPT_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_AHBS_CR_AHBSOPT_SIZE 5
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_read(void) {
	uint32_t word = sce_glbsfr_sfr_ahbs_read();
	return sce_glbsfr_sfr_ahbs_cr_ahbsopt_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ahbs_cr_ahbsopt_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ahbs_read();
	uint32_t newword = sce_glbsfr_sfr_ahbs_cr_ahbsopt_replace(oldword, plain_value);
	sce_glbsfr_sfr_ahbs_write(newword);
}
#define CSR_SCE_GLBSFR_RESERVED3_ADDR (CSR_BASE + -0x4ff4L)
#define CSR_SCE_GLBSFR_RESERVED3_SIZE 1
static inline uint32_t sce_glbsfr_reserved3_read(void) {
	return csr_read_simple((CSR_BASE + -0x4ff4L));
}
static inline void sce_glbsfr_reserved3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4ff4L));
}
#define CSR_SCE_GLBSFR_SFR_SRBUSY_ADDR (CSR_BASE + -0x4ff0L)
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SIZE 1
static inline uint32_t sce_glbsfr_sfr_srbusy_read(void) {
	return csr_read_simple((CSR_BASE + -0x4ff0L));
}
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SR_BUSY_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SR_BUSY_SIZE 16
static inline uint32_t sce_glbsfr_sfr_srbusy_sr_busy_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_srbusy_sr_busy_read(void) {
	uint32_t word = sce_glbsfr_sfr_srbusy_read();
	return sce_glbsfr_sfr_srbusy_sr_busy_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FRDONE_ADDR (CSR_BASE + -0x4fecL)
#define CSR_SCE_GLBSFR_SFR_FRDONE_SIZE 1
static inline uint32_t sce_glbsfr_sfr_frdone_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fecL));
}
#define CSR_SCE_GLBSFR_SFR_FRDONE_FR_DONE_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FRDONE_FR_DONE_SIZE 16
static inline uint32_t sce_glbsfr_sfr_frdone_fr_done_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_frdone_fr_done_read(void) {
	uint32_t word = sce_glbsfr_sfr_frdone_read();
	return sce_glbsfr_sfr_frdone_fr_done_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FRERR_ADDR (CSR_BASE + -0x4fe8L)
#define CSR_SCE_GLBSFR_SFR_FRERR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_frerr_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fe8L));
}
#define CSR_SCE_GLBSFR_SFR_FRERR_FR_ERR_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FRERR_FR_ERR_SIZE 16
static inline uint32_t sce_glbsfr_sfr_frerr_fr_err_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_frerr_fr_err_read(void) {
	uint32_t word = sce_glbsfr_sfr_frerr_read();
	return sce_glbsfr_sfr_frerr_fr_err_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_ARCLR_ADDR (CSR_BASE + -0x4fe4L)
#define CSR_SCE_GLBSFR_SFR_ARCLR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_arclr_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fe4L));
}
static inline void sce_glbsfr_sfr_arclr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fe4L));
}
#define CSR_SCE_GLBSFR_SFR_ARCLR_AR_CLRRAM_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_ARCLR_AR_CLRRAM_SIZE 32
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_read(void) {
	uint32_t word = sce_glbsfr_sfr_arclr_read();
	return sce_glbsfr_sfr_arclr_ar_clrram_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_arclr_ar_clrram_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_arclr_read();
	uint32_t newword = sce_glbsfr_sfr_arclr_ar_clrram_replace(oldword, plain_value);
	sce_glbsfr_sfr_arclr_write(newword);
}
#define CSR_SCE_GLBSFR_RESERVED8_ADDR (CSR_BASE + -0x4fe0L)
#define CSR_SCE_GLBSFR_RESERVED8_SIZE 1
static inline uint32_t sce_glbsfr_reserved8_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fe0L));
}
static inline void sce_glbsfr_reserved8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fe0L));
}
#define CSR_SCE_GLBSFR_RESERVED9_ADDR (CSR_BASE + -0x4fdcL)
#define CSR_SCE_GLBSFR_RESERVED9_SIZE 1
static inline uint32_t sce_glbsfr_reserved9_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fdcL));
}
static inline void sce_glbsfr_reserved9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fdcL));
}
#define CSR_SCE_GLBSFR_RESERVED10_ADDR (CSR_BASE + -0x4fd8L)
#define CSR_SCE_GLBSFR_RESERVED10_SIZE 1
static inline uint32_t sce_glbsfr_reserved10_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fd8L));
}
static inline void sce_glbsfr_reserved10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fd8L));
}
#define CSR_SCE_GLBSFR_RESERVED11_ADDR (CSR_BASE + -0x4fd4L)
#define CSR_SCE_GLBSFR_RESERVED11_SIZE 1
static inline uint32_t sce_glbsfr_reserved11_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fd4L));
}
static inline void sce_glbsfr_reserved11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fd4L));
}
#define CSR_SCE_GLBSFR_SFR_FFEN_ADDR (CSR_BASE + -0x4fd0L)
#define CSR_SCE_GLBSFR_SFR_FFEN_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffen_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fd0L));
}
static inline void sce_glbsfr_sfr_ffen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fd0L));
}
#define CSR_SCE_GLBSFR_SFR_FFEN_CR_FFEN_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFEN_CR_FFEN_SIZE 6
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffen_read();
	return sce_glbsfr_sfr_ffen_cr_ffen_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ffen_cr_ffen_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ffen_read();
	uint32_t newword = sce_glbsfr_sfr_ffen_cr_ffen_replace(oldword, plain_value);
	sce_glbsfr_sfr_ffen_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_FFCLR_ADDR (CSR_BASE + -0x4fccL)
#define CSR_SCE_GLBSFR_SFR_FFCLR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffclr_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fccL));
}
static inline void sce_glbsfr_sfr_ffclr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fccL));
}
#define CSR_SCE_GLBSFR_SFR_FFCLR_AR_FFCLR_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCLR_AR_FFCLR_SIZE 32
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffclr_read();
	return sce_glbsfr_sfr_ffclr_ar_ffclr_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ffclr_ar_ffclr_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ffclr_read();
	uint32_t newword = sce_glbsfr_sfr_ffclr_ar_ffclr_replace(oldword, plain_value);
	sce_glbsfr_sfr_ffclr_write(newword);
}
#define CSR_SCE_GLBSFR_RESERVED14_ADDR (CSR_BASE + -0x4fc8L)
#define CSR_SCE_GLBSFR_RESERVED14_SIZE 1
static inline uint32_t sce_glbsfr_reserved14_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fc8L));
}
static inline void sce_glbsfr_reserved14_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fc8L));
}
#define CSR_SCE_GLBSFR_RESERVED15_ADDR (CSR_BASE + -0x4fc4L)
#define CSR_SCE_GLBSFR_RESERVED15_SIZE 1
static inline uint32_t sce_glbsfr_reserved15_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fc4L));
}
static inline void sce_glbsfr_reserved15_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fc4L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_ADDR (CSR_BASE + -0x4fc0L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fc0L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SR_FF0_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SR_FF0_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff0_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_ADDR (CSR_BASE + -0x4fbcL)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fbcL));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SR_FF1_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SR_FF1_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff1_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_ADDR (CSR_BASE + -0x4fb8L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fb8L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SR_FF2_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SR_FF2_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff2_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_ADDR (CSR_BASE + -0x4fb4L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fb4L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SR_FF3_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SR_FF3_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff3_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_ADDR (CSR_BASE + -0x4fb0L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fb0L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SR_FF4_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SR_FF4_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff4_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_ADDR (CSR_BASE + -0x4facL)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_read(void) {
	return csr_read_simple((CSR_BASE + -0x4facL));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SR_FF5_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SR_FF5_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff5_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_extract(word);
}

/* trng */
#define CSR_TRNG_BASE (CSR_BASE + 0x1000L)
#define CSR_TRNG_RESERVED0_ADDR (CSR_BASE + 0x1000L)
#define CSR_TRNG_RESERVED0_SIZE 1
static inline uint32_t trng_reserved0_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline void trng_reserved0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000L));
}

/* alu */
#define CSR_ALU_BASE (CSR_BASE + 0x2000L)
#define CSR_ALU_RESERVED0_ADDR (CSR_BASE + 0x2000L)
#define CSR_ALU_RESERVED0_SIZE 1
static inline uint32_t alu_reserved0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void alu_reserved0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}

#endif
//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (37d630db) on 2023-05-01 02:13:57
//--------------------------------------------------------------------------------
#ifndef __GENERATED_MEM_H
#define __GENERATED_MEM_H

#ifndef SCE_BASE
#define SCE_BASE 0x40028000L
#define SCE_SIZE 0x00008000
#endif

#ifndef MEM_REGIONS
#define MEM_REGIONS "SCE  0x40028000 0x8000 "
#endif
#endif
//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (37d630db) on 2023-05-01 02:13:57
//--------------------------------------------------------------------------------
#ifndef __GENERATED_SOC_H
#define __GENERATED_SOC_H

#ifndef __ASSEMBLER__
#endif // !__ASSEMBLER__

#endif
