//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (9b4f6007) on 2024-03-03 02:37:01
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x50100000L
#endif

/* udma_ctrl */
#define CSR_UDMA_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_UDMA_CTRL_REG_CG_ADDR (CSR_BASE + 0x0L)
#define CSR_UDMA_CTRL_REG_CG_SIZE 1
static inline uint32_t udma_ctrl_REG_CG_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void udma_ctrl_REG_CG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
#define CSR_UDMA_CTRL_REG_CG_R_CG_OFFSET 0
#define CSR_UDMA_CTRL_REG_CG_R_CG_SIZE 6
static inline uint32_t udma_ctrl_reg_cg_r_cg_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_ctrl_reg_cg_r_cg_read(void) {
	uint32_t word = udma_ctrl_reg_cg_read();
	return udma_ctrl_reg_cg_r_cg_extract(word);
}
static inline uint32_t udma_ctrl_reg_cg_r_cg_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_ctrl_reg_cg_r_cg_write(uint32_t plain_value) {
	uint32_t oldword = udma_ctrl_reg_cg_read();
	uint32_t newword = udma_ctrl_reg_cg_r_cg_replace(oldword, plain_value);
	udma_ctrl_reg_cg_write(newword);
}
#define CSR_UDMA_CTRL_REG_CFG_EVT_ADDR (CSR_BASE + 0x4L)
#define CSR_UDMA_CTRL_REG_CFG_EVT_SIZE 1
static inline uint32_t udma_ctrl_REG_CFG_EVT_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void udma_ctrl_REG_CFG_EVT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
#define CSR_UDMA_CTRL_REG_CFG_EVT_R_CMP_EVT_0_OFFSET 0
#define CSR_UDMA_CTRL_REG_CFG_EVT_R_CMP_EVT_0_SIZE 8
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_0_read(void) {
	uint32_t word = udma_ctrl_reg_cfg_evt_read();
	return udma_ctrl_reg_cfg_evt_r_cmp_evt_0_extract(word);
}
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_ctrl_reg_cfg_evt_r_cmp_evt_0_write(uint32_t plain_value) {
	uint32_t oldword = udma_ctrl_reg_cfg_evt_read();
	uint32_t newword = udma_ctrl_reg_cfg_evt_r_cmp_evt_0_replace(oldword, plain_value);
	udma_ctrl_reg_cfg_evt_write(newword);
}
#define CSR_UDMA_CTRL_REG_CFG_EVT_R_CMP_EVT_1_OFFSET 8
#define CSR_UDMA_CTRL_REG_CFG_EVT_R_CMP_EVT_1_SIZE 8
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_1_read(void) {
	uint32_t word = udma_ctrl_reg_cfg_evt_read();
	return udma_ctrl_reg_cfg_evt_r_cmp_evt_1_extract(word);
}
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_ctrl_reg_cfg_evt_r_cmp_evt_1_write(uint32_t plain_value) {
	uint32_t oldword = udma_ctrl_reg_cfg_evt_read();
	uint32_t newword = udma_ctrl_reg_cfg_evt_r_cmp_evt_1_replace(oldword, plain_value);
	udma_ctrl_reg_cfg_evt_write(newword);
}
#define CSR_UDMA_CTRL_REG_CFG_EVT_R_CMP_EVT_2_OFFSET 16
#define CSR_UDMA_CTRL_REG_CFG_EVT_R_CMP_EVT_2_SIZE 8
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_2_read(void) {
	uint32_t word = udma_ctrl_reg_cfg_evt_read();
	return udma_ctrl_reg_cfg_evt_r_cmp_evt_2_extract(word);
}
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_ctrl_reg_cfg_evt_r_cmp_evt_2_write(uint32_t plain_value) {
	uint32_t oldword = udma_ctrl_reg_cfg_evt_read();
	uint32_t newword = udma_ctrl_reg_cfg_evt_r_cmp_evt_2_replace(oldword, plain_value);
	udma_ctrl_reg_cfg_evt_write(newword);
}
#define CSR_UDMA_CTRL_REG_CFG_EVT_R_CMP_EVT_3_OFFSET 24
#define CSR_UDMA_CTRL_REG_CFG_EVT_R_CMP_EVT_3_SIZE 8
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_3_read(void) {
	uint32_t word = udma_ctrl_reg_cfg_evt_read();
	return udma_ctrl_reg_cfg_evt_r_cmp_evt_3_extract(word);
}
static inline uint32_t udma_ctrl_reg_cfg_evt_r_cmp_evt_3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void udma_ctrl_reg_cfg_evt_r_cmp_evt_3_write(uint32_t plain_value) {
	uint32_t oldword = udma_ctrl_reg_cfg_evt_read();
	uint32_t newword = udma_ctrl_reg_cfg_evt_r_cmp_evt_3_replace(oldword, plain_value);
	udma_ctrl_reg_cfg_evt_write(newword);
}
#define CSR_UDMA_CTRL_REG_RST_ADDR (CSR_BASE + 0x8L)
#define CSR_UDMA_CTRL_REG_RST_SIZE 1
static inline uint32_t udma_ctrl_REG_RST_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
static inline void udma_ctrl_REG_RST_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8L));
}
#define CSR_UDMA_CTRL_REG_RST_R_RST_OFFSET 0
#define CSR_UDMA_CTRL_REG_RST_R_RST_SIZE 6
static inline uint32_t udma_ctrl_reg_rst_r_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_ctrl_reg_rst_r_rst_read(void) {
	uint32_t word = udma_ctrl_reg_rst_read();
	return udma_ctrl_reg_rst_r_rst_extract(word);
}
static inline uint32_t udma_ctrl_reg_rst_r_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_ctrl_reg_rst_r_rst_write(uint32_t plain_value) {
	uint32_t oldword = udma_ctrl_reg_rst_read();
	uint32_t newword = udma_ctrl_reg_rst_r_rst_replace(oldword, plain_value);
	udma_ctrl_reg_rst_write(newword);
}

/* udma_uart_0 */
#define CSR_UDMA_UART_0_BASE (CSR_BASE + 0x1000L)
#define CSR_UDMA_UART_0_REG_RX_SADDR_ADDR (CSR_BASE + 0x1000L)
#define CSR_UDMA_UART_0_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_uart_0_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline void udma_uart_0_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000L));
}
#define CSR_UDMA_UART_0_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_UART_0_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_uart_0_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_uart_0_reg_rx_saddr_read();
	return udma_uart_0_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_uart_0_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_0_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_rx_saddr_read();
	uint32_t newword = udma_uart_0_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_uart_0_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_UART_0_REG_RX_SIZE_ADDR (CSR_BASE + 0x1004L)
#define CSR_UDMA_UART_0_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_uart_0_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
static inline void udma_uart_0_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1004L));
}
#define CSR_UDMA_UART_0_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_UART_0_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_uart_0_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_uart_0_reg_rx_size_read();
	return udma_uart_0_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_uart_0_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_0_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_rx_size_read();
	uint32_t newword = udma_uart_0_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_uart_0_reg_rx_size_write(newword);
}
#define CSR_UDMA_UART_0_REG_RX_CFG_ADDR (CSR_BASE + 0x1008L)
#define CSR_UDMA_UART_0_REG_RX_CFG_SIZE 1
static inline uint32_t udma_uart_0_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}
static inline void udma_uart_0_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1008L));
}
#define CSR_UDMA_UART_0_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_UART_0_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_uart_0_reg_rx_cfg_read();
	return udma_uart_0_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_0_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_rx_cfg_read();
	uint32_t newword = udma_uart_0_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_uart_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_0_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_UART_0_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_uart_0_reg_rx_cfg_read();
	return udma_uart_0_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_0_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_rx_cfg_read();
	uint32_t newword = udma_uart_0_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_uart_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_0_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_UART_0_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_uart_0_reg_rx_cfg_read();
	return udma_uart_0_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_uart_0_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_uart_0_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_rx_cfg_read();
	uint32_t newword = udma_uart_0_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_uart_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_0_REG_TX_SADDR_ADDR (CSR_BASE + 0x1010L)
#define CSR_UDMA_UART_0_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_uart_0_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010L));
}
static inline void udma_uart_0_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010L));
}
#define CSR_UDMA_UART_0_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_UART_0_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_uart_0_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_uart_0_reg_tx_saddr_read();
	return udma_uart_0_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_uart_0_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_0_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_tx_saddr_read();
	uint32_t newword = udma_uart_0_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_uart_0_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_UART_0_REG_TX_SIZE_ADDR (CSR_BASE + 0x1014L)
#define CSR_UDMA_UART_0_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_uart_0_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x1014L));
}
static inline void udma_uart_0_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1014L));
}
#define CSR_UDMA_UART_0_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_UART_0_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_uart_0_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_uart_0_reg_tx_size_read();
	return udma_uart_0_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_uart_0_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_0_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_tx_size_read();
	uint32_t newword = udma_uart_0_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_uart_0_reg_tx_size_write(newword);
}
#define CSR_UDMA_UART_0_REG_TX_CFG_ADDR (CSR_BASE + 0x1018L)
#define CSR_UDMA_UART_0_REG_TX_CFG_SIZE 1
static inline uint32_t udma_uart_0_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x1018L));
}
static inline void udma_uart_0_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1018L));
}
#define CSR_UDMA_UART_0_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_UART_0_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_uart_0_reg_tx_cfg_read();
	return udma_uart_0_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_0_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_tx_cfg_read();
	uint32_t newword = udma_uart_0_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_uart_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_0_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_UART_0_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_uart_0_reg_tx_cfg_read();
	return udma_uart_0_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_0_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_tx_cfg_read();
	uint32_t newword = udma_uart_0_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_uart_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_0_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_UART_0_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_uart_0_reg_tx_cfg_read();
	return udma_uart_0_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_uart_0_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_uart_0_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_tx_cfg_read();
	uint32_t newword = udma_uart_0_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_uart_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_0_REG_STATUS_ADDR (CSR_BASE + 0x1020L)
#define CSR_UDMA_UART_0_REG_STATUS_SIZE 1
static inline uint32_t udma_uart_0_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x1020L));
}
#define CSR_UDMA_UART_0_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_UART_0_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_uart_0_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_status_status_i_read(void) {
	uint32_t word = udma_uart_0_reg_status_read();
	return udma_uart_0_reg_status_status_i_extract(word);
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_ADDR (CSR_BASE + 0x1024L)
#define CSR_UDMA_UART_0_REG_UART_SETUP_SIZE 1
static inline uint32_t udma_uart_0_REG_UART_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x1024L));
}
static inline void udma_uart_0_REG_UART_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1024L));
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_PARITY_EN_OFFSET 0
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_PARITY_EN_SIZE 1
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_parity_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_parity_en_read(void) {
	uint32_t word = udma_uart_0_reg_uart_setup_read();
	return udma_uart_0_reg_uart_setup_r_uart_parity_en_extract(word);
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_parity_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_0_reg_uart_setup_r_uart_parity_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_uart_setup_read();
	uint32_t newword = udma_uart_0_reg_uart_setup_r_uart_parity_en_replace(oldword, plain_value);
	udma_uart_0_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_BITS_OFFSET 1
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_BITS_SIZE 2
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_bits_read(void) {
	uint32_t word = udma_uart_0_reg_uart_setup_read();
	return udma_uart_0_reg_uart_setup_r_uart_bits_extract(word);
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_uart_0_reg_uart_setup_r_uart_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_uart_setup_read();
	uint32_t newword = udma_uart_0_reg_uart_setup_r_uart_bits_replace(oldword, plain_value);
	udma_uart_0_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_STOP_BITS_OFFSET 3
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_STOP_BITS_SIZE 1
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_stop_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_stop_bits_read(void) {
	uint32_t word = udma_uart_0_reg_uart_setup_read();
	return udma_uart_0_reg_uart_setup_r_uart_stop_bits_extract(word);
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_stop_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void udma_uart_0_reg_uart_setup_r_uart_stop_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_uart_setup_read();
	uint32_t newword = udma_uart_0_reg_uart_setup_r_uart_stop_bits_replace(oldword, plain_value);
	udma_uart_0_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_RX_POLLING_EN_OFFSET 4
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_RX_POLLING_EN_SIZE 1
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_rx_polling_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_rx_polling_en_read(void) {
	uint32_t word = udma_uart_0_reg_uart_setup_read();
	return udma_uart_0_reg_uart_setup_r_uart_rx_polling_en_extract(word);
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_rx_polling_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_0_reg_uart_setup_r_uart_rx_polling_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_uart_setup_read();
	uint32_t newword = udma_uart_0_reg_uart_setup_r_uart_rx_polling_en_replace(oldword, plain_value);
	udma_uart_0_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_RX_CLEAN_FIFO_OFFSET 5
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_RX_CLEAN_FIFO_SIZE 1
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_rx_clean_fifo_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_rx_clean_fifo_read(void) {
	uint32_t word = udma_uart_0_reg_uart_setup_read();
	return udma_uart_0_reg_uart_setup_r_uart_rx_clean_fifo_extract(word);
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_rx_clean_fifo_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_uart_0_reg_uart_setup_r_uart_rx_clean_fifo_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_uart_setup_read();
	uint32_t newword = udma_uart_0_reg_uart_setup_r_uart_rx_clean_fifo_replace(oldword, plain_value);
	udma_uart_0_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_EN_TX_OFFSET 8
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_EN_TX_SIZE 1
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_en_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_en_tx_read(void) {
	uint32_t word = udma_uart_0_reg_uart_setup_read();
	return udma_uart_0_reg_uart_setup_r_uart_en_tx_extract(word);
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_en_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_uart_0_reg_uart_setup_r_uart_en_tx_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_uart_setup_read();
	uint32_t newword = udma_uart_0_reg_uart_setup_r_uart_en_tx_replace(oldword, plain_value);
	udma_uart_0_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_EN_RX_OFFSET 9
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_EN_RX_SIZE 1
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_en_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 9) & mask );
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_en_rx_read(void) {
	uint32_t word = udma_uart_0_reg_uart_setup_read();
	return udma_uart_0_reg_uart_setup_r_uart_en_rx_extract(word);
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_en_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 9))) | (mask & plain_value)<< 9 ;
}
static inline void udma_uart_0_reg_uart_setup_r_uart_en_rx_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_uart_setup_read();
	uint32_t newword = udma_uart_0_reg_uart_setup_r_uart_en_rx_replace(oldword, plain_value);
	udma_uart_0_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_DIV_OFFSET 16
#define CSR_UDMA_UART_0_REG_UART_SETUP_R_UART_DIV_SIZE 16
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_div_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_div_read(void) {
	uint32_t word = udma_uart_0_reg_uart_setup_read();
	return udma_uart_0_reg_uart_setup_r_uart_div_extract(word);
}
static inline uint32_t udma_uart_0_reg_uart_setup_r_uart_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_uart_0_reg_uart_setup_r_uart_div_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_uart_setup_read();
	uint32_t newword = udma_uart_0_reg_uart_setup_r_uart_div_replace(oldword, plain_value);
	udma_uart_0_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_0_REG_ERROR_ADDR (CSR_BASE + 0x1028L)
#define CSR_UDMA_UART_0_REG_ERROR_SIZE 1
static inline uint32_t udma_uart_0_REG_ERROR_read(void) {
	return csr_read_simple((CSR_BASE + 0x1028L));
}
#define CSR_UDMA_UART_0_REG_ERROR_R_ERR_OVERFLOW_OFFSET 0
#define CSR_UDMA_UART_0_REG_ERROR_R_ERR_OVERFLOW_SIZE 1
static inline uint32_t udma_uart_0_reg_error_r_err_overflow_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_error_r_err_overflow_read(void) {
	uint32_t word = udma_uart_0_reg_error_read();
	return udma_uart_0_reg_error_r_err_overflow_extract(word);
}
#define CSR_UDMA_UART_0_REG_ERROR_R_ERR_PARITY_OFFSET 1
#define CSR_UDMA_UART_0_REG_ERROR_R_ERR_PARITY_SIZE 1
static inline uint32_t udma_uart_0_reg_error_r_err_parity_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_0_reg_error_r_err_parity_read(void) {
	uint32_t word = udma_uart_0_reg_error_read();
	return udma_uart_0_reg_error_r_err_parity_extract(word);
}
#define CSR_UDMA_UART_0_REG_IRQ_EN_ADDR (CSR_BASE + 0x102cL)
#define CSR_UDMA_UART_0_REG_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_0_REG_IRQ_EN_read(void) {
	return csr_read_simple((CSR_BASE + 0x102cL));
}
static inline void udma_uart_0_REG_IRQ_EN_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x102cL));
}
#define CSR_UDMA_UART_0_REG_IRQ_EN_R_UART_RX_IRQ_EN_OFFSET 0
#define CSR_UDMA_UART_0_REG_IRQ_EN_R_UART_RX_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_0_reg_irq_en_r_uart_rx_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_irq_en_r_uart_rx_irq_en_read(void) {
	uint32_t word = udma_uart_0_reg_irq_en_read();
	return udma_uart_0_reg_irq_en_r_uart_rx_irq_en_extract(word);
}
static inline uint32_t udma_uart_0_reg_irq_en_r_uart_rx_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_0_reg_irq_en_r_uart_rx_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_irq_en_read();
	uint32_t newword = udma_uart_0_reg_irq_en_r_uart_rx_irq_en_replace(oldword, plain_value);
	udma_uart_0_reg_irq_en_write(newword);
}
#define CSR_UDMA_UART_0_REG_IRQ_EN_R_UART_ERR_IRQ_EN_OFFSET 1
#define CSR_UDMA_UART_0_REG_IRQ_EN_R_UART_ERR_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_0_reg_irq_en_r_uart_err_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_0_reg_irq_en_r_uart_err_irq_en_read(void) {
	uint32_t word = udma_uart_0_reg_irq_en_read();
	return udma_uart_0_reg_irq_en_r_uart_err_irq_en_extract(word);
}
static inline uint32_t udma_uart_0_reg_irq_en_r_uart_err_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_uart_0_reg_irq_en_r_uart_err_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_0_reg_irq_en_read();
	uint32_t newword = udma_uart_0_reg_irq_en_r_uart_err_irq_en_replace(oldword, plain_value);
	udma_uart_0_reg_irq_en_write(newword);
}
#define CSR_UDMA_UART_0_REG_VALID_ADDR (CSR_BASE + 0x1030L)
#define CSR_UDMA_UART_0_REG_VALID_SIZE 1
static inline uint32_t udma_uart_0_REG_VALID_read(void) {
	return csr_read_simple((CSR_BASE + 0x1030L));
}
#define CSR_UDMA_UART_0_REG_VALID_R_UART_RX_DATA_VALID_OFFSET 0
#define CSR_UDMA_UART_0_REG_VALID_R_UART_RX_DATA_VALID_SIZE 1
static inline uint32_t udma_uart_0_reg_valid_r_uart_rx_data_valid_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_valid_r_uart_rx_data_valid_read(void) {
	uint32_t word = udma_uart_0_reg_valid_read();
	return udma_uart_0_reg_valid_r_uart_rx_data_valid_extract(word);
}
#define CSR_UDMA_UART_0_REG_DATA_ADDR (CSR_BASE + 0x1034L)
#define CSR_UDMA_UART_0_REG_DATA_SIZE 1
static inline uint32_t udma_uart_0_REG_DATA_read(void) {
	return csr_read_simple((CSR_BASE + 0x1034L));
}
#define CSR_UDMA_UART_0_REG_DATA_R_UART_RX_DATA_OFFSET 0
#define CSR_UDMA_UART_0_REG_DATA_R_UART_RX_DATA_SIZE 8
static inline uint32_t udma_uart_0_reg_data_r_uart_rx_data_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_0_reg_data_r_uart_rx_data_read(void) {
	uint32_t word = udma_uart_0_reg_data_read();
	return udma_uart_0_reg_data_r_uart_rx_data_extract(word);
}

/* udma_uart_1 */
#define CSR_UDMA_UART_1_BASE (CSR_BASE + 0x2000L)
#define CSR_UDMA_UART_1_REG_RX_SADDR_ADDR (CSR_BASE + 0x2000L)
#define CSR_UDMA_UART_1_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_uart_1_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void udma_uart_1_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}
#define CSR_UDMA_UART_1_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_UART_1_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_uart_1_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_uart_1_reg_rx_saddr_read();
	return udma_uart_1_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_uart_1_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_1_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_rx_saddr_read();
	uint32_t newword = udma_uart_1_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_uart_1_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_UART_1_REG_RX_SIZE_ADDR (CSR_BASE + 0x2004L)
#define CSR_UDMA_UART_1_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_uart_1_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x2004L));
}
static inline void udma_uart_1_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2004L));
}
#define CSR_UDMA_UART_1_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_UART_1_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_uart_1_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_uart_1_reg_rx_size_read();
	return udma_uart_1_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_uart_1_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_1_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_rx_size_read();
	uint32_t newword = udma_uart_1_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_uart_1_reg_rx_size_write(newword);
}
#define CSR_UDMA_UART_1_REG_RX_CFG_ADDR (CSR_BASE + 0x2008L)
#define CSR_UDMA_UART_1_REG_RX_CFG_SIZE 1
static inline uint32_t udma_uart_1_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x2008L));
}
static inline void udma_uart_1_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2008L));
}
#define CSR_UDMA_UART_1_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_UART_1_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_uart_1_reg_rx_cfg_read();
	return udma_uart_1_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_1_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_rx_cfg_read();
	uint32_t newword = udma_uart_1_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_uart_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_1_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_UART_1_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_uart_1_reg_rx_cfg_read();
	return udma_uart_1_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_1_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_rx_cfg_read();
	uint32_t newword = udma_uart_1_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_uart_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_1_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_UART_1_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_uart_1_reg_rx_cfg_read();
	return udma_uart_1_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_uart_1_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_uart_1_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_rx_cfg_read();
	uint32_t newword = udma_uart_1_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_uart_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_1_REG_TX_SADDR_ADDR (CSR_BASE + 0x2010L)
#define CSR_UDMA_UART_1_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_uart_1_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x2010L));
}
static inline void udma_uart_1_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2010L));
}
#define CSR_UDMA_UART_1_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_UART_1_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_uart_1_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_uart_1_reg_tx_saddr_read();
	return udma_uart_1_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_uart_1_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_1_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_tx_saddr_read();
	uint32_t newword = udma_uart_1_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_uart_1_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_UART_1_REG_TX_SIZE_ADDR (CSR_BASE + 0x2014L)
#define CSR_UDMA_UART_1_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_uart_1_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x2014L));
}
static inline void udma_uart_1_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2014L));
}
#define CSR_UDMA_UART_1_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_UART_1_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_uart_1_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_uart_1_reg_tx_size_read();
	return udma_uart_1_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_uart_1_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_1_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_tx_size_read();
	uint32_t newword = udma_uart_1_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_uart_1_reg_tx_size_write(newword);
}
#define CSR_UDMA_UART_1_REG_TX_CFG_ADDR (CSR_BASE + 0x2018L)
#define CSR_UDMA_UART_1_REG_TX_CFG_SIZE 1
static inline uint32_t udma_uart_1_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x2018L));
}
static inline void udma_uart_1_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2018L));
}
#define CSR_UDMA_UART_1_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_UART_1_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_uart_1_reg_tx_cfg_read();
	return udma_uart_1_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_1_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_tx_cfg_read();
	uint32_t newword = udma_uart_1_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_uart_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_1_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_UART_1_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_uart_1_reg_tx_cfg_read();
	return udma_uart_1_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_1_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_tx_cfg_read();
	uint32_t newword = udma_uart_1_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_uart_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_1_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_UART_1_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_uart_1_reg_tx_cfg_read();
	return udma_uart_1_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_uart_1_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_uart_1_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_tx_cfg_read();
	uint32_t newword = udma_uart_1_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_uart_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_1_REG_STATUS_ADDR (CSR_BASE + 0x2020L)
#define CSR_UDMA_UART_1_REG_STATUS_SIZE 1
static inline uint32_t udma_uart_1_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x2020L));
}
#define CSR_UDMA_UART_1_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_UART_1_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_uart_1_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_status_status_i_read(void) {
	uint32_t word = udma_uart_1_reg_status_read();
	return udma_uart_1_reg_status_status_i_extract(word);
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_ADDR (CSR_BASE + 0x2024L)
#define CSR_UDMA_UART_1_REG_UART_SETUP_SIZE 1
static inline uint32_t udma_uart_1_REG_UART_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x2024L));
}
static inline void udma_uart_1_REG_UART_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2024L));
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_PARITY_EN_OFFSET 0
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_PARITY_EN_SIZE 1
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_parity_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_parity_en_read(void) {
	uint32_t word = udma_uart_1_reg_uart_setup_read();
	return udma_uart_1_reg_uart_setup_r_uart_parity_en_extract(word);
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_parity_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_1_reg_uart_setup_r_uart_parity_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_uart_setup_read();
	uint32_t newword = udma_uart_1_reg_uart_setup_r_uart_parity_en_replace(oldword, plain_value);
	udma_uart_1_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_BITS_OFFSET 1
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_BITS_SIZE 2
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_bits_read(void) {
	uint32_t word = udma_uart_1_reg_uart_setup_read();
	return udma_uart_1_reg_uart_setup_r_uart_bits_extract(word);
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_uart_1_reg_uart_setup_r_uart_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_uart_setup_read();
	uint32_t newword = udma_uart_1_reg_uart_setup_r_uart_bits_replace(oldword, plain_value);
	udma_uart_1_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_STOP_BITS_OFFSET 3
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_STOP_BITS_SIZE 1
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_stop_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_stop_bits_read(void) {
	uint32_t word = udma_uart_1_reg_uart_setup_read();
	return udma_uart_1_reg_uart_setup_r_uart_stop_bits_extract(word);
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_stop_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void udma_uart_1_reg_uart_setup_r_uart_stop_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_uart_setup_read();
	uint32_t newword = udma_uart_1_reg_uart_setup_r_uart_stop_bits_replace(oldword, plain_value);
	udma_uart_1_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_RX_POLLING_EN_OFFSET 4
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_RX_POLLING_EN_SIZE 1
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_rx_polling_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_rx_polling_en_read(void) {
	uint32_t word = udma_uart_1_reg_uart_setup_read();
	return udma_uart_1_reg_uart_setup_r_uart_rx_polling_en_extract(word);
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_rx_polling_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_1_reg_uart_setup_r_uart_rx_polling_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_uart_setup_read();
	uint32_t newword = udma_uart_1_reg_uart_setup_r_uart_rx_polling_en_replace(oldword, plain_value);
	udma_uart_1_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_RX_CLEAN_FIFO_OFFSET 5
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_RX_CLEAN_FIFO_SIZE 1
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_rx_clean_fifo_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_rx_clean_fifo_read(void) {
	uint32_t word = udma_uart_1_reg_uart_setup_read();
	return udma_uart_1_reg_uart_setup_r_uart_rx_clean_fifo_extract(word);
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_rx_clean_fifo_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_uart_1_reg_uart_setup_r_uart_rx_clean_fifo_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_uart_setup_read();
	uint32_t newword = udma_uart_1_reg_uart_setup_r_uart_rx_clean_fifo_replace(oldword, plain_value);
	udma_uart_1_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_EN_TX_OFFSET 8
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_EN_TX_SIZE 1
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_en_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_en_tx_read(void) {
	uint32_t word = udma_uart_1_reg_uart_setup_read();
	return udma_uart_1_reg_uart_setup_r_uart_en_tx_extract(word);
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_en_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_uart_1_reg_uart_setup_r_uart_en_tx_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_uart_setup_read();
	uint32_t newword = udma_uart_1_reg_uart_setup_r_uart_en_tx_replace(oldword, plain_value);
	udma_uart_1_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_EN_RX_OFFSET 9
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_EN_RX_SIZE 1
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_en_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 9) & mask );
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_en_rx_read(void) {
	uint32_t word = udma_uart_1_reg_uart_setup_read();
	return udma_uart_1_reg_uart_setup_r_uart_en_rx_extract(word);
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_en_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 9))) | (mask & plain_value)<< 9 ;
}
static inline void udma_uart_1_reg_uart_setup_r_uart_en_rx_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_uart_setup_read();
	uint32_t newword = udma_uart_1_reg_uart_setup_r_uart_en_rx_replace(oldword, plain_value);
	udma_uart_1_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_DIV_OFFSET 16
#define CSR_UDMA_UART_1_REG_UART_SETUP_R_UART_DIV_SIZE 16
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_div_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_div_read(void) {
	uint32_t word = udma_uart_1_reg_uart_setup_read();
	return udma_uart_1_reg_uart_setup_r_uart_div_extract(word);
}
static inline uint32_t udma_uart_1_reg_uart_setup_r_uart_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_uart_1_reg_uart_setup_r_uart_div_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_uart_setup_read();
	uint32_t newword = udma_uart_1_reg_uart_setup_r_uart_div_replace(oldword, plain_value);
	udma_uart_1_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_1_REG_ERROR_ADDR (CSR_BASE + 0x2028L)
#define CSR_UDMA_UART_1_REG_ERROR_SIZE 1
static inline uint32_t udma_uart_1_REG_ERROR_read(void) {
	return csr_read_simple((CSR_BASE + 0x2028L));
}
#define CSR_UDMA_UART_1_REG_ERROR_R_ERR_OVERFLOW_OFFSET 0
#define CSR_UDMA_UART_1_REG_ERROR_R_ERR_OVERFLOW_SIZE 1
static inline uint32_t udma_uart_1_reg_error_r_err_overflow_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_error_r_err_overflow_read(void) {
	uint32_t word = udma_uart_1_reg_error_read();
	return udma_uart_1_reg_error_r_err_overflow_extract(word);
}
#define CSR_UDMA_UART_1_REG_ERROR_R_ERR_PARITY_OFFSET 1
#define CSR_UDMA_UART_1_REG_ERROR_R_ERR_PARITY_SIZE 1
static inline uint32_t udma_uart_1_reg_error_r_err_parity_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_1_reg_error_r_err_parity_read(void) {
	uint32_t word = udma_uart_1_reg_error_read();
	return udma_uart_1_reg_error_r_err_parity_extract(word);
}
#define CSR_UDMA_UART_1_REG_IRQ_EN_ADDR (CSR_BASE + 0x202cL)
#define CSR_UDMA_UART_1_REG_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_1_REG_IRQ_EN_read(void) {
	return csr_read_simple((CSR_BASE + 0x202cL));
}
static inline void udma_uart_1_REG_IRQ_EN_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x202cL));
}
#define CSR_UDMA_UART_1_REG_IRQ_EN_R_UART_RX_IRQ_EN_OFFSET 0
#define CSR_UDMA_UART_1_REG_IRQ_EN_R_UART_RX_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_1_reg_irq_en_r_uart_rx_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_irq_en_r_uart_rx_irq_en_read(void) {
	uint32_t word = udma_uart_1_reg_irq_en_read();
	return udma_uart_1_reg_irq_en_r_uart_rx_irq_en_extract(word);
}
static inline uint32_t udma_uart_1_reg_irq_en_r_uart_rx_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_1_reg_irq_en_r_uart_rx_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_irq_en_read();
	uint32_t newword = udma_uart_1_reg_irq_en_r_uart_rx_irq_en_replace(oldword, plain_value);
	udma_uart_1_reg_irq_en_write(newword);
}
#define CSR_UDMA_UART_1_REG_IRQ_EN_R_UART_ERR_IRQ_EN_OFFSET 1
#define CSR_UDMA_UART_1_REG_IRQ_EN_R_UART_ERR_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_1_reg_irq_en_r_uart_err_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_1_reg_irq_en_r_uart_err_irq_en_read(void) {
	uint32_t word = udma_uart_1_reg_irq_en_read();
	return udma_uart_1_reg_irq_en_r_uart_err_irq_en_extract(word);
}
static inline uint32_t udma_uart_1_reg_irq_en_r_uart_err_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_uart_1_reg_irq_en_r_uart_err_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_1_reg_irq_en_read();
	uint32_t newword = udma_uart_1_reg_irq_en_r_uart_err_irq_en_replace(oldword, plain_value);
	udma_uart_1_reg_irq_en_write(newword);
}
#define CSR_UDMA_UART_1_REG_VALID_ADDR (CSR_BASE + 0x2030L)
#define CSR_UDMA_UART_1_REG_VALID_SIZE 1
static inline uint32_t udma_uart_1_REG_VALID_read(void) {
	return csr_read_simple((CSR_BASE + 0x2030L));
}
#define CSR_UDMA_UART_1_REG_VALID_R_UART_RX_DATA_VALID_OFFSET 0
#define CSR_UDMA_UART_1_REG_VALID_R_UART_RX_DATA_VALID_SIZE 1
static inline uint32_t udma_uart_1_reg_valid_r_uart_rx_data_valid_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_valid_r_uart_rx_data_valid_read(void) {
	uint32_t word = udma_uart_1_reg_valid_read();
	return udma_uart_1_reg_valid_r_uart_rx_data_valid_extract(word);
}
#define CSR_UDMA_UART_1_REG_DATA_ADDR (CSR_BASE + 0x2034L)
#define CSR_UDMA_UART_1_REG_DATA_SIZE 1
static inline uint32_t udma_uart_1_REG_DATA_read(void) {
	return csr_read_simple((CSR_BASE + 0x2034L));
}
#define CSR_UDMA_UART_1_REG_DATA_R_UART_RX_DATA_OFFSET 0
#define CSR_UDMA_UART_1_REG_DATA_R_UART_RX_DATA_SIZE 8
static inline uint32_t udma_uart_1_reg_data_r_uart_rx_data_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_1_reg_data_r_uart_rx_data_read(void) {
	uint32_t word = udma_uart_1_reg_data_read();
	return udma_uart_1_reg_data_r_uart_rx_data_extract(word);
}

/* udma_uart_2 */
#define CSR_UDMA_UART_2_BASE (CSR_BASE + 0x3000L)
#define CSR_UDMA_UART_2_REG_RX_SADDR_ADDR (CSR_BASE + 0x3000L)
#define CSR_UDMA_UART_2_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_uart_2_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void udma_uart_2_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
#define CSR_UDMA_UART_2_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_UART_2_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_uart_2_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_uart_2_reg_rx_saddr_read();
	return udma_uart_2_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_uart_2_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_2_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_rx_saddr_read();
	uint32_t newword = udma_uart_2_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_uart_2_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_UART_2_REG_RX_SIZE_ADDR (CSR_BASE + 0x3004L)
#define CSR_UDMA_UART_2_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_uart_2_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}
static inline void udma_uart_2_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3004L));
}
#define CSR_UDMA_UART_2_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_UART_2_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_uart_2_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_uart_2_reg_rx_size_read();
	return udma_uart_2_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_uart_2_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_2_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_rx_size_read();
	uint32_t newword = udma_uart_2_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_uart_2_reg_rx_size_write(newword);
}
#define CSR_UDMA_UART_2_REG_RX_CFG_ADDR (CSR_BASE + 0x3008L)
#define CSR_UDMA_UART_2_REG_RX_CFG_SIZE 1
static inline uint32_t udma_uart_2_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x3008L));
}
static inline void udma_uart_2_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3008L));
}
#define CSR_UDMA_UART_2_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_UART_2_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_uart_2_reg_rx_cfg_read();
	return udma_uart_2_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_2_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_rx_cfg_read();
	uint32_t newword = udma_uart_2_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_uart_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_2_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_UART_2_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_uart_2_reg_rx_cfg_read();
	return udma_uart_2_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_2_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_rx_cfg_read();
	uint32_t newword = udma_uart_2_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_uart_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_2_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_UART_2_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_uart_2_reg_rx_cfg_read();
	return udma_uart_2_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_uart_2_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_uart_2_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_rx_cfg_read();
	uint32_t newword = udma_uart_2_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_uart_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_2_REG_TX_SADDR_ADDR (CSR_BASE + 0x3010L)
#define CSR_UDMA_UART_2_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_uart_2_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x3010L));
}
static inline void udma_uart_2_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3010L));
}
#define CSR_UDMA_UART_2_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_UART_2_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_uart_2_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_uart_2_reg_tx_saddr_read();
	return udma_uart_2_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_uart_2_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_2_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_tx_saddr_read();
	uint32_t newword = udma_uart_2_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_uart_2_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_UART_2_REG_TX_SIZE_ADDR (CSR_BASE + 0x3014L)
#define CSR_UDMA_UART_2_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_uart_2_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x3014L));
}
static inline void udma_uart_2_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3014L));
}
#define CSR_UDMA_UART_2_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_UART_2_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_uart_2_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_uart_2_reg_tx_size_read();
	return udma_uart_2_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_uart_2_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_2_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_tx_size_read();
	uint32_t newword = udma_uart_2_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_uart_2_reg_tx_size_write(newword);
}
#define CSR_UDMA_UART_2_REG_TX_CFG_ADDR (CSR_BASE + 0x3018L)
#define CSR_UDMA_UART_2_REG_TX_CFG_SIZE 1
static inline uint32_t udma_uart_2_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x3018L));
}
static inline void udma_uart_2_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3018L));
}
#define CSR_UDMA_UART_2_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_UART_2_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_uart_2_reg_tx_cfg_read();
	return udma_uart_2_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_2_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_tx_cfg_read();
	uint32_t newword = udma_uart_2_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_uart_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_2_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_UART_2_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_uart_2_reg_tx_cfg_read();
	return udma_uart_2_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_2_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_tx_cfg_read();
	uint32_t newword = udma_uart_2_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_uart_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_2_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_UART_2_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_uart_2_reg_tx_cfg_read();
	return udma_uart_2_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_uart_2_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_uart_2_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_tx_cfg_read();
	uint32_t newword = udma_uart_2_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_uart_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_2_REG_STATUS_ADDR (CSR_BASE + 0x3020L)
#define CSR_UDMA_UART_2_REG_STATUS_SIZE 1
static inline uint32_t udma_uart_2_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x3020L));
}
#define CSR_UDMA_UART_2_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_UART_2_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_uart_2_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_status_status_i_read(void) {
	uint32_t word = udma_uart_2_reg_status_read();
	return udma_uart_2_reg_status_status_i_extract(word);
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_ADDR (CSR_BASE + 0x3024L)
#define CSR_UDMA_UART_2_REG_UART_SETUP_SIZE 1
static inline uint32_t udma_uart_2_REG_UART_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x3024L));
}
static inline void udma_uart_2_REG_UART_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3024L));
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_PARITY_EN_OFFSET 0
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_PARITY_EN_SIZE 1
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_parity_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_parity_en_read(void) {
	uint32_t word = udma_uart_2_reg_uart_setup_read();
	return udma_uart_2_reg_uart_setup_r_uart_parity_en_extract(word);
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_parity_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_2_reg_uart_setup_r_uart_parity_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_uart_setup_read();
	uint32_t newword = udma_uart_2_reg_uart_setup_r_uart_parity_en_replace(oldword, plain_value);
	udma_uart_2_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_BITS_OFFSET 1
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_BITS_SIZE 2
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_bits_read(void) {
	uint32_t word = udma_uart_2_reg_uart_setup_read();
	return udma_uart_2_reg_uart_setup_r_uart_bits_extract(word);
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_uart_2_reg_uart_setup_r_uart_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_uart_setup_read();
	uint32_t newword = udma_uart_2_reg_uart_setup_r_uart_bits_replace(oldword, plain_value);
	udma_uart_2_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_STOP_BITS_OFFSET 3
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_STOP_BITS_SIZE 1
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_stop_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_stop_bits_read(void) {
	uint32_t word = udma_uart_2_reg_uart_setup_read();
	return udma_uart_2_reg_uart_setup_r_uart_stop_bits_extract(word);
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_stop_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void udma_uart_2_reg_uart_setup_r_uart_stop_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_uart_setup_read();
	uint32_t newword = udma_uart_2_reg_uart_setup_r_uart_stop_bits_replace(oldword, plain_value);
	udma_uart_2_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_RX_POLLING_EN_OFFSET 4
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_RX_POLLING_EN_SIZE 1
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_rx_polling_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_rx_polling_en_read(void) {
	uint32_t word = udma_uart_2_reg_uart_setup_read();
	return udma_uart_2_reg_uart_setup_r_uart_rx_polling_en_extract(word);
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_rx_polling_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_2_reg_uart_setup_r_uart_rx_polling_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_uart_setup_read();
	uint32_t newword = udma_uart_2_reg_uart_setup_r_uart_rx_polling_en_replace(oldword, plain_value);
	udma_uart_2_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_RX_CLEAN_FIFO_OFFSET 5
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_RX_CLEAN_FIFO_SIZE 1
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_rx_clean_fifo_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_rx_clean_fifo_read(void) {
	uint32_t word = udma_uart_2_reg_uart_setup_read();
	return udma_uart_2_reg_uart_setup_r_uart_rx_clean_fifo_extract(word);
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_rx_clean_fifo_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_uart_2_reg_uart_setup_r_uart_rx_clean_fifo_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_uart_setup_read();
	uint32_t newword = udma_uart_2_reg_uart_setup_r_uart_rx_clean_fifo_replace(oldword, plain_value);
	udma_uart_2_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_EN_TX_OFFSET 8
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_EN_TX_SIZE 1
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_en_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_en_tx_read(void) {
	uint32_t word = udma_uart_2_reg_uart_setup_read();
	return udma_uart_2_reg_uart_setup_r_uart_en_tx_extract(word);
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_en_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_uart_2_reg_uart_setup_r_uart_en_tx_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_uart_setup_read();
	uint32_t newword = udma_uart_2_reg_uart_setup_r_uart_en_tx_replace(oldword, plain_value);
	udma_uart_2_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_EN_RX_OFFSET 9
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_EN_RX_SIZE 1
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_en_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 9) & mask );
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_en_rx_read(void) {
	uint32_t word = udma_uart_2_reg_uart_setup_read();
	return udma_uart_2_reg_uart_setup_r_uart_en_rx_extract(word);
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_en_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 9))) | (mask & plain_value)<< 9 ;
}
static inline void udma_uart_2_reg_uart_setup_r_uart_en_rx_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_uart_setup_read();
	uint32_t newword = udma_uart_2_reg_uart_setup_r_uart_en_rx_replace(oldword, plain_value);
	udma_uart_2_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_DIV_OFFSET 16
#define CSR_UDMA_UART_2_REG_UART_SETUP_R_UART_DIV_SIZE 16
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_div_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_div_read(void) {
	uint32_t word = udma_uart_2_reg_uart_setup_read();
	return udma_uart_2_reg_uart_setup_r_uart_div_extract(word);
}
static inline uint32_t udma_uart_2_reg_uart_setup_r_uart_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_uart_2_reg_uart_setup_r_uart_div_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_uart_setup_read();
	uint32_t newword = udma_uart_2_reg_uart_setup_r_uart_div_replace(oldword, plain_value);
	udma_uart_2_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_2_REG_ERROR_ADDR (CSR_BASE + 0x3028L)
#define CSR_UDMA_UART_2_REG_ERROR_SIZE 1
static inline uint32_t udma_uart_2_REG_ERROR_read(void) {
	return csr_read_simple((CSR_BASE + 0x3028L));
}
#define CSR_UDMA_UART_2_REG_ERROR_R_ERR_OVERFLOW_OFFSET 0
#define CSR_UDMA_UART_2_REG_ERROR_R_ERR_OVERFLOW_SIZE 1
static inline uint32_t udma_uart_2_reg_error_r_err_overflow_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_error_r_err_overflow_read(void) {
	uint32_t word = udma_uart_2_reg_error_read();
	return udma_uart_2_reg_error_r_err_overflow_extract(word);
}
#define CSR_UDMA_UART_2_REG_ERROR_R_ERR_PARITY_OFFSET 1
#define CSR_UDMA_UART_2_REG_ERROR_R_ERR_PARITY_SIZE 1
static inline uint32_t udma_uart_2_reg_error_r_err_parity_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_2_reg_error_r_err_parity_read(void) {
	uint32_t word = udma_uart_2_reg_error_read();
	return udma_uart_2_reg_error_r_err_parity_extract(word);
}
#define CSR_UDMA_UART_2_REG_IRQ_EN_ADDR (CSR_BASE + 0x302cL)
#define CSR_UDMA_UART_2_REG_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_2_REG_IRQ_EN_read(void) {
	return csr_read_simple((CSR_BASE + 0x302cL));
}
static inline void udma_uart_2_REG_IRQ_EN_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x302cL));
}
#define CSR_UDMA_UART_2_REG_IRQ_EN_R_UART_RX_IRQ_EN_OFFSET 0
#define CSR_UDMA_UART_2_REG_IRQ_EN_R_UART_RX_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_2_reg_irq_en_r_uart_rx_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_irq_en_r_uart_rx_irq_en_read(void) {
	uint32_t word = udma_uart_2_reg_irq_en_read();
	return udma_uart_2_reg_irq_en_r_uart_rx_irq_en_extract(word);
}
static inline uint32_t udma_uart_2_reg_irq_en_r_uart_rx_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_2_reg_irq_en_r_uart_rx_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_irq_en_read();
	uint32_t newword = udma_uart_2_reg_irq_en_r_uart_rx_irq_en_replace(oldword, plain_value);
	udma_uart_2_reg_irq_en_write(newword);
}
#define CSR_UDMA_UART_2_REG_IRQ_EN_R_UART_ERR_IRQ_EN_OFFSET 1
#define CSR_UDMA_UART_2_REG_IRQ_EN_R_UART_ERR_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_2_reg_irq_en_r_uart_err_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_2_reg_irq_en_r_uart_err_irq_en_read(void) {
	uint32_t word = udma_uart_2_reg_irq_en_read();
	return udma_uart_2_reg_irq_en_r_uart_err_irq_en_extract(word);
}
static inline uint32_t udma_uart_2_reg_irq_en_r_uart_err_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_uart_2_reg_irq_en_r_uart_err_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_2_reg_irq_en_read();
	uint32_t newword = udma_uart_2_reg_irq_en_r_uart_err_irq_en_replace(oldword, plain_value);
	udma_uart_2_reg_irq_en_write(newword);
}
#define CSR_UDMA_UART_2_REG_VALID_ADDR (CSR_BASE + 0x3030L)
#define CSR_UDMA_UART_2_REG_VALID_SIZE 1
static inline uint32_t udma_uart_2_REG_VALID_read(void) {
	return csr_read_simple((CSR_BASE + 0x3030L));
}
#define CSR_UDMA_UART_2_REG_VALID_R_UART_RX_DATA_VALID_OFFSET 0
#define CSR_UDMA_UART_2_REG_VALID_R_UART_RX_DATA_VALID_SIZE 1
static inline uint32_t udma_uart_2_reg_valid_r_uart_rx_data_valid_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_valid_r_uart_rx_data_valid_read(void) {
	uint32_t word = udma_uart_2_reg_valid_read();
	return udma_uart_2_reg_valid_r_uart_rx_data_valid_extract(word);
}
#define CSR_UDMA_UART_2_REG_DATA_ADDR (CSR_BASE + 0x3034L)
#define CSR_UDMA_UART_2_REG_DATA_SIZE 1
static inline uint32_t udma_uart_2_REG_DATA_read(void) {
	return csr_read_simple((CSR_BASE + 0x3034L));
}
#define CSR_UDMA_UART_2_REG_DATA_R_UART_RX_DATA_OFFSET 0
#define CSR_UDMA_UART_2_REG_DATA_R_UART_RX_DATA_SIZE 8
static inline uint32_t udma_uart_2_reg_data_r_uart_rx_data_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_2_reg_data_r_uart_rx_data_read(void) {
	uint32_t word = udma_uart_2_reg_data_read();
	return udma_uart_2_reg_data_r_uart_rx_data_extract(word);
}

/* udma_uart_3 */
#define CSR_UDMA_UART_3_BASE (CSR_BASE + 0x4000L)
#define CSR_UDMA_UART_3_REG_RX_SADDR_ADDR (CSR_BASE + 0x4000L)
#define CSR_UDMA_UART_3_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_uart_3_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x4000L));
}
static inline void udma_uart_3_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4000L));
}
#define CSR_UDMA_UART_3_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_UART_3_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_uart_3_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_uart_3_reg_rx_saddr_read();
	return udma_uart_3_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_uart_3_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_3_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_rx_saddr_read();
	uint32_t newword = udma_uart_3_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_uart_3_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_UART_3_REG_RX_SIZE_ADDR (CSR_BASE + 0x4004L)
#define CSR_UDMA_UART_3_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_uart_3_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x4004L));
}
static inline void udma_uart_3_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4004L));
}
#define CSR_UDMA_UART_3_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_UART_3_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_uart_3_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_uart_3_reg_rx_size_read();
	return udma_uart_3_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_uart_3_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_3_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_rx_size_read();
	uint32_t newword = udma_uart_3_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_uart_3_reg_rx_size_write(newword);
}
#define CSR_UDMA_UART_3_REG_RX_CFG_ADDR (CSR_BASE + 0x4008L)
#define CSR_UDMA_UART_3_REG_RX_CFG_SIZE 1
static inline uint32_t udma_uart_3_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x4008L));
}
static inline void udma_uart_3_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4008L));
}
#define CSR_UDMA_UART_3_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_UART_3_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_uart_3_reg_rx_cfg_read();
	return udma_uart_3_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_3_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_rx_cfg_read();
	uint32_t newword = udma_uart_3_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_uart_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_3_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_UART_3_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_uart_3_reg_rx_cfg_read();
	return udma_uart_3_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_3_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_rx_cfg_read();
	uint32_t newword = udma_uart_3_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_uart_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_3_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_UART_3_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_uart_3_reg_rx_cfg_read();
	return udma_uart_3_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_uart_3_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_uart_3_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_rx_cfg_read();
	uint32_t newword = udma_uart_3_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_uart_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_UART_3_REG_TX_SADDR_ADDR (CSR_BASE + 0x4010L)
#define CSR_UDMA_UART_3_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_uart_3_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x4010L));
}
static inline void udma_uart_3_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4010L));
}
#define CSR_UDMA_UART_3_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_UART_3_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_uart_3_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_uart_3_reg_tx_saddr_read();
	return udma_uart_3_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_uart_3_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_3_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_tx_saddr_read();
	uint32_t newword = udma_uart_3_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_uart_3_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_UART_3_REG_TX_SIZE_ADDR (CSR_BASE + 0x4014L)
#define CSR_UDMA_UART_3_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_uart_3_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x4014L));
}
static inline void udma_uart_3_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4014L));
}
#define CSR_UDMA_UART_3_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_UART_3_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_uart_3_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_uart_3_reg_tx_size_read();
	return udma_uart_3_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_uart_3_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_3_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_tx_size_read();
	uint32_t newword = udma_uart_3_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_uart_3_reg_tx_size_write(newword);
}
#define CSR_UDMA_UART_3_REG_TX_CFG_ADDR (CSR_BASE + 0x4018L)
#define CSR_UDMA_UART_3_REG_TX_CFG_SIZE 1
static inline uint32_t udma_uart_3_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x4018L));
}
static inline void udma_uart_3_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4018L));
}
#define CSR_UDMA_UART_3_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_UART_3_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_uart_3_reg_tx_cfg_read();
	return udma_uart_3_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_3_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_tx_cfg_read();
	uint32_t newword = udma_uart_3_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_uart_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_3_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_UART_3_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_uart_3_reg_tx_cfg_read();
	return udma_uart_3_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_3_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_tx_cfg_read();
	uint32_t newword = udma_uart_3_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_uart_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_3_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_UART_3_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_uart_3_reg_tx_cfg_read();
	return udma_uart_3_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_uart_3_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_uart_3_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_tx_cfg_read();
	uint32_t newword = udma_uart_3_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_uart_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_UART_3_REG_STATUS_ADDR (CSR_BASE + 0x4020L)
#define CSR_UDMA_UART_3_REG_STATUS_SIZE 1
static inline uint32_t udma_uart_3_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x4020L));
}
#define CSR_UDMA_UART_3_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_UART_3_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_uart_3_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_status_status_i_read(void) {
	uint32_t word = udma_uart_3_reg_status_read();
	return udma_uart_3_reg_status_status_i_extract(word);
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_ADDR (CSR_BASE + 0x4024L)
#define CSR_UDMA_UART_3_REG_UART_SETUP_SIZE 1
static inline uint32_t udma_uart_3_REG_UART_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x4024L));
}
static inline void udma_uart_3_REG_UART_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4024L));
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_PARITY_EN_OFFSET 0
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_PARITY_EN_SIZE 1
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_parity_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_parity_en_read(void) {
	uint32_t word = udma_uart_3_reg_uart_setup_read();
	return udma_uart_3_reg_uart_setup_r_uart_parity_en_extract(word);
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_parity_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_3_reg_uart_setup_r_uart_parity_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_uart_setup_read();
	uint32_t newword = udma_uart_3_reg_uart_setup_r_uart_parity_en_replace(oldword, plain_value);
	udma_uart_3_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_BITS_OFFSET 1
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_BITS_SIZE 2
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_bits_read(void) {
	uint32_t word = udma_uart_3_reg_uart_setup_read();
	return udma_uart_3_reg_uart_setup_r_uart_bits_extract(word);
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_uart_3_reg_uart_setup_r_uart_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_uart_setup_read();
	uint32_t newword = udma_uart_3_reg_uart_setup_r_uart_bits_replace(oldword, plain_value);
	udma_uart_3_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_STOP_BITS_OFFSET 3
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_STOP_BITS_SIZE 1
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_stop_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_stop_bits_read(void) {
	uint32_t word = udma_uart_3_reg_uart_setup_read();
	return udma_uart_3_reg_uart_setup_r_uart_stop_bits_extract(word);
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_stop_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void udma_uart_3_reg_uart_setup_r_uart_stop_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_uart_setup_read();
	uint32_t newword = udma_uart_3_reg_uart_setup_r_uart_stop_bits_replace(oldword, plain_value);
	udma_uart_3_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_RX_POLLING_EN_OFFSET 4
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_RX_POLLING_EN_SIZE 1
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_rx_polling_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_rx_polling_en_read(void) {
	uint32_t word = udma_uart_3_reg_uart_setup_read();
	return udma_uart_3_reg_uart_setup_r_uart_rx_polling_en_extract(word);
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_rx_polling_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_uart_3_reg_uart_setup_r_uart_rx_polling_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_uart_setup_read();
	uint32_t newword = udma_uart_3_reg_uart_setup_r_uart_rx_polling_en_replace(oldword, plain_value);
	udma_uart_3_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_RX_CLEAN_FIFO_OFFSET 5
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_RX_CLEAN_FIFO_SIZE 1
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_rx_clean_fifo_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_rx_clean_fifo_read(void) {
	uint32_t word = udma_uart_3_reg_uart_setup_read();
	return udma_uart_3_reg_uart_setup_r_uart_rx_clean_fifo_extract(word);
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_rx_clean_fifo_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_uart_3_reg_uart_setup_r_uart_rx_clean_fifo_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_uart_setup_read();
	uint32_t newword = udma_uart_3_reg_uart_setup_r_uart_rx_clean_fifo_replace(oldword, plain_value);
	udma_uart_3_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_EN_TX_OFFSET 8
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_EN_TX_SIZE 1
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_en_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_en_tx_read(void) {
	uint32_t word = udma_uart_3_reg_uart_setup_read();
	return udma_uart_3_reg_uart_setup_r_uart_en_tx_extract(word);
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_en_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_uart_3_reg_uart_setup_r_uart_en_tx_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_uart_setup_read();
	uint32_t newword = udma_uart_3_reg_uart_setup_r_uart_en_tx_replace(oldword, plain_value);
	udma_uart_3_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_EN_RX_OFFSET 9
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_EN_RX_SIZE 1
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_en_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 9) & mask );
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_en_rx_read(void) {
	uint32_t word = udma_uart_3_reg_uart_setup_read();
	return udma_uart_3_reg_uart_setup_r_uart_en_rx_extract(word);
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_en_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 9))) | (mask & plain_value)<< 9 ;
}
static inline void udma_uart_3_reg_uart_setup_r_uart_en_rx_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_uart_setup_read();
	uint32_t newword = udma_uart_3_reg_uart_setup_r_uart_en_rx_replace(oldword, plain_value);
	udma_uart_3_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_DIV_OFFSET 16
#define CSR_UDMA_UART_3_REG_UART_SETUP_R_UART_DIV_SIZE 16
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_div_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_div_read(void) {
	uint32_t word = udma_uart_3_reg_uart_setup_read();
	return udma_uart_3_reg_uart_setup_r_uart_div_extract(word);
}
static inline uint32_t udma_uart_3_reg_uart_setup_r_uart_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_uart_3_reg_uart_setup_r_uart_div_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_uart_setup_read();
	uint32_t newword = udma_uart_3_reg_uart_setup_r_uart_div_replace(oldword, plain_value);
	udma_uart_3_reg_uart_setup_write(newword);
}
#define CSR_UDMA_UART_3_REG_ERROR_ADDR (CSR_BASE + 0x4028L)
#define CSR_UDMA_UART_3_REG_ERROR_SIZE 1
static inline uint32_t udma_uart_3_REG_ERROR_read(void) {
	return csr_read_simple((CSR_BASE + 0x4028L));
}
#define CSR_UDMA_UART_3_REG_ERROR_R_ERR_OVERFLOW_OFFSET 0
#define CSR_UDMA_UART_3_REG_ERROR_R_ERR_OVERFLOW_SIZE 1
static inline uint32_t udma_uart_3_reg_error_r_err_overflow_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_error_r_err_overflow_read(void) {
	uint32_t word = udma_uart_3_reg_error_read();
	return udma_uart_3_reg_error_r_err_overflow_extract(word);
}
#define CSR_UDMA_UART_3_REG_ERROR_R_ERR_PARITY_OFFSET 1
#define CSR_UDMA_UART_3_REG_ERROR_R_ERR_PARITY_SIZE 1
static inline uint32_t udma_uart_3_reg_error_r_err_parity_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_3_reg_error_r_err_parity_read(void) {
	uint32_t word = udma_uart_3_reg_error_read();
	return udma_uart_3_reg_error_r_err_parity_extract(word);
}
#define CSR_UDMA_UART_3_REG_IRQ_EN_ADDR (CSR_BASE + 0x402cL)
#define CSR_UDMA_UART_3_REG_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_3_REG_IRQ_EN_read(void) {
	return csr_read_simple((CSR_BASE + 0x402cL));
}
static inline void udma_uart_3_REG_IRQ_EN_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x402cL));
}
#define CSR_UDMA_UART_3_REG_IRQ_EN_R_UART_RX_IRQ_EN_OFFSET 0
#define CSR_UDMA_UART_3_REG_IRQ_EN_R_UART_RX_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_3_reg_irq_en_r_uart_rx_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_irq_en_r_uart_rx_irq_en_read(void) {
	uint32_t word = udma_uart_3_reg_irq_en_read();
	return udma_uart_3_reg_irq_en_r_uart_rx_irq_en_extract(word);
}
static inline uint32_t udma_uart_3_reg_irq_en_r_uart_rx_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_uart_3_reg_irq_en_r_uart_rx_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_irq_en_read();
	uint32_t newword = udma_uart_3_reg_irq_en_r_uart_rx_irq_en_replace(oldword, plain_value);
	udma_uart_3_reg_irq_en_write(newword);
}
#define CSR_UDMA_UART_3_REG_IRQ_EN_R_UART_ERR_IRQ_EN_OFFSET 1
#define CSR_UDMA_UART_3_REG_IRQ_EN_R_UART_ERR_IRQ_EN_SIZE 1
static inline uint32_t udma_uart_3_reg_irq_en_r_uart_err_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_uart_3_reg_irq_en_r_uart_err_irq_en_read(void) {
	uint32_t word = udma_uart_3_reg_irq_en_read();
	return udma_uart_3_reg_irq_en_r_uart_err_irq_en_extract(word);
}
static inline uint32_t udma_uart_3_reg_irq_en_r_uart_err_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_uart_3_reg_irq_en_r_uart_err_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_uart_3_reg_irq_en_read();
	uint32_t newword = udma_uart_3_reg_irq_en_r_uart_err_irq_en_replace(oldword, plain_value);
	udma_uart_3_reg_irq_en_write(newword);
}
#define CSR_UDMA_UART_3_REG_VALID_ADDR (CSR_BASE + 0x4030L)
#define CSR_UDMA_UART_3_REG_VALID_SIZE 1
static inline uint32_t udma_uart_3_REG_VALID_read(void) {
	return csr_read_simple((CSR_BASE + 0x4030L));
}
#define CSR_UDMA_UART_3_REG_VALID_R_UART_RX_DATA_VALID_OFFSET 0
#define CSR_UDMA_UART_3_REG_VALID_R_UART_RX_DATA_VALID_SIZE 1
static inline uint32_t udma_uart_3_reg_valid_r_uart_rx_data_valid_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_valid_r_uart_rx_data_valid_read(void) {
	uint32_t word = udma_uart_3_reg_valid_read();
	return udma_uart_3_reg_valid_r_uart_rx_data_valid_extract(word);
}
#define CSR_UDMA_UART_3_REG_DATA_ADDR (CSR_BASE + 0x4034L)
#define CSR_UDMA_UART_3_REG_DATA_SIZE 1
static inline uint32_t udma_uart_3_REG_DATA_read(void) {
	return csr_read_simple((CSR_BASE + 0x4034L));
}
#define CSR_UDMA_UART_3_REG_DATA_R_UART_RX_DATA_OFFSET 0
#define CSR_UDMA_UART_3_REG_DATA_R_UART_RX_DATA_SIZE 8
static inline uint32_t udma_uart_3_reg_data_r_uart_rx_data_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_uart_3_reg_data_r_uart_rx_data_read(void) {
	uint32_t word = udma_uart_3_reg_data_read();
	return udma_uart_3_reg_data_r_uart_rx_data_extract(word);
}

/* udma_spim_0 */
#define CSR_UDMA_SPIM_0_BASE (CSR_BASE + 0x5000L)
#define CSR_UDMA_SPIM_0_REG_RX_SADDR_ADDR (CSR_BASE + 0x5000L)
#define CSR_UDMA_SPIM_0_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_spim_0_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x5000L));
}
static inline void udma_spim_0_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5000L));
}
#define CSR_UDMA_SPIM_0_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_spim_0_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_spim_0_reg_rx_saddr_read();
	return udma_spim_0_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_spim_0_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_rx_saddr_read();
	uint32_t newword = udma_spim_0_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_spim_0_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_RX_SIZE_ADDR (CSR_BASE + 0x5004L)
#define CSR_UDMA_SPIM_0_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_spim_0_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x5004L));
}
static inline void udma_spim_0_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5004L));
}
#define CSR_UDMA_SPIM_0_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_spim_0_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_spim_0_reg_rx_size_read();
	return udma_spim_0_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_spim_0_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_rx_size_read();
	uint32_t newword = udma_spim_0_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_spim_0_reg_rx_size_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_RX_CFG_ADDR (CSR_BASE + 0x5008L)
#define CSR_UDMA_SPIM_0_REG_RX_CFG_SIZE 1
static inline uint32_t udma_spim_0_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x5008L));
}
static inline void udma_spim_0_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5008L));
}
#define CSR_UDMA_SPIM_0_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_spim_0_reg_rx_cfg_read();
	return udma_spim_0_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_rx_cfg_read();
	uint32_t newword = udma_spim_0_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_spim_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_RX_CFG_R_RX_DATASIZE_OFFSET 1
#define CSR_UDMA_SPIM_0_REG_RX_CFG_R_RX_DATASIZE_SIZE 2
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_datasize_read(void) {
	uint32_t word = udma_spim_0_reg_rx_cfg_read();
	return udma_spim_0_reg_rx_cfg_r_rx_datasize_extract(word);
}
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spim_0_reg_rx_cfg_r_rx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_rx_cfg_read();
	uint32_t newword = udma_spim_0_reg_rx_cfg_r_rx_datasize_replace(oldword, plain_value);
	udma_spim_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_SPIM_0_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_spim_0_reg_rx_cfg_read();
	return udma_spim_0_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_0_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_rx_cfg_read();
	uint32_t newword = udma_spim_0_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_spim_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_SPIM_0_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_spim_0_reg_rx_cfg_read();
	return udma_spim_0_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_spim_0_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_0_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_rx_cfg_read();
	uint32_t newword = udma_spim_0_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_spim_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_TX_SADDR_ADDR (CSR_BASE + 0x5010L)
#define CSR_UDMA_SPIM_0_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_spim_0_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x5010L));
}
static inline void udma_spim_0_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5010L));
}
#define CSR_UDMA_SPIM_0_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_spim_0_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_spim_0_reg_tx_saddr_read();
	return udma_spim_0_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_spim_0_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_tx_saddr_read();
	uint32_t newword = udma_spim_0_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_spim_0_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_TX_SIZE_ADDR (CSR_BASE + 0x5014L)
#define CSR_UDMA_SPIM_0_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_spim_0_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x5014L));
}
static inline void udma_spim_0_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5014L));
}
#define CSR_UDMA_SPIM_0_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_spim_0_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_spim_0_reg_tx_size_read();
	return udma_spim_0_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_spim_0_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_tx_size_read();
	uint32_t newword = udma_spim_0_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_spim_0_reg_tx_size_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_TX_CFG_ADDR (CSR_BASE + 0x5018L)
#define CSR_UDMA_SPIM_0_REG_TX_CFG_SIZE 1
static inline uint32_t udma_spim_0_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x5018L));
}
static inline void udma_spim_0_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5018L));
}
#define CSR_UDMA_SPIM_0_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_spim_0_reg_tx_cfg_read();
	return udma_spim_0_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_tx_cfg_read();
	uint32_t newword = udma_spim_0_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_spim_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_TX_CFG_R_TX_DATASIZE_OFFSET 1
#define CSR_UDMA_SPIM_0_REG_TX_CFG_R_TX_DATASIZE_SIZE 2
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_datasize_read(void) {
	uint32_t word = udma_spim_0_reg_tx_cfg_read();
	return udma_spim_0_reg_tx_cfg_r_tx_datasize_extract(word);
}
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spim_0_reg_tx_cfg_r_tx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_tx_cfg_read();
	uint32_t newword = udma_spim_0_reg_tx_cfg_r_tx_datasize_replace(oldword, plain_value);
	udma_spim_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_SPIM_0_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_spim_0_reg_tx_cfg_read();
	return udma_spim_0_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_0_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_tx_cfg_read();
	uint32_t newword = udma_spim_0_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_spim_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_SPIM_0_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_spim_0_reg_tx_cfg_read();
	return udma_spim_0_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_spim_0_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_0_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_tx_cfg_read();
	uint32_t newword = udma_spim_0_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_spim_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_CMD_SADDR_ADDR (CSR_BASE + 0x5020L)
#define CSR_UDMA_SPIM_0_REG_CMD_SADDR_SIZE 1
static inline uint32_t udma_spim_0_REG_CMD_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x5020L));
}
static inline void udma_spim_0_REG_CMD_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5020L));
}
#define CSR_UDMA_SPIM_0_REG_CMD_SADDR_R_CMD_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_CMD_SADDR_R_CMD_STARTADDR_SIZE 12
static inline uint32_t udma_spim_0_reg_cmd_saddr_r_cmd_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_cmd_saddr_r_cmd_startaddr_read(void) {
	uint32_t word = udma_spim_0_reg_cmd_saddr_read();
	return udma_spim_0_reg_cmd_saddr_r_cmd_startaddr_extract(word);
}
static inline uint32_t udma_spim_0_reg_cmd_saddr_r_cmd_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_cmd_saddr_r_cmd_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_cmd_saddr_read();
	uint32_t newword = udma_spim_0_reg_cmd_saddr_r_cmd_startaddr_replace(oldword, plain_value);
	udma_spim_0_reg_cmd_saddr_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_CMD_SIZE_ADDR (CSR_BASE + 0x5024L)
#define CSR_UDMA_SPIM_0_REG_CMD_SIZE_SIZE 1
static inline uint32_t udma_spim_0_REG_CMD_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x5024L));
}
static inline void udma_spim_0_REG_CMD_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5024L));
}
#define CSR_UDMA_SPIM_0_REG_CMD_SIZE_R_CMD_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_CMD_SIZE_R_CMD_SIZE_SIZE 16
static inline uint32_t udma_spim_0_reg_cmd_size_r_cmd_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_cmd_size_r_cmd_size_read(void) {
	uint32_t word = udma_spim_0_reg_cmd_size_read();
	return udma_spim_0_reg_cmd_size_r_cmd_size_extract(word);
}
static inline uint32_t udma_spim_0_reg_cmd_size_r_cmd_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_cmd_size_r_cmd_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_cmd_size_read();
	uint32_t newword = udma_spim_0_reg_cmd_size_r_cmd_size_replace(oldword, plain_value);
	udma_spim_0_reg_cmd_size_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_CMD_CFG_ADDR (CSR_BASE + 0x5028L)
#define CSR_UDMA_SPIM_0_REG_CMD_CFG_SIZE 1
static inline uint32_t udma_spim_0_REG_CMD_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x5028L));
}
static inline void udma_spim_0_REG_CMD_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5028L));
}
#define CSR_UDMA_SPIM_0_REG_CMD_CFG_R_CMD_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_CMD_CFG_R_CMD_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_continuous_read(void) {
	uint32_t word = udma_spim_0_reg_cmd_cfg_read();
	return udma_spim_0_reg_cmd_cfg_r_cmd_continuous_extract(word);
}
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_0_reg_cmd_cfg_r_cmd_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_0_reg_cmd_cfg_r_cmd_continuous_replace(oldword, plain_value);
	udma_spim_0_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_CMD_CFG_R_CMD_EN_OFFSET 4
#define CSR_UDMA_SPIM_0_REG_CMD_CFG_R_CMD_EN_SIZE 1
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_en_read(void) {
	uint32_t word = udma_spim_0_reg_cmd_cfg_read();
	return udma_spim_0_reg_cmd_cfg_r_cmd_en_extract(word);
}
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_0_reg_cmd_cfg_r_cmd_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_0_reg_cmd_cfg_r_cmd_en_replace(oldword, plain_value);
	udma_spim_0_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_CMD_CFG_R_CMD_CLR_OFFSET 6
#define CSR_UDMA_SPIM_0_REG_CMD_CFG_R_CMD_CLR_SIZE 1
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_clr_read(void) {
	uint32_t word = udma_spim_0_reg_cmd_cfg_read();
	return udma_spim_0_reg_cmd_cfg_r_cmd_clr_extract(word);
}
static inline uint32_t udma_spim_0_reg_cmd_cfg_r_cmd_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_0_reg_cmd_cfg_r_cmd_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_0_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_0_reg_cmd_cfg_r_cmd_clr_replace(oldword, plain_value);
	udma_spim_0_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_0_REG_STATUS_ADDR (CSR_BASE + 0x5030L)
#define CSR_UDMA_SPIM_0_REG_STATUS_SIZE 1
static inline uint32_t udma_spim_0_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x5030L));
}
#define CSR_UDMA_SPIM_0_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_SPIM_0_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_spim_0_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_0_reg_status_status_i_read(void) {
	uint32_t word = udma_spim_0_reg_status_read();
	return udma_spim_0_reg_status_status_i_extract(word);
}

/* udma_spim_1 */
#define CSR_UDMA_SPIM_1_BASE (CSR_BASE + 0x6000L)
#define CSR_UDMA_SPIM_1_REG_RX_SADDR_ADDR (CSR_BASE + 0x6000L)
#define CSR_UDMA_SPIM_1_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_spim_1_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x6000L));
}
static inline void udma_spim_1_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6000L));
}
#define CSR_UDMA_SPIM_1_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_spim_1_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_spim_1_reg_rx_saddr_read();
	return udma_spim_1_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_spim_1_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_rx_saddr_read();
	uint32_t newword = udma_spim_1_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_spim_1_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_RX_SIZE_ADDR (CSR_BASE + 0x6004L)
#define CSR_UDMA_SPIM_1_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_spim_1_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x6004L));
}
static inline void udma_spim_1_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6004L));
}
#define CSR_UDMA_SPIM_1_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_spim_1_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_spim_1_reg_rx_size_read();
	return udma_spim_1_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_spim_1_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_rx_size_read();
	uint32_t newword = udma_spim_1_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_spim_1_reg_rx_size_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_RX_CFG_ADDR (CSR_BASE + 0x6008L)
#define CSR_UDMA_SPIM_1_REG_RX_CFG_SIZE 1
static inline uint32_t udma_spim_1_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x6008L));
}
static inline void udma_spim_1_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6008L));
}
#define CSR_UDMA_SPIM_1_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_spim_1_reg_rx_cfg_read();
	return udma_spim_1_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_rx_cfg_read();
	uint32_t newword = udma_spim_1_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_spim_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_RX_CFG_R_RX_DATASIZE_OFFSET 1
#define CSR_UDMA_SPIM_1_REG_RX_CFG_R_RX_DATASIZE_SIZE 2
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_datasize_read(void) {
	uint32_t word = udma_spim_1_reg_rx_cfg_read();
	return udma_spim_1_reg_rx_cfg_r_rx_datasize_extract(word);
}
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spim_1_reg_rx_cfg_r_rx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_rx_cfg_read();
	uint32_t newword = udma_spim_1_reg_rx_cfg_r_rx_datasize_replace(oldword, plain_value);
	udma_spim_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_SPIM_1_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_spim_1_reg_rx_cfg_read();
	return udma_spim_1_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_1_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_rx_cfg_read();
	uint32_t newword = udma_spim_1_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_spim_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_SPIM_1_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_spim_1_reg_rx_cfg_read();
	return udma_spim_1_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_spim_1_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_1_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_rx_cfg_read();
	uint32_t newword = udma_spim_1_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_spim_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_TX_SADDR_ADDR (CSR_BASE + 0x6010L)
#define CSR_UDMA_SPIM_1_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_spim_1_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x6010L));
}
static inline void udma_spim_1_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6010L));
}
#define CSR_UDMA_SPIM_1_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_spim_1_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_spim_1_reg_tx_saddr_read();
	return udma_spim_1_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_spim_1_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_tx_saddr_read();
	uint32_t newword = udma_spim_1_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_spim_1_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_TX_SIZE_ADDR (CSR_BASE + 0x6014L)
#define CSR_UDMA_SPIM_1_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_spim_1_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x6014L));
}
static inline void udma_spim_1_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6014L));
}
#define CSR_UDMA_SPIM_1_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_spim_1_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_spim_1_reg_tx_size_read();
	return udma_spim_1_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_spim_1_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_tx_size_read();
	uint32_t newword = udma_spim_1_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_spim_1_reg_tx_size_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_TX_CFG_ADDR (CSR_BASE + 0x6018L)
#define CSR_UDMA_SPIM_1_REG_TX_CFG_SIZE 1
static inline uint32_t udma_spim_1_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x6018L));
}
static inline void udma_spim_1_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6018L));
}
#define CSR_UDMA_SPIM_1_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_spim_1_reg_tx_cfg_read();
	return udma_spim_1_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_tx_cfg_read();
	uint32_t newword = udma_spim_1_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_spim_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_TX_CFG_R_TX_DATASIZE_OFFSET 1
#define CSR_UDMA_SPIM_1_REG_TX_CFG_R_TX_DATASIZE_SIZE 2
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_datasize_read(void) {
	uint32_t word = udma_spim_1_reg_tx_cfg_read();
	return udma_spim_1_reg_tx_cfg_r_tx_datasize_extract(word);
}
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spim_1_reg_tx_cfg_r_tx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_tx_cfg_read();
	uint32_t newword = udma_spim_1_reg_tx_cfg_r_tx_datasize_replace(oldword, plain_value);
	udma_spim_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_SPIM_1_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_spim_1_reg_tx_cfg_read();
	return udma_spim_1_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_1_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_tx_cfg_read();
	uint32_t newword = udma_spim_1_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_spim_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_SPIM_1_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_spim_1_reg_tx_cfg_read();
	return udma_spim_1_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_spim_1_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_1_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_tx_cfg_read();
	uint32_t newword = udma_spim_1_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_spim_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_CMD_SADDR_ADDR (CSR_BASE + 0x6020L)
#define CSR_UDMA_SPIM_1_REG_CMD_SADDR_SIZE 1
static inline uint32_t udma_spim_1_REG_CMD_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x6020L));
}
static inline void udma_spim_1_REG_CMD_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6020L));
}
#define CSR_UDMA_SPIM_1_REG_CMD_SADDR_R_CMD_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_CMD_SADDR_R_CMD_STARTADDR_SIZE 12
static inline uint32_t udma_spim_1_reg_cmd_saddr_r_cmd_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_cmd_saddr_r_cmd_startaddr_read(void) {
	uint32_t word = udma_spim_1_reg_cmd_saddr_read();
	return udma_spim_1_reg_cmd_saddr_r_cmd_startaddr_extract(word);
}
static inline uint32_t udma_spim_1_reg_cmd_saddr_r_cmd_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_cmd_saddr_r_cmd_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_cmd_saddr_read();
	uint32_t newword = udma_spim_1_reg_cmd_saddr_r_cmd_startaddr_replace(oldword, plain_value);
	udma_spim_1_reg_cmd_saddr_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_CMD_SIZE_ADDR (CSR_BASE + 0x6024L)
#define CSR_UDMA_SPIM_1_REG_CMD_SIZE_SIZE 1
static inline uint32_t udma_spim_1_REG_CMD_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x6024L));
}
static inline void udma_spim_1_REG_CMD_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6024L));
}
#define CSR_UDMA_SPIM_1_REG_CMD_SIZE_R_CMD_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_CMD_SIZE_R_CMD_SIZE_SIZE 16
static inline uint32_t udma_spim_1_reg_cmd_size_r_cmd_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_cmd_size_r_cmd_size_read(void) {
	uint32_t word = udma_spim_1_reg_cmd_size_read();
	return udma_spim_1_reg_cmd_size_r_cmd_size_extract(word);
}
static inline uint32_t udma_spim_1_reg_cmd_size_r_cmd_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_cmd_size_r_cmd_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_cmd_size_read();
	uint32_t newword = udma_spim_1_reg_cmd_size_r_cmd_size_replace(oldword, plain_value);
	udma_spim_1_reg_cmd_size_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_CMD_CFG_ADDR (CSR_BASE + 0x6028L)
#define CSR_UDMA_SPIM_1_REG_CMD_CFG_SIZE 1
static inline uint32_t udma_spim_1_REG_CMD_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x6028L));
}
static inline void udma_spim_1_REG_CMD_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6028L));
}
#define CSR_UDMA_SPIM_1_REG_CMD_CFG_R_CMD_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_CMD_CFG_R_CMD_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_continuous_read(void) {
	uint32_t word = udma_spim_1_reg_cmd_cfg_read();
	return udma_spim_1_reg_cmd_cfg_r_cmd_continuous_extract(word);
}
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_1_reg_cmd_cfg_r_cmd_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_1_reg_cmd_cfg_r_cmd_continuous_replace(oldword, plain_value);
	udma_spim_1_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_CMD_CFG_R_CMD_EN_OFFSET 4
#define CSR_UDMA_SPIM_1_REG_CMD_CFG_R_CMD_EN_SIZE 1
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_en_read(void) {
	uint32_t word = udma_spim_1_reg_cmd_cfg_read();
	return udma_spim_1_reg_cmd_cfg_r_cmd_en_extract(word);
}
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_1_reg_cmd_cfg_r_cmd_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_1_reg_cmd_cfg_r_cmd_en_replace(oldword, plain_value);
	udma_spim_1_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_CMD_CFG_R_CMD_CLR_OFFSET 6
#define CSR_UDMA_SPIM_1_REG_CMD_CFG_R_CMD_CLR_SIZE 1
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_clr_read(void) {
	uint32_t word = udma_spim_1_reg_cmd_cfg_read();
	return udma_spim_1_reg_cmd_cfg_r_cmd_clr_extract(word);
}
static inline uint32_t udma_spim_1_reg_cmd_cfg_r_cmd_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_1_reg_cmd_cfg_r_cmd_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_1_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_1_reg_cmd_cfg_r_cmd_clr_replace(oldword, plain_value);
	udma_spim_1_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_1_REG_STATUS_ADDR (CSR_BASE + 0x6030L)
#define CSR_UDMA_SPIM_1_REG_STATUS_SIZE 1
static inline uint32_t udma_spim_1_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x6030L));
}
#define CSR_UDMA_SPIM_1_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_SPIM_1_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_spim_1_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_1_reg_status_status_i_read(void) {
	uint32_t word = udma_spim_1_reg_status_read();
	return udma_spim_1_reg_status_status_i_extract(word);
}

/* udma_spim_2 */
#define CSR_UDMA_SPIM_2_BASE (CSR_BASE + 0x7000L)
#define CSR_UDMA_SPIM_2_REG_RX_SADDR_ADDR (CSR_BASE + 0x7000L)
#define CSR_UDMA_SPIM_2_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_spim_2_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x7000L));
}
static inline void udma_spim_2_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7000L));
}
#define CSR_UDMA_SPIM_2_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_spim_2_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_spim_2_reg_rx_saddr_read();
	return udma_spim_2_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_spim_2_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_rx_saddr_read();
	uint32_t newword = udma_spim_2_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_spim_2_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_RX_SIZE_ADDR (CSR_BASE + 0x7004L)
#define CSR_UDMA_SPIM_2_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_spim_2_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x7004L));
}
static inline void udma_spim_2_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7004L));
}
#define CSR_UDMA_SPIM_2_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_spim_2_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_spim_2_reg_rx_size_read();
	return udma_spim_2_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_spim_2_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_rx_size_read();
	uint32_t newword = udma_spim_2_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_spim_2_reg_rx_size_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_RX_CFG_ADDR (CSR_BASE + 0x7008L)
#define CSR_UDMA_SPIM_2_REG_RX_CFG_SIZE 1
static inline uint32_t udma_spim_2_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x7008L));
}
static inline void udma_spim_2_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7008L));
}
#define CSR_UDMA_SPIM_2_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_spim_2_reg_rx_cfg_read();
	return udma_spim_2_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_rx_cfg_read();
	uint32_t newword = udma_spim_2_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_spim_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_RX_CFG_R_RX_DATASIZE_OFFSET 1
#define CSR_UDMA_SPIM_2_REG_RX_CFG_R_RX_DATASIZE_SIZE 2
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_datasize_read(void) {
	uint32_t word = udma_spim_2_reg_rx_cfg_read();
	return udma_spim_2_reg_rx_cfg_r_rx_datasize_extract(word);
}
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spim_2_reg_rx_cfg_r_rx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_rx_cfg_read();
	uint32_t newword = udma_spim_2_reg_rx_cfg_r_rx_datasize_replace(oldword, plain_value);
	udma_spim_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_SPIM_2_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_spim_2_reg_rx_cfg_read();
	return udma_spim_2_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_2_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_rx_cfg_read();
	uint32_t newword = udma_spim_2_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_spim_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_SPIM_2_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_spim_2_reg_rx_cfg_read();
	return udma_spim_2_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_spim_2_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_2_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_rx_cfg_read();
	uint32_t newword = udma_spim_2_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_spim_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_TX_SADDR_ADDR (CSR_BASE + 0x7010L)
#define CSR_UDMA_SPIM_2_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_spim_2_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x7010L));
}
static inline void udma_spim_2_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7010L));
}
#define CSR_UDMA_SPIM_2_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_spim_2_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_spim_2_reg_tx_saddr_read();
	return udma_spim_2_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_spim_2_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_tx_saddr_read();
	uint32_t newword = udma_spim_2_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_spim_2_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_TX_SIZE_ADDR (CSR_BASE + 0x7014L)
#define CSR_UDMA_SPIM_2_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_spim_2_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x7014L));
}
static inline void udma_spim_2_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7014L));
}
#define CSR_UDMA_SPIM_2_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_spim_2_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_spim_2_reg_tx_size_read();
	return udma_spim_2_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_spim_2_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_tx_size_read();
	uint32_t newword = udma_spim_2_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_spim_2_reg_tx_size_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_TX_CFG_ADDR (CSR_BASE + 0x7018L)
#define CSR_UDMA_SPIM_2_REG_TX_CFG_SIZE 1
static inline uint32_t udma_spim_2_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x7018L));
}
static inline void udma_spim_2_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7018L));
}
#define CSR_UDMA_SPIM_2_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_spim_2_reg_tx_cfg_read();
	return udma_spim_2_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_tx_cfg_read();
	uint32_t newword = udma_spim_2_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_spim_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_TX_CFG_R_TX_DATASIZE_OFFSET 1
#define CSR_UDMA_SPIM_2_REG_TX_CFG_R_TX_DATASIZE_SIZE 2
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_datasize_read(void) {
	uint32_t word = udma_spim_2_reg_tx_cfg_read();
	return udma_spim_2_reg_tx_cfg_r_tx_datasize_extract(word);
}
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spim_2_reg_tx_cfg_r_tx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_tx_cfg_read();
	uint32_t newword = udma_spim_2_reg_tx_cfg_r_tx_datasize_replace(oldword, plain_value);
	udma_spim_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_SPIM_2_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_spim_2_reg_tx_cfg_read();
	return udma_spim_2_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_2_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_tx_cfg_read();
	uint32_t newword = udma_spim_2_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_spim_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_SPIM_2_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_spim_2_reg_tx_cfg_read();
	return udma_spim_2_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_spim_2_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_2_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_tx_cfg_read();
	uint32_t newword = udma_spim_2_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_spim_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_CMD_SADDR_ADDR (CSR_BASE + 0x7020L)
#define CSR_UDMA_SPIM_2_REG_CMD_SADDR_SIZE 1
static inline uint32_t udma_spim_2_REG_CMD_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x7020L));
}
static inline void udma_spim_2_REG_CMD_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7020L));
}
#define CSR_UDMA_SPIM_2_REG_CMD_SADDR_R_CMD_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_CMD_SADDR_R_CMD_STARTADDR_SIZE 12
static inline uint32_t udma_spim_2_reg_cmd_saddr_r_cmd_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_cmd_saddr_r_cmd_startaddr_read(void) {
	uint32_t word = udma_spim_2_reg_cmd_saddr_read();
	return udma_spim_2_reg_cmd_saddr_r_cmd_startaddr_extract(word);
}
static inline uint32_t udma_spim_2_reg_cmd_saddr_r_cmd_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_cmd_saddr_r_cmd_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_cmd_saddr_read();
	uint32_t newword = udma_spim_2_reg_cmd_saddr_r_cmd_startaddr_replace(oldword, plain_value);
	udma_spim_2_reg_cmd_saddr_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_CMD_SIZE_ADDR (CSR_BASE + 0x7024L)
#define CSR_UDMA_SPIM_2_REG_CMD_SIZE_SIZE 1
static inline uint32_t udma_spim_2_REG_CMD_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x7024L));
}
static inline void udma_spim_2_REG_CMD_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7024L));
}
#define CSR_UDMA_SPIM_2_REG_CMD_SIZE_R_CMD_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_CMD_SIZE_R_CMD_SIZE_SIZE 16
static inline uint32_t udma_spim_2_reg_cmd_size_r_cmd_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_cmd_size_r_cmd_size_read(void) {
	uint32_t word = udma_spim_2_reg_cmd_size_read();
	return udma_spim_2_reg_cmd_size_r_cmd_size_extract(word);
}
static inline uint32_t udma_spim_2_reg_cmd_size_r_cmd_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_cmd_size_r_cmd_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_cmd_size_read();
	uint32_t newword = udma_spim_2_reg_cmd_size_r_cmd_size_replace(oldword, plain_value);
	udma_spim_2_reg_cmd_size_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_CMD_CFG_ADDR (CSR_BASE + 0x7028L)
#define CSR_UDMA_SPIM_2_REG_CMD_CFG_SIZE 1
static inline uint32_t udma_spim_2_REG_CMD_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x7028L));
}
static inline void udma_spim_2_REG_CMD_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7028L));
}
#define CSR_UDMA_SPIM_2_REG_CMD_CFG_R_CMD_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_CMD_CFG_R_CMD_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_continuous_read(void) {
	uint32_t word = udma_spim_2_reg_cmd_cfg_read();
	return udma_spim_2_reg_cmd_cfg_r_cmd_continuous_extract(word);
}
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_2_reg_cmd_cfg_r_cmd_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_2_reg_cmd_cfg_r_cmd_continuous_replace(oldword, plain_value);
	udma_spim_2_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_CMD_CFG_R_CMD_EN_OFFSET 4
#define CSR_UDMA_SPIM_2_REG_CMD_CFG_R_CMD_EN_SIZE 1
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_en_read(void) {
	uint32_t word = udma_spim_2_reg_cmd_cfg_read();
	return udma_spim_2_reg_cmd_cfg_r_cmd_en_extract(word);
}
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_2_reg_cmd_cfg_r_cmd_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_2_reg_cmd_cfg_r_cmd_en_replace(oldword, plain_value);
	udma_spim_2_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_CMD_CFG_R_CMD_CLR_OFFSET 6
#define CSR_UDMA_SPIM_2_REG_CMD_CFG_R_CMD_CLR_SIZE 1
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_clr_read(void) {
	uint32_t word = udma_spim_2_reg_cmd_cfg_read();
	return udma_spim_2_reg_cmd_cfg_r_cmd_clr_extract(word);
}
static inline uint32_t udma_spim_2_reg_cmd_cfg_r_cmd_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_2_reg_cmd_cfg_r_cmd_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_2_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_2_reg_cmd_cfg_r_cmd_clr_replace(oldword, plain_value);
	udma_spim_2_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_2_REG_STATUS_ADDR (CSR_BASE + 0x7030L)
#define CSR_UDMA_SPIM_2_REG_STATUS_SIZE 1
static inline uint32_t udma_spim_2_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x7030L));
}
#define CSR_UDMA_SPIM_2_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_SPIM_2_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_spim_2_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_2_reg_status_status_i_read(void) {
	uint32_t word = udma_spim_2_reg_status_read();
	return udma_spim_2_reg_status_status_i_extract(word);
}

/* udma_spim_3 */
#define CSR_UDMA_SPIM_3_BASE (CSR_BASE + 0x8000L)
#define CSR_UDMA_SPIM_3_REG_RX_SADDR_ADDR (CSR_BASE + 0x8000L)
#define CSR_UDMA_SPIM_3_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_spim_3_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x8000L));
}
static inline void udma_spim_3_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8000L));
}
#define CSR_UDMA_SPIM_3_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_spim_3_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_spim_3_reg_rx_saddr_read();
	return udma_spim_3_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_spim_3_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_rx_saddr_read();
	uint32_t newword = udma_spim_3_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_spim_3_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_RX_SIZE_ADDR (CSR_BASE + 0x8004L)
#define CSR_UDMA_SPIM_3_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_spim_3_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x8004L));
}
static inline void udma_spim_3_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8004L));
}
#define CSR_UDMA_SPIM_3_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_spim_3_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_spim_3_reg_rx_size_read();
	return udma_spim_3_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_spim_3_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_rx_size_read();
	uint32_t newword = udma_spim_3_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_spim_3_reg_rx_size_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_RX_CFG_ADDR (CSR_BASE + 0x8008L)
#define CSR_UDMA_SPIM_3_REG_RX_CFG_SIZE 1
static inline uint32_t udma_spim_3_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x8008L));
}
static inline void udma_spim_3_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8008L));
}
#define CSR_UDMA_SPIM_3_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_spim_3_reg_rx_cfg_read();
	return udma_spim_3_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_rx_cfg_read();
	uint32_t newword = udma_spim_3_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_spim_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_RX_CFG_R_RX_DATASIZE_OFFSET 1
#define CSR_UDMA_SPIM_3_REG_RX_CFG_R_RX_DATASIZE_SIZE 2
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_datasize_read(void) {
	uint32_t word = udma_spim_3_reg_rx_cfg_read();
	return udma_spim_3_reg_rx_cfg_r_rx_datasize_extract(word);
}
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spim_3_reg_rx_cfg_r_rx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_rx_cfg_read();
	uint32_t newword = udma_spim_3_reg_rx_cfg_r_rx_datasize_replace(oldword, plain_value);
	udma_spim_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_SPIM_3_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_spim_3_reg_rx_cfg_read();
	return udma_spim_3_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_3_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_rx_cfg_read();
	uint32_t newword = udma_spim_3_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_spim_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_SPIM_3_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_spim_3_reg_rx_cfg_read();
	return udma_spim_3_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_spim_3_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_3_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_rx_cfg_read();
	uint32_t newword = udma_spim_3_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_spim_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_TX_SADDR_ADDR (CSR_BASE + 0x8010L)
#define CSR_UDMA_SPIM_3_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_spim_3_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x8010L));
}
static inline void udma_spim_3_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8010L));
}
#define CSR_UDMA_SPIM_3_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_spim_3_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_spim_3_reg_tx_saddr_read();
	return udma_spim_3_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_spim_3_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_tx_saddr_read();
	uint32_t newword = udma_spim_3_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_spim_3_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_TX_SIZE_ADDR (CSR_BASE + 0x8014L)
#define CSR_UDMA_SPIM_3_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_spim_3_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x8014L));
}
static inline void udma_spim_3_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8014L));
}
#define CSR_UDMA_SPIM_3_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_spim_3_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_spim_3_reg_tx_size_read();
	return udma_spim_3_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_spim_3_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_tx_size_read();
	uint32_t newword = udma_spim_3_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_spim_3_reg_tx_size_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_TX_CFG_ADDR (CSR_BASE + 0x8018L)
#define CSR_UDMA_SPIM_3_REG_TX_CFG_SIZE 1
static inline uint32_t udma_spim_3_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x8018L));
}
static inline void udma_spim_3_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8018L));
}
#define CSR_UDMA_SPIM_3_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_spim_3_reg_tx_cfg_read();
	return udma_spim_3_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_tx_cfg_read();
	uint32_t newword = udma_spim_3_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_spim_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_TX_CFG_R_TX_DATASIZE_OFFSET 1
#define CSR_UDMA_SPIM_3_REG_TX_CFG_R_TX_DATASIZE_SIZE 2
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_datasize_read(void) {
	uint32_t word = udma_spim_3_reg_tx_cfg_read();
	return udma_spim_3_reg_tx_cfg_r_tx_datasize_extract(word);
}
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spim_3_reg_tx_cfg_r_tx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_tx_cfg_read();
	uint32_t newword = udma_spim_3_reg_tx_cfg_r_tx_datasize_replace(oldword, plain_value);
	udma_spim_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_SPIM_3_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_spim_3_reg_tx_cfg_read();
	return udma_spim_3_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_3_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_tx_cfg_read();
	uint32_t newword = udma_spim_3_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_spim_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_SPIM_3_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_spim_3_reg_tx_cfg_read();
	return udma_spim_3_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_spim_3_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_3_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_tx_cfg_read();
	uint32_t newword = udma_spim_3_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_spim_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_CMD_SADDR_ADDR (CSR_BASE + 0x8020L)
#define CSR_UDMA_SPIM_3_REG_CMD_SADDR_SIZE 1
static inline uint32_t udma_spim_3_REG_CMD_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x8020L));
}
static inline void udma_spim_3_REG_CMD_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8020L));
}
#define CSR_UDMA_SPIM_3_REG_CMD_SADDR_R_CMD_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_CMD_SADDR_R_CMD_STARTADDR_SIZE 12
static inline uint32_t udma_spim_3_reg_cmd_saddr_r_cmd_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_cmd_saddr_r_cmd_startaddr_read(void) {
	uint32_t word = udma_spim_3_reg_cmd_saddr_read();
	return udma_spim_3_reg_cmd_saddr_r_cmd_startaddr_extract(word);
}
static inline uint32_t udma_spim_3_reg_cmd_saddr_r_cmd_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_cmd_saddr_r_cmd_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_cmd_saddr_read();
	uint32_t newword = udma_spim_3_reg_cmd_saddr_r_cmd_startaddr_replace(oldword, plain_value);
	udma_spim_3_reg_cmd_saddr_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_CMD_SIZE_ADDR (CSR_BASE + 0x8024L)
#define CSR_UDMA_SPIM_3_REG_CMD_SIZE_SIZE 1
static inline uint32_t udma_spim_3_REG_CMD_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x8024L));
}
static inline void udma_spim_3_REG_CMD_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8024L));
}
#define CSR_UDMA_SPIM_3_REG_CMD_SIZE_R_CMD_SIZE_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_CMD_SIZE_R_CMD_SIZE_SIZE 16
static inline uint32_t udma_spim_3_reg_cmd_size_r_cmd_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_cmd_size_r_cmd_size_read(void) {
	uint32_t word = udma_spim_3_reg_cmd_size_read();
	return udma_spim_3_reg_cmd_size_r_cmd_size_extract(word);
}
static inline uint32_t udma_spim_3_reg_cmd_size_r_cmd_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_cmd_size_r_cmd_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_cmd_size_read();
	uint32_t newword = udma_spim_3_reg_cmd_size_r_cmd_size_replace(oldword, plain_value);
	udma_spim_3_reg_cmd_size_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_CMD_CFG_ADDR (CSR_BASE + 0x8028L)
#define CSR_UDMA_SPIM_3_REG_CMD_CFG_SIZE 1
static inline uint32_t udma_spim_3_REG_CMD_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x8028L));
}
static inline void udma_spim_3_REG_CMD_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8028L));
}
#define CSR_UDMA_SPIM_3_REG_CMD_CFG_R_CMD_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_CMD_CFG_R_CMD_CONTINUOUS_SIZE 1
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_continuous_read(void) {
	uint32_t word = udma_spim_3_reg_cmd_cfg_read();
	return udma_spim_3_reg_cmd_cfg_r_cmd_continuous_extract(word);
}
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spim_3_reg_cmd_cfg_r_cmd_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_3_reg_cmd_cfg_r_cmd_continuous_replace(oldword, plain_value);
	udma_spim_3_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_CMD_CFG_R_CMD_EN_OFFSET 4
#define CSR_UDMA_SPIM_3_REG_CMD_CFG_R_CMD_EN_SIZE 1
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_en_read(void) {
	uint32_t word = udma_spim_3_reg_cmd_cfg_read();
	return udma_spim_3_reg_cmd_cfg_r_cmd_en_extract(word);
}
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spim_3_reg_cmd_cfg_r_cmd_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_3_reg_cmd_cfg_r_cmd_en_replace(oldword, plain_value);
	udma_spim_3_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_CMD_CFG_R_CMD_CLR_OFFSET 6
#define CSR_UDMA_SPIM_3_REG_CMD_CFG_R_CMD_CLR_SIZE 1
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_clr_read(void) {
	uint32_t word = udma_spim_3_reg_cmd_cfg_read();
	return udma_spim_3_reg_cmd_cfg_r_cmd_clr_extract(word);
}
static inline uint32_t udma_spim_3_reg_cmd_cfg_r_cmd_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spim_3_reg_cmd_cfg_r_cmd_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spim_3_reg_cmd_cfg_read();
	uint32_t newword = udma_spim_3_reg_cmd_cfg_r_cmd_clr_replace(oldword, plain_value);
	udma_spim_3_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_SPIM_3_REG_STATUS_ADDR (CSR_BASE + 0x8030L)
#define CSR_UDMA_SPIM_3_REG_STATUS_SIZE 1
static inline uint32_t udma_spim_3_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x8030L));
}
#define CSR_UDMA_SPIM_3_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_SPIM_3_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_spim_3_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spim_3_reg_status_status_i_read(void) {
	uint32_t word = udma_spim_3_reg_status_read();
	return udma_spim_3_reg_status_status_i_extract(word);
}

/* udma_i2c_0 */
#define CSR_UDMA_I2C_0_BASE (CSR_BASE + 0x9000L)
#define CSR_UDMA_I2C_0_REG_RX_SADDR_ADDR (CSR_BASE + 0x9000L)
#define CSR_UDMA_I2C_0_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_i2c_0_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x9000L));
}
static inline void udma_i2c_0_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9000L));
}
#define CSR_UDMA_I2C_0_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_0_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_0_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_i2c_0_reg_rx_saddr_read();
	return udma_i2c_0_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_i2c_0_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_rx_saddr_read();
	uint32_t newword = udma_i2c_0_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_i2c_0_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_I2C_0_REG_RX_SIZE_ADDR (CSR_BASE + 0x9004L)
#define CSR_UDMA_I2C_0_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_i2c_0_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x9004L));
}
static inline void udma_i2c_0_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9004L));
}
#define CSR_UDMA_I2C_0_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_I2C_0_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_i2c_0_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_i2c_0_reg_rx_size_read();
	return udma_i2c_0_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_i2c_0_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_rx_size_read();
	uint32_t newword = udma_i2c_0_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_i2c_0_reg_rx_size_write(newword);
}
#define CSR_UDMA_I2C_0_REG_RX_CFG_ADDR (CSR_BASE + 0x9008L)
#define CSR_UDMA_I2C_0_REG_RX_CFG_SIZE 1
static inline uint32_t udma_i2c_0_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x9008L));
}
static inline void udma_i2c_0_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9008L));
}
#define CSR_UDMA_I2C_0_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_0_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_i2c_0_reg_rx_cfg_read();
	return udma_i2c_0_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_0_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_i2c_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_I2C_0_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_i2c_0_reg_rx_cfg_read();
	return udma_i2c_0_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_0_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_0_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_i2c_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_I2C_0_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_i2c_0_reg_rx_cfg_read();
	return udma_i2c_0_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_i2c_0_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_0_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_0_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_i2c_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_TX_SADDR_ADDR (CSR_BASE + 0x9010L)
#define CSR_UDMA_I2C_0_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_i2c_0_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x9010L));
}
static inline void udma_i2c_0_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9010L));
}
#define CSR_UDMA_I2C_0_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_0_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_0_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_i2c_0_reg_tx_saddr_read();
	return udma_i2c_0_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_i2c_0_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_tx_saddr_read();
	uint32_t newword = udma_i2c_0_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_i2c_0_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_I2C_0_REG_TX_SIZE_ADDR (CSR_BASE + 0x9014L)
#define CSR_UDMA_I2C_0_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_i2c_0_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x9014L));
}
static inline void udma_i2c_0_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9014L));
}
#define CSR_UDMA_I2C_0_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_I2C_0_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_i2c_0_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_i2c_0_reg_tx_size_read();
	return udma_i2c_0_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_i2c_0_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_tx_size_read();
	uint32_t newword = udma_i2c_0_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_i2c_0_reg_tx_size_write(newword);
}
#define CSR_UDMA_I2C_0_REG_TX_CFG_ADDR (CSR_BASE + 0x9018L)
#define CSR_UDMA_I2C_0_REG_TX_CFG_SIZE 1
static inline uint32_t udma_i2c_0_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x9018L));
}
static inline void udma_i2c_0_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9018L));
}
#define CSR_UDMA_I2C_0_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_0_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_i2c_0_reg_tx_cfg_read();
	return udma_i2c_0_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_0_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_i2c_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_I2C_0_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_i2c_0_reg_tx_cfg_read();
	return udma_i2c_0_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_0_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_0_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_i2c_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_I2C_0_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_i2c_0_reg_tx_cfg_read();
	return udma_i2c_0_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_i2c_0_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_0_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_0_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_i2c_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_CMD_SADDR_ADDR (CSR_BASE + 0x9020L)
#define CSR_UDMA_I2C_0_REG_CMD_SADDR_SIZE 1
static inline uint32_t udma_i2c_0_REG_CMD_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x9020L));
}
static inline void udma_i2c_0_REG_CMD_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9020L));
}
#define CSR_UDMA_I2C_0_REG_CMD_SADDR_R_CMD_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_0_REG_CMD_SADDR_R_CMD_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_0_reg_cmd_saddr_r_cmd_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_cmd_saddr_r_cmd_startaddr_read(void) {
	uint32_t word = udma_i2c_0_reg_cmd_saddr_read();
	return udma_i2c_0_reg_cmd_saddr_r_cmd_startaddr_extract(word);
}
static inline uint32_t udma_i2c_0_reg_cmd_saddr_r_cmd_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_cmd_saddr_r_cmd_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_cmd_saddr_read();
	uint32_t newword = udma_i2c_0_reg_cmd_saddr_r_cmd_startaddr_replace(oldword, plain_value);
	udma_i2c_0_reg_cmd_saddr_write(newword);
}
#define CSR_UDMA_I2C_0_REG_CMD_SIZE_ADDR (CSR_BASE + 0x9024L)
#define CSR_UDMA_I2C_0_REG_CMD_SIZE_SIZE 1
static inline uint32_t udma_i2c_0_REG_CMD_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x9024L));
}
static inline void udma_i2c_0_REG_CMD_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9024L));
}
#define CSR_UDMA_I2C_0_REG_CMD_SIZE_R_CMD_SIZE_OFFSET 0
#define CSR_UDMA_I2C_0_REG_CMD_SIZE_R_CMD_SIZE_SIZE 16
static inline uint32_t udma_i2c_0_reg_cmd_size_r_cmd_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_cmd_size_r_cmd_size_read(void) {
	uint32_t word = udma_i2c_0_reg_cmd_size_read();
	return udma_i2c_0_reg_cmd_size_r_cmd_size_extract(word);
}
static inline uint32_t udma_i2c_0_reg_cmd_size_r_cmd_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_cmd_size_r_cmd_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_cmd_size_read();
	uint32_t newword = udma_i2c_0_reg_cmd_size_r_cmd_size_replace(oldword, plain_value);
	udma_i2c_0_reg_cmd_size_write(newword);
}
#define CSR_UDMA_I2C_0_REG_CMD_CFG_ADDR (CSR_BASE + 0x9028L)
#define CSR_UDMA_I2C_0_REG_CMD_CFG_SIZE 1
static inline uint32_t udma_i2c_0_REG_CMD_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x9028L));
}
static inline void udma_i2c_0_REG_CMD_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9028L));
}
#define CSR_UDMA_I2C_0_REG_CMD_CFG_R_CMD_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_0_REG_CMD_CFG_R_CMD_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_continuous_read(void) {
	uint32_t word = udma_i2c_0_reg_cmd_cfg_read();
	return udma_i2c_0_reg_cmd_cfg_r_cmd_continuous_extract(word);
}
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_cmd_cfg_r_cmd_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_0_reg_cmd_cfg_r_cmd_continuous_replace(oldword, plain_value);
	udma_i2c_0_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_CMD_CFG_R_CMD_EN_OFFSET 4
#define CSR_UDMA_I2C_0_REG_CMD_CFG_R_CMD_EN_SIZE 1
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_en_read(void) {
	uint32_t word = udma_i2c_0_reg_cmd_cfg_read();
	return udma_i2c_0_reg_cmd_cfg_r_cmd_en_extract(word);
}
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_0_reg_cmd_cfg_r_cmd_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_0_reg_cmd_cfg_r_cmd_en_replace(oldword, plain_value);
	udma_i2c_0_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_CMD_CFG_R_CMD_CLR_OFFSET 6
#define CSR_UDMA_I2C_0_REG_CMD_CFG_R_CMD_CLR_SIZE 1
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_clr_read(void) {
	uint32_t word = udma_i2c_0_reg_cmd_cfg_read();
	return udma_i2c_0_reg_cmd_cfg_r_cmd_clr_extract(word);
}
static inline uint32_t udma_i2c_0_reg_cmd_cfg_r_cmd_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_0_reg_cmd_cfg_r_cmd_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_0_reg_cmd_cfg_r_cmd_clr_replace(oldword, plain_value);
	udma_i2c_0_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_0_REG_STATUS_ADDR (CSR_BASE + 0x9030L)
#define CSR_UDMA_I2C_0_REG_STATUS_SIZE 1
static inline uint32_t udma_i2c_0_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x9030L));
}
#define CSR_UDMA_I2C_0_REG_STATUS_R_BUSY_OFFSET 0
#define CSR_UDMA_I2C_0_REG_STATUS_R_BUSY_SIZE 1
static inline uint32_t udma_i2c_0_reg_status_r_busy_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_status_r_busy_read(void) {
	uint32_t word = udma_i2c_0_reg_status_read();
	return udma_i2c_0_reg_status_r_busy_extract(word);
}
#define CSR_UDMA_I2C_0_REG_STATUS_R_AL_OFFSET 1
#define CSR_UDMA_I2C_0_REG_STATUS_R_AL_SIZE 1
static inline uint32_t udma_i2c_0_reg_status_r_al_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_i2c_0_reg_status_r_al_read(void) {
	uint32_t word = udma_i2c_0_reg_status_read();
	return udma_i2c_0_reg_status_r_al_extract(word);
}
#define CSR_UDMA_I2C_0_REG_SETUP_ADDR (CSR_BASE + 0x9034L)
#define CSR_UDMA_I2C_0_REG_SETUP_SIZE 1
static inline uint32_t udma_i2c_0_REG_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x9034L));
}
static inline void udma_i2c_0_REG_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9034L));
}
#define CSR_UDMA_I2C_0_REG_SETUP_R_DO_RST_OFFSET 0
#define CSR_UDMA_I2C_0_REG_SETUP_R_DO_RST_SIZE 1
static inline uint32_t udma_i2c_0_reg_setup_r_do_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_setup_r_do_rst_read(void) {
	uint32_t word = udma_i2c_0_reg_setup_read();
	return udma_i2c_0_reg_setup_r_do_rst_extract(word);
}
static inline uint32_t udma_i2c_0_reg_setup_r_do_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_0_reg_setup_r_do_rst_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_0_reg_setup_read();
	uint32_t newword = udma_i2c_0_reg_setup_r_do_rst_replace(oldword, plain_value);
	udma_i2c_0_reg_setup_write(newword);
}
#define CSR_UDMA_I2C_0_REG_ACK_ADDR (CSR_BASE + 0x9038L)
#define CSR_UDMA_I2C_0_REG_ACK_SIZE 1
static inline uint32_t udma_i2c_0_REG_ACK_read(void) {
	return csr_read_simple((CSR_BASE + 0x9038L));
}
#define CSR_UDMA_I2C_0_REG_ACK_R_NACK_OFFSET 0
#define CSR_UDMA_I2C_0_REG_ACK_R_NACK_SIZE 1
static inline uint32_t udma_i2c_0_reg_ack_r_nack_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_0_reg_ack_r_nack_read(void) {
	uint32_t word = udma_i2c_0_reg_ack_read();
	return udma_i2c_0_reg_ack_r_nack_extract(word);
}

/* udma_i2c_1 */
#define CSR_UDMA_I2C_1_BASE (CSR_BASE + 0xa000L)
#define CSR_UDMA_I2C_1_REG_RX_SADDR_ADDR (CSR_BASE + 0xa000L)
#define CSR_UDMA_I2C_1_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_i2c_1_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xa000L));
}
static inline void udma_i2c_1_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa000L));
}
#define CSR_UDMA_I2C_1_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_1_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_1_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_i2c_1_reg_rx_saddr_read();
	return udma_i2c_1_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_i2c_1_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_rx_saddr_read();
	uint32_t newword = udma_i2c_1_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_i2c_1_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_I2C_1_REG_RX_SIZE_ADDR (CSR_BASE + 0xa004L)
#define CSR_UDMA_I2C_1_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_i2c_1_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xa004L));
}
static inline void udma_i2c_1_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa004L));
}
#define CSR_UDMA_I2C_1_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_I2C_1_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_i2c_1_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_i2c_1_reg_rx_size_read();
	return udma_i2c_1_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_i2c_1_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_rx_size_read();
	uint32_t newword = udma_i2c_1_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_i2c_1_reg_rx_size_write(newword);
}
#define CSR_UDMA_I2C_1_REG_RX_CFG_ADDR (CSR_BASE + 0xa008L)
#define CSR_UDMA_I2C_1_REG_RX_CFG_SIZE 1
static inline uint32_t udma_i2c_1_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xa008L));
}
static inline void udma_i2c_1_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa008L));
}
#define CSR_UDMA_I2C_1_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_1_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_i2c_1_reg_rx_cfg_read();
	return udma_i2c_1_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_1_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_i2c_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_I2C_1_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_i2c_1_reg_rx_cfg_read();
	return udma_i2c_1_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_1_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_1_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_i2c_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_I2C_1_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_i2c_1_reg_rx_cfg_read();
	return udma_i2c_1_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_i2c_1_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_1_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_1_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_i2c_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_TX_SADDR_ADDR (CSR_BASE + 0xa010L)
#define CSR_UDMA_I2C_1_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_i2c_1_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xa010L));
}
static inline void udma_i2c_1_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa010L));
}
#define CSR_UDMA_I2C_1_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_1_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_1_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_i2c_1_reg_tx_saddr_read();
	return udma_i2c_1_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_i2c_1_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_tx_saddr_read();
	uint32_t newword = udma_i2c_1_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_i2c_1_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_I2C_1_REG_TX_SIZE_ADDR (CSR_BASE + 0xa014L)
#define CSR_UDMA_I2C_1_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_i2c_1_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xa014L));
}
static inline void udma_i2c_1_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa014L));
}
#define CSR_UDMA_I2C_1_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_I2C_1_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_i2c_1_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_i2c_1_reg_tx_size_read();
	return udma_i2c_1_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_i2c_1_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_tx_size_read();
	uint32_t newword = udma_i2c_1_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_i2c_1_reg_tx_size_write(newword);
}
#define CSR_UDMA_I2C_1_REG_TX_CFG_ADDR (CSR_BASE + 0xa018L)
#define CSR_UDMA_I2C_1_REG_TX_CFG_SIZE 1
static inline uint32_t udma_i2c_1_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xa018L));
}
static inline void udma_i2c_1_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa018L));
}
#define CSR_UDMA_I2C_1_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_1_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_i2c_1_reg_tx_cfg_read();
	return udma_i2c_1_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_1_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_i2c_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_I2C_1_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_i2c_1_reg_tx_cfg_read();
	return udma_i2c_1_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_1_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_1_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_i2c_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_I2C_1_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_i2c_1_reg_tx_cfg_read();
	return udma_i2c_1_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_i2c_1_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_1_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_1_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_i2c_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_CMD_SADDR_ADDR (CSR_BASE + 0xa020L)
#define CSR_UDMA_I2C_1_REG_CMD_SADDR_SIZE 1
static inline uint32_t udma_i2c_1_REG_CMD_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xa020L));
}
static inline void udma_i2c_1_REG_CMD_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa020L));
}
#define CSR_UDMA_I2C_1_REG_CMD_SADDR_R_CMD_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_1_REG_CMD_SADDR_R_CMD_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_1_reg_cmd_saddr_r_cmd_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_cmd_saddr_r_cmd_startaddr_read(void) {
	uint32_t word = udma_i2c_1_reg_cmd_saddr_read();
	return udma_i2c_1_reg_cmd_saddr_r_cmd_startaddr_extract(word);
}
static inline uint32_t udma_i2c_1_reg_cmd_saddr_r_cmd_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_cmd_saddr_r_cmd_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_cmd_saddr_read();
	uint32_t newword = udma_i2c_1_reg_cmd_saddr_r_cmd_startaddr_replace(oldword, plain_value);
	udma_i2c_1_reg_cmd_saddr_write(newword);
}
#define CSR_UDMA_I2C_1_REG_CMD_SIZE_ADDR (CSR_BASE + 0xa024L)
#define CSR_UDMA_I2C_1_REG_CMD_SIZE_SIZE 1
static inline uint32_t udma_i2c_1_REG_CMD_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xa024L));
}
static inline void udma_i2c_1_REG_CMD_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa024L));
}
#define CSR_UDMA_I2C_1_REG_CMD_SIZE_R_CMD_SIZE_OFFSET 0
#define CSR_UDMA_I2C_1_REG_CMD_SIZE_R_CMD_SIZE_SIZE 16
static inline uint32_t udma_i2c_1_reg_cmd_size_r_cmd_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_cmd_size_r_cmd_size_read(void) {
	uint32_t word = udma_i2c_1_reg_cmd_size_read();
	return udma_i2c_1_reg_cmd_size_r_cmd_size_extract(word);
}
static inline uint32_t udma_i2c_1_reg_cmd_size_r_cmd_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_cmd_size_r_cmd_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_cmd_size_read();
	uint32_t newword = udma_i2c_1_reg_cmd_size_r_cmd_size_replace(oldword, plain_value);
	udma_i2c_1_reg_cmd_size_write(newword);
}
#define CSR_UDMA_I2C_1_REG_CMD_CFG_ADDR (CSR_BASE + 0xa028L)
#define CSR_UDMA_I2C_1_REG_CMD_CFG_SIZE 1
static inline uint32_t udma_i2c_1_REG_CMD_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xa028L));
}
static inline void udma_i2c_1_REG_CMD_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa028L));
}
#define CSR_UDMA_I2C_1_REG_CMD_CFG_R_CMD_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_1_REG_CMD_CFG_R_CMD_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_continuous_read(void) {
	uint32_t word = udma_i2c_1_reg_cmd_cfg_read();
	return udma_i2c_1_reg_cmd_cfg_r_cmd_continuous_extract(word);
}
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_cmd_cfg_r_cmd_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_1_reg_cmd_cfg_r_cmd_continuous_replace(oldword, plain_value);
	udma_i2c_1_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_CMD_CFG_R_CMD_EN_OFFSET 4
#define CSR_UDMA_I2C_1_REG_CMD_CFG_R_CMD_EN_SIZE 1
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_en_read(void) {
	uint32_t word = udma_i2c_1_reg_cmd_cfg_read();
	return udma_i2c_1_reg_cmd_cfg_r_cmd_en_extract(word);
}
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_1_reg_cmd_cfg_r_cmd_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_1_reg_cmd_cfg_r_cmd_en_replace(oldword, plain_value);
	udma_i2c_1_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_CMD_CFG_R_CMD_CLR_OFFSET 6
#define CSR_UDMA_I2C_1_REG_CMD_CFG_R_CMD_CLR_SIZE 1
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_clr_read(void) {
	uint32_t word = udma_i2c_1_reg_cmd_cfg_read();
	return udma_i2c_1_reg_cmd_cfg_r_cmd_clr_extract(word);
}
static inline uint32_t udma_i2c_1_reg_cmd_cfg_r_cmd_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_1_reg_cmd_cfg_r_cmd_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_1_reg_cmd_cfg_r_cmd_clr_replace(oldword, plain_value);
	udma_i2c_1_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_1_REG_STATUS_ADDR (CSR_BASE + 0xa030L)
#define CSR_UDMA_I2C_1_REG_STATUS_SIZE 1
static inline uint32_t udma_i2c_1_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0xa030L));
}
#define CSR_UDMA_I2C_1_REG_STATUS_R_BUSY_OFFSET 0
#define CSR_UDMA_I2C_1_REG_STATUS_R_BUSY_SIZE 1
static inline uint32_t udma_i2c_1_reg_status_r_busy_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_status_r_busy_read(void) {
	uint32_t word = udma_i2c_1_reg_status_read();
	return udma_i2c_1_reg_status_r_busy_extract(word);
}
#define CSR_UDMA_I2C_1_REG_STATUS_R_AL_OFFSET 1
#define CSR_UDMA_I2C_1_REG_STATUS_R_AL_SIZE 1
static inline uint32_t udma_i2c_1_reg_status_r_al_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_i2c_1_reg_status_r_al_read(void) {
	uint32_t word = udma_i2c_1_reg_status_read();
	return udma_i2c_1_reg_status_r_al_extract(word);
}
#define CSR_UDMA_I2C_1_REG_SETUP_ADDR (CSR_BASE + 0xa034L)
#define CSR_UDMA_I2C_1_REG_SETUP_SIZE 1
static inline uint32_t udma_i2c_1_REG_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0xa034L));
}
static inline void udma_i2c_1_REG_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa034L));
}
#define CSR_UDMA_I2C_1_REG_SETUP_R_DO_RST_OFFSET 0
#define CSR_UDMA_I2C_1_REG_SETUP_R_DO_RST_SIZE 1
static inline uint32_t udma_i2c_1_reg_setup_r_do_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_setup_r_do_rst_read(void) {
	uint32_t word = udma_i2c_1_reg_setup_read();
	return udma_i2c_1_reg_setup_r_do_rst_extract(word);
}
static inline uint32_t udma_i2c_1_reg_setup_r_do_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_1_reg_setup_r_do_rst_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_1_reg_setup_read();
	uint32_t newword = udma_i2c_1_reg_setup_r_do_rst_replace(oldword, plain_value);
	udma_i2c_1_reg_setup_write(newword);
}
#define CSR_UDMA_I2C_1_REG_ACK_ADDR (CSR_BASE + 0xa038L)
#define CSR_UDMA_I2C_1_REG_ACK_SIZE 1
static inline uint32_t udma_i2c_1_REG_ACK_read(void) {
	return csr_read_simple((CSR_BASE + 0xa038L));
}
#define CSR_UDMA_I2C_1_REG_ACK_R_NACK_OFFSET 0
#define CSR_UDMA_I2C_1_REG_ACK_R_NACK_SIZE 1
static inline uint32_t udma_i2c_1_reg_ack_r_nack_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_1_reg_ack_r_nack_read(void) {
	uint32_t word = udma_i2c_1_reg_ack_read();
	return udma_i2c_1_reg_ack_r_nack_extract(word);
}

/* udma_i2c_2 */
#define CSR_UDMA_I2C_2_BASE (CSR_BASE + 0xb000L)
#define CSR_UDMA_I2C_2_REG_RX_SADDR_ADDR (CSR_BASE + 0xb000L)
#define CSR_UDMA_I2C_2_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_i2c_2_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xb000L));
}
static inline void udma_i2c_2_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb000L));
}
#define CSR_UDMA_I2C_2_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_2_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_2_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_i2c_2_reg_rx_saddr_read();
	return udma_i2c_2_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_i2c_2_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_rx_saddr_read();
	uint32_t newword = udma_i2c_2_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_i2c_2_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_I2C_2_REG_RX_SIZE_ADDR (CSR_BASE + 0xb004L)
#define CSR_UDMA_I2C_2_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_i2c_2_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xb004L));
}
static inline void udma_i2c_2_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb004L));
}
#define CSR_UDMA_I2C_2_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_I2C_2_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_i2c_2_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_i2c_2_reg_rx_size_read();
	return udma_i2c_2_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_i2c_2_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_rx_size_read();
	uint32_t newword = udma_i2c_2_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_i2c_2_reg_rx_size_write(newword);
}
#define CSR_UDMA_I2C_2_REG_RX_CFG_ADDR (CSR_BASE + 0xb008L)
#define CSR_UDMA_I2C_2_REG_RX_CFG_SIZE 1
static inline uint32_t udma_i2c_2_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xb008L));
}
static inline void udma_i2c_2_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb008L));
}
#define CSR_UDMA_I2C_2_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_2_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_i2c_2_reg_rx_cfg_read();
	return udma_i2c_2_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_2_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_i2c_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_I2C_2_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_i2c_2_reg_rx_cfg_read();
	return udma_i2c_2_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_2_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_2_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_i2c_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_I2C_2_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_i2c_2_reg_rx_cfg_read();
	return udma_i2c_2_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_i2c_2_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_2_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_2_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_i2c_2_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_TX_SADDR_ADDR (CSR_BASE + 0xb010L)
#define CSR_UDMA_I2C_2_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_i2c_2_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xb010L));
}
static inline void udma_i2c_2_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb010L));
}
#define CSR_UDMA_I2C_2_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_2_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_2_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_i2c_2_reg_tx_saddr_read();
	return udma_i2c_2_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_i2c_2_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_tx_saddr_read();
	uint32_t newword = udma_i2c_2_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_i2c_2_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_I2C_2_REG_TX_SIZE_ADDR (CSR_BASE + 0xb014L)
#define CSR_UDMA_I2C_2_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_i2c_2_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xb014L));
}
static inline void udma_i2c_2_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb014L));
}
#define CSR_UDMA_I2C_2_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_I2C_2_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_i2c_2_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_i2c_2_reg_tx_size_read();
	return udma_i2c_2_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_i2c_2_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_tx_size_read();
	uint32_t newword = udma_i2c_2_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_i2c_2_reg_tx_size_write(newword);
}
#define CSR_UDMA_I2C_2_REG_TX_CFG_ADDR (CSR_BASE + 0xb018L)
#define CSR_UDMA_I2C_2_REG_TX_CFG_SIZE 1
static inline uint32_t udma_i2c_2_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xb018L));
}
static inline void udma_i2c_2_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb018L));
}
#define CSR_UDMA_I2C_2_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_2_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_i2c_2_reg_tx_cfg_read();
	return udma_i2c_2_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_2_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_i2c_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_I2C_2_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_i2c_2_reg_tx_cfg_read();
	return udma_i2c_2_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_2_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_2_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_i2c_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_I2C_2_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_i2c_2_reg_tx_cfg_read();
	return udma_i2c_2_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_i2c_2_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_2_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_2_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_i2c_2_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_CMD_SADDR_ADDR (CSR_BASE + 0xb020L)
#define CSR_UDMA_I2C_2_REG_CMD_SADDR_SIZE 1
static inline uint32_t udma_i2c_2_REG_CMD_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xb020L));
}
static inline void udma_i2c_2_REG_CMD_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb020L));
}
#define CSR_UDMA_I2C_2_REG_CMD_SADDR_R_CMD_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_2_REG_CMD_SADDR_R_CMD_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_2_reg_cmd_saddr_r_cmd_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_cmd_saddr_r_cmd_startaddr_read(void) {
	uint32_t word = udma_i2c_2_reg_cmd_saddr_read();
	return udma_i2c_2_reg_cmd_saddr_r_cmd_startaddr_extract(word);
}
static inline uint32_t udma_i2c_2_reg_cmd_saddr_r_cmd_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_cmd_saddr_r_cmd_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_cmd_saddr_read();
	uint32_t newword = udma_i2c_2_reg_cmd_saddr_r_cmd_startaddr_replace(oldword, plain_value);
	udma_i2c_2_reg_cmd_saddr_write(newword);
}
#define CSR_UDMA_I2C_2_REG_CMD_SIZE_ADDR (CSR_BASE + 0xb024L)
#define CSR_UDMA_I2C_2_REG_CMD_SIZE_SIZE 1
static inline uint32_t udma_i2c_2_REG_CMD_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xb024L));
}
static inline void udma_i2c_2_REG_CMD_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb024L));
}
#define CSR_UDMA_I2C_2_REG_CMD_SIZE_R_CMD_SIZE_OFFSET 0
#define CSR_UDMA_I2C_2_REG_CMD_SIZE_R_CMD_SIZE_SIZE 16
static inline uint32_t udma_i2c_2_reg_cmd_size_r_cmd_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_cmd_size_r_cmd_size_read(void) {
	uint32_t word = udma_i2c_2_reg_cmd_size_read();
	return udma_i2c_2_reg_cmd_size_r_cmd_size_extract(word);
}
static inline uint32_t udma_i2c_2_reg_cmd_size_r_cmd_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_cmd_size_r_cmd_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_cmd_size_read();
	uint32_t newword = udma_i2c_2_reg_cmd_size_r_cmd_size_replace(oldword, plain_value);
	udma_i2c_2_reg_cmd_size_write(newword);
}
#define CSR_UDMA_I2C_2_REG_CMD_CFG_ADDR (CSR_BASE + 0xb028L)
#define CSR_UDMA_I2C_2_REG_CMD_CFG_SIZE 1
static inline uint32_t udma_i2c_2_REG_CMD_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xb028L));
}
static inline void udma_i2c_2_REG_CMD_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb028L));
}
#define CSR_UDMA_I2C_2_REG_CMD_CFG_R_CMD_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_2_REG_CMD_CFG_R_CMD_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_continuous_read(void) {
	uint32_t word = udma_i2c_2_reg_cmd_cfg_read();
	return udma_i2c_2_reg_cmd_cfg_r_cmd_continuous_extract(word);
}
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_cmd_cfg_r_cmd_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_2_reg_cmd_cfg_r_cmd_continuous_replace(oldword, plain_value);
	udma_i2c_2_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_CMD_CFG_R_CMD_EN_OFFSET 4
#define CSR_UDMA_I2C_2_REG_CMD_CFG_R_CMD_EN_SIZE 1
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_en_read(void) {
	uint32_t word = udma_i2c_2_reg_cmd_cfg_read();
	return udma_i2c_2_reg_cmd_cfg_r_cmd_en_extract(word);
}
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_2_reg_cmd_cfg_r_cmd_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_2_reg_cmd_cfg_r_cmd_en_replace(oldword, plain_value);
	udma_i2c_2_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_CMD_CFG_R_CMD_CLR_OFFSET 6
#define CSR_UDMA_I2C_2_REG_CMD_CFG_R_CMD_CLR_SIZE 1
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_clr_read(void) {
	uint32_t word = udma_i2c_2_reg_cmd_cfg_read();
	return udma_i2c_2_reg_cmd_cfg_r_cmd_clr_extract(word);
}
static inline uint32_t udma_i2c_2_reg_cmd_cfg_r_cmd_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_2_reg_cmd_cfg_r_cmd_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_2_reg_cmd_cfg_r_cmd_clr_replace(oldword, plain_value);
	udma_i2c_2_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_2_REG_STATUS_ADDR (CSR_BASE + 0xb030L)
#define CSR_UDMA_I2C_2_REG_STATUS_SIZE 1
static inline uint32_t udma_i2c_2_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0xb030L));
}
#define CSR_UDMA_I2C_2_REG_STATUS_R_BUSY_OFFSET 0
#define CSR_UDMA_I2C_2_REG_STATUS_R_BUSY_SIZE 1
static inline uint32_t udma_i2c_2_reg_status_r_busy_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_status_r_busy_read(void) {
	uint32_t word = udma_i2c_2_reg_status_read();
	return udma_i2c_2_reg_status_r_busy_extract(word);
}
#define CSR_UDMA_I2C_2_REG_STATUS_R_AL_OFFSET 1
#define CSR_UDMA_I2C_2_REG_STATUS_R_AL_SIZE 1
static inline uint32_t udma_i2c_2_reg_status_r_al_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_i2c_2_reg_status_r_al_read(void) {
	uint32_t word = udma_i2c_2_reg_status_read();
	return udma_i2c_2_reg_status_r_al_extract(word);
}
#define CSR_UDMA_I2C_2_REG_SETUP_ADDR (CSR_BASE + 0xb034L)
#define CSR_UDMA_I2C_2_REG_SETUP_SIZE 1
static inline uint32_t udma_i2c_2_REG_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0xb034L));
}
static inline void udma_i2c_2_REG_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb034L));
}
#define CSR_UDMA_I2C_2_REG_SETUP_R_DO_RST_OFFSET 0
#define CSR_UDMA_I2C_2_REG_SETUP_R_DO_RST_SIZE 1
static inline uint32_t udma_i2c_2_reg_setup_r_do_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_setup_r_do_rst_read(void) {
	uint32_t word = udma_i2c_2_reg_setup_read();
	return udma_i2c_2_reg_setup_r_do_rst_extract(word);
}
static inline uint32_t udma_i2c_2_reg_setup_r_do_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_2_reg_setup_r_do_rst_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_2_reg_setup_read();
	uint32_t newword = udma_i2c_2_reg_setup_r_do_rst_replace(oldword, plain_value);
	udma_i2c_2_reg_setup_write(newword);
}
#define CSR_UDMA_I2C_2_REG_ACK_ADDR (CSR_BASE + 0xb038L)
#define CSR_UDMA_I2C_2_REG_ACK_SIZE 1
static inline uint32_t udma_i2c_2_REG_ACK_read(void) {
	return csr_read_simple((CSR_BASE + 0xb038L));
}
#define CSR_UDMA_I2C_2_REG_ACK_R_NACK_OFFSET 0
#define CSR_UDMA_I2C_2_REG_ACK_R_NACK_SIZE 1
static inline uint32_t udma_i2c_2_reg_ack_r_nack_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_2_reg_ack_r_nack_read(void) {
	uint32_t word = udma_i2c_2_reg_ack_read();
	return udma_i2c_2_reg_ack_r_nack_extract(word);
}

/* udma_i2c_3 */
#define CSR_UDMA_I2C_3_BASE (CSR_BASE + 0xc000L)
#define CSR_UDMA_I2C_3_REG_RX_SADDR_ADDR (CSR_BASE + 0xc000L)
#define CSR_UDMA_I2C_3_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_i2c_3_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xc000L));
}
static inline void udma_i2c_3_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc000L));
}
#define CSR_UDMA_I2C_3_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_3_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_3_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_i2c_3_reg_rx_saddr_read();
	return udma_i2c_3_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_i2c_3_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_rx_saddr_read();
	uint32_t newword = udma_i2c_3_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_i2c_3_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_I2C_3_REG_RX_SIZE_ADDR (CSR_BASE + 0xc004L)
#define CSR_UDMA_I2C_3_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_i2c_3_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xc004L));
}
static inline void udma_i2c_3_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc004L));
}
#define CSR_UDMA_I2C_3_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_I2C_3_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_i2c_3_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_i2c_3_reg_rx_size_read();
	return udma_i2c_3_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_i2c_3_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_rx_size_read();
	uint32_t newword = udma_i2c_3_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_i2c_3_reg_rx_size_write(newword);
}
#define CSR_UDMA_I2C_3_REG_RX_CFG_ADDR (CSR_BASE + 0xc008L)
#define CSR_UDMA_I2C_3_REG_RX_CFG_SIZE 1
static inline uint32_t udma_i2c_3_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xc008L));
}
static inline void udma_i2c_3_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc008L));
}
#define CSR_UDMA_I2C_3_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_3_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_i2c_3_reg_rx_cfg_read();
	return udma_i2c_3_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_3_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_i2c_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_I2C_3_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_i2c_3_reg_rx_cfg_read();
	return udma_i2c_3_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_3_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_3_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_i2c_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_I2C_3_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_i2c_3_reg_rx_cfg_read();
	return udma_i2c_3_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_i2c_3_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_3_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_rx_cfg_read();
	uint32_t newword = udma_i2c_3_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_i2c_3_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_TX_SADDR_ADDR (CSR_BASE + 0xc010L)
#define CSR_UDMA_I2C_3_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_i2c_3_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xc010L));
}
static inline void udma_i2c_3_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc010L));
}
#define CSR_UDMA_I2C_3_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_3_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_3_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_i2c_3_reg_tx_saddr_read();
	return udma_i2c_3_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_i2c_3_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_tx_saddr_read();
	uint32_t newword = udma_i2c_3_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_i2c_3_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_I2C_3_REG_TX_SIZE_ADDR (CSR_BASE + 0xc014L)
#define CSR_UDMA_I2C_3_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_i2c_3_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xc014L));
}
static inline void udma_i2c_3_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc014L));
}
#define CSR_UDMA_I2C_3_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_I2C_3_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_i2c_3_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_i2c_3_reg_tx_size_read();
	return udma_i2c_3_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_i2c_3_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_tx_size_read();
	uint32_t newword = udma_i2c_3_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_i2c_3_reg_tx_size_write(newword);
}
#define CSR_UDMA_I2C_3_REG_TX_CFG_ADDR (CSR_BASE + 0xc018L)
#define CSR_UDMA_I2C_3_REG_TX_CFG_SIZE 1
static inline uint32_t udma_i2c_3_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xc018L));
}
static inline void udma_i2c_3_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc018L));
}
#define CSR_UDMA_I2C_3_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_3_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_i2c_3_reg_tx_cfg_read();
	return udma_i2c_3_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_3_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_i2c_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_I2C_3_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_i2c_3_reg_tx_cfg_read();
	return udma_i2c_3_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_3_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_3_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_i2c_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_I2C_3_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_i2c_3_reg_tx_cfg_read();
	return udma_i2c_3_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_i2c_3_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_3_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_tx_cfg_read();
	uint32_t newword = udma_i2c_3_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_i2c_3_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_CMD_SADDR_ADDR (CSR_BASE + 0xc020L)
#define CSR_UDMA_I2C_3_REG_CMD_SADDR_SIZE 1
static inline uint32_t udma_i2c_3_REG_CMD_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xc020L));
}
static inline void udma_i2c_3_REG_CMD_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc020L));
}
#define CSR_UDMA_I2C_3_REG_CMD_SADDR_R_CMD_STARTADDR_OFFSET 0
#define CSR_UDMA_I2C_3_REG_CMD_SADDR_R_CMD_STARTADDR_SIZE 12
static inline uint32_t udma_i2c_3_reg_cmd_saddr_r_cmd_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_cmd_saddr_r_cmd_startaddr_read(void) {
	uint32_t word = udma_i2c_3_reg_cmd_saddr_read();
	return udma_i2c_3_reg_cmd_saddr_r_cmd_startaddr_extract(word);
}
static inline uint32_t udma_i2c_3_reg_cmd_saddr_r_cmd_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_cmd_saddr_r_cmd_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_cmd_saddr_read();
	uint32_t newword = udma_i2c_3_reg_cmd_saddr_r_cmd_startaddr_replace(oldword, plain_value);
	udma_i2c_3_reg_cmd_saddr_write(newword);
}
#define CSR_UDMA_I2C_3_REG_CMD_SIZE_ADDR (CSR_BASE + 0xc024L)
#define CSR_UDMA_I2C_3_REG_CMD_SIZE_SIZE 1
static inline uint32_t udma_i2c_3_REG_CMD_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xc024L));
}
static inline void udma_i2c_3_REG_CMD_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc024L));
}
#define CSR_UDMA_I2C_3_REG_CMD_SIZE_R_CMD_SIZE_OFFSET 0
#define CSR_UDMA_I2C_3_REG_CMD_SIZE_R_CMD_SIZE_SIZE 16
static inline uint32_t udma_i2c_3_reg_cmd_size_r_cmd_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_cmd_size_r_cmd_size_read(void) {
	uint32_t word = udma_i2c_3_reg_cmd_size_read();
	return udma_i2c_3_reg_cmd_size_r_cmd_size_extract(word);
}
static inline uint32_t udma_i2c_3_reg_cmd_size_r_cmd_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_cmd_size_r_cmd_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_cmd_size_read();
	uint32_t newword = udma_i2c_3_reg_cmd_size_r_cmd_size_replace(oldword, plain_value);
	udma_i2c_3_reg_cmd_size_write(newword);
}
#define CSR_UDMA_I2C_3_REG_CMD_CFG_ADDR (CSR_BASE + 0xc028L)
#define CSR_UDMA_I2C_3_REG_CMD_CFG_SIZE 1
static inline uint32_t udma_i2c_3_REG_CMD_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xc028L));
}
static inline void udma_i2c_3_REG_CMD_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc028L));
}
#define CSR_UDMA_I2C_3_REG_CMD_CFG_R_CMD_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2C_3_REG_CMD_CFG_R_CMD_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_continuous_read(void) {
	uint32_t word = udma_i2c_3_reg_cmd_cfg_read();
	return udma_i2c_3_reg_cmd_cfg_r_cmd_continuous_extract(word);
}
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_cmd_cfg_r_cmd_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_3_reg_cmd_cfg_r_cmd_continuous_replace(oldword, plain_value);
	udma_i2c_3_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_CMD_CFG_R_CMD_EN_OFFSET 4
#define CSR_UDMA_I2C_3_REG_CMD_CFG_R_CMD_EN_SIZE 1
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_en_read(void) {
	uint32_t word = udma_i2c_3_reg_cmd_cfg_read();
	return udma_i2c_3_reg_cmd_cfg_r_cmd_en_extract(word);
}
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2c_3_reg_cmd_cfg_r_cmd_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_3_reg_cmd_cfg_r_cmd_en_replace(oldword, plain_value);
	udma_i2c_3_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_CMD_CFG_R_CMD_CLR_OFFSET 6
#define CSR_UDMA_I2C_3_REG_CMD_CFG_R_CMD_CLR_SIZE 1
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_clr_read(void) {
	uint32_t word = udma_i2c_3_reg_cmd_cfg_read();
	return udma_i2c_3_reg_cmd_cfg_r_cmd_clr_extract(word);
}
static inline uint32_t udma_i2c_3_reg_cmd_cfg_r_cmd_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_i2c_3_reg_cmd_cfg_r_cmd_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_cmd_cfg_read();
	uint32_t newword = udma_i2c_3_reg_cmd_cfg_r_cmd_clr_replace(oldword, plain_value);
	udma_i2c_3_reg_cmd_cfg_write(newword);
}
#define CSR_UDMA_I2C_3_REG_STATUS_ADDR (CSR_BASE + 0xc030L)
#define CSR_UDMA_I2C_3_REG_STATUS_SIZE 1
static inline uint32_t udma_i2c_3_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0xc030L));
}
#define CSR_UDMA_I2C_3_REG_STATUS_R_BUSY_OFFSET 0
#define CSR_UDMA_I2C_3_REG_STATUS_R_BUSY_SIZE 1
static inline uint32_t udma_i2c_3_reg_status_r_busy_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_status_r_busy_read(void) {
	uint32_t word = udma_i2c_3_reg_status_read();
	return udma_i2c_3_reg_status_r_busy_extract(word);
}
#define CSR_UDMA_I2C_3_REG_STATUS_R_AL_OFFSET 1
#define CSR_UDMA_I2C_3_REG_STATUS_R_AL_SIZE 1
static inline uint32_t udma_i2c_3_reg_status_r_al_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_i2c_3_reg_status_r_al_read(void) {
	uint32_t word = udma_i2c_3_reg_status_read();
	return udma_i2c_3_reg_status_r_al_extract(word);
}
#define CSR_UDMA_I2C_3_REG_SETUP_ADDR (CSR_BASE + 0xc034L)
#define CSR_UDMA_I2C_3_REG_SETUP_SIZE 1
static inline uint32_t udma_i2c_3_REG_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0xc034L));
}
static inline void udma_i2c_3_REG_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc034L));
}
#define CSR_UDMA_I2C_3_REG_SETUP_R_DO_RST_OFFSET 0
#define CSR_UDMA_I2C_3_REG_SETUP_R_DO_RST_SIZE 1
static inline uint32_t udma_i2c_3_reg_setup_r_do_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_setup_r_do_rst_read(void) {
	uint32_t word = udma_i2c_3_reg_setup_read();
	return udma_i2c_3_reg_setup_r_do_rst_extract(word);
}
static inline uint32_t udma_i2c_3_reg_setup_r_do_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2c_3_reg_setup_r_do_rst_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2c_3_reg_setup_read();
	uint32_t newword = udma_i2c_3_reg_setup_r_do_rst_replace(oldword, plain_value);
	udma_i2c_3_reg_setup_write(newword);
}
#define CSR_UDMA_I2C_3_REG_ACK_ADDR (CSR_BASE + 0xc038L)
#define CSR_UDMA_I2C_3_REG_ACK_SIZE 1
static inline uint32_t udma_i2c_3_REG_ACK_read(void) {
	return csr_read_simple((CSR_BASE + 0xc038L));
}
#define CSR_UDMA_I2C_3_REG_ACK_R_NACK_OFFSET 0
#define CSR_UDMA_I2C_3_REG_ACK_R_NACK_SIZE 1
static inline uint32_t udma_i2c_3_reg_ack_r_nack_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2c_3_reg_ack_r_nack_read(void) {
	uint32_t word = udma_i2c_3_reg_ack_read();
	return udma_i2c_3_reg_ack_r_nack_extract(word);
}

/* udma_sdio */
#define CSR_UDMA_SDIO_BASE (CSR_BASE + 0xd000L)
#define CSR_UDMA_SDIO_REG_RX_SADDR_ADDR (CSR_BASE + 0xd000L)
#define CSR_UDMA_SDIO_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_sdio_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xd000L));
}
static inline void udma_sdio_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd000L));
}
#define CSR_UDMA_SDIO_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_SDIO_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_sdio_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_sdio_reg_rx_saddr_read();
	return udma_sdio_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_sdio_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_rx_saddr_read();
	uint32_t newword = udma_sdio_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_sdio_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_SDIO_REG_RX_SIZE_ADDR (CSR_BASE + 0xd004L)
#define CSR_UDMA_SDIO_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_sdio_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xd004L));
}
static inline void udma_sdio_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd004L));
}
#define CSR_UDMA_SDIO_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_SDIO_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_sdio_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_sdio_reg_rx_size_read();
	return udma_sdio_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_sdio_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_rx_size_read();
	uint32_t newword = udma_sdio_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_sdio_reg_rx_size_write(newword);
}
#define CSR_UDMA_SDIO_REG_RX_CFG_ADDR (CSR_BASE + 0xd008L)
#define CSR_UDMA_SDIO_REG_RX_CFG_SIZE 1
static inline uint32_t udma_sdio_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xd008L));
}
static inline void udma_sdio_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd008L));
}
#define CSR_UDMA_SDIO_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SDIO_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_sdio_reg_rx_cfg_read();
	return udma_sdio_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_rx_cfg_read();
	uint32_t newword = udma_sdio_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_sdio_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SDIO_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_SDIO_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_sdio_reg_rx_cfg_read();
	return udma_sdio_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_sdio_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_rx_cfg_read();
	uint32_t newword = udma_sdio_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_sdio_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SDIO_REG_RX_CFG_R_RX_CLR_OFFSET 5
#define CSR_UDMA_SDIO_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_sdio_reg_rx_cfg_read();
	return udma_sdio_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_sdio_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_sdio_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_rx_cfg_read();
	uint32_t newword = udma_sdio_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_sdio_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SDIO_REG_TX_SADDR_ADDR (CSR_BASE + 0xd010L)
#define CSR_UDMA_SDIO_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_sdio_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xd010L));
}
static inline void udma_sdio_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd010L));
}
#define CSR_UDMA_SDIO_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_SDIO_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_sdio_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_sdio_reg_tx_saddr_read();
	return udma_sdio_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_sdio_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_tx_saddr_read();
	uint32_t newword = udma_sdio_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_sdio_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_SDIO_REG_TX_SIZE_ADDR (CSR_BASE + 0xd014L)
#define CSR_UDMA_SDIO_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_sdio_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xd014L));
}
static inline void udma_sdio_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd014L));
}
#define CSR_UDMA_SDIO_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_SDIO_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_sdio_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_sdio_reg_tx_size_read();
	return udma_sdio_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_sdio_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_tx_size_read();
	uint32_t newword = udma_sdio_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_sdio_reg_tx_size_write(newword);
}
#define CSR_UDMA_SDIO_REG_TX_CFG_ADDR (CSR_BASE + 0xd018L)
#define CSR_UDMA_SDIO_REG_TX_CFG_SIZE 1
static inline uint32_t udma_sdio_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xd018L));
}
static inline void udma_sdio_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd018L));
}
#define CSR_UDMA_SDIO_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SDIO_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_sdio_reg_tx_cfg_read();
	return udma_sdio_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_tx_cfg_read();
	uint32_t newword = udma_sdio_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_sdio_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SDIO_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_SDIO_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_sdio_reg_tx_cfg_read();
	return udma_sdio_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_sdio_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_tx_cfg_read();
	uint32_t newword = udma_sdio_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_sdio_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SDIO_REG_TX_CFG_R_TX_CLR_OFFSET 5
#define CSR_UDMA_SDIO_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_sdio_reg_tx_cfg_read();
	return udma_sdio_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_sdio_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_sdio_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_tx_cfg_read();
	uint32_t newword = udma_sdio_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_sdio_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SDIO_REG_CMD_OP_ADDR (CSR_BASE + 0xd020L)
#define CSR_UDMA_SDIO_REG_CMD_OP_SIZE 1
static inline uint32_t udma_sdio_REG_CMD_OP_read(void) {
	return csr_read_simple((CSR_BASE + 0xd020L));
}
static inline void udma_sdio_REG_CMD_OP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd020L));
}
#define CSR_UDMA_SDIO_REG_CMD_OP_R_CMD_RSP_TYPE_OFFSET 0
#define CSR_UDMA_SDIO_REG_CMD_OP_R_CMD_RSP_TYPE_SIZE 3
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_rsp_type_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_rsp_type_read(void) {
	uint32_t word = udma_sdio_reg_cmd_op_read();
	return udma_sdio_reg_cmd_op_r_cmd_rsp_type_extract(word);
}
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_rsp_type_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_cmd_op_r_cmd_rsp_type_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_cmd_op_read();
	uint32_t newword = udma_sdio_reg_cmd_op_r_cmd_rsp_type_replace(oldword, plain_value);
	udma_sdio_reg_cmd_op_write(newword);
}
#define CSR_UDMA_SDIO_REG_CMD_OP_R_CMD_OP_OFFSET 8
#define CSR_UDMA_SDIO_REG_CMD_OP_R_CMD_OP_SIZE 6
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_op_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_op_read(void) {
	uint32_t word = udma_sdio_reg_cmd_op_read();
	return udma_sdio_reg_cmd_op_r_cmd_op_extract(word);
}
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_op_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_sdio_reg_cmd_op_r_cmd_op_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_cmd_op_read();
	uint32_t newword = udma_sdio_reg_cmd_op_r_cmd_op_replace(oldword, plain_value);
	udma_sdio_reg_cmd_op_write(newword);
}
#define CSR_UDMA_SDIO_REG_CMD_OP_R_CMD_STOPOPT_OFFSET 16
#define CSR_UDMA_SDIO_REG_CMD_OP_R_CMD_STOPOPT_SIZE 2
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_stopopt_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_stopopt_read(void) {
	uint32_t word = udma_sdio_reg_cmd_op_read();
	return udma_sdio_reg_cmd_op_r_cmd_stopopt_extract(word);
}
static inline uint32_t udma_sdio_reg_cmd_op_r_cmd_stopopt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_sdio_reg_cmd_op_r_cmd_stopopt_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_cmd_op_read();
	uint32_t newword = udma_sdio_reg_cmd_op_r_cmd_stopopt_replace(oldword, plain_value);
	udma_sdio_reg_cmd_op_write(newword);
}
#define CSR_UDMA_SDIO_REG_DATA_SETUP_ADDR (CSR_BASE + 0xd028L)
#define CSR_UDMA_SDIO_REG_DATA_SETUP_SIZE 1
static inline uint32_t udma_sdio_REG_DATA_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0xd028L));
}
static inline void udma_sdio_REG_DATA_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd028L));
}
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_EN_OFFSET 0
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_EN_SIZE 1
static inline uint32_t udma_sdio_reg_data_setup_r_data_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_en_read(void) {
	uint32_t word = udma_sdio_reg_data_setup_read();
	return udma_sdio_reg_data_setup_r_data_en_extract(word);
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_data_setup_r_data_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_data_setup_read();
	uint32_t newword = udma_sdio_reg_data_setup_r_data_en_replace(oldword, plain_value);
	udma_sdio_reg_data_setup_write(newword);
}
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_RWN_OFFSET 1
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_RWN_SIZE 1
static inline uint32_t udma_sdio_reg_data_setup_r_data_rwn_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_rwn_read(void) {
	uint32_t word = udma_sdio_reg_data_setup_read();
	return udma_sdio_reg_data_setup_r_data_rwn_extract(word);
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_rwn_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_sdio_reg_data_setup_r_data_rwn_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_data_setup_read();
	uint32_t newword = udma_sdio_reg_data_setup_r_data_rwn_replace(oldword, plain_value);
	udma_sdio_reg_data_setup_write(newword);
}
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_QUAD_OFFSET 2
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_QUAD_SIZE 1
static inline uint32_t udma_sdio_reg_data_setup_r_data_quad_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_quad_read(void) {
	uint32_t word = udma_sdio_reg_data_setup_read();
	return udma_sdio_reg_data_setup_r_data_quad_extract(word);
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_quad_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void udma_sdio_reg_data_setup_r_data_quad_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_data_setup_read();
	uint32_t newword = udma_sdio_reg_data_setup_r_data_quad_replace(oldword, plain_value);
	udma_sdio_reg_data_setup_write(newword);
}
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_BLOCK_NUM_OFFSET 8
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_BLOCK_NUM_SIZE 8
static inline uint32_t udma_sdio_reg_data_setup_r_data_block_num_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_block_num_read(void) {
	uint32_t word = udma_sdio_reg_data_setup_read();
	return udma_sdio_reg_data_setup_r_data_block_num_extract(word);
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_block_num_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_sdio_reg_data_setup_r_data_block_num_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_data_setup_read();
	uint32_t newword = udma_sdio_reg_data_setup_r_data_block_num_replace(oldword, plain_value);
	udma_sdio_reg_data_setup_write(newword);
}
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_BLOCK_SIZE_OFFSET 16
#define CSR_UDMA_SDIO_REG_DATA_SETUP_R_DATA_BLOCK_SIZE_SIZE 10
static inline uint32_t udma_sdio_reg_data_setup_r_data_block_size_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_block_size_read(void) {
	uint32_t word = udma_sdio_reg_data_setup_read();
	return udma_sdio_reg_data_setup_r_data_block_size_extract(word);
}
static inline uint32_t udma_sdio_reg_data_setup_r_data_block_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_sdio_reg_data_setup_r_data_block_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_data_setup_read();
	uint32_t newword = udma_sdio_reg_data_setup_r_data_block_size_replace(oldword, plain_value);
	udma_sdio_reg_data_setup_write(newword);
}
#define CSR_UDMA_SDIO_REG_START_ADDR (CSR_BASE + 0xd02cL)
#define CSR_UDMA_SDIO_REG_START_SIZE 1
static inline uint32_t udma_sdio_REG_START_read(void) {
	return csr_read_simple((CSR_BASE + 0xd02cL));
}
static inline void udma_sdio_REG_START_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd02cL));
}
#define CSR_UDMA_SDIO_REG_START_R_SDIO_START_OFFSET 0
#define CSR_UDMA_SDIO_REG_START_R_SDIO_START_SIZE 1
static inline uint32_t udma_sdio_reg_start_r_sdio_start_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_start_r_sdio_start_read(void) {
	uint32_t word = udma_sdio_reg_start_read();
	return udma_sdio_reg_start_r_sdio_start_extract(word);
}
static inline uint32_t udma_sdio_reg_start_r_sdio_start_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_start_r_sdio_start_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_start_read();
	uint32_t newword = udma_sdio_reg_start_r_sdio_start_replace(oldword, plain_value);
	udma_sdio_reg_start_write(newword);
}
#define CSR_UDMA_SDIO_REG_RSP0_ADDR (CSR_BASE + 0xd030L)
#define CSR_UDMA_SDIO_REG_RSP0_SIZE 1
static inline uint32_t udma_sdio_REG_RSP0_read(void) {
	return csr_read_simple((CSR_BASE + 0xd030L));
}
#define CSR_UDMA_SDIO_REG_RSP0_CFG_RSP_DATA_I_31_0_OFFSET 0
#define CSR_UDMA_SDIO_REG_RSP0_CFG_RSP_DATA_I_31_0_SIZE 32
static inline uint32_t udma_sdio_reg_rsp0_cfg_rsp_data_i_31_0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_rsp0_cfg_rsp_data_i_31_0_read(void) {
	uint32_t word = udma_sdio_reg_rsp0_read();
	return udma_sdio_reg_rsp0_cfg_rsp_data_i_31_0_extract(word);
}
#define CSR_UDMA_SDIO_REG_RSP1_ADDR (CSR_BASE + 0xd034L)
#define CSR_UDMA_SDIO_REG_RSP1_SIZE 1
static inline uint32_t udma_sdio_REG_RSP1_read(void) {
	return csr_read_simple((CSR_BASE + 0xd034L));
}
#define CSR_UDMA_SDIO_REG_RSP1_CFG_RSP_DATA_I_63_32_OFFSET 0
#define CSR_UDMA_SDIO_REG_RSP1_CFG_RSP_DATA_I_63_32_SIZE 32
static inline uint32_t udma_sdio_reg_rsp1_cfg_rsp_data_i_63_32_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_rsp1_cfg_rsp_data_i_63_32_read(void) {
	uint32_t word = udma_sdio_reg_rsp1_read();
	return udma_sdio_reg_rsp1_cfg_rsp_data_i_63_32_extract(word);
}
#define CSR_UDMA_SDIO_REG_RSP2_ADDR (CSR_BASE + 0xd038L)
#define CSR_UDMA_SDIO_REG_RSP2_SIZE 1
static inline uint32_t udma_sdio_REG_RSP2_read(void) {
	return csr_read_simple((CSR_BASE + 0xd038L));
}
#define CSR_UDMA_SDIO_REG_RSP2_CFG_RSP_DATA_I_95_64_OFFSET 0
#define CSR_UDMA_SDIO_REG_RSP2_CFG_RSP_DATA_I_95_64_SIZE 32
static inline uint32_t udma_sdio_reg_rsp2_cfg_rsp_data_i_95_64_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_rsp2_cfg_rsp_data_i_95_64_read(void) {
	uint32_t word = udma_sdio_reg_rsp2_read();
	return udma_sdio_reg_rsp2_cfg_rsp_data_i_95_64_extract(word);
}
#define CSR_UDMA_SDIO_REG_RSP3_ADDR (CSR_BASE + 0xd03cL)
#define CSR_UDMA_SDIO_REG_RSP3_SIZE 1
static inline uint32_t udma_sdio_REG_RSP3_read(void) {
	return csr_read_simple((CSR_BASE + 0xd03cL));
}
#define CSR_UDMA_SDIO_REG_RSP3_CFG_RSP_DATA_I_127_96_OFFSET 0
#define CSR_UDMA_SDIO_REG_RSP3_CFG_RSP_DATA_I_127_96_SIZE 32
static inline uint32_t udma_sdio_reg_rsp3_cfg_rsp_data_i_127_96_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_rsp3_cfg_rsp_data_i_127_96_read(void) {
	uint32_t word = udma_sdio_reg_rsp3_read();
	return udma_sdio_reg_rsp3_cfg_rsp_data_i_127_96_extract(word);
}
#define CSR_UDMA_SDIO_REG_CLK_DIV_ADDR (CSR_BASE + 0xd040L)
#define CSR_UDMA_SDIO_REG_CLK_DIV_SIZE 1
static inline uint32_t udma_sdio_REG_CLK_DIV_read(void) {
	return csr_read_simple((CSR_BASE + 0xd040L));
}
static inline void udma_sdio_REG_CLK_DIV_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd040L));
}
#define CSR_UDMA_SDIO_REG_CLK_DIV_R_CLK_DIV_DATA_OFFSET 0
#define CSR_UDMA_SDIO_REG_CLK_DIV_R_CLK_DIV_DATA_SIZE 8
static inline uint32_t udma_sdio_reg_clk_div_r_clk_div_data_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_clk_div_r_clk_div_data_read(void) {
	uint32_t word = udma_sdio_reg_clk_div_read();
	return udma_sdio_reg_clk_div_r_clk_div_data_extract(word);
}
static inline uint32_t udma_sdio_reg_clk_div_r_clk_div_data_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_clk_div_r_clk_div_data_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_clk_div_read();
	uint32_t newword = udma_sdio_reg_clk_div_r_clk_div_data_replace(oldword, plain_value);
	udma_sdio_reg_clk_div_write(newword);
}
#define CSR_UDMA_SDIO_REG_CLK_DIV_R_CLK_DIV_VALID_OFFSET 8
#define CSR_UDMA_SDIO_REG_CLK_DIV_R_CLK_DIV_VALID_SIZE 1
static inline uint32_t udma_sdio_reg_clk_div_r_clk_div_valid_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_sdio_reg_clk_div_r_clk_div_valid_read(void) {
	uint32_t word = udma_sdio_reg_clk_div_read();
	return udma_sdio_reg_clk_div_r_clk_div_valid_extract(word);
}
static inline uint32_t udma_sdio_reg_clk_div_r_clk_div_valid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_sdio_reg_clk_div_r_clk_div_valid_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_clk_div_read();
	uint32_t newword = udma_sdio_reg_clk_div_r_clk_div_valid_replace(oldword, plain_value);
	udma_sdio_reg_clk_div_write(newword);
}
#define CSR_UDMA_SDIO_REG_STATUS_ADDR (CSR_BASE + 0xd044L)
#define CSR_UDMA_SDIO_REG_STATUS_SIZE 1
static inline uint32_t udma_sdio_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0xd044L));
}
static inline void udma_sdio_REG_STATUS_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd044L));
}
#define CSR_UDMA_SDIO_REG_STATUS_R_EOT_OFFSET 0
#define CSR_UDMA_SDIO_REG_STATUS_R_EOT_SIZE 1
static inline uint32_t udma_sdio_reg_status_r_eot_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_sdio_reg_status_r_eot_read(void) {
	uint32_t word = udma_sdio_reg_status_read();
	return udma_sdio_reg_status_r_eot_extract(word);
}
static inline uint32_t udma_sdio_reg_status_r_eot_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_sdio_reg_status_r_eot_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_status_read();
	uint32_t newword = udma_sdio_reg_status_r_eot_replace(oldword, plain_value);
	udma_sdio_reg_status_write(newword);
}
#define CSR_UDMA_SDIO_REG_STATUS_R_ERR_OFFSET 1
#define CSR_UDMA_SDIO_REG_STATUS_R_ERR_SIZE 1
static inline uint32_t udma_sdio_reg_status_r_err_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_sdio_reg_status_r_err_read(void) {
	uint32_t word = udma_sdio_reg_status_read();
	return udma_sdio_reg_status_r_err_extract(word);
}
static inline uint32_t udma_sdio_reg_status_r_err_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_sdio_reg_status_r_err_write(uint32_t plain_value) {
	uint32_t oldword = udma_sdio_reg_status_read();
	uint32_t newword = udma_sdio_reg_status_r_err_replace(oldword, plain_value);
	udma_sdio_reg_status_write(newword);
}

/* udma_i2s */
#define CSR_UDMA_I2S_BASE (CSR_BASE + 0xe000L)
#define CSR_UDMA_I2S_REG_RX_SADDR_ADDR (CSR_BASE + 0xe000L)
#define CSR_UDMA_I2S_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_i2s_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xe000L));
}
static inline void udma_i2s_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe000L));
}
#define CSR_UDMA_I2S_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2S_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_i2s_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_i2s_reg_rx_saddr_read();
	return udma_i2s_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_i2s_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_rx_saddr_read();
	uint32_t newword = udma_i2s_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_i2s_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_I2S_REG_RX_SIZE_ADDR (CSR_BASE + 0xe004L)
#define CSR_UDMA_I2S_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_i2s_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xe004L));
}
static inline void udma_i2s_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe004L));
}
#define CSR_UDMA_I2S_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_I2S_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_i2s_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_i2s_reg_rx_size_read();
	return udma_i2s_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_i2s_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_rx_size_read();
	uint32_t newword = udma_i2s_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_i2s_reg_rx_size_write(newword);
}
#define CSR_UDMA_I2S_REG_RX_CFG_ADDR (CSR_BASE + 0xe008L)
#define CSR_UDMA_I2S_REG_RX_CFG_SIZE 1
static inline uint32_t udma_i2s_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xe008L));
}
static inline void udma_i2s_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe008L));
}
#define CSR_UDMA_I2S_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2S_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_i2s_reg_rx_cfg_read();
	return udma_i2s_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_rx_cfg_read();
	uint32_t newword = udma_i2s_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_i2s_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2S_REG_RX_CFG_R_RX_DATASIZE_OFFSET 1
#define CSR_UDMA_I2S_REG_RX_CFG_R_RX_DATASIZE_SIZE 2
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_datasize_read(void) {
	uint32_t word = udma_i2s_reg_rx_cfg_read();
	return udma_i2s_reg_rx_cfg_r_rx_datasize_extract(word);
}
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_i2s_reg_rx_cfg_r_rx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_rx_cfg_read();
	uint32_t newword = udma_i2s_reg_rx_cfg_r_rx_datasize_replace(oldword, plain_value);
	udma_i2s_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2S_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_I2S_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_i2s_reg_rx_cfg_read();
	return udma_i2s_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2s_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_rx_cfg_read();
	uint32_t newword = udma_i2s_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_i2s_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2S_REG_RX_CFG_R_RX_CLR_OFFSET 5
#define CSR_UDMA_I2S_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_i2s_reg_rx_cfg_read();
	return udma_i2s_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_i2s_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_i2s_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_rx_cfg_read();
	uint32_t newword = udma_i2s_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_i2s_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_I2S_REG_TX_SADDR_ADDR (CSR_BASE + 0xe010L)
#define CSR_UDMA_I2S_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_i2s_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xe010L));
}
static inline void udma_i2s_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe010L));
}
#define CSR_UDMA_I2S_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_I2S_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_i2s_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_i2s_reg_tx_saddr_read();
	return udma_i2s_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_i2s_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_tx_saddr_read();
	uint32_t newword = udma_i2s_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_i2s_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_I2S_REG_TX_SIZE_ADDR (CSR_BASE + 0xe014L)
#define CSR_UDMA_I2S_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_i2s_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xe014L));
}
static inline void udma_i2s_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe014L));
}
#define CSR_UDMA_I2S_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_I2S_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_i2s_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_i2s_reg_tx_size_read();
	return udma_i2s_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_i2s_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_tx_size_read();
	uint32_t newword = udma_i2s_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_i2s_reg_tx_size_write(newword);
}
#define CSR_UDMA_I2S_REG_TX_CFG_ADDR (CSR_BASE + 0xe018L)
#define CSR_UDMA_I2S_REG_TX_CFG_SIZE 1
static inline uint32_t udma_i2s_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xe018L));
}
static inline void udma_i2s_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe018L));
}
#define CSR_UDMA_I2S_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_I2S_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_i2s_reg_tx_cfg_read();
	return udma_i2s_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_tx_cfg_read();
	uint32_t newword = udma_i2s_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_i2s_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2S_REG_TX_CFG_R_TX_DATASIZE_OFFSET 1
#define CSR_UDMA_I2S_REG_TX_CFG_R_TX_DATASIZE_SIZE 2
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_datasize_read(void) {
	uint32_t word = udma_i2s_reg_tx_cfg_read();
	return udma_i2s_reg_tx_cfg_r_tx_datasize_extract(word);
}
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_i2s_reg_tx_cfg_r_tx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_tx_cfg_read();
	uint32_t newword = udma_i2s_reg_tx_cfg_r_tx_datasize_replace(oldword, plain_value);
	udma_i2s_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2S_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_I2S_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_i2s_reg_tx_cfg_read();
	return udma_i2s_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_i2s_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_tx_cfg_read();
	uint32_t newword = udma_i2s_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_i2s_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2S_REG_TX_CFG_R_TX_CLR_OFFSET 5
#define CSR_UDMA_I2S_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_i2s_reg_tx_cfg_read();
	return udma_i2s_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_i2s_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_i2s_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_tx_cfg_read();
	uint32_t newword = udma_i2s_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_i2s_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_ADDR (CSR_BASE + 0xe020L)
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_SIZE 1
static inline uint32_t udma_i2s_REG_I2S_CLKCFG_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0xe020L));
}
static inline void udma_i2s_REG_I2S_CLKCFG_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe020L));
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_MASTER_GEN_CLK_DIV_OFFSET 0
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_MASTER_GEN_CLK_DIV_SIZE 8
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_gen_clk_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_gen_clk_div_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_master_gen_clk_div_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_gen_clk_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_master_gen_clk_div_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_master_gen_clk_div_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_SLAVE_GEN_CLK_DIV_OFFSET 8
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_SLAVE_GEN_CLK_DIV_SIZE 8
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_gen_clk_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_gen_clk_div_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_slave_gen_clk_div_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_gen_clk_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_slave_gen_clk_div_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_slave_gen_clk_div_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_COMMON_GEN_CLK_DIV_OFFSET 16
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_COMMON_GEN_CLK_DIV_SIZE 8
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_common_gen_clk_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_common_gen_clk_div_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_common_gen_clk_div_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_common_gen_clk_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_common_gen_clk_div_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_common_gen_clk_div_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_SLAVE_CLK_EN_OFFSET 24
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_SLAVE_CLK_EN_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_clk_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_clk_en_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_slave_clk_en_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_clk_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_slave_clk_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_slave_clk_en_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_MASTER_CLK_EN_OFFSET 25
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_MASTER_CLK_EN_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_clk_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 25) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_clk_en_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_master_clk_en_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_clk_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 25))) | (mask & plain_value)<< 25 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_master_clk_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_master_clk_en_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_PDM_CLK_EN_OFFSET 26
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_PDM_CLK_EN_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_pdm_clk_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 26) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_pdm_clk_en_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_pdm_clk_en_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_pdm_clk_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 26))) | (mask & plain_value)<< 26 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_pdm_clk_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_pdm_clk_en_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_EXT_OFFSET 28
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_EXT_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_ext_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 28) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_ext_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_ext_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_ext_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 28))) | (mask & plain_value)<< 28 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_ext_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_ext_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_NUM_OFFSET 29
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_NUM_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_num_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_num_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_num_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_num_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_num_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_slave_sel_num_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_EXT_OFFSET 30
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_EXT_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_ext_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_ext_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_ext_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_ext_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_ext_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_ext_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_NUM_OFFSET 31
#define CSR_UDMA_I2S_REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_NUM_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_num_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_num_read(void) {
	uint32_t word = udma_i2s_reg_i2s_clkcfg_setup_read();
	return udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_num_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_num_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_num_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_clkcfg_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_clkcfg_setup_r_master_sel_num_replace(oldword, plain_value);
	udma_i2s_reg_i2s_clkcfg_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_ADDR (CSR_BASE + 0xe024L)
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_SIZE 1
static inline uint32_t udma_i2s_REG_I2S_SLV_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0xe024L));
}
static inline void udma_i2s_REG_I2S_SLV_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe024L));
}
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_WORDS_OFFSET 0
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_WORDS_SIZE 3
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_words_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_words_read(void) {
	uint32_t word = udma_i2s_reg_i2s_slv_setup_read();
	return udma_i2s_reg_i2s_slv_setup_r_slave_i2s_words_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_words_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_i2s_slv_setup_r_slave_i2s_words_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_slv_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_slv_setup_r_slave_i2s_words_replace(oldword, plain_value);
	udma_i2s_reg_i2s_slv_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_BITS_WORD_OFFSET 8
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_BITS_WORD_SIZE 5
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_bits_word_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_bits_word_read(void) {
	uint32_t word = udma_i2s_reg_i2s_slv_setup_read();
	return udma_i2s_reg_i2s_slv_setup_r_slave_i2s_bits_word_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_bits_word_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_i2s_reg_i2s_slv_setup_r_slave_i2s_bits_word_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_slv_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_slv_setup_r_slave_i2s_bits_word_replace(oldword, plain_value);
	udma_i2s_reg_i2s_slv_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_LSB_FIRST_OFFSET 16
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_LSB_FIRST_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_lsb_first_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_lsb_first_read(void) {
	uint32_t word = udma_i2s_reg_i2s_slv_setup_read();
	return udma_i2s_reg_i2s_slv_setup_r_slave_i2s_lsb_first_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_lsb_first_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_i2s_reg_i2s_slv_setup_r_slave_i2s_lsb_first_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_slv_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_slv_setup_r_slave_i2s_lsb_first_replace(oldword, plain_value);
	udma_i2s_reg_i2s_slv_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_2CH_OFFSET 17
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_2CH_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_2ch_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_2ch_read(void) {
	uint32_t word = udma_i2s_reg_i2s_slv_setup_read();
	return udma_i2s_reg_i2s_slv_setup_r_slave_i2s_2ch_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_2ch_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void udma_i2s_reg_i2s_slv_setup_r_slave_i2s_2ch_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_slv_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_slv_setup_r_slave_i2s_2ch_replace(oldword, plain_value);
	udma_i2s_reg_i2s_slv_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_EN_OFFSET 31
#define CSR_UDMA_I2S_REG_I2S_SLV_SETUP_R_SLAVE_I2S_EN_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_en_read(void) {
	uint32_t word = udma_i2s_reg_i2s_slv_setup_read();
	return udma_i2s_reg_i2s_slv_setup_r_slave_i2s_en_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_slv_setup_r_slave_i2s_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void udma_i2s_reg_i2s_slv_setup_r_slave_i2s_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_slv_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_slv_setup_r_slave_i2s_en_replace(oldword, plain_value);
	udma_i2s_reg_i2s_slv_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_ADDR (CSR_BASE + 0xe028L)
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_SIZE 1
static inline uint32_t udma_i2s_REG_I2S_MST_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0xe028L));
}
static inline void udma_i2s_REG_I2S_MST_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe028L));
}
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_WORDS_OFFSET 0
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_WORDS_SIZE 3
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_words_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_words_read(void) {
	uint32_t word = udma_i2s_reg_i2s_mst_setup_read();
	return udma_i2s_reg_i2s_mst_setup_r_master_i2s_words_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_words_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_i2s_mst_setup_r_master_i2s_words_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_mst_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_mst_setup_r_master_i2s_words_replace(oldword, plain_value);
	udma_i2s_reg_i2s_mst_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_BITS_WORD_OFFSET 8
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_BITS_WORD_SIZE 5
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_bits_word_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_bits_word_read(void) {
	uint32_t word = udma_i2s_reg_i2s_mst_setup_read();
	return udma_i2s_reg_i2s_mst_setup_r_master_i2s_bits_word_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_bits_word_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_i2s_reg_i2s_mst_setup_r_master_i2s_bits_word_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_mst_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_mst_setup_r_master_i2s_bits_word_replace(oldword, plain_value);
	udma_i2s_reg_i2s_mst_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_LSB_FIRST_OFFSET 16
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_LSB_FIRST_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_lsb_first_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_lsb_first_read(void) {
	uint32_t word = udma_i2s_reg_i2s_mst_setup_read();
	return udma_i2s_reg_i2s_mst_setup_r_master_i2s_lsb_first_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_lsb_first_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_i2s_reg_i2s_mst_setup_r_master_i2s_lsb_first_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_mst_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_mst_setup_r_master_i2s_lsb_first_replace(oldword, plain_value);
	udma_i2s_reg_i2s_mst_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_2CH_OFFSET 17
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_2CH_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_2ch_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_2ch_read(void) {
	uint32_t word = udma_i2s_reg_i2s_mst_setup_read();
	return udma_i2s_reg_i2s_mst_setup_r_master_i2s_2ch_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_2ch_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void udma_i2s_reg_i2s_mst_setup_r_master_i2s_2ch_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_mst_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_mst_setup_r_master_i2s_2ch_replace(oldword, plain_value);
	udma_i2s_reg_i2s_mst_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_EN_OFFSET 31
#define CSR_UDMA_I2S_REG_I2S_MST_SETUP_R_MASTER_I2S_EN_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_en_read(void) {
	uint32_t word = udma_i2s_reg_i2s_mst_setup_read();
	return udma_i2s_reg_i2s_mst_setup_r_master_i2s_en_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_mst_setup_r_master_i2s_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void udma_i2s_reg_i2s_mst_setup_r_master_i2s_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_mst_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_mst_setup_r_master_i2s_en_replace(oldword, plain_value);
	udma_i2s_reg_i2s_mst_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_ADDR (CSR_BASE + 0xe02cL)
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_SIZE 1
static inline uint32_t udma_i2s_REG_I2S_PDM_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0xe02cL));
}
static inline void udma_i2s_REG_I2S_PDM_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe02cL));
}
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_R_SLAVE_PDM_SHIFT_OFFSET 0
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_R_SLAVE_PDM_SHIFT_SIZE 3
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_shift_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_shift_read(void) {
	uint32_t word = udma_i2s_reg_i2s_pdm_setup_read();
	return udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_shift_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_shift_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_shift_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_pdm_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_shift_replace(oldword, plain_value);
	udma_i2s_reg_i2s_pdm_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_R_SLAVE_PDM_DECIMATION_OFFSET 3
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_R_SLAVE_PDM_DECIMATION_SIZE 10
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_decimation_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_decimation_read(void) {
	uint32_t word = udma_i2s_reg_i2s_pdm_setup_read();
	return udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_decimation_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_decimation_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_decimation_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_pdm_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_decimation_replace(oldword, plain_value);
	udma_i2s_reg_i2s_pdm_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_R_SLAVE_PDM_MODE_OFFSET 13
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_R_SLAVE_PDM_MODE_SIZE 2
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_mode_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 13) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_mode_read(void) {
	uint32_t word = udma_i2s_reg_i2s_pdm_setup_read();
	return udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_mode_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 13))) | (mask & plain_value)<< 13 ;
}
static inline void udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_mode_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_pdm_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_mode_replace(oldword, plain_value);
	udma_i2s_reg_i2s_pdm_setup_write(newword);
}
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_R_SLAVE_PDM_EN_OFFSET 31
#define CSR_UDMA_I2S_REG_I2S_PDM_SETUP_R_SLAVE_PDM_EN_SIZE 1
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_en_read(void) {
	uint32_t word = udma_i2s_reg_i2s_pdm_setup_read();
	return udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_en_extract(word);
}
static inline uint32_t udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_i2s_reg_i2s_pdm_setup_read();
	uint32_t newword = udma_i2s_reg_i2s_pdm_setup_r_slave_pdm_en_replace(oldword, plain_value);
	udma_i2s_reg_i2s_pdm_setup_write(newword);
}

/* udma_camera */
#define CSR_UDMA_CAMERA_BASE (CSR_BASE + 0xf000L)
#define CSR_UDMA_CAMERA_REG_RX_SADDR_ADDR (CSR_BASE + 0xf000L)
#define CSR_UDMA_CAMERA_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_camera_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0xf000L));
}
static inline void udma_camera_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf000L));
}
#define CSR_UDMA_CAMERA_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_CAMERA_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_camera_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_camera_reg_rx_saddr_read();
	return udma_camera_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_camera_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_camera_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_camera_reg_rx_saddr_read();
	uint32_t newword = udma_camera_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_camera_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_CAMERA_REG_RX_SIZE_ADDR (CSR_BASE + 0xf004L)
#define CSR_UDMA_CAMERA_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_camera_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xf004L));
}
static inline void udma_camera_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf004L));
}
#define CSR_UDMA_CAMERA_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_CAMERA_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_camera_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_camera_reg_rx_size_read();
	return udma_camera_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_camera_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_camera_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_camera_reg_rx_size_read();
	uint32_t newword = udma_camera_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_camera_reg_rx_size_write(newword);
}
#define CSR_UDMA_CAMERA_REG_RX_CFG_ADDR (CSR_BASE + 0xf008L)
#define CSR_UDMA_CAMERA_REG_RX_CFG_SIZE 1
static inline uint32_t udma_camera_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0xf008L));
}
static inline void udma_camera_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf008L));
}
#define CSR_UDMA_CAMERA_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_CAMERA_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_camera_reg_rx_cfg_read();
	return udma_camera_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_camera_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_camera_reg_rx_cfg_read();
	uint32_t newword = udma_camera_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_camera_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_CAMERA_REG_RX_CFG_R_RX_DATASIZE_OFFSET 1
#define CSR_UDMA_CAMERA_REG_RX_CFG_R_RX_DATASIZE_SIZE 2
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_datasize_read(void) {
	uint32_t word = udma_camera_reg_rx_cfg_read();
	return udma_camera_reg_rx_cfg_r_rx_datasize_extract(word);
}
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_camera_reg_rx_cfg_r_rx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_camera_reg_rx_cfg_read();
	uint32_t newword = udma_camera_reg_rx_cfg_r_rx_datasize_replace(oldword, plain_value);
	udma_camera_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_CAMERA_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_CAMERA_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_camera_reg_rx_cfg_read();
	return udma_camera_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_camera_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_camera_reg_rx_cfg_read();
	uint32_t newword = udma_camera_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_camera_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_CAMERA_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_CAMERA_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_camera_reg_rx_cfg_read();
	return udma_camera_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_camera_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_camera_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_camera_reg_rx_cfg_read();
	uint32_t newword = udma_camera_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_camera_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_GLOB_ADDR (CSR_BASE + 0xf020L)
#define CSR_UDMA_CAMERA_REG_CAM_CFG_GLOB_SIZE 1
static inline uint32_t udma_camera_REG_CAM_CFG_GLOB_read(void) {
	return csr_read_simple((CSR_BASE + 0xf020L));
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_GLOB_R_CAM_CFG_OFFSET 0
#define CSR_UDMA_CAMERA_REG_CAM_CFG_GLOB_R_CAM_CFG_SIZE 30
static inline uint32_t udma_camera_reg_cam_cfg_glob_r_cam_cfg_extract(uint32_t oldword) {
	uint32_t mask = 0x3fffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_cam_cfg_glob_r_cam_cfg_read(void) {
	uint32_t word = udma_camera_reg_cam_cfg_glob_read();
	return udma_camera_reg_cam_cfg_glob_r_cam_cfg_extract(word);
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_GLOB_CFG_CAM_IP_EN_I_OFFSET 30
#define CSR_UDMA_CAMERA_REG_CAM_CFG_GLOB_CFG_CAM_IP_EN_I_SIZE 1
static inline uint32_t udma_camera_reg_cam_cfg_glob_cfg_cam_ip_en_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t udma_camera_reg_cam_cfg_glob_cfg_cam_ip_en_i_read(void) {
	uint32_t word = udma_camera_reg_cam_cfg_glob_read();
	return udma_camera_reg_cam_cfg_glob_cfg_cam_ip_en_i_extract(word);
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_LL_ADDR (CSR_BASE + 0xf024L)
#define CSR_UDMA_CAMERA_REG_CAM_CFG_LL_SIZE 1
static inline uint32_t udma_camera_REG_CAM_CFG_LL_read(void) {
	return csr_read_simple((CSR_BASE + 0xf024L));
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_LL_R_CAM_CFG_LL_OFFSET 0
#define CSR_UDMA_CAMERA_REG_CAM_CFG_LL_R_CAM_CFG_LL_SIZE 32
static inline uint32_t udma_camera_reg_cam_cfg_ll_r_cam_cfg_ll_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_cam_cfg_ll_r_cam_cfg_ll_read(void) {
	uint32_t word = udma_camera_reg_cam_cfg_ll_read();
	return udma_camera_reg_cam_cfg_ll_r_cam_cfg_ll_extract(word);
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_UR_ADDR (CSR_BASE + 0xf028L)
#define CSR_UDMA_CAMERA_REG_CAM_CFG_UR_SIZE 1
static inline uint32_t udma_camera_REG_CAM_CFG_UR_read(void) {
	return csr_read_simple((CSR_BASE + 0xf028L));
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_UR_R_CAM_CFG_UR_OFFSET 0
#define CSR_UDMA_CAMERA_REG_CAM_CFG_UR_R_CAM_CFG_UR_SIZE 32
static inline uint32_t udma_camera_reg_cam_cfg_ur_r_cam_cfg_ur_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_cam_cfg_ur_r_cam_cfg_ur_read(void) {
	uint32_t word = udma_camera_reg_cam_cfg_ur_read();
	return udma_camera_reg_cam_cfg_ur_r_cam_cfg_ur_extract(word);
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_SIZE_ADDR (CSR_BASE + 0xf02cL)
#define CSR_UDMA_CAMERA_REG_CAM_CFG_SIZE_SIZE 1
static inline uint32_t udma_camera_REG_CAM_CFG_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0xf02cL));
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_SIZE_R_CAM_CFG_SIZE_OFFSET 0
#define CSR_UDMA_CAMERA_REG_CAM_CFG_SIZE_R_CAM_CFG_SIZE_SIZE 32
static inline uint32_t udma_camera_reg_cam_cfg_size_r_cam_cfg_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_cam_cfg_size_r_cam_cfg_size_read(void) {
	uint32_t word = udma_camera_reg_cam_cfg_size_read();
	return udma_camera_reg_cam_cfg_size_r_cam_cfg_size_extract(word);
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_FILTER_ADDR (CSR_BASE + 0xf030L)
#define CSR_UDMA_CAMERA_REG_CAM_CFG_FILTER_SIZE 1
static inline uint32_t udma_camera_REG_CAM_CFG_FILTER_read(void) {
	return csr_read_simple((CSR_BASE + 0xf030L));
}
#define CSR_UDMA_CAMERA_REG_CAM_CFG_FILTER_R_CAM_CFG_FILTER_OFFSET 0
#define CSR_UDMA_CAMERA_REG_CAM_CFG_FILTER_R_CAM_CFG_FILTER_SIZE 32
static inline uint32_t udma_camera_reg_cam_cfg_filter_r_cam_cfg_filter_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_cam_cfg_filter_r_cam_cfg_filter_read(void) {
	uint32_t word = udma_camera_reg_cam_cfg_filter_read();
	return udma_camera_reg_cam_cfg_filter_r_cam_cfg_filter_extract(word);
}
#define CSR_UDMA_CAMERA_REG_CAM_VSYNC_POLARITY_ADDR (CSR_BASE + 0xf034L)
#define CSR_UDMA_CAMERA_REG_CAM_VSYNC_POLARITY_SIZE 1
static inline uint32_t udma_camera_REG_CAM_VSYNC_POLARITY_read(void) {
	return csr_read_simple((CSR_BASE + 0xf034L));
}
static inline void udma_camera_REG_CAM_VSYNC_POLARITY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf034L));
}
#define CSR_UDMA_CAMERA_REG_CAM_VSYNC_POLARITY_R_CAM_VSYNC_POLARITY_OFFSET 0
#define CSR_UDMA_CAMERA_REG_CAM_VSYNC_POLARITY_R_CAM_VSYNC_POLARITY_SIZE 1
static inline uint32_t udma_camera_reg_cam_vsync_polarity_r_cam_vsync_polarity_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_camera_reg_cam_vsync_polarity_r_cam_vsync_polarity_read(void) {
	uint32_t word = udma_camera_reg_cam_vsync_polarity_read();
	return udma_camera_reg_cam_vsync_polarity_r_cam_vsync_polarity_extract(word);
}
static inline uint32_t udma_camera_reg_cam_vsync_polarity_r_cam_vsync_polarity_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_camera_reg_cam_vsync_polarity_r_cam_vsync_polarity_write(uint32_t plain_value) {
	uint32_t oldword = udma_camera_reg_cam_vsync_polarity_read();
	uint32_t newword = udma_camera_reg_cam_vsync_polarity_r_cam_vsync_polarity_replace(oldword, plain_value);
	udma_camera_reg_cam_vsync_polarity_write(newword);
}
#define CSR_UDMA_CAMERA_REG_CAM_VSYNC_POLARITY_R_CAM_HSYNC_POLARITY_OFFSET 1
#define CSR_UDMA_CAMERA_REG_CAM_VSYNC_POLARITY_R_CAM_HSYNC_POLARITY_SIZE 1
static inline uint32_t udma_camera_reg_cam_vsync_polarity_r_cam_hsync_polarity_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_camera_reg_cam_vsync_polarity_r_cam_hsync_polarity_read(void) {
	uint32_t word = udma_camera_reg_cam_vsync_polarity_read();
	return udma_camera_reg_cam_vsync_polarity_r_cam_hsync_polarity_extract(word);
}
static inline uint32_t udma_camera_reg_cam_vsync_polarity_r_cam_hsync_polarity_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_camera_reg_cam_vsync_polarity_r_cam_hsync_polarity_write(uint32_t plain_value) {
	uint32_t oldword = udma_camera_reg_cam_vsync_polarity_read();
	uint32_t newword = udma_camera_reg_cam_vsync_polarity_r_cam_hsync_polarity_replace(oldword, plain_value);
	udma_camera_reg_cam_vsync_polarity_write(newword);
}

/* udma_filter */
#define CSR_UDMA_FILTER_BASE (CSR_BASE + 0x10000L)
#define CSR_UDMA_FILTER_REG_TX_CH0_ADD_ADDR (CSR_BASE + 0x10000L)
#define CSR_UDMA_FILTER_REG_TX_CH0_ADD_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH0_ADD_read(void) {
	return csr_read_simple((CSR_BASE + 0x10000L));
}
static inline void udma_filter_REG_TX_CH0_ADD_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10000L));
}
#define CSR_UDMA_FILTER_REG_TX_CH0_ADD_R_FILTER_TX_START_ADDR_0_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH0_ADD_R_FILTER_TX_START_ADDR_0_SIZE 15
static inline uint32_t udma_filter_reg_tx_ch0_add_r_filter_tx_start_addr_0_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch0_add_r_filter_tx_start_addr_0_read(void) {
	uint32_t word = udma_filter_reg_tx_ch0_add_read();
	return udma_filter_reg_tx_ch0_add_r_filter_tx_start_addr_0_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch0_add_r_filter_tx_start_addr_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch0_add_r_filter_tx_start_addr_0_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch0_add_read();
	uint32_t newword = udma_filter_reg_tx_ch0_add_r_filter_tx_start_addr_0_replace(oldword, plain_value);
	udma_filter_reg_tx_ch0_add_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH0_CFG_ADDR (CSR_BASE + 0x10004L)
#define CSR_UDMA_FILTER_REG_TX_CH0_CFG_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH0_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x10004L));
}
static inline void udma_filter_REG_TX_CH0_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10004L));
}
#define CSR_UDMA_FILTER_REG_TX_CH0_CFG_R_FILTER_TX_DATASIZE_0_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH0_CFG_R_FILTER_TX_DATASIZE_0_SIZE 2
static inline uint32_t udma_filter_reg_tx_ch0_cfg_r_filter_tx_datasize_0_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch0_cfg_r_filter_tx_datasize_0_read(void) {
	uint32_t word = udma_filter_reg_tx_ch0_cfg_read();
	return udma_filter_reg_tx_ch0_cfg_r_filter_tx_datasize_0_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch0_cfg_r_filter_tx_datasize_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch0_cfg_r_filter_tx_datasize_0_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch0_cfg_read();
	uint32_t newword = udma_filter_reg_tx_ch0_cfg_r_filter_tx_datasize_0_replace(oldword, plain_value);
	udma_filter_reg_tx_ch0_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH0_CFG_R_FILTER_TX_MODE_0_OFFSET 8
#define CSR_UDMA_FILTER_REG_TX_CH0_CFG_R_FILTER_TX_MODE_0_SIZE 2
static inline uint32_t udma_filter_reg_tx_ch0_cfg_r_filter_tx_mode_0_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch0_cfg_r_filter_tx_mode_0_read(void) {
	uint32_t word = udma_filter_reg_tx_ch0_cfg_read();
	return udma_filter_reg_tx_ch0_cfg_r_filter_tx_mode_0_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch0_cfg_r_filter_tx_mode_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_filter_reg_tx_ch0_cfg_r_filter_tx_mode_0_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch0_cfg_read();
	uint32_t newword = udma_filter_reg_tx_ch0_cfg_r_filter_tx_mode_0_replace(oldword, plain_value);
	udma_filter_reg_tx_ch0_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN0_ADDR (CSR_BASE + 0x10008L)
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN0_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH0_LEN0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10008L));
}
static inline void udma_filter_REG_TX_CH0_LEN0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10008L));
}
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN0_R_FILTER_TX_LEN0_0_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN0_R_FILTER_TX_LEN0_0_SIZE 15
static inline uint32_t udma_filter_reg_tx_ch0_len0_r_filter_tx_len0_0_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch0_len0_r_filter_tx_len0_0_read(void) {
	uint32_t word = udma_filter_reg_tx_ch0_len0_read();
	return udma_filter_reg_tx_ch0_len0_r_filter_tx_len0_0_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch0_len0_r_filter_tx_len0_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch0_len0_r_filter_tx_len0_0_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch0_len0_read();
	uint32_t newword = udma_filter_reg_tx_ch0_len0_r_filter_tx_len0_0_replace(oldword, plain_value);
	udma_filter_reg_tx_ch0_len0_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN1_ADDR (CSR_BASE + 0x1000cL)
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN1_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH0_LEN1_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000cL));
}
static inline void udma_filter_REG_TX_CH0_LEN1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000cL));
}
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN1_R_FILTER_TX_LEN1_0_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN1_R_FILTER_TX_LEN1_0_SIZE 15
static inline uint32_t udma_filter_reg_tx_ch0_len1_r_filter_tx_len1_0_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch0_len1_r_filter_tx_len1_0_read(void) {
	uint32_t word = udma_filter_reg_tx_ch0_len1_read();
	return udma_filter_reg_tx_ch0_len1_r_filter_tx_len1_0_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch0_len1_r_filter_tx_len1_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch0_len1_r_filter_tx_len1_0_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch0_len1_read();
	uint32_t newword = udma_filter_reg_tx_ch0_len1_r_filter_tx_len1_0_replace(oldword, plain_value);
	udma_filter_reg_tx_ch0_len1_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN2_ADDR (CSR_BASE + 0x10010L)
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN2_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH0_LEN2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10010L));
}
static inline void udma_filter_REG_TX_CH0_LEN2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10010L));
}
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN2_R_FILTER_TX_LEN2_0_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH0_LEN2_R_FILTER_TX_LEN2_0_SIZE 15
static inline uint32_t udma_filter_reg_tx_ch0_len2_r_filter_tx_len2_0_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch0_len2_r_filter_tx_len2_0_read(void) {
	uint32_t word = udma_filter_reg_tx_ch0_len2_read();
	return udma_filter_reg_tx_ch0_len2_r_filter_tx_len2_0_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch0_len2_r_filter_tx_len2_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch0_len2_r_filter_tx_len2_0_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch0_len2_read();
	uint32_t newword = udma_filter_reg_tx_ch0_len2_r_filter_tx_len2_0_replace(oldword, plain_value);
	udma_filter_reg_tx_ch0_len2_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH1_ADD_ADDR (CSR_BASE + 0x10014L)
#define CSR_UDMA_FILTER_REG_TX_CH1_ADD_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH1_ADD_read(void) {
	return csr_read_simple((CSR_BASE + 0x10014L));
}
static inline void udma_filter_REG_TX_CH1_ADD_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10014L));
}
#define CSR_UDMA_FILTER_REG_TX_CH1_ADD_R_FILTER_TX_START_ADDR_1_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH1_ADD_R_FILTER_TX_START_ADDR_1_SIZE 15
static inline uint32_t udma_filter_reg_tx_ch1_add_r_filter_tx_start_addr_1_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch1_add_r_filter_tx_start_addr_1_read(void) {
	uint32_t word = udma_filter_reg_tx_ch1_add_read();
	return udma_filter_reg_tx_ch1_add_r_filter_tx_start_addr_1_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch1_add_r_filter_tx_start_addr_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch1_add_r_filter_tx_start_addr_1_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch1_add_read();
	uint32_t newword = udma_filter_reg_tx_ch1_add_r_filter_tx_start_addr_1_replace(oldword, plain_value);
	udma_filter_reg_tx_ch1_add_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH1_CFG_ADDR (CSR_BASE + 0x10018L)
#define CSR_UDMA_FILTER_REG_TX_CH1_CFG_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH1_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x10018L));
}
static inline void udma_filter_REG_TX_CH1_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10018L));
}
#define CSR_UDMA_FILTER_REG_TX_CH1_CFG_R_FILTER_TX_DATASIZE_1_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH1_CFG_R_FILTER_TX_DATASIZE_1_SIZE 2
static inline uint32_t udma_filter_reg_tx_ch1_cfg_r_filter_tx_datasize_1_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch1_cfg_r_filter_tx_datasize_1_read(void) {
	uint32_t word = udma_filter_reg_tx_ch1_cfg_read();
	return udma_filter_reg_tx_ch1_cfg_r_filter_tx_datasize_1_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch1_cfg_r_filter_tx_datasize_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch1_cfg_r_filter_tx_datasize_1_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch1_cfg_read();
	uint32_t newword = udma_filter_reg_tx_ch1_cfg_r_filter_tx_datasize_1_replace(oldword, plain_value);
	udma_filter_reg_tx_ch1_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH1_CFG_R_FILTER_TX_MODE_1_OFFSET 8
#define CSR_UDMA_FILTER_REG_TX_CH1_CFG_R_FILTER_TX_MODE_1_SIZE 2
static inline uint32_t udma_filter_reg_tx_ch1_cfg_r_filter_tx_mode_1_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch1_cfg_r_filter_tx_mode_1_read(void) {
	uint32_t word = udma_filter_reg_tx_ch1_cfg_read();
	return udma_filter_reg_tx_ch1_cfg_r_filter_tx_mode_1_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch1_cfg_r_filter_tx_mode_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_filter_reg_tx_ch1_cfg_r_filter_tx_mode_1_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch1_cfg_read();
	uint32_t newword = udma_filter_reg_tx_ch1_cfg_r_filter_tx_mode_1_replace(oldword, plain_value);
	udma_filter_reg_tx_ch1_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN0_ADDR (CSR_BASE + 0x1001cL)
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN0_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH1_LEN0_read(void) {
	return csr_read_simple((CSR_BASE + 0x1001cL));
}
static inline void udma_filter_REG_TX_CH1_LEN0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1001cL));
}
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN0_R_FILTER_TX_LEN0_1_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN0_R_FILTER_TX_LEN0_1_SIZE 15
static inline uint32_t udma_filter_reg_tx_ch1_len0_r_filter_tx_len0_1_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch1_len0_r_filter_tx_len0_1_read(void) {
	uint32_t word = udma_filter_reg_tx_ch1_len0_read();
	return udma_filter_reg_tx_ch1_len0_r_filter_tx_len0_1_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch1_len0_r_filter_tx_len0_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch1_len0_r_filter_tx_len0_1_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch1_len0_read();
	uint32_t newword = udma_filter_reg_tx_ch1_len0_r_filter_tx_len0_1_replace(oldword, plain_value);
	udma_filter_reg_tx_ch1_len0_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN1_ADDR (CSR_BASE + 0x10020L)
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN1_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH1_LEN1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10020L));
}
static inline void udma_filter_REG_TX_CH1_LEN1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10020L));
}
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN1_R_FILTER_TX_LEN1_1_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN1_R_FILTER_TX_LEN1_1_SIZE 15
static inline uint32_t udma_filter_reg_tx_ch1_len1_r_filter_tx_len1_1_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch1_len1_r_filter_tx_len1_1_read(void) {
	uint32_t word = udma_filter_reg_tx_ch1_len1_read();
	return udma_filter_reg_tx_ch1_len1_r_filter_tx_len1_1_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch1_len1_r_filter_tx_len1_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch1_len1_r_filter_tx_len1_1_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch1_len1_read();
	uint32_t newword = udma_filter_reg_tx_ch1_len1_r_filter_tx_len1_1_replace(oldword, plain_value);
	udma_filter_reg_tx_ch1_len1_write(newword);
}
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN2_ADDR (CSR_BASE + 0x10024L)
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN2_SIZE 1
static inline uint32_t udma_filter_REG_TX_CH1_LEN2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10024L));
}
static inline void udma_filter_REG_TX_CH1_LEN2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10024L));
}
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN2_R_FILTER_TX_LEN2_1_OFFSET 0
#define CSR_UDMA_FILTER_REG_TX_CH1_LEN2_R_FILTER_TX_LEN2_1_SIZE 15
static inline uint32_t udma_filter_reg_tx_ch1_len2_r_filter_tx_len2_1_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_tx_ch1_len2_r_filter_tx_len2_1_read(void) {
	uint32_t word = udma_filter_reg_tx_ch1_len2_read();
	return udma_filter_reg_tx_ch1_len2_r_filter_tx_len2_1_extract(word);
}
static inline uint32_t udma_filter_reg_tx_ch1_len2_r_filter_tx_len2_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_tx_ch1_len2_r_filter_tx_len2_1_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_tx_ch1_len2_read();
	uint32_t newword = udma_filter_reg_tx_ch1_len2_r_filter_tx_len2_1_replace(oldword, plain_value);
	udma_filter_reg_tx_ch1_len2_write(newword);
}
#define CSR_UDMA_FILTER_REG_RX_CH_ADD_ADDR (CSR_BASE + 0x10028L)
#define CSR_UDMA_FILTER_REG_RX_CH_ADD_SIZE 1
static inline uint32_t udma_filter_REG_RX_CH_ADD_read(void) {
	return csr_read_simple((CSR_BASE + 0x10028L));
}
static inline void udma_filter_REG_RX_CH_ADD_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10028L));
}
#define CSR_UDMA_FILTER_REG_RX_CH_ADD_R_FILTER_RX_START_ADDR_OFFSET 0
#define CSR_UDMA_FILTER_REG_RX_CH_ADD_R_FILTER_RX_START_ADDR_SIZE 15
static inline uint32_t udma_filter_reg_rx_ch_add_r_filter_rx_start_addr_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_rx_ch_add_r_filter_rx_start_addr_read(void) {
	uint32_t word = udma_filter_reg_rx_ch_add_read();
	return udma_filter_reg_rx_ch_add_r_filter_rx_start_addr_extract(word);
}
static inline uint32_t udma_filter_reg_rx_ch_add_r_filter_rx_start_addr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_rx_ch_add_r_filter_rx_start_addr_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_rx_ch_add_read();
	uint32_t newword = udma_filter_reg_rx_ch_add_r_filter_rx_start_addr_replace(oldword, plain_value);
	udma_filter_reg_rx_ch_add_write(newword);
}
#define CSR_UDMA_FILTER_REG_RX_CH_CFG_ADDR (CSR_BASE + 0x1002cL)
#define CSR_UDMA_FILTER_REG_RX_CH_CFG_SIZE 1
static inline uint32_t udma_filter_REG_RX_CH_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x1002cL));
}
static inline void udma_filter_REG_RX_CH_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1002cL));
}
#define CSR_UDMA_FILTER_REG_RX_CH_CFG_R_FILTER_RX_DATASIZE_OFFSET 0
#define CSR_UDMA_FILTER_REG_RX_CH_CFG_R_FILTER_RX_DATASIZE_SIZE 2
static inline uint32_t udma_filter_reg_rx_ch_cfg_r_filter_rx_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_rx_ch_cfg_r_filter_rx_datasize_read(void) {
	uint32_t word = udma_filter_reg_rx_ch_cfg_read();
	return udma_filter_reg_rx_ch_cfg_r_filter_rx_datasize_extract(word);
}
static inline uint32_t udma_filter_reg_rx_ch_cfg_r_filter_rx_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_rx_ch_cfg_r_filter_rx_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_rx_ch_cfg_read();
	uint32_t newword = udma_filter_reg_rx_ch_cfg_r_filter_rx_datasize_replace(oldword, plain_value);
	udma_filter_reg_rx_ch_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_RX_CH_CFG_R_FILTER_RX_MODE_OFFSET 8
#define CSR_UDMA_FILTER_REG_RX_CH_CFG_R_FILTER_RX_MODE_SIZE 2
static inline uint32_t udma_filter_reg_rx_ch_cfg_r_filter_rx_mode_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_filter_reg_rx_ch_cfg_r_filter_rx_mode_read(void) {
	uint32_t word = udma_filter_reg_rx_ch_cfg_read();
	return udma_filter_reg_rx_ch_cfg_r_filter_rx_mode_extract(word);
}
static inline uint32_t udma_filter_reg_rx_ch_cfg_r_filter_rx_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_filter_reg_rx_ch_cfg_r_filter_rx_mode_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_rx_ch_cfg_read();
	uint32_t newword = udma_filter_reg_rx_ch_cfg_r_filter_rx_mode_replace(oldword, plain_value);
	udma_filter_reg_rx_ch_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_RX_CH_LEN0_ADDR (CSR_BASE + 0x10030L)
#define CSR_UDMA_FILTER_REG_RX_CH_LEN0_SIZE 1
static inline uint32_t udma_filter_REG_RX_CH_LEN0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10030L));
}
static inline void udma_filter_REG_RX_CH_LEN0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10030L));
}
#define CSR_UDMA_FILTER_REG_RX_CH_LEN0_R_FILTER_RX_LEN0_OFFSET 0
#define CSR_UDMA_FILTER_REG_RX_CH_LEN0_R_FILTER_RX_LEN0_SIZE 16
static inline uint32_t udma_filter_reg_rx_ch_len0_r_filter_rx_len0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_rx_ch_len0_r_filter_rx_len0_read(void) {
	uint32_t word = udma_filter_reg_rx_ch_len0_read();
	return udma_filter_reg_rx_ch_len0_r_filter_rx_len0_extract(word);
}
static inline uint32_t udma_filter_reg_rx_ch_len0_r_filter_rx_len0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_rx_ch_len0_r_filter_rx_len0_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_rx_ch_len0_read();
	uint32_t newword = udma_filter_reg_rx_ch_len0_r_filter_rx_len0_replace(oldword, plain_value);
	udma_filter_reg_rx_ch_len0_write(newword);
}
#define CSR_UDMA_FILTER_REG_RX_CH_LEN1_ADDR (CSR_BASE + 0x10034L)
#define CSR_UDMA_FILTER_REG_RX_CH_LEN1_SIZE 1
static inline uint32_t udma_filter_REG_RX_CH_LEN1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10034L));
}
static inline void udma_filter_REG_RX_CH_LEN1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10034L));
}
#define CSR_UDMA_FILTER_REG_RX_CH_LEN1_R_FILTER_RX_LEN1_OFFSET 0
#define CSR_UDMA_FILTER_REG_RX_CH_LEN1_R_FILTER_RX_LEN1_SIZE 16
static inline uint32_t udma_filter_reg_rx_ch_len1_r_filter_rx_len1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_rx_ch_len1_r_filter_rx_len1_read(void) {
	uint32_t word = udma_filter_reg_rx_ch_len1_read();
	return udma_filter_reg_rx_ch_len1_r_filter_rx_len1_extract(word);
}
static inline uint32_t udma_filter_reg_rx_ch_len1_r_filter_rx_len1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_rx_ch_len1_r_filter_rx_len1_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_rx_ch_len1_read();
	uint32_t newword = udma_filter_reg_rx_ch_len1_r_filter_rx_len1_replace(oldword, plain_value);
	udma_filter_reg_rx_ch_len1_write(newword);
}
#define CSR_UDMA_FILTER_REG_RX_CH_LEN2_ADDR (CSR_BASE + 0x10038L)
#define CSR_UDMA_FILTER_REG_RX_CH_LEN2_SIZE 1
static inline uint32_t udma_filter_REG_RX_CH_LEN2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10038L));
}
static inline void udma_filter_REG_RX_CH_LEN2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10038L));
}
#define CSR_UDMA_FILTER_REG_RX_CH_LEN2_R_FILTER_RX_LEN2_OFFSET 0
#define CSR_UDMA_FILTER_REG_RX_CH_LEN2_R_FILTER_RX_LEN2_SIZE 16
static inline uint32_t udma_filter_reg_rx_ch_len2_r_filter_rx_len2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_rx_ch_len2_r_filter_rx_len2_read(void) {
	uint32_t word = udma_filter_reg_rx_ch_len2_read();
	return udma_filter_reg_rx_ch_len2_r_filter_rx_len2_extract(word);
}
static inline uint32_t udma_filter_reg_rx_ch_len2_r_filter_rx_len2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_rx_ch_len2_r_filter_rx_len2_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_rx_ch_len2_read();
	uint32_t newword = udma_filter_reg_rx_ch_len2_r_filter_rx_len2_replace(oldword, plain_value);
	udma_filter_reg_rx_ch_len2_write(newword);
}
#define CSR_UDMA_FILTER_REG_AU_CFG_ADDR (CSR_BASE + 0x1003cL)
#define CSR_UDMA_FILTER_REG_AU_CFG_SIZE 1
static inline uint32_t udma_filter_REG_AU_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x1003cL));
}
static inline void udma_filter_REG_AU_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1003cL));
}
#define CSR_UDMA_FILTER_REG_AU_CFG_R_AU_USE_SIGNED_OFFSET 0
#define CSR_UDMA_FILTER_REG_AU_CFG_R_AU_USE_SIGNED_SIZE 1
static inline uint32_t udma_filter_reg_au_cfg_r_au_use_signed_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_au_cfg_r_au_use_signed_read(void) {
	uint32_t word = udma_filter_reg_au_cfg_read();
	return udma_filter_reg_au_cfg_r_au_use_signed_extract(word);
}
static inline uint32_t udma_filter_reg_au_cfg_r_au_use_signed_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_au_cfg_r_au_use_signed_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_au_cfg_read();
	uint32_t newword = udma_filter_reg_au_cfg_r_au_use_signed_replace(oldword, plain_value);
	udma_filter_reg_au_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_AU_CFG_R_AU_BYPASS_OFFSET 1
#define CSR_UDMA_FILTER_REG_AU_CFG_R_AU_BYPASS_SIZE 1
static inline uint32_t udma_filter_reg_au_cfg_r_au_bypass_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_filter_reg_au_cfg_r_au_bypass_read(void) {
	uint32_t word = udma_filter_reg_au_cfg_read();
	return udma_filter_reg_au_cfg_r_au_bypass_extract(word);
}
static inline uint32_t udma_filter_reg_au_cfg_r_au_bypass_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_filter_reg_au_cfg_r_au_bypass_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_au_cfg_read();
	uint32_t newword = udma_filter_reg_au_cfg_r_au_bypass_replace(oldword, plain_value);
	udma_filter_reg_au_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_AU_CFG_R_AU_MODE_OFFSET 8
#define CSR_UDMA_FILTER_REG_AU_CFG_R_AU_MODE_SIZE 4
static inline uint32_t udma_filter_reg_au_cfg_r_au_mode_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_filter_reg_au_cfg_r_au_mode_read(void) {
	uint32_t word = udma_filter_reg_au_cfg_read();
	return udma_filter_reg_au_cfg_r_au_mode_extract(word);
}
static inline uint32_t udma_filter_reg_au_cfg_r_au_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_filter_reg_au_cfg_r_au_mode_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_au_cfg_read();
	uint32_t newword = udma_filter_reg_au_cfg_r_au_mode_replace(oldword, plain_value);
	udma_filter_reg_au_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_AU_CFG_R_AU_SHIFT_OFFSET 16
#define CSR_UDMA_FILTER_REG_AU_CFG_R_AU_SHIFT_SIZE 5
static inline uint32_t udma_filter_reg_au_cfg_r_au_shift_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_filter_reg_au_cfg_r_au_shift_read(void) {
	uint32_t word = udma_filter_reg_au_cfg_read();
	return udma_filter_reg_au_cfg_r_au_shift_extract(word);
}
static inline uint32_t udma_filter_reg_au_cfg_r_au_shift_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_filter_reg_au_cfg_r_au_shift_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_au_cfg_read();
	uint32_t newword = udma_filter_reg_au_cfg_r_au_shift_replace(oldword, plain_value);
	udma_filter_reg_au_cfg_write(newword);
}
#define CSR_UDMA_FILTER_REG_AU_REG0_ADDR (CSR_BASE + 0x10040L)
#define CSR_UDMA_FILTER_REG_AU_REG0_SIZE 1
static inline uint32_t udma_filter_REG_AU_REG0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10040L));
}
#define CSR_UDMA_FILTER_REG_AU_REG0_R_COMMIT_AU_REG0_OFFSET 0
#define CSR_UDMA_FILTER_REG_AU_REG0_R_COMMIT_AU_REG0_SIZE 32
static inline uint32_t udma_filter_reg_au_reg0_r_commit_au_reg0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_au_reg0_r_commit_au_reg0_read(void) {
	uint32_t word = udma_filter_reg_au_reg0_read();
	return udma_filter_reg_au_reg0_r_commit_au_reg0_extract(word);
}
#define CSR_UDMA_FILTER_REG_AU_REG1_ADDR (CSR_BASE + 0x10044L)
#define CSR_UDMA_FILTER_REG_AU_REG1_SIZE 1
static inline uint32_t udma_filter_REG_AU_REG1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10044L));
}
#define CSR_UDMA_FILTER_REG_AU_REG1_R_COMMIT_AU_REG1_OFFSET 0
#define CSR_UDMA_FILTER_REG_AU_REG1_R_COMMIT_AU_REG1_SIZE 32
static inline uint32_t udma_filter_reg_au_reg1_r_commit_au_reg1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_au_reg1_r_commit_au_reg1_read(void) {
	uint32_t word = udma_filter_reg_au_reg1_read();
	return udma_filter_reg_au_reg1_r_commit_au_reg1_extract(word);
}
#define CSR_UDMA_FILTER_REG_BINCU_TH_ADDR (CSR_BASE + 0x10048L)
#define CSR_UDMA_FILTER_REG_BINCU_TH_SIZE 1
static inline uint32_t udma_filter_REG_BINCU_TH_read(void) {
	return csr_read_simple((CSR_BASE + 0x10048L));
}
#define CSR_UDMA_FILTER_REG_BINCU_TH_R_COMMIT_BINCU_THRESHOLD_OFFSET 0
#define CSR_UDMA_FILTER_REG_BINCU_TH_R_COMMIT_BINCU_THRESHOLD_SIZE 32
static inline uint32_t udma_filter_reg_bincu_th_r_commit_bincu_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_bincu_th_r_commit_bincu_threshold_read(void) {
	uint32_t word = udma_filter_reg_bincu_th_read();
	return udma_filter_reg_bincu_th_r_commit_bincu_threshold_extract(word);
}
#define CSR_UDMA_FILTER_REG_BINCU_CNT_ADDR (CSR_BASE + 0x1004cL)
#define CSR_UDMA_FILTER_REG_BINCU_CNT_SIZE 1
static inline uint32_t udma_filter_REG_BINCU_CNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004cL));
}
static inline void udma_filter_REG_BINCU_CNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1004cL));
}
#define CSR_UDMA_FILTER_REG_BINCU_CNT_R_BINCU_COUNTER_OFFSET 0
#define CSR_UDMA_FILTER_REG_BINCU_CNT_R_BINCU_COUNTER_SIZE 15
static inline uint32_t udma_filter_reg_bincu_cnt_r_bincu_counter_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_bincu_cnt_r_bincu_counter_read(void) {
	uint32_t word = udma_filter_reg_bincu_cnt_read();
	return udma_filter_reg_bincu_cnt_r_bincu_counter_extract(word);
}
static inline uint32_t udma_filter_reg_bincu_cnt_r_bincu_counter_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_bincu_cnt_r_bincu_counter_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_bincu_cnt_read();
	uint32_t newword = udma_filter_reg_bincu_cnt_r_bincu_counter_replace(oldword, plain_value);
	udma_filter_reg_bincu_cnt_write(newword);
}
#define CSR_UDMA_FILTER_REG_BINCU_CNT_R_BINCU_EN_COUNTER_OFFSET 31
#define CSR_UDMA_FILTER_REG_BINCU_CNT_R_BINCU_EN_COUNTER_SIZE 1
static inline uint32_t udma_filter_reg_bincu_cnt_r_bincu_en_counter_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t udma_filter_reg_bincu_cnt_r_bincu_en_counter_read(void) {
	uint32_t word = udma_filter_reg_bincu_cnt_read();
	return udma_filter_reg_bincu_cnt_r_bincu_en_counter_extract(word);
}
static inline uint32_t udma_filter_reg_bincu_cnt_r_bincu_en_counter_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void udma_filter_reg_bincu_cnt_r_bincu_en_counter_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_bincu_cnt_read();
	uint32_t newword = udma_filter_reg_bincu_cnt_r_bincu_en_counter_replace(oldword, plain_value);
	udma_filter_reg_bincu_cnt_write(newword);
}
#define CSR_UDMA_FILTER_REG_BINCU_SETUP_ADDR (CSR_BASE + 0x10050L)
#define CSR_UDMA_FILTER_REG_BINCU_SETUP_SIZE 1
static inline uint32_t udma_filter_REG_BINCU_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x10050L));
}
static inline void udma_filter_REG_BINCU_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10050L));
}
#define CSR_UDMA_FILTER_REG_BINCU_SETUP_R_BINCU_DATASIZE_OFFSET 0
#define CSR_UDMA_FILTER_REG_BINCU_SETUP_R_BINCU_DATASIZE_SIZE 2
static inline uint32_t udma_filter_reg_bincu_setup_r_bincu_datasize_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_bincu_setup_r_bincu_datasize_read(void) {
	uint32_t word = udma_filter_reg_bincu_setup_read();
	return udma_filter_reg_bincu_setup_r_bincu_datasize_extract(word);
}
static inline uint32_t udma_filter_reg_bincu_setup_r_bincu_datasize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_bincu_setup_r_bincu_datasize_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_bincu_setup_read();
	uint32_t newword = udma_filter_reg_bincu_setup_r_bincu_datasize_replace(oldword, plain_value);
	udma_filter_reg_bincu_setup_write(newword);
}
#define CSR_UDMA_FILTER_REG_BINCU_VAL_ADDR (CSR_BASE + 0x10054L)
#define CSR_UDMA_FILTER_REG_BINCU_VAL_SIZE 1
static inline uint32_t udma_filter_REG_BINCU_VAL_read(void) {
	return csr_read_simple((CSR_BASE + 0x10054L));
}
#define CSR_UDMA_FILTER_REG_BINCU_VAL_BINCU_COUNTER_I_OFFSET 0
#define CSR_UDMA_FILTER_REG_BINCU_VAL_BINCU_COUNTER_I_SIZE 15
static inline uint32_t udma_filter_reg_bincu_val_bincu_counter_i_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_bincu_val_bincu_counter_i_read(void) {
	uint32_t word = udma_filter_reg_bincu_val_read();
	return udma_filter_reg_bincu_val_bincu_counter_i_extract(word);
}
#define CSR_UDMA_FILTER_REG_FILT_ADDR (CSR_BASE + 0x10058L)
#define CSR_UDMA_FILTER_REG_FILT_SIZE 1
static inline uint32_t udma_filter_REG_FILT_read(void) {
	return csr_read_simple((CSR_BASE + 0x10058L));
}
static inline void udma_filter_REG_FILT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10058L));
}
#define CSR_UDMA_FILTER_REG_FILT_R_FILTER_MODE_OFFSET 0
#define CSR_UDMA_FILTER_REG_FILT_R_FILTER_MODE_SIZE 4
static inline uint32_t udma_filter_reg_filt_r_filter_mode_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_filt_r_filter_mode_read(void) {
	uint32_t word = udma_filter_reg_filt_read();
	return udma_filter_reg_filt_r_filter_mode_extract(word);
}
static inline uint32_t udma_filter_reg_filt_r_filter_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_filter_reg_filt_r_filter_mode_write(uint32_t plain_value) {
	uint32_t oldword = udma_filter_reg_filt_read();
	uint32_t newword = udma_filter_reg_filt_r_filter_mode_replace(oldword, plain_value);
	udma_filter_reg_filt_write(newword);
}
#define CSR_UDMA_FILTER_REG_STATUS_ADDR (CSR_BASE + 0x10060L)
#define CSR_UDMA_FILTER_REG_STATUS_SIZE 1
static inline uint32_t udma_filter_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x10060L));
}
#define CSR_UDMA_FILTER_REG_STATUS_R_FILTER_DONE_OFFSET 0
#define CSR_UDMA_FILTER_REG_STATUS_R_FILTER_DONE_SIZE 1
static inline uint32_t udma_filter_reg_status_r_filter_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_filter_reg_status_r_filter_done_read(void) {
	uint32_t word = udma_filter_reg_status_read();
	return udma_filter_reg_status_r_filter_done_extract(word);
}

/* udma_scif */
#define CSR_UDMA_SCIF_BASE (CSR_BASE + 0x11000L)
#define CSR_UDMA_SCIF_REG_RX_SADDR_ADDR (CSR_BASE + 0x11000L)
#define CSR_UDMA_SCIF_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_scif_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x11000L));
}
static inline void udma_scif_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x11000L));
}
#define CSR_UDMA_SCIF_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_SCIF_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_scif_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_scif_reg_rx_saddr_read();
	return udma_scif_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_scif_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_rx_saddr_read();
	uint32_t newword = udma_scif_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_scif_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_SCIF_REG_RX_SIZE_ADDR (CSR_BASE + 0x11004L)
#define CSR_UDMA_SCIF_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_scif_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x11004L));
}
static inline void udma_scif_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x11004L));
}
#define CSR_UDMA_SCIF_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_SCIF_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_scif_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_scif_reg_rx_size_read();
	return udma_scif_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_scif_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_rx_size_read();
	uint32_t newword = udma_scif_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_scif_reg_rx_size_write(newword);
}
#define CSR_UDMA_SCIF_REG_RX_CFG_ADDR (CSR_BASE + 0x11008L)
#define CSR_UDMA_SCIF_REG_RX_CFG_SIZE 1
static inline uint32_t udma_scif_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x11008L));
}
static inline void udma_scif_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x11008L));
}
#define CSR_UDMA_SCIF_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SCIF_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_scif_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_scif_reg_rx_cfg_read();
	return udma_scif_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_scif_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_rx_cfg_read();
	uint32_t newword = udma_scif_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_scif_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SCIF_REG_TX_SADDR_ADDR (CSR_BASE + 0x11010L)
#define CSR_UDMA_SCIF_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_scif_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x11010L));
}
static inline void udma_scif_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x11010L));
}
#define CSR_UDMA_SCIF_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_SCIF_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_scif_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_scif_reg_tx_saddr_read();
	return udma_scif_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_scif_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_tx_saddr_read();
	uint32_t newword = udma_scif_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_scif_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_SCIF_REG_TX_SIZE_ADDR (CSR_BASE + 0x11014L)
#define CSR_UDMA_SCIF_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_scif_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x11014L));
}
static inline void udma_scif_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x11014L));
}
#define CSR_UDMA_SCIF_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_SCIF_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_scif_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_scif_reg_tx_size_read();
	return udma_scif_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_scif_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_tx_size_read();
	uint32_t newword = udma_scif_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_scif_reg_tx_size_write(newword);
}
#define CSR_UDMA_SCIF_REG_TX_CFG_ADDR (CSR_BASE + 0x11018L)
#define CSR_UDMA_SCIF_REG_TX_CFG_SIZE 1
static inline uint32_t udma_scif_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x11018L));
}
static inline void udma_scif_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x11018L));
}
#define CSR_UDMA_SCIF_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SCIF_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_scif_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_scif_reg_tx_cfg_read();
	return udma_scif_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_scif_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_tx_cfg_read();
	uint32_t newword = udma_scif_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_scif_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SCIF_REG_STATUS_ADDR (CSR_BASE + 0x11020L)
#define CSR_UDMA_SCIF_REG_STATUS_SIZE 1
static inline uint32_t udma_scif_REG_STATUS_read(void) {
	return csr_read_simple((CSR_BASE + 0x11020L));
}
#define CSR_UDMA_SCIF_REG_STATUS_STATUS_I_OFFSET 0
#define CSR_UDMA_SCIF_REG_STATUS_STATUS_I_SIZE 1
static inline uint32_t udma_scif_reg_status_status_i_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_status_status_i_read(void) {
	uint32_t word = udma_scif_reg_status_read();
	return udma_scif_reg_status_status_i_extract(word);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_ADDR (CSR_BASE + 0x11024L)
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_SIZE 1
static inline uint32_t udma_scif_REG_SCIF_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x11024L));
}
static inline void udma_scif_REG_SCIF_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x11024L));
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_PARITY_EN_OFFSET 0
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_PARITY_EN_SIZE 1
static inline uint32_t udma_scif_reg_scif_setup_r_scif_parity_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_parity_en_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_parity_en_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_parity_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_parity_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_parity_en_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_BITS_OFFSET 1
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_BITS_SIZE 2
static inline uint32_t udma_scif_reg_scif_setup_r_scif_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_bits_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_bits_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_bits_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_STOP_BITS_OFFSET 3
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_STOP_BITS_SIZE 1
static inline uint32_t udma_scif_reg_scif_setup_r_scif_stop_bits_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_stop_bits_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_stop_bits_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_stop_bits_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_stop_bits_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_stop_bits_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_RX_POLLING_EN_OFFSET 4
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_RX_POLLING_EN_SIZE 1
static inline uint32_t udma_scif_reg_scif_setup_r_scif_rx_polling_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_rx_polling_en_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_rx_polling_en_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_rx_polling_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_rx_polling_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_rx_polling_en_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_RX_CLEAN_FIFO_OFFSET 5
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_RX_CLEAN_FIFO_SIZE 1
static inline uint32_t udma_scif_reg_scif_setup_r_scif_rx_clean_fifo_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_rx_clean_fifo_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_rx_clean_fifo_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_rx_clean_fifo_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_rx_clean_fifo_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_rx_clean_fifo_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_EN_TX_OFFSET 8
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_EN_TX_SIZE 1
static inline uint32_t udma_scif_reg_scif_setup_r_scif_en_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_en_tx_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_en_tx_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_en_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_en_tx_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_en_tx_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_EN_RX_OFFSET 9
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_EN_RX_SIZE 1
static inline uint32_t udma_scif_reg_scif_setup_r_scif_en_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 9) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_en_rx_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_en_rx_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_en_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 9))) | (mask & plain_value)<< 9 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_en_rx_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_en_rx_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_CLKSEL_OFFSET 14
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_CLKSEL_SIZE 2
static inline uint32_t udma_scif_reg_scif_setup_r_scif_clksel_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 14) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_clksel_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_clksel_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_clksel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 14))) | (mask & plain_value)<< 14 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_clksel_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_clksel_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_DIV_OFFSET 16
#define CSR_UDMA_SCIF_REG_SCIF_SETUP_R_SCIF_DIV_SIZE 16
static inline uint32_t udma_scif_reg_scif_setup_r_scif_div_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_div_read(void) {
	uint32_t word = udma_scif_reg_scif_setup_read();
	return udma_scif_reg_scif_setup_r_scif_div_extract(word);
}
static inline uint32_t udma_scif_reg_scif_setup_r_scif_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void udma_scif_reg_scif_setup_r_scif_div_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_setup_read();
	uint32_t newword = udma_scif_reg_scif_setup_r_scif_div_replace(oldword, plain_value);
	udma_scif_reg_scif_setup_write(newword);
}
#define CSR_UDMA_SCIF_REG_ERROR_ADDR (CSR_BASE + 0x11028L)
#define CSR_UDMA_SCIF_REG_ERROR_SIZE 1
static inline uint32_t udma_scif_REG_ERROR_read(void) {
	return csr_read_simple((CSR_BASE + 0x11028L));
}
#define CSR_UDMA_SCIF_REG_ERROR_R_ERR_OVERFLOW_OFFSET 0
#define CSR_UDMA_SCIF_REG_ERROR_R_ERR_OVERFLOW_SIZE 1
static inline uint32_t udma_scif_reg_error_r_err_overflow_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_error_r_err_overflow_read(void) {
	uint32_t word = udma_scif_reg_error_read();
	return udma_scif_reg_error_r_err_overflow_extract(word);
}
#define CSR_UDMA_SCIF_REG_ERROR_R_ERR_PARITY_OFFSET 1
#define CSR_UDMA_SCIF_REG_ERROR_R_ERR_PARITY_SIZE 1
static inline uint32_t udma_scif_reg_error_r_err_parity_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_scif_reg_error_r_err_parity_read(void) {
	uint32_t word = udma_scif_reg_error_read();
	return udma_scif_reg_error_r_err_parity_extract(word);
}
#define CSR_UDMA_SCIF_REG_IRQ_EN_ADDR (CSR_BASE + 0x1102cL)
#define CSR_UDMA_SCIF_REG_IRQ_EN_SIZE 1
static inline uint32_t udma_scif_REG_IRQ_EN_read(void) {
	return csr_read_simple((CSR_BASE + 0x1102cL));
}
static inline void udma_scif_REG_IRQ_EN_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1102cL));
}
#define CSR_UDMA_SCIF_REG_IRQ_EN_R_SCIF_RX_IRQ_EN_OFFSET 0
#define CSR_UDMA_SCIF_REG_IRQ_EN_R_SCIF_RX_IRQ_EN_SIZE 1
static inline uint32_t udma_scif_reg_irq_en_r_scif_rx_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_irq_en_r_scif_rx_irq_en_read(void) {
	uint32_t word = udma_scif_reg_irq_en_read();
	return udma_scif_reg_irq_en_r_scif_rx_irq_en_extract(word);
}
static inline uint32_t udma_scif_reg_irq_en_r_scif_rx_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_irq_en_r_scif_rx_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_irq_en_read();
	uint32_t newword = udma_scif_reg_irq_en_r_scif_rx_irq_en_replace(oldword, plain_value);
	udma_scif_reg_irq_en_write(newword);
}
#define CSR_UDMA_SCIF_REG_IRQ_EN_R_SCIF_ERR_IRQ_EN_OFFSET 1
#define CSR_UDMA_SCIF_REG_IRQ_EN_R_SCIF_ERR_IRQ_EN_SIZE 1
static inline uint32_t udma_scif_reg_irq_en_r_scif_err_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_scif_reg_irq_en_r_scif_err_irq_en_read(void) {
	uint32_t word = udma_scif_reg_irq_en_read();
	return udma_scif_reg_irq_en_r_scif_err_irq_en_extract(word);
}
static inline uint32_t udma_scif_reg_irq_en_r_scif_err_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_scif_reg_irq_en_r_scif_err_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_irq_en_read();
	uint32_t newword = udma_scif_reg_irq_en_r_scif_err_irq_en_replace(oldword, plain_value);
	udma_scif_reg_irq_en_write(newword);
}
#define CSR_UDMA_SCIF_REG_VALID_ADDR (CSR_BASE + 0x11030L)
#define CSR_UDMA_SCIF_REG_VALID_SIZE 1
static inline uint32_t udma_scif_REG_VALID_read(void) {
	return csr_read_simple((CSR_BASE + 0x11030L));
}
#define CSR_UDMA_SCIF_REG_VALID_R_SCIF_RX_DATA_VALID_OFFSET 0
#define CSR_UDMA_SCIF_REG_VALID_R_SCIF_RX_DATA_VALID_SIZE 1
static inline uint32_t udma_scif_reg_valid_r_scif_rx_data_valid_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_valid_r_scif_rx_data_valid_read(void) {
	uint32_t word = udma_scif_reg_valid_read();
	return udma_scif_reg_valid_r_scif_rx_data_valid_extract(word);
}
#define CSR_UDMA_SCIF_REG_DATA_ADDR (CSR_BASE + 0x11034L)
#define CSR_UDMA_SCIF_REG_DATA_SIZE 1
static inline uint32_t udma_scif_REG_DATA_read(void) {
	return csr_read_simple((CSR_BASE + 0x11034L));
}
#define CSR_UDMA_SCIF_REG_DATA_R_SCIF_RX_DATA_OFFSET 0
#define CSR_UDMA_SCIF_REG_DATA_R_SCIF_RX_DATA_SIZE 8
static inline uint32_t udma_scif_reg_data_r_scif_rx_data_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_data_r_scif_rx_data_read(void) {
	uint32_t word = udma_scif_reg_data_read();
	return udma_scif_reg_data_r_scif_rx_data_extract(word);
}
#define CSR_UDMA_SCIF_REG_SCIF_ETU_ADDR (CSR_BASE + 0x11038L)
#define CSR_UDMA_SCIF_REG_SCIF_ETU_SIZE 1
static inline uint32_t udma_scif_REG_SCIF_ETU_read(void) {
	return csr_read_simple((CSR_BASE + 0x11038L));
}
static inline void udma_scif_REG_SCIF_ETU_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x11038L));
}
#define CSR_UDMA_SCIF_REG_SCIF_ETU_R_SCIF_ETU_OFFSET 0
#define CSR_UDMA_SCIF_REG_SCIF_ETU_R_SCIF_ETU_SIZE 16
static inline uint32_t udma_scif_reg_scif_etu_r_scif_etu_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_scif_reg_scif_etu_r_scif_etu_read(void) {
	uint32_t word = udma_scif_reg_scif_etu_read();
	return udma_scif_reg_scif_etu_r_scif_etu_extract(word);
}
static inline uint32_t udma_scif_reg_scif_etu_r_scif_etu_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_scif_reg_scif_etu_r_scif_etu_write(uint32_t plain_value) {
	uint32_t oldword = udma_scif_reg_scif_etu_read();
	uint32_t newword = udma_scif_reg_scif_etu_r_scif_etu_replace(oldword, plain_value);
	udma_scif_reg_scif_etu_write(newword);
}

/* udma_spis_0 */
#define CSR_UDMA_SPIS_0_BASE (CSR_BASE + 0x12000L)
#define CSR_UDMA_SPIS_0_REG_RX_SADDR_ADDR (CSR_BASE + 0x12000L)
#define CSR_UDMA_SPIS_0_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_spis_0_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x12000L));
}
static inline void udma_spis_0_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12000L));
}
#define CSR_UDMA_SPIS_0_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_spis_0_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_spis_0_reg_rx_saddr_read();
	return udma_spis_0_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_spis_0_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_rx_saddr_read();
	uint32_t newword = udma_spis_0_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_spis_0_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_RX_SIZE_ADDR (CSR_BASE + 0x12004L)
#define CSR_UDMA_SPIS_0_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_spis_0_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x12004L));
}
static inline void udma_spis_0_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12004L));
}
#define CSR_UDMA_SPIS_0_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_spis_0_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_spis_0_reg_rx_size_read();
	return udma_spis_0_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_spis_0_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_rx_size_read();
	uint32_t newword = udma_spis_0_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_spis_0_reg_rx_size_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_RX_CFG_ADDR (CSR_BASE + 0x12008L)
#define CSR_UDMA_SPIS_0_REG_RX_CFG_SIZE 1
static inline uint32_t udma_spis_0_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x12008L));
}
static inline void udma_spis_0_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12008L));
}
#define CSR_UDMA_SPIS_0_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_spis_0_reg_rx_cfg_read();
	return udma_spis_0_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_rx_cfg_read();
	uint32_t newword = udma_spis_0_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_spis_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_SPIS_0_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_spis_0_reg_rx_cfg_read();
	return udma_spis_0_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spis_0_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_rx_cfg_read();
	uint32_t newword = udma_spis_0_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_spis_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_SPIS_0_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_spis_0_reg_rx_cfg_read();
	return udma_spis_0_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_spis_0_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spis_0_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_rx_cfg_read();
	uint32_t newword = udma_spis_0_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_spis_0_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_TX_SADDR_ADDR (CSR_BASE + 0x12010L)
#define CSR_UDMA_SPIS_0_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_spis_0_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x12010L));
}
static inline void udma_spis_0_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12010L));
}
#define CSR_UDMA_SPIS_0_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_spis_0_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_spis_0_reg_tx_saddr_read();
	return udma_spis_0_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_spis_0_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_tx_saddr_read();
	uint32_t newword = udma_spis_0_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_spis_0_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_TX_SIZE_ADDR (CSR_BASE + 0x12014L)
#define CSR_UDMA_SPIS_0_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_spis_0_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x12014L));
}
static inline void udma_spis_0_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12014L));
}
#define CSR_UDMA_SPIS_0_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_spis_0_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_spis_0_reg_tx_size_read();
	return udma_spis_0_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_spis_0_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_tx_size_read();
	uint32_t newword = udma_spis_0_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_spis_0_reg_tx_size_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_TX_CFG_ADDR (CSR_BASE + 0x12018L)
#define CSR_UDMA_SPIS_0_REG_TX_CFG_SIZE 1
static inline uint32_t udma_spis_0_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x12018L));
}
static inline void udma_spis_0_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12018L));
}
#define CSR_UDMA_SPIS_0_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_spis_0_reg_tx_cfg_read();
	return udma_spis_0_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_tx_cfg_read();
	uint32_t newword = udma_spis_0_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_spis_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_SPIS_0_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_spis_0_reg_tx_cfg_read();
	return udma_spis_0_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spis_0_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_tx_cfg_read();
	uint32_t newword = udma_spis_0_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_spis_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_SPIS_0_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_spis_0_reg_tx_cfg_read();
	return udma_spis_0_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_spis_0_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spis_0_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_tx_cfg_read();
	uint32_t newword = udma_spis_0_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_spis_0_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_SPIS_SETUP_ADDR (CSR_BASE + 0x12020L)
#define CSR_UDMA_SPIS_0_REG_SPIS_SETUP_SIZE 1
static inline uint32_t udma_spis_0_REG_SPIS_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x12020L));
}
static inline void udma_spis_0_REG_SPIS_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12020L));
}
#define CSR_UDMA_SPIS_0_REG_SPIS_SETUP_CFGCPOL_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_SPIS_SETUP_CFGCPOL_SIZE 1
static inline uint32_t udma_spis_0_reg_spis_setup_cfgcpol_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_spis_setup_cfgcpol_read(void) {
	uint32_t word = udma_spis_0_reg_spis_setup_read();
	return udma_spis_0_reg_spis_setup_cfgcpol_extract(word);
}
static inline uint32_t udma_spis_0_reg_spis_setup_cfgcpol_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_spis_setup_cfgcpol_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_spis_setup_read();
	uint32_t newword = udma_spis_0_reg_spis_setup_cfgcpol_replace(oldword, plain_value);
	udma_spis_0_reg_spis_setup_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_SPIS_SETUP_CFGCPHA_OFFSET 1
#define CSR_UDMA_SPIS_0_REG_SPIS_SETUP_CFGCPHA_SIZE 1
static inline uint32_t udma_spis_0_reg_spis_setup_cfgcpha_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spis_0_reg_spis_setup_cfgcpha_read(void) {
	uint32_t word = udma_spis_0_reg_spis_setup_read();
	return udma_spis_0_reg_spis_setup_cfgcpha_extract(word);
}
static inline uint32_t udma_spis_0_reg_spis_setup_cfgcpha_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spis_0_reg_spis_setup_cfgcpha_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_spis_setup_read();
	uint32_t newword = udma_spis_0_reg_spis_setup_cfgcpha_replace(oldword, plain_value);
	udma_spis_0_reg_spis_setup_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_SEOT_CNT_ADDR (CSR_BASE + 0x12024L)
#define CSR_UDMA_SPIS_0_REG_SEOT_CNT_SIZE 1
static inline uint32_t udma_spis_0_REG_SEOT_CNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x12024L));
}
static inline void udma_spis_0_REG_SEOT_CNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12024L));
}
#define CSR_UDMA_SPIS_0_REG_SEOT_CNT_SR_SEOT_CNT_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_SEOT_CNT_SR_SEOT_CNT_SIZE 16
static inline uint32_t udma_spis_0_reg_seot_cnt_sr_seot_cnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_seot_cnt_sr_seot_cnt_read(void) {
	uint32_t word = udma_spis_0_reg_seot_cnt_read();
	return udma_spis_0_reg_seot_cnt_sr_seot_cnt_extract(word);
}
static inline uint32_t udma_spis_0_reg_seot_cnt_sr_seot_cnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_seot_cnt_sr_seot_cnt_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_seot_cnt_read();
	uint32_t newword = udma_spis_0_reg_seot_cnt_sr_seot_cnt_replace(oldword, plain_value);
	udma_spis_0_reg_seot_cnt_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_SPIS_IRQ_EN_ADDR (CSR_BASE + 0x12028L)
#define CSR_UDMA_SPIS_0_REG_SPIS_IRQ_EN_SIZE 1
static inline uint32_t udma_spis_0_REG_SPIS_IRQ_EN_read(void) {
	return csr_read_simple((CSR_BASE + 0x12028L));
}
static inline void udma_spis_0_REG_SPIS_IRQ_EN_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12028L));
}
#define CSR_UDMA_SPIS_0_REG_SPIS_IRQ_EN_SEOT_IRQ_EN_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_SPIS_IRQ_EN_SEOT_IRQ_EN_SIZE 1
static inline uint32_t udma_spis_0_reg_spis_irq_en_seot_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_spis_irq_en_seot_irq_en_read(void) {
	uint32_t word = udma_spis_0_reg_spis_irq_en_read();
	return udma_spis_0_reg_spis_irq_en_seot_irq_en_extract(word);
}
static inline uint32_t udma_spis_0_reg_spis_irq_en_seot_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_spis_irq_en_seot_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_spis_irq_en_read();
	uint32_t newword = udma_spis_0_reg_spis_irq_en_seot_irq_en_replace(oldword, plain_value);
	udma_spis_0_reg_spis_irq_en_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_SPIS_RXCNT_ADDR (CSR_BASE + 0x1202cL)
#define CSR_UDMA_SPIS_0_REG_SPIS_RXCNT_SIZE 1
static inline uint32_t udma_spis_0_REG_SPIS_RXCNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x1202cL));
}
static inline void udma_spis_0_REG_SPIS_RXCNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1202cL));
}
#define CSR_UDMA_SPIS_0_REG_SPIS_RXCNT_CFGRXCNT_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_SPIS_RXCNT_CFGRXCNT_SIZE 16
static inline uint32_t udma_spis_0_reg_spis_rxcnt_cfgrxcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_spis_rxcnt_cfgrxcnt_read(void) {
	uint32_t word = udma_spis_0_reg_spis_rxcnt_read();
	return udma_spis_0_reg_spis_rxcnt_cfgrxcnt_extract(word);
}
static inline uint32_t udma_spis_0_reg_spis_rxcnt_cfgrxcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_spis_rxcnt_cfgrxcnt_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_spis_rxcnt_read();
	uint32_t newword = udma_spis_0_reg_spis_rxcnt_cfgrxcnt_replace(oldword, plain_value);
	udma_spis_0_reg_spis_rxcnt_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_SPIS_TXCNT_ADDR (CSR_BASE + 0x12030L)
#define CSR_UDMA_SPIS_0_REG_SPIS_TXCNT_SIZE 1
static inline uint32_t udma_spis_0_REG_SPIS_TXCNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x12030L));
}
static inline void udma_spis_0_REG_SPIS_TXCNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12030L));
}
#define CSR_UDMA_SPIS_0_REG_SPIS_TXCNT_CFGTXCNT_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_SPIS_TXCNT_CFGTXCNT_SIZE 16
static inline uint32_t udma_spis_0_reg_spis_txcnt_cfgtxcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_spis_txcnt_cfgtxcnt_read(void) {
	uint32_t word = udma_spis_0_reg_spis_txcnt_read();
	return udma_spis_0_reg_spis_txcnt_cfgtxcnt_extract(word);
}
static inline uint32_t udma_spis_0_reg_spis_txcnt_cfgtxcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_spis_txcnt_cfgtxcnt_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_spis_txcnt_read();
	uint32_t newword = udma_spis_0_reg_spis_txcnt_cfgtxcnt_replace(oldword, plain_value);
	udma_spis_0_reg_spis_txcnt_write(newword);
}
#define CSR_UDMA_SPIS_0_REG_SPIS_DMCNT_ADDR (CSR_BASE + 0x12034L)
#define CSR_UDMA_SPIS_0_REG_SPIS_DMCNT_SIZE 1
static inline uint32_t udma_spis_0_REG_SPIS_DMCNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x12034L));
}
static inline void udma_spis_0_REG_SPIS_DMCNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x12034L));
}
#define CSR_UDMA_SPIS_0_REG_SPIS_DMCNT_CFGDMCNT_OFFSET 0
#define CSR_UDMA_SPIS_0_REG_SPIS_DMCNT_CFGDMCNT_SIZE 16
static inline uint32_t udma_spis_0_reg_spis_dmcnt_cfgdmcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_0_reg_spis_dmcnt_cfgdmcnt_read(void) {
	uint32_t word = udma_spis_0_reg_spis_dmcnt_read();
	return udma_spis_0_reg_spis_dmcnt_cfgdmcnt_extract(word);
}
static inline uint32_t udma_spis_0_reg_spis_dmcnt_cfgdmcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_0_reg_spis_dmcnt_cfgdmcnt_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_0_reg_spis_dmcnt_read();
	uint32_t newword = udma_spis_0_reg_spis_dmcnt_cfgdmcnt_replace(oldword, plain_value);
	udma_spis_0_reg_spis_dmcnt_write(newword);
}

/* udma_spis_1 */
#define CSR_UDMA_SPIS_1_BASE (CSR_BASE + 0x13000L)
#define CSR_UDMA_SPIS_1_REG_RX_SADDR_ADDR (CSR_BASE + 0x13000L)
#define CSR_UDMA_SPIS_1_REG_RX_SADDR_SIZE 1
static inline uint32_t udma_spis_1_REG_RX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x13000L));
}
static inline void udma_spis_1_REG_RX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13000L));
}
#define CSR_UDMA_SPIS_1_REG_RX_SADDR_R_RX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_RX_SADDR_R_RX_STARTADDR_SIZE 12
static inline uint32_t udma_spis_1_reg_rx_saddr_r_rx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_rx_saddr_r_rx_startaddr_read(void) {
	uint32_t word = udma_spis_1_reg_rx_saddr_read();
	return udma_spis_1_reg_rx_saddr_r_rx_startaddr_extract(word);
}
static inline uint32_t udma_spis_1_reg_rx_saddr_r_rx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_rx_saddr_r_rx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_rx_saddr_read();
	uint32_t newword = udma_spis_1_reg_rx_saddr_r_rx_startaddr_replace(oldword, plain_value);
	udma_spis_1_reg_rx_saddr_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_RX_SIZE_ADDR (CSR_BASE + 0x13004L)
#define CSR_UDMA_SPIS_1_REG_RX_SIZE_SIZE 1
static inline uint32_t udma_spis_1_REG_RX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x13004L));
}
static inline void udma_spis_1_REG_RX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13004L));
}
#define CSR_UDMA_SPIS_1_REG_RX_SIZE_R_RX_SIZE_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_RX_SIZE_R_RX_SIZE_SIZE 16
static inline uint32_t udma_spis_1_reg_rx_size_r_rx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_rx_size_r_rx_size_read(void) {
	uint32_t word = udma_spis_1_reg_rx_size_read();
	return udma_spis_1_reg_rx_size_r_rx_size_extract(word);
}
static inline uint32_t udma_spis_1_reg_rx_size_r_rx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_rx_size_r_rx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_rx_size_read();
	uint32_t newword = udma_spis_1_reg_rx_size_r_rx_size_replace(oldword, plain_value);
	udma_spis_1_reg_rx_size_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_RX_CFG_ADDR (CSR_BASE + 0x13008L)
#define CSR_UDMA_SPIS_1_REG_RX_CFG_SIZE 1
static inline uint32_t udma_spis_1_REG_RX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x13008L));
}
static inline void udma_spis_1_REG_RX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13008L));
}
#define CSR_UDMA_SPIS_1_REG_RX_CFG_R_RX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_RX_CFG_R_RX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_continuous_read(void) {
	uint32_t word = udma_spis_1_reg_rx_cfg_read();
	return udma_spis_1_reg_rx_cfg_r_rx_continuous_extract(word);
}
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_rx_cfg_r_rx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_rx_cfg_read();
	uint32_t newword = udma_spis_1_reg_rx_cfg_r_rx_continuous_replace(oldword, plain_value);
	udma_spis_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_RX_CFG_R_RX_EN_OFFSET 4
#define CSR_UDMA_SPIS_1_REG_RX_CFG_R_RX_EN_SIZE 1
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_en_read(void) {
	uint32_t word = udma_spis_1_reg_rx_cfg_read();
	return udma_spis_1_reg_rx_cfg_r_rx_en_extract(word);
}
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spis_1_reg_rx_cfg_r_rx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_rx_cfg_read();
	uint32_t newword = udma_spis_1_reg_rx_cfg_r_rx_en_replace(oldword, plain_value);
	udma_spis_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_RX_CFG_R_RX_CLR_OFFSET 6
#define CSR_UDMA_SPIS_1_REG_RX_CFG_R_RX_CLR_SIZE 1
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_clr_read(void) {
	uint32_t word = udma_spis_1_reg_rx_cfg_read();
	return udma_spis_1_reg_rx_cfg_r_rx_clr_extract(word);
}
static inline uint32_t udma_spis_1_reg_rx_cfg_r_rx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spis_1_reg_rx_cfg_r_rx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_rx_cfg_read();
	uint32_t newword = udma_spis_1_reg_rx_cfg_r_rx_clr_replace(oldword, plain_value);
	udma_spis_1_reg_rx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_TX_SADDR_ADDR (CSR_BASE + 0x13010L)
#define CSR_UDMA_SPIS_1_REG_TX_SADDR_SIZE 1
static inline uint32_t udma_spis_1_REG_TX_SADDR_read(void) {
	return csr_read_simple((CSR_BASE + 0x13010L));
}
static inline void udma_spis_1_REG_TX_SADDR_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13010L));
}
#define CSR_UDMA_SPIS_1_REG_TX_SADDR_R_TX_STARTADDR_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_TX_SADDR_R_TX_STARTADDR_SIZE 12
static inline uint32_t udma_spis_1_reg_tx_saddr_r_tx_startaddr_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_tx_saddr_r_tx_startaddr_read(void) {
	uint32_t word = udma_spis_1_reg_tx_saddr_read();
	return udma_spis_1_reg_tx_saddr_r_tx_startaddr_extract(word);
}
static inline uint32_t udma_spis_1_reg_tx_saddr_r_tx_startaddr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_tx_saddr_r_tx_startaddr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_tx_saddr_read();
	uint32_t newword = udma_spis_1_reg_tx_saddr_r_tx_startaddr_replace(oldword, plain_value);
	udma_spis_1_reg_tx_saddr_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_TX_SIZE_ADDR (CSR_BASE + 0x13014L)
#define CSR_UDMA_SPIS_1_REG_TX_SIZE_SIZE 1
static inline uint32_t udma_spis_1_REG_TX_SIZE_read(void) {
	return csr_read_simple((CSR_BASE + 0x13014L));
}
static inline void udma_spis_1_REG_TX_SIZE_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13014L));
}
#define CSR_UDMA_SPIS_1_REG_TX_SIZE_R_TX_SIZE_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_TX_SIZE_R_TX_SIZE_SIZE 16
static inline uint32_t udma_spis_1_reg_tx_size_r_tx_size_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_tx_size_r_tx_size_read(void) {
	uint32_t word = udma_spis_1_reg_tx_size_read();
	return udma_spis_1_reg_tx_size_r_tx_size_extract(word);
}
static inline uint32_t udma_spis_1_reg_tx_size_r_tx_size_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_tx_size_r_tx_size_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_tx_size_read();
	uint32_t newword = udma_spis_1_reg_tx_size_r_tx_size_replace(oldword, plain_value);
	udma_spis_1_reg_tx_size_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_TX_CFG_ADDR (CSR_BASE + 0x13018L)
#define CSR_UDMA_SPIS_1_REG_TX_CFG_SIZE 1
static inline uint32_t udma_spis_1_REG_TX_CFG_read(void) {
	return csr_read_simple((CSR_BASE + 0x13018L));
}
static inline void udma_spis_1_REG_TX_CFG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13018L));
}
#define CSR_UDMA_SPIS_1_REG_TX_CFG_R_TX_CONTINUOUS_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_TX_CFG_R_TX_CONTINUOUS_SIZE 1
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_continuous_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_continuous_read(void) {
	uint32_t word = udma_spis_1_reg_tx_cfg_read();
	return udma_spis_1_reg_tx_cfg_r_tx_continuous_extract(word);
}
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_continuous_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_tx_cfg_r_tx_continuous_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_tx_cfg_read();
	uint32_t newword = udma_spis_1_reg_tx_cfg_r_tx_continuous_replace(oldword, plain_value);
	udma_spis_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_TX_CFG_R_TX_EN_OFFSET 4
#define CSR_UDMA_SPIS_1_REG_TX_CFG_R_TX_EN_SIZE 1
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_en_read(void) {
	uint32_t word = udma_spis_1_reg_tx_cfg_read();
	return udma_spis_1_reg_tx_cfg_r_tx_en_extract(word);
}
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void udma_spis_1_reg_tx_cfg_r_tx_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_tx_cfg_read();
	uint32_t newword = udma_spis_1_reg_tx_cfg_r_tx_en_replace(oldword, plain_value);
	udma_spis_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_TX_CFG_R_TX_CLR_OFFSET 6
#define CSR_UDMA_SPIS_1_REG_TX_CFG_R_TX_CLR_SIZE 1
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_clr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_clr_read(void) {
	uint32_t word = udma_spis_1_reg_tx_cfg_read();
	return udma_spis_1_reg_tx_cfg_r_tx_clr_extract(word);
}
static inline uint32_t udma_spis_1_reg_tx_cfg_r_tx_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void udma_spis_1_reg_tx_cfg_r_tx_clr_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_tx_cfg_read();
	uint32_t newword = udma_spis_1_reg_tx_cfg_r_tx_clr_replace(oldword, plain_value);
	udma_spis_1_reg_tx_cfg_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_SPIS_SETUP_ADDR (CSR_BASE + 0x13020L)
#define CSR_UDMA_SPIS_1_REG_SPIS_SETUP_SIZE 1
static inline uint32_t udma_spis_1_REG_SPIS_SETUP_read(void) {
	return csr_read_simple((CSR_BASE + 0x13020L));
}
static inline void udma_spis_1_REG_SPIS_SETUP_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13020L));
}
#define CSR_UDMA_SPIS_1_REG_SPIS_SETUP_CFGCPOL_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_SPIS_SETUP_CFGCPOL_SIZE 1
static inline uint32_t udma_spis_1_reg_spis_setup_cfgcpol_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_spis_setup_cfgcpol_read(void) {
	uint32_t word = udma_spis_1_reg_spis_setup_read();
	return udma_spis_1_reg_spis_setup_cfgcpol_extract(word);
}
static inline uint32_t udma_spis_1_reg_spis_setup_cfgcpol_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_spis_setup_cfgcpol_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_spis_setup_read();
	uint32_t newword = udma_spis_1_reg_spis_setup_cfgcpol_replace(oldword, plain_value);
	udma_spis_1_reg_spis_setup_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_SPIS_SETUP_CFGCPHA_OFFSET 1
#define CSR_UDMA_SPIS_1_REG_SPIS_SETUP_CFGCPHA_SIZE 1
static inline uint32_t udma_spis_1_reg_spis_setup_cfgcpha_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t udma_spis_1_reg_spis_setup_cfgcpha_read(void) {
	uint32_t word = udma_spis_1_reg_spis_setup_read();
	return udma_spis_1_reg_spis_setup_cfgcpha_extract(word);
}
static inline uint32_t udma_spis_1_reg_spis_setup_cfgcpha_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void udma_spis_1_reg_spis_setup_cfgcpha_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_spis_setup_read();
	uint32_t newword = udma_spis_1_reg_spis_setup_cfgcpha_replace(oldword, plain_value);
	udma_spis_1_reg_spis_setup_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_SEOT_CNT_ADDR (CSR_BASE + 0x13024L)
#define CSR_UDMA_SPIS_1_REG_SEOT_CNT_SIZE 1
static inline uint32_t udma_spis_1_REG_SEOT_CNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x13024L));
}
static inline void udma_spis_1_REG_SEOT_CNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13024L));
}
#define CSR_UDMA_SPIS_1_REG_SEOT_CNT_SR_SEOT_CNT_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_SEOT_CNT_SR_SEOT_CNT_SIZE 16
static inline uint32_t udma_spis_1_reg_seot_cnt_sr_seot_cnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_seot_cnt_sr_seot_cnt_read(void) {
	uint32_t word = udma_spis_1_reg_seot_cnt_read();
	return udma_spis_1_reg_seot_cnt_sr_seot_cnt_extract(word);
}
static inline uint32_t udma_spis_1_reg_seot_cnt_sr_seot_cnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_seot_cnt_sr_seot_cnt_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_seot_cnt_read();
	uint32_t newword = udma_spis_1_reg_seot_cnt_sr_seot_cnt_replace(oldword, plain_value);
	udma_spis_1_reg_seot_cnt_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_SPIS_IRQ_EN_ADDR (CSR_BASE + 0x13028L)
#define CSR_UDMA_SPIS_1_REG_SPIS_IRQ_EN_SIZE 1
static inline uint32_t udma_spis_1_REG_SPIS_IRQ_EN_read(void) {
	return csr_read_simple((CSR_BASE + 0x13028L));
}
static inline void udma_spis_1_REG_SPIS_IRQ_EN_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13028L));
}
#define CSR_UDMA_SPIS_1_REG_SPIS_IRQ_EN_SEOT_IRQ_EN_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_SPIS_IRQ_EN_SEOT_IRQ_EN_SIZE 1
static inline uint32_t udma_spis_1_reg_spis_irq_en_seot_irq_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_spis_irq_en_seot_irq_en_read(void) {
	uint32_t word = udma_spis_1_reg_spis_irq_en_read();
	return udma_spis_1_reg_spis_irq_en_seot_irq_en_extract(word);
}
static inline uint32_t udma_spis_1_reg_spis_irq_en_seot_irq_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_spis_irq_en_seot_irq_en_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_spis_irq_en_read();
	uint32_t newword = udma_spis_1_reg_spis_irq_en_seot_irq_en_replace(oldword, plain_value);
	udma_spis_1_reg_spis_irq_en_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_SPIS_RXCNT_ADDR (CSR_BASE + 0x1302cL)
#define CSR_UDMA_SPIS_1_REG_SPIS_RXCNT_SIZE 1
static inline uint32_t udma_spis_1_REG_SPIS_RXCNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x1302cL));
}
static inline void udma_spis_1_REG_SPIS_RXCNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1302cL));
}
#define CSR_UDMA_SPIS_1_REG_SPIS_RXCNT_CFGRXCNT_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_SPIS_RXCNT_CFGRXCNT_SIZE 16
static inline uint32_t udma_spis_1_reg_spis_rxcnt_cfgrxcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_spis_rxcnt_cfgrxcnt_read(void) {
	uint32_t word = udma_spis_1_reg_spis_rxcnt_read();
	return udma_spis_1_reg_spis_rxcnt_cfgrxcnt_extract(word);
}
static inline uint32_t udma_spis_1_reg_spis_rxcnt_cfgrxcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_spis_rxcnt_cfgrxcnt_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_spis_rxcnt_read();
	uint32_t newword = udma_spis_1_reg_spis_rxcnt_cfgrxcnt_replace(oldword, plain_value);
	udma_spis_1_reg_spis_rxcnt_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_SPIS_TXCNT_ADDR (CSR_BASE + 0x13030L)
#define CSR_UDMA_SPIS_1_REG_SPIS_TXCNT_SIZE 1
static inline uint32_t udma_spis_1_REG_SPIS_TXCNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x13030L));
}
static inline void udma_spis_1_REG_SPIS_TXCNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13030L));
}
#define CSR_UDMA_SPIS_1_REG_SPIS_TXCNT_CFGTXCNT_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_SPIS_TXCNT_CFGTXCNT_SIZE 16
static inline uint32_t udma_spis_1_reg_spis_txcnt_cfgtxcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_spis_txcnt_cfgtxcnt_read(void) {
	uint32_t word = udma_spis_1_reg_spis_txcnt_read();
	return udma_spis_1_reg_spis_txcnt_cfgtxcnt_extract(word);
}
static inline uint32_t udma_spis_1_reg_spis_txcnt_cfgtxcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_spis_txcnt_cfgtxcnt_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_spis_txcnt_read();
	uint32_t newword = udma_spis_1_reg_spis_txcnt_cfgtxcnt_replace(oldword, plain_value);
	udma_spis_1_reg_spis_txcnt_write(newword);
}
#define CSR_UDMA_SPIS_1_REG_SPIS_DMCNT_ADDR (CSR_BASE + 0x13034L)
#define CSR_UDMA_SPIS_1_REG_SPIS_DMCNT_SIZE 1
static inline uint32_t udma_spis_1_REG_SPIS_DMCNT_read(void) {
	return csr_read_simple((CSR_BASE + 0x13034L));
}
static inline void udma_spis_1_REG_SPIS_DMCNT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13034L));
}
#define CSR_UDMA_SPIS_1_REG_SPIS_DMCNT_CFGDMCNT_OFFSET 0
#define CSR_UDMA_SPIS_1_REG_SPIS_DMCNT_CFGDMCNT_SIZE 16
static inline uint32_t udma_spis_1_reg_spis_dmcnt_cfgdmcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t udma_spis_1_reg_spis_dmcnt_cfgdmcnt_read(void) {
	uint32_t word = udma_spis_1_reg_spis_dmcnt_read();
	return udma_spis_1_reg_spis_dmcnt_cfgdmcnt_extract(word);
}
static inline uint32_t udma_spis_1_reg_spis_dmcnt_cfgdmcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void udma_spis_1_reg_spis_dmcnt_cfgdmcnt_write(uint32_t plain_value) {
	uint32_t oldword = udma_spis_1_reg_spis_dmcnt_read();
	uint32_t newword = udma_spis_1_reg_spis_dmcnt_cfgdmcnt_replace(oldword, plain_value);
	udma_spis_1_reg_spis_dmcnt_write(newword);
}

/* udma_adc */
#define CSR_UDMA_ADC_BASE (CSR_BASE + 0x14000L)

/* aes */
#define CSR_AES_BASE (CSR_BASE + -0x100d3000L)
#define CSR_AES_SFR_CRFUNC_ADDR (CSR_BASE + -0x100d3000L)
#define CSR_AES_SFR_CRFUNC_SIZE 1
static inline uint32_t aes_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3000L));
}
static inline void aes_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3000L));
}
#define CSR_AES_SFR_CRFUNC_SFR_CRFUNC_OFFSET 0
#define CSR_AES_SFR_CRFUNC_SFR_CRFUNC_SIZE 8
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_read(void) {
	uint32_t word = aes_sfr_crfunc_read();
	return aes_sfr_crfunc_sfr_crfunc_extract(word);
}
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_crfunc_sfr_crfunc_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_crfunc_read();
	uint32_t newword = aes_sfr_crfunc_sfr_crfunc_replace(oldword, plain_value);
	aes_sfr_crfunc_write(newword);
}
#define CSR_AES_SFR_AR_ADDR (CSR_BASE + -0x100d2ffcL)
#define CSR_AES_SFR_AR_SIZE 1
static inline uint32_t aes_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2ffcL));
}
static inline void aes_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2ffcL));
}
#define CSR_AES_SFR_AR_SFR_AR_OFFSET 0
#define CSR_AES_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t aes_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_ar_sfr_ar_read(void) {
	uint32_t word = aes_sfr_ar_read();
	return aes_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t aes_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_ar_read();
	uint32_t newword = aes_sfr_ar_sfr_ar_replace(oldword, plain_value);
	aes_sfr_ar_write(newword);
}
#define CSR_AES_SFR_SRMFSM_ADDR (CSR_BASE + -0x100d2ff8L)
#define CSR_AES_SFR_SRMFSM_SIZE 1
static inline uint32_t aes_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2ff8L));
}
#define CSR_AES_SFR_SRMFSM_SFR_SRMFSM_OFFSET 0
#define CSR_AES_SFR_SRMFSM_SFR_SRMFSM_SIZE 8
static inline uint32_t aes_sfr_srmfsm_sfr_srmfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_srmfsm_sfr_srmfsm_read(void) {
	uint32_t word = aes_sfr_srmfsm_read();
	return aes_sfr_srmfsm_sfr_srmfsm_extract(word);
}
#define CSR_AES_SFR_FR_ADDR (CSR_BASE + -0x100d2ff4L)
#define CSR_AES_SFR_FR_SIZE 1
static inline uint32_t aes_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2ff4L));
}
#define CSR_AES_SFR_FR_MFSM_DONE_OFFSET 0
#define CSR_AES_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_fr_mfsm_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_mfsm_done_extract(word);
}
#define CSR_AES_SFR_FR_ACORE_DONE_OFFSET 1
#define CSR_AES_SFR_FR_ACORE_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_acore_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t aes_sfr_fr_acore_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_acore_done_extract(word);
}
#define CSR_AES_SFR_FR_CHNLO_DONE_OFFSET 2
#define CSR_AES_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t aes_sfr_fr_chnlo_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_chnlo_done_extract(word);
}
#define CSR_AES_SFR_FR_CHNLI_DONE_OFFSET 3
#define CSR_AES_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t aes_sfr_fr_chnli_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_chnli_done_extract(word);
}
#define CSR_AES_SFR_OPT_ADDR (CSR_BASE + -0x100d2ff0L)
#define CSR_AES_SFR_OPT_SIZE 1
static inline uint32_t aes_sfr_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2ff0L));
}
static inline void aes_sfr_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2ff0L));
}
#define CSR_AES_SFR_OPT_OPT_KLEN0_OFFSET 0
#define CSR_AES_SFR_OPT_OPT_KLEN0_SIZE 4
static inline uint32_t aes_sfr_opt_opt_klen0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_opt_opt_klen0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_klen0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_klen0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_opt_opt_klen0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_klen0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT_OPT_MODE0_OFFSET 4
#define CSR_AES_SFR_OPT_OPT_MODE0_SIZE 4
static inline uint32_t aes_sfr_opt_opt_mode0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t aes_sfr_opt_opt_mode0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_mode0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_mode0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void aes_sfr_opt_opt_mode0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_mode0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT_OPT_IFSTART0_OFFSET 8
#define CSR_AES_SFR_OPT_OPT_IFSTART0_SIZE 1
static inline uint32_t aes_sfr_opt_opt_ifstart0_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t aes_sfr_opt_opt_ifstart0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_ifstart0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_ifstart0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void aes_sfr_opt_opt_ifstart0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_ifstart0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT1_ADDR (CSR_BASE + -0x100d2fecL)
#define CSR_AES_SFR_OPT1_SIZE 1
static inline uint32_t aes_sfr_opt1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2fecL));
}
static inline void aes_sfr_opt1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2fecL));
}
#define CSR_AES_SFR_OPT1_SFR_OPT1_OFFSET 0
#define CSR_AES_SFR_OPT1_SFR_OPT1_SIZE 16
static inline uint32_t aes_sfr_opt1_sfr_opt1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_opt1_sfr_opt1_read(void) {
	uint32_t word = aes_sfr_opt1_read();
	return aes_sfr_opt1_sfr_opt1_extract(word);
}
static inline uint32_t aes_sfr_opt1_sfr_opt1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_opt1_sfr_opt1_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt1_read();
	uint32_t newword = aes_sfr_opt1_sfr_opt1_replace(oldword, plain_value);
	aes_sfr_opt1_write(newword);
}
#define CSR_AES_SFR_OPTLTX_ADDR (CSR_BASE + -0x100d2fe8L)
#define CSR_AES_SFR_OPTLTX_SIZE 1
static inline uint32_t aes_sfr_optltx_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2fe8L));
}
static inline void aes_sfr_optltx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2fe8L));
}
#define CSR_AES_SFR_OPTLTX_SFR_OPTLTX_OFFSET 0
#define CSR_AES_SFR_OPTLTX_SFR_OPTLTX_SIZE 6
static inline uint32_t aes_sfr_optltx_sfr_optltx_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_optltx_sfr_optltx_read(void) {
	uint32_t word = aes_sfr_optltx_read();
	return aes_sfr_optltx_sfr_optltx_extract(word);
}
static inline uint32_t aes_sfr_optltx_sfr_optltx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_optltx_sfr_optltx_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_optltx_read();
	uint32_t newword = aes_sfr_optltx_sfr_optltx_replace(oldword, plain_value);
	aes_sfr_optltx_write(newword);
}
#define CSR_AES_SFR_MASKSEED_ADDR (CSR_BASE + -0x100d2fe0L)
#define CSR_AES_SFR_MASKSEED_SIZE 1
static inline uint32_t aes_sfr_maskseed_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2fe0L));
}
static inline void aes_sfr_maskseed_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2fe0L));
}
#define CSR_AES_SFR_MASKSEED_SFR_MASKSEED_OFFSET 0
#define CSR_AES_SFR_MASKSEED_SFR_MASKSEED_SIZE 32
static inline uint32_t aes_sfr_maskseed_sfr_maskseed_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_maskseed_sfr_maskseed_read(void) {
	uint32_t word = aes_sfr_maskseed_read();
	return aes_sfr_maskseed_sfr_maskseed_extract(word);
}
static inline uint32_t aes_sfr_maskseed_sfr_maskseed_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_maskseed_sfr_maskseed_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_maskseed_read();
	uint32_t newword = aes_sfr_maskseed_sfr_maskseed_replace(oldword, plain_value);
	aes_sfr_maskseed_write(newword);
}
#define CSR_AES_SFR_MASKSEEDAR_ADDR (CSR_BASE + -0x100d2fdcL)
#define CSR_AES_SFR_MASKSEEDAR_SIZE 1
static inline uint32_t aes_sfr_maskseedar_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2fdcL));
}
static inline void aes_sfr_maskseedar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2fdcL));
}
#define CSR_AES_SFR_MASKSEEDAR_SFR_MASKSEEDAR_OFFSET 0
#define CSR_AES_SFR_MASKSEEDAR_SFR_MASKSEEDAR_SIZE 32
static inline uint32_t aes_sfr_maskseedar_sfr_maskseedar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_maskseedar_sfr_maskseedar_read(void) {
	uint32_t word = aes_sfr_maskseedar_read();
	return aes_sfr_maskseedar_sfr_maskseedar_extract(word);
}
static inline uint32_t aes_sfr_maskseedar_sfr_maskseedar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_maskseedar_sfr_maskseedar_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_maskseedar_read();
	uint32_t newword = aes_sfr_maskseedar_sfr_maskseedar_replace(oldword, plain_value);
	aes_sfr_maskseedar_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_IV_ADDR (CSR_BASE + -0x100d2fd0L)
#define CSR_AES_SFR_SEGPTR_PTRID_IV_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_IV_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2fd0L));
}
static inline void aes_sfr_segptr_PTRID_IV_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2fd0L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_IV_PTRID_IV_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_IV_PTRID_IV_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_iv_read();
	return aes_sfr_segptr_ptrid_iv_ptrid_iv_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_iv_ptrid_iv_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_iv_read();
	uint32_t newword = aes_sfr_segptr_ptrid_iv_ptrid_iv_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_iv_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_ADDR (CSR_BASE + -0x100d2fccL)
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AKEY_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2fccL));
}
static inline void aes_sfr_segptr_PTRID_AKEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2fccL));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_akey_read();
	return aes_sfr_segptr_ptrid_akey_ptrid_akey_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_akey_ptrid_akey_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_akey_read();
	uint32_t newword = aes_sfr_segptr_ptrid_akey_ptrid_akey_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_akey_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_ADDR (CSR_BASE + -0x100d2fc8L)
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AIB_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2fc8L));
}
static inline void aes_sfr_segptr_PTRID_AIB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2fc8L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_PTRID_AIB_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_PTRID_AIB_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_aib_read();
	return aes_sfr_segptr_ptrid_aib_ptrid_aib_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_aib_ptrid_aib_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_aib_read();
	uint32_t newword = aes_sfr_segptr_ptrid_aib_ptrid_aib_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_aib_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_ADDR (CSR_BASE + -0x100d2fc4L)
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AOB_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2fc4L));
}
static inline void aes_sfr_segptr_PTRID_AOB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2fc4L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_PTRID_AOB_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_PTRID_AOB_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_aob_read();
	return aes_sfr_segptr_ptrid_aob_ptrid_aob_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_aob_ptrid_aob_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_aob_read();
	uint32_t newword = aes_sfr_segptr_ptrid_aob_ptrid_aob_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_aob_write(newword);
}

/* combohash */
#define CSR_COMBOHASH_BASE (CSR_BASE + -0x100d5000L)
#define CSR_COMBOHASH_SFR_CRFUNC_ADDR (CSR_BASE + -0x100d5000L)
#define CSR_COMBOHASH_SFR_CRFUNC_SIZE 1
static inline uint32_t combohash_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d5000L));
}
static inline void combohash_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d5000L));
}
#define CSR_COMBOHASH_SFR_CRFUNC_CR_FUNC_OFFSET 0
#define CSR_COMBOHASH_SFR_CRFUNC_CR_FUNC_SIZE 8
static inline uint32_t combohash_sfr_crfunc_cr_func_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_crfunc_cr_func_read(void) {
	uint32_t word = combohash_sfr_crfunc_read();
	return combohash_sfr_crfunc_cr_func_extract(word);
}
static inline uint32_t combohash_sfr_crfunc_cr_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_crfunc_cr_func_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_crfunc_read();
	uint32_t newword = combohash_sfr_crfunc_cr_func_replace(oldword, plain_value);
	combohash_sfr_crfunc_write(newword);
}
#define CSR_COMBOHASH_SFR_AR_ADDR (CSR_BASE + -0x100d4ffcL)
#define CSR_COMBOHASH_SFR_AR_SIZE 1
static inline uint32_t combohash_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4ffcL));
}
static inline void combohash_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4ffcL));
}
#define CSR_COMBOHASH_SFR_AR_SFR_AR_OFFSET 0
#define CSR_COMBOHASH_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t combohash_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_ar_sfr_ar_read(void) {
	uint32_t word = combohash_sfr_ar_read();
	return combohash_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t combohash_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_ar_read();
	uint32_t newword = combohash_sfr_ar_sfr_ar_replace(oldword, plain_value);
	combohash_sfr_ar_write(newword);
}
#define CSR_COMBOHASH_SFR_SRMFSM_ADDR (CSR_BASE + -0x100d4ff8L)
#define CSR_COMBOHASH_SFR_SRMFSM_SIZE 1
static inline uint32_t combohash_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4ff8L));
}
#define CSR_COMBOHASH_SFR_SRMFSM_MFSM_OFFSET 0
#define CSR_COMBOHASH_SFR_SRMFSM_MFSM_SIZE 8
static inline uint32_t combohash_sfr_srmfsm_mfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_srmfsm_mfsm_read(void) {
	uint32_t word = combohash_sfr_srmfsm_read();
	return combohash_sfr_srmfsm_mfsm_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_ADDR (CSR_BASE + -0x100d4ff4L)
#define CSR_COMBOHASH_SFR_FR_SIZE 1
static inline uint32_t combohash_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4ff4L));
}
#define CSR_COMBOHASH_SFR_FR_MFSM_DONE_OFFSET 0
#define CSR_COMBOHASH_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_fr_mfsm_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_mfsm_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_HASH_DONE_OFFSET 1
#define CSR_COMBOHASH_SFR_FR_HASH_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_hash_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t combohash_sfr_fr_hash_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_hash_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_CHNLO_DONE_OFFSET 2
#define CSR_COMBOHASH_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t combohash_sfr_fr_chnlo_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_chnlo_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_CHNLI_DONE_OFFSET 3
#define CSR_COMBOHASH_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t combohash_sfr_fr_chnli_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_chnli_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_CHKDONE_OFFSET 4
#define CSR_COMBOHASH_SFR_FR_CHKDONE_SIZE 1
static inline uint32_t combohash_sfr_fr_chkdone_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t combohash_sfr_fr_chkdone_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_chkdone_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_CHKPASS_OFFSET 5
#define CSR_COMBOHASH_SFR_FR_CHKPASS_SIZE 1
static inline uint32_t combohash_sfr_fr_chkpass_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t combohash_sfr_fr_chkpass_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_chkpass_extract(word);
}
#define CSR_COMBOHASH_SFR_OPT1_ADDR (CSR_BASE + -0x100d4ff0L)
#define CSR_COMBOHASH_SFR_OPT1_SIZE 1
static inline uint32_t combohash_sfr_opt1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4ff0L));
}
static inline void combohash_sfr_opt1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4ff0L));
}
#define CSR_COMBOHASH_SFR_OPT1_CR_OPT_HASHCNT_OFFSET 0
#define CSR_COMBOHASH_SFR_OPT1_CR_OPT_HASHCNT_SIZE 16
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_read(void) {
	uint32_t word = combohash_sfr_opt1_read();
	return combohash_sfr_opt1_cr_opt_hashcnt_extract(word);
}
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_opt1_cr_opt_hashcnt_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt1_read();
	uint32_t newword = combohash_sfr_opt1_cr_opt_hashcnt_replace(oldword, plain_value);
	combohash_sfr_opt1_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_ADDR (CSR_BASE + -0x100d4fecL)
#define CSR_COMBOHASH_SFR_OPT2_SIZE 1
static inline uint32_t combohash_sfr_opt2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fecL));
}
static inline void combohash_sfr_opt2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fecL));
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_SCRTCHK_OFFSET 0
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_SCRTCHK_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_scrtchk_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_opt2_cr_opt_scrtchk_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_scrtchk_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSOB_OFFSET 1
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSOB_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_ifsob_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void combohash_sfr_opt2_cr_opt_ifsob_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_ifsob_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSTART_OFFSET 2
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSTART_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_ifstart_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void combohash_sfr_opt2_cr_opt_ifstart_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_ifstart_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT3_ADDR (CSR_BASE + -0x100d4fe8L)
#define CSR_COMBOHASH_SFR_OPT3_SIZE 1
static inline uint32_t combohash_sfr_opt3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fe8L));
}
static inline void combohash_sfr_opt3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fe8L));
}
#define CSR_COMBOHASH_SFR_OPT3_SFR_OPT3_OFFSET 0
#define CSR_COMBOHASH_SFR_OPT3_SFR_OPT3_SIZE 8
static inline uint32_t combohash_sfr_opt3_sfr_opt3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_opt3_sfr_opt3_read(void) {
	uint32_t word = combohash_sfr_opt3_read();
	return combohash_sfr_opt3_sfr_opt3_extract(word);
}
static inline uint32_t combohash_sfr_opt3_sfr_opt3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_opt3_sfr_opt3_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt3_read();
	uint32_t newword = combohash_sfr_opt3_sfr_opt3_replace(oldword, plain_value);
	combohash_sfr_opt3_write(newword);
}
#define CSR_COMBOHASH_SFR_BLKT0_ADDR (CSR_BASE + -0x100d4fe4L)
#define CSR_COMBOHASH_SFR_BLKT0_SIZE 1
static inline uint32_t combohash_sfr_blkt0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fe4L));
}
static inline void combohash_sfr_blkt0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fe4L));
}
#define CSR_COMBOHASH_SFR_BLKT0_SFR_BLKT0_OFFSET 0
#define CSR_COMBOHASH_SFR_BLKT0_SFR_BLKT0_SIZE 8
static inline uint32_t combohash_sfr_blkt0_sfr_blkt0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_blkt0_sfr_blkt0_read(void) {
	uint32_t word = combohash_sfr_blkt0_read();
	return combohash_sfr_blkt0_sfr_blkt0_extract(word);
}
static inline uint32_t combohash_sfr_blkt0_sfr_blkt0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_blkt0_sfr_blkt0_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_blkt0_read();
	uint32_t newword = combohash_sfr_blkt0_sfr_blkt0_replace(oldword, plain_value);
	combohash_sfr_blkt0_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_ADDR (CSR_BASE + -0x100d4fe0L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_LKEY_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fe0L));
}
static inline void combohash_sfr_segptr_SEGID_LKEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fe0L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_lkey_read();
	return combohash_sfr_segptr_segid_lkey_segid_lkey_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_lkey_segid_lkey_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_lkey_read();
	uint32_t newword = combohash_sfr_segptr_segid_lkey_segid_lkey_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_lkey_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_ADDR (CSR_BASE + -0x100d4fdcL)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_KEY_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fdcL));
}
static inline void combohash_sfr_segptr_SEGID_KEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fdcL));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SEGID_KEY_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SEGID_KEY_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_key_read();
	return combohash_sfr_segptr_segid_key_segid_key_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_key_segid_key_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_key_read();
	uint32_t newword = combohash_sfr_segptr_segid_key_segid_key_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_key_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_ADDR (CSR_BASE + -0x100d4fd4L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_SCRT_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fd4L));
}
static inline void combohash_sfr_segptr_SEGID_SCRT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fd4L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_scrt_read();
	return combohash_sfr_segptr_segid_scrt_segid_scrt_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_scrt_segid_scrt_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_scrt_read();
	uint32_t newword = combohash_sfr_segptr_segid_scrt_segid_scrt_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_scrt_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_ADDR (CSR_BASE + -0x100d4fd0L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_MSG_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fd0L));
}
static inline void combohash_sfr_segptr_SEGID_MSG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fd0L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SEGID_MSG_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SEGID_MSG_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_msg_read();
	return combohash_sfr_segptr_segid_msg_segid_msg_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_msg_segid_msg_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_msg_read();
	uint32_t newword = combohash_sfr_segptr_segid_msg_segid_msg_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_msg_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_ADDR (CSR_BASE + -0x100d4fccL)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_HOUT_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fccL));
}
static inline void combohash_sfr_segptr_SEGID_HOUT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fccL));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_hout_read();
	return combohash_sfr_segptr_segid_hout_segid_hout_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_hout_segid_hout_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_hout_read();
	uint32_t newword = combohash_sfr_segptr_segid_hout_segid_hout_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_hout_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT2_ADDR (CSR_BASE + -0x100d4fc4L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT2_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_HOUT2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4fc4L));
}
static inline void combohash_sfr_segptr_SEGID_HOUT2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4fc4L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT2_SEGID_HOUT2_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT2_SEGID_HOUT2_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_hout2_segid_hout2_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_hout2_segid_hout2_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_hout2_read();
	return combohash_sfr_segptr_segid_hout2_segid_hout2_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_hout2_segid_hout2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_hout2_segid_hout2_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_hout2_read();
	uint32_t newword = combohash_sfr_segptr_segid_hout2_segid_hout2_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_hout2_write(newword);
}

/* pke */
#define CSR_PKE_BASE (CSR_BASE + -0x100d4000L)
#define CSR_PKE_SFR_CRFUNC_ADDR (CSR_BASE + -0x100d4000L)
#define CSR_PKE_SFR_CRFUNC_SIZE 1
static inline uint32_t pke_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d4000L));
}
static inline void pke_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d4000L));
}
#define CSR_PKE_SFR_CRFUNC_CR_FUNC_OFFSET 0
#define CSR_PKE_SFR_CRFUNC_CR_FUNC_SIZE 8
static inline uint32_t pke_sfr_crfunc_cr_func_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_crfunc_cr_func_read(void) {
	uint32_t word = pke_sfr_crfunc_read();
	return pke_sfr_crfunc_cr_func_extract(word);
}
static inline uint32_t pke_sfr_crfunc_cr_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_crfunc_cr_func_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_crfunc_read();
	uint32_t newword = pke_sfr_crfunc_cr_func_replace(oldword, plain_value);
	pke_sfr_crfunc_write(newword);
}
#define CSR_PKE_SFR_CRFUNC_CR_PCOREIR_OFFSET 8
#define CSR_PKE_SFR_CRFUNC_CR_PCOREIR_SIZE 8
static inline uint32_t pke_sfr_crfunc_cr_pcoreir_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t pke_sfr_crfunc_cr_pcoreir_read(void) {
	uint32_t word = pke_sfr_crfunc_read();
	return pke_sfr_crfunc_cr_pcoreir_extract(word);
}
static inline uint32_t pke_sfr_crfunc_cr_pcoreir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void pke_sfr_crfunc_cr_pcoreir_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_crfunc_read();
	uint32_t newword = pke_sfr_crfunc_cr_pcoreir_replace(oldword, plain_value);
	pke_sfr_crfunc_write(newword);
}
#define CSR_PKE_SFR_AR_ADDR (CSR_BASE + -0x100d3ffcL)
#define CSR_PKE_SFR_AR_SIZE 1
static inline uint32_t pke_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3ffcL));
}
static inline void pke_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3ffcL));
}
#define CSR_PKE_SFR_AR_SFR_AR_OFFSET 0
#define CSR_PKE_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t pke_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_ar_sfr_ar_read(void) {
	uint32_t word = pke_sfr_ar_read();
	return pke_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t pke_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_ar_read();
	uint32_t newword = pke_sfr_ar_sfr_ar_replace(oldword, plain_value);
	pke_sfr_ar_write(newword);
}
#define CSR_PKE_SFR_SRMFSM_ADDR (CSR_BASE + -0x100d3ff8L)
#define CSR_PKE_SFR_SRMFSM_SIZE 1
static inline uint32_t pke_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3ff8L));
}
#define CSR_PKE_SFR_SRMFSM_MFSM_OFFSET 0
#define CSR_PKE_SFR_SRMFSM_MFSM_SIZE 8
static inline uint32_t pke_sfr_srmfsm_mfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_srmfsm_mfsm_read(void) {
	uint32_t word = pke_sfr_srmfsm_read();
	return pke_sfr_srmfsm_mfsm_extract(word);
}
#define CSR_PKE_SFR_SRMFSM_MODINVREADY_OFFSET 8
#define CSR_PKE_SFR_SRMFSM_MODINVREADY_SIZE 1
static inline uint32_t pke_sfr_srmfsm_modinvready_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t pke_sfr_srmfsm_modinvready_read(void) {
	uint32_t word = pke_sfr_srmfsm_read();
	return pke_sfr_srmfsm_modinvready_extract(word);
}
#define CSR_PKE_SFR_FR_ADDR (CSR_BASE + -0x100d3ff4L)
#define CSR_PKE_SFR_FR_SIZE 1
static inline uint32_t pke_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3ff4L));
}
#define CSR_PKE_SFR_FR_MFSM_DONE_OFFSET 0
#define CSR_PKE_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_fr_mfsm_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_mfsm_done_extract(word);
}
#define CSR_PKE_SFR_FR_PCORE_DONE_OFFSET 1
#define CSR_PKE_SFR_FR_PCORE_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_pcore_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t pke_sfr_fr_pcore_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_pcore_done_extract(word);
}
#define CSR_PKE_SFR_FR_CHNLO_DONE_OFFSET 2
#define CSR_PKE_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t pke_sfr_fr_chnlo_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnlo_done_extract(word);
}
#define CSR_PKE_SFR_FR_CHNLI_DONE_OFFSET 3
#define CSR_PKE_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t pke_sfr_fr_chnli_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnli_done_extract(word);
}
#define CSR_PKE_SFR_FR_CHNLX_DONE_OFFSET 4
#define CSR_PKE_SFR_FR_CHNLX_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnlx_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t pke_sfr_fr_chnlx_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnlx_done_extract(word);
}
#define CSR_PKE_SFR_OPTNW_ADDR (CSR_BASE + -0x100d3ff0L)
#define CSR_PKE_SFR_OPTNW_SIZE 1
static inline uint32_t pke_sfr_optnw_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3ff0L));
}
static inline void pke_sfr_optnw_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3ff0L));
}
#define CSR_PKE_SFR_OPTNW_SFR_OPTNW_OFFSET 0
#define CSR_PKE_SFR_OPTNW_SFR_OPTNW_SIZE 13
static inline uint32_t pke_sfr_optnw_sfr_optnw_extract(uint32_t oldword) {
	uint32_t mask = 0x1fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optnw_sfr_optnw_read(void) {
	uint32_t word = pke_sfr_optnw_read();
	return pke_sfr_optnw_sfr_optnw_extract(word);
}
static inline uint32_t pke_sfr_optnw_sfr_optnw_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optnw_sfr_optnw_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optnw_read();
	uint32_t newword = pke_sfr_optnw_sfr_optnw_replace(oldword, plain_value);
	pke_sfr_optnw_write(newword);
}
#define CSR_PKE_SFR_OPTEW_ADDR (CSR_BASE + -0x100d3fecL)
#define CSR_PKE_SFR_OPTEW_SIZE 1
static inline uint32_t pke_sfr_optew_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fecL));
}
static inline void pke_sfr_optew_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fecL));
}
#define CSR_PKE_SFR_OPTEW_SFR_OPTEW_OFFSET 0
#define CSR_PKE_SFR_OPTEW_SFR_OPTEW_SIZE 13
static inline uint32_t pke_sfr_optew_sfr_optew_extract(uint32_t oldword) {
	uint32_t mask = 0x1fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optew_sfr_optew_read(void) {
	uint32_t word = pke_sfr_optew_read();
	return pke_sfr_optew_sfr_optew_extract(word);
}
static inline uint32_t pke_sfr_optew_sfr_optew_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optew_sfr_optew_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optew_read();
	uint32_t newword = pke_sfr_optew_sfr_optew_replace(oldword, plain_value);
	pke_sfr_optew_write(newword);
}
#define CSR_PKE_SFR_OPTRW_ADDR (CSR_BASE + -0x100d3fe8L)
#define CSR_PKE_SFR_OPTRW_SIZE 1
static inline uint32_t pke_sfr_optrw_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fe8L));
}
static inline void pke_sfr_optrw_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fe8L));
}
#define CSR_PKE_SFR_OPTRW_SFR_OPTRW_OFFSET 0
#define CSR_PKE_SFR_OPTRW_SFR_OPTRW_SIZE 10
static inline uint32_t pke_sfr_optrw_sfr_optrw_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optrw_sfr_optrw_read(void) {
	uint32_t word = pke_sfr_optrw_read();
	return pke_sfr_optrw_sfr_optrw_extract(word);
}
static inline uint32_t pke_sfr_optrw_sfr_optrw_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optrw_sfr_optrw_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optrw_read();
	uint32_t newword = pke_sfr_optrw_sfr_optrw_replace(oldword, plain_value);
	pke_sfr_optrw_write(newword);
}
#define CSR_PKE_SFR_OPTLTX_ADDR (CSR_BASE + -0x100d3fe4L)
#define CSR_PKE_SFR_OPTLTX_SIZE 1
static inline uint32_t pke_sfr_optltx_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fe4L));
}
static inline void pke_sfr_optltx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fe4L));
}
#define CSR_PKE_SFR_OPTLTX_SFR_OPTLTX_OFFSET 0
#define CSR_PKE_SFR_OPTLTX_SFR_OPTLTX_SIZE 5
static inline uint32_t pke_sfr_optltx_sfr_optltx_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optltx_sfr_optltx_read(void) {
	uint32_t word = pke_sfr_optltx_read();
	return pke_sfr_optltx_sfr_optltx_extract(word);
}
static inline uint32_t pke_sfr_optltx_sfr_optltx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optltx_sfr_optltx_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optltx_read();
	uint32_t newword = pke_sfr_optltx_sfr_optltx_replace(oldword, plain_value);
	pke_sfr_optltx_write(newword);
}
#define CSR_PKE_SFR_OPTMASK_ADDR (CSR_BASE + -0x100d3fe0L)
#define CSR_PKE_SFR_OPTMASK_SIZE 1
static inline uint32_t pke_sfr_optmask_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fe0L));
}
static inline void pke_sfr_optmask_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fe0L));
}
#define CSR_PKE_SFR_OPTMASK_SFR_OPTMASK_OFFSET 0
#define CSR_PKE_SFR_OPTMASK_SFR_OPTMASK_SIZE 16
static inline uint32_t pke_sfr_optmask_sfr_optmask_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optmask_sfr_optmask_read(void) {
	uint32_t word = pke_sfr_optmask_read();
	return pke_sfr_optmask_sfr_optmask_extract(word);
}
static inline uint32_t pke_sfr_optmask_sfr_optmask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optmask_sfr_optmask_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optmask_read();
	uint32_t newword = pke_sfr_optmask_sfr_optmask_replace(oldword, plain_value);
	pke_sfr_optmask_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_ADDR (CSR_BASE + -0x100d3fd0L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PCON_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fd0L));
}
static inline void pke_sfr_segptr_PTRID_PCON_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fd0L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_PTRID_PCON_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_PTRID_PCON_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pcon_read();
	return pke_sfr_segptr_ptrid_pcon_ptrid_pcon_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pcon_ptrid_pcon_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pcon_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pcon_ptrid_pcon_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pcon_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_ADDR (CSR_BASE + -0x100d3fccL)
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PIB0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fccL));
}
static inline void pke_sfr_segptr_PTRID_PIB0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fccL));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pib0_read();
	return pke_sfr_segptr_ptrid_pib0_ptrid_pib0_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pib0_ptrid_pib0_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pib0_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pib0_ptrid_pib0_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pib0_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_ADDR (CSR_BASE + -0x100d3fc8L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PIB1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fc8L));
}
static inline void pke_sfr_segptr_PTRID_PIB1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fc8L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pib1_read();
	return pke_sfr_segptr_ptrid_pib1_ptrid_pib1_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pib1_ptrid_pib1_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pib1_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pib1_ptrid_pib1_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pib1_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_ADDR (CSR_BASE + -0x100d3fc4L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PKB_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fc4L));
}
static inline void pke_sfr_segptr_PTRID_PKB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fc4L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_PTRID_PKB_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_PTRID_PKB_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pkb_read();
	return pke_sfr_segptr_ptrid_pkb_ptrid_pkb_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pkb_ptrid_pkb_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pkb_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pkb_ptrid_pkb_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pkb_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_ADDR (CSR_BASE + -0x100d3fc0L)
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_POB_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d3fc0L));
}
static inline void pke_sfr_segptr_PTRID_POB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d3fc0L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_PTRID_POB_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_PTRID_POB_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pob_read();
	return pke_sfr_segptr_ptrid_pob_ptrid_pob_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pob_ptrid_pob_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pob_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pob_ptrid_pob_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pob_write(newword);
}

/* scedma */
#define CSR_SCEDMA_BASE (CSR_BASE + -0x100d7000L)
#define CSR_SCEDMA_SFR_SCHSTART_AR_ADDR (CSR_BASE + -0x100d7000L)
#define CSR_SCEDMA_SFR_SCHSTART_AR_SIZE 1
static inline uint32_t scedma_sfr_schstart_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7000L));
}
static inline void scedma_sfr_schstart_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d7000L));
}
#define CSR_SCEDMA_SFR_SCHSTART_AR_SFR_SCHSTART_AR_OFFSET 0
#define CSR_SCEDMA_SFR_SCHSTART_AR_SFR_SCHSTART_AR_SIZE 32
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_read(void) {
	uint32_t word = scedma_sfr_schstart_ar_read();
	return scedma_sfr_schstart_ar_sfr_schstart_ar_extract(word);
}
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_schstart_ar_sfr_schstart_ar_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_schstart_ar_read();
	uint32_t newword = scedma_sfr_schstart_ar_sfr_schstart_ar_replace(oldword, plain_value);
	scedma_sfr_schstart_ar_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_FUNC_ADDR (CSR_BASE + -0x100d6ff0L)
#define CSR_SCEDMA_SFR_XCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_xch_func_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6ff0L));
}
static inline void scedma_sfr_xch_func_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6ff0L));
}
#define CSR_SCEDMA_SFR_XCH_FUNC_SFR_XCH_FUNC_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_FUNC_SFR_XCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_read(void) {
	uint32_t word = scedma_sfr_xch_func_read();
	return scedma_sfr_xch_func_sfr_xch_func_extract(word);
}
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_func_sfr_xch_func_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_func_read();
	uint32_t newword = scedma_sfr_xch_func_sfr_xch_func_replace(oldword, plain_value);
	scedma_sfr_xch_func_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_OPT_ADDR (CSR_BASE + -0x100d6fecL)
#define CSR_SCEDMA_SFR_XCH_OPT_SIZE 1
static inline uint32_t scedma_sfr_xch_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fecL));
}
static inline void scedma_sfr_xch_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fecL));
}
#define CSR_SCEDMA_SFR_XCH_OPT_SFR_XCH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_OPT_SFR_XCH_OPT_SIZE 8
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_read(void) {
	uint32_t word = scedma_sfr_xch_opt_read();
	return scedma_sfr_xch_opt_sfr_xch_opt_extract(word);
}
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_opt_sfr_xch_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_opt_read();
	uint32_t newword = scedma_sfr_xch_opt_sfr_xch_opt_replace(oldword, plain_value);
	scedma_sfr_xch_opt_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_AXSTART_ADDR (CSR_BASE + -0x100d6fe8L)
#define CSR_SCEDMA_SFR_XCH_AXSTART_SIZE 1
static inline uint32_t scedma_sfr_xch_axstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fe8L));
}
static inline void scedma_sfr_xch_axstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fe8L));
}
#define CSR_SCEDMA_SFR_XCH_AXSTART_SFR_XCH_AXSTART_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_AXSTART_SFR_XCH_AXSTART_SIZE 32
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_read(void) {
	uint32_t word = scedma_sfr_xch_axstart_read();
	return scedma_sfr_xch_axstart_sfr_xch_axstart_extract(word);
}
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_axstart_sfr_xch_axstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_axstart_read();
	uint32_t newword = scedma_sfr_xch_axstart_sfr_xch_axstart_replace(oldword, plain_value);
	scedma_sfr_xch_axstart_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_SEGID_ADDR (CSR_BASE + -0x100d6fe4L)
#define CSR_SCEDMA_SFR_XCH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_xch_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fe4L));
}
static inline void scedma_sfr_xch_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fe4L));
}
#define CSR_SCEDMA_SFR_XCH_SEGID_SFR_XCH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_SEGID_SFR_XCH_SEGID_SIZE 8
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_read(void) {
	uint32_t word = scedma_sfr_xch_segid_read();
	return scedma_sfr_xch_segid_sfr_xch_segid_extract(word);
}
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_segid_sfr_xch_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_segid_read();
	uint32_t newword = scedma_sfr_xch_segid_sfr_xch_segid_replace(oldword, plain_value);
	scedma_sfr_xch_segid_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_SEGSTART_ADDR (CSR_BASE + -0x100d6fe0L)
#define CSR_SCEDMA_SFR_XCH_SEGSTART_SIZE 1
static inline uint32_t scedma_sfr_xch_segstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fe0L));
}
static inline void scedma_sfr_xch_segstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fe0L));
}
#define CSR_SCEDMA_SFR_XCH_SEGSTART_XCHCR_SEGSTART_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_SEGSTART_XCHCR_SEGSTART_SIZE 12
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_read(void) {
	uint32_t word = scedma_sfr_xch_segstart_read();
	return scedma_sfr_xch_segstart_xchcr_segstart_extract(word);
}
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_segstart_xchcr_segstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_segstart_read();
	uint32_t newword = scedma_sfr_xch_segstart_xchcr_segstart_replace(oldword, plain_value);
	scedma_sfr_xch_segstart_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_ADDR (CSR_BASE + -0x100d6fdcL)
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_xch_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fdcL));
}
static inline void scedma_sfr_xch_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fdcL));
}
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_XCHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_XCHCR_TRANSIZE_SIZE 30
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0x3fffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_read(void) {
	uint32_t word = scedma_sfr_xch_transize_read();
	return scedma_sfr_xch_transize_xchcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3fffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_transize_xchcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_transize_read();
	uint32_t newword = scedma_sfr_xch_transize_xchcr_transize_replace(oldword, plain_value);
	scedma_sfr_xch_transize_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_FUNC_ADDR (CSR_BASE + -0x100d6fd0L)
#define CSR_SCEDMA_SFR_SCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_sch_func_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fd0L));
}
static inline void scedma_sfr_sch_func_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fd0L));
}
#define CSR_SCEDMA_SFR_SCH_FUNC_SFR_SCH_FUNC_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_FUNC_SFR_SCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_read(void) {
	uint32_t word = scedma_sfr_sch_func_read();
	return scedma_sfr_sch_func_sfr_sch_func_extract(word);
}
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_func_sfr_sch_func_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_func_read();
	uint32_t newword = scedma_sfr_sch_func_sfr_sch_func_replace(oldword, plain_value);
	scedma_sfr_sch_func_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_OPT_ADDR (CSR_BASE + -0x100d6fccL)
#define CSR_SCEDMA_SFR_SCH_OPT_SIZE 1
static inline uint32_t scedma_sfr_sch_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fccL));
}
static inline void scedma_sfr_sch_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fccL));
}
#define CSR_SCEDMA_SFR_SCH_OPT_SFR_SCH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_OPT_SFR_SCH_OPT_SIZE 8
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_read(void) {
	uint32_t word = scedma_sfr_sch_opt_read();
	return scedma_sfr_sch_opt_sfr_sch_opt_extract(word);
}
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_opt_sfr_sch_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_opt_read();
	uint32_t newword = scedma_sfr_sch_opt_sfr_sch_opt_replace(oldword, plain_value);
	scedma_sfr_sch_opt_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_AXSTART_ADDR (CSR_BASE + -0x100d6fc8L)
#define CSR_SCEDMA_SFR_SCH_AXSTART_SIZE 1
static inline uint32_t scedma_sfr_sch_axstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fc8L));
}
static inline void scedma_sfr_sch_axstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fc8L));
}
#define CSR_SCEDMA_SFR_SCH_AXSTART_SFR_SCH_AXSTART_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_AXSTART_SFR_SCH_AXSTART_SIZE 32
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_read(void) {
	uint32_t word = scedma_sfr_sch_axstart_read();
	return scedma_sfr_sch_axstart_sfr_sch_axstart_extract(word);
}
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_axstart_sfr_sch_axstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_axstart_read();
	uint32_t newword = scedma_sfr_sch_axstart_sfr_sch_axstart_replace(oldword, plain_value);
	scedma_sfr_sch_axstart_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_SEGID_ADDR (CSR_BASE + -0x100d6fc4L)
#define CSR_SCEDMA_SFR_SCH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_sch_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fc4L));
}
static inline void scedma_sfr_sch_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fc4L));
}
#define CSR_SCEDMA_SFR_SCH_SEGID_SFR_SCH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_SEGID_SFR_SCH_SEGID_SIZE 8
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_read(void) {
	uint32_t word = scedma_sfr_sch_segid_read();
	return scedma_sfr_sch_segid_sfr_sch_segid_extract(word);
}
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_segid_sfr_sch_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_segid_read();
	uint32_t newword = scedma_sfr_sch_segid_sfr_sch_segid_replace(oldword, plain_value);
	scedma_sfr_sch_segid_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_SEGSTART_ADDR (CSR_BASE + -0x100d6fc0L)
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SIZE 1
static inline uint32_t scedma_sfr_sch_segstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fc0L));
}
static inline void scedma_sfr_sch_segstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fc0L));
}
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SCHCR_SEGSTART_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SCHCR_SEGSTART_SIZE 12
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_read(void) {
	uint32_t word = scedma_sfr_sch_segstart_read();
	return scedma_sfr_sch_segstart_schcr_segstart_extract(word);
}
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_segstart_schcr_segstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_segstart_read();
	uint32_t newword = scedma_sfr_sch_segstart_schcr_segstart_replace(oldword, plain_value);
	scedma_sfr_sch_segstart_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_ADDR (CSR_BASE + -0x100d6fbcL)
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_sch_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fbcL));
}
static inline void scedma_sfr_sch_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fbcL));
}
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SCHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SCHCR_TRANSIZE_SIZE 30
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0x3fffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_read(void) {
	uint32_t word = scedma_sfr_sch_transize_read();
	return scedma_sfr_sch_transize_schcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3fffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_transize_schcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_transize_read();
	uint32_t newword = scedma_sfr_sch_transize_schcr_transize_replace(oldword, plain_value);
	scedma_sfr_sch_transize_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_OPT_ADDR (CSR_BASE + -0x100d6fb0L)
#define CSR_SCEDMA_SFR_ICH_OPT_SIZE 1
static inline uint32_t scedma_sfr_ich_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fb0L));
}
static inline void scedma_sfr_ich_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fb0L));
}
#define CSR_SCEDMA_SFR_ICH_OPT_SFR_ICH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_OPT_SFR_ICH_OPT_SIZE 4
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_read(void) {
	uint32_t word = scedma_sfr_ich_opt_read();
	return scedma_sfr_ich_opt_sfr_ich_opt_extract(word);
}
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_opt_sfr_ich_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_opt_read();
	uint32_t newword = scedma_sfr_ich_opt_sfr_ich_opt_replace(oldword, plain_value);
	scedma_sfr_ich_opt_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_SEGID_ADDR (CSR_BASE + -0x100d6facL)
#define CSR_SCEDMA_SFR_ICH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_ich_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6facL));
}
static inline void scedma_sfr_ich_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6facL));
}
#define CSR_SCEDMA_SFR_ICH_SEGID_SFR_ICH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_SEGID_SFR_ICH_SEGID_SIZE 16
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_read(void) {
	uint32_t word = scedma_sfr_ich_segid_read();
	return scedma_sfr_ich_segid_sfr_ich_segid_extract(word);
}
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_segid_sfr_ich_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_segid_read();
	uint32_t newword = scedma_sfr_ich_segid_sfr_ich_segid_replace(oldword, plain_value);
	scedma_sfr_ich_segid_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_RPSTART_ADDR (CSR_BASE + -0x100d6fa8L)
#define CSR_SCEDMA_SFR_ICH_RPSTART_SIZE 1
static inline uint32_t scedma_sfr_ich_rpstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fa8L));
}
static inline void scedma_sfr_ich_rpstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fa8L));
}
#define CSR_SCEDMA_SFR_ICH_RPSTART_ICHCR_RPSTART_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_RPSTART_ICHCR_RPSTART_SIZE 12
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_read(void) {
	uint32_t word = scedma_sfr_ich_rpstart_read();
	return scedma_sfr_ich_rpstart_ichcr_rpstart_extract(word);
}
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_rpstart_ichcr_rpstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_rpstart_read();
	uint32_t newword = scedma_sfr_ich_rpstart_ichcr_rpstart_replace(oldword, plain_value);
	scedma_sfr_ich_rpstart_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_WPSTART_ADDR (CSR_BASE + -0x100d6fa4L)
#define CSR_SCEDMA_SFR_ICH_WPSTART_SIZE 1
static inline uint32_t scedma_sfr_ich_wpstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fa4L));
}
static inline void scedma_sfr_ich_wpstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fa4L));
}
#define CSR_SCEDMA_SFR_ICH_WPSTART_ICHCR_WPSTART_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_WPSTART_ICHCR_WPSTART_SIZE 12
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_read(void) {
	uint32_t word = scedma_sfr_ich_wpstart_read();
	return scedma_sfr_ich_wpstart_ichcr_wpstart_extract(word);
}
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_wpstart_ichcr_wpstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_wpstart_read();
	uint32_t newword = scedma_sfr_ich_wpstart_ichcr_wpstart_replace(oldword, plain_value);
	scedma_sfr_ich_wpstart_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ADDR (CSR_BASE + -0x100d6fa0L)
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_ich_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d6fa0L));
}
static inline void scedma_sfr_ich_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d6fa0L));
}
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ICHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ICHCR_TRANSIZE_SIZE 12
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_read(void) {
	uint32_t word = scedma_sfr_ich_transize_read();
	return scedma_sfr_ich_transize_ichcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_transize_ichcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_transize_read();
	uint32_t newword = scedma_sfr_ich_transize_ichcr_transize_replace(oldword, plain_value);
	scedma_sfr_ich_transize_write(newword);
}

/* sce_glbsfr */
#define CSR_SCE_GLBSFR_BASE (CSR_BASE + -0x100d8000L)
#define CSR_SCE_GLBSFR_SFR_SCEMODE_ADDR (CSR_BASE + -0x100d8000L)
#define CSR_SCE_GLBSFR_SFR_SCEMODE_SIZE 1
static inline uint32_t sce_glbsfr_sfr_scemode_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d8000L));
}
static inline void sce_glbsfr_sfr_scemode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d8000L));
}
#define CSR_SCE_GLBSFR_SFR_SCEMODE_CR_SCEMODE_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SCEMODE_CR_SCEMODE_SIZE 2
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_read(void) {
	uint32_t word = sce_glbsfr_sfr_scemode_read();
	return sce_glbsfr_sfr_scemode_cr_scemode_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_scemode_cr_scemode_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_scemode_read();
	uint32_t newword = sce_glbsfr_sfr_scemode_cr_scemode_replace(oldword, plain_value);
	sce_glbsfr_sfr_scemode_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_SUBEN_ADDR (CSR_BASE + -0x100d7ffcL)
#define CSR_SCE_GLBSFR_SFR_SUBEN_SIZE 1
static inline uint32_t sce_glbsfr_sfr_suben_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7ffcL));
}
static inline void sce_glbsfr_sfr_suben_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d7ffcL));
}
#define CSR_SCE_GLBSFR_SFR_SUBEN_CR_SUBEN_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SUBEN_CR_SUBEN_SIZE 16
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_read(void) {
	uint32_t word = sce_glbsfr_sfr_suben_read();
	return sce_glbsfr_sfr_suben_cr_suben_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_suben_cr_suben_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_suben_read();
	uint32_t newword = sce_glbsfr_sfr_suben_cr_suben_replace(oldword, plain_value);
	sce_glbsfr_sfr_suben_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_AHBS_ADDR (CSR_BASE + -0x100d7ff8L)
#define CSR_SCE_GLBSFR_SFR_AHBS_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ahbs_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7ff8L));
}
static inline void sce_glbsfr_sfr_ahbs_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d7ff8L));
}
#define CSR_SCE_GLBSFR_SFR_AHBS_CR_AHBSOPT_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_AHBS_CR_AHBSOPT_SIZE 5
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_read(void) {
	uint32_t word = sce_glbsfr_sfr_ahbs_read();
	return sce_glbsfr_sfr_ahbs_cr_ahbsopt_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ahbs_cr_ahbsopt_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ahbs_read();
	uint32_t newword = sce_glbsfr_sfr_ahbs_cr_ahbsopt_replace(oldword, plain_value);
	sce_glbsfr_sfr_ahbs_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_SRBUSY_ADDR (CSR_BASE + -0x100d7ff0L)
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SIZE 1
static inline uint32_t sce_glbsfr_sfr_srbusy_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7ff0L));
}
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SR_BUSY_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SR_BUSY_SIZE 16
static inline uint32_t sce_glbsfr_sfr_srbusy_sr_busy_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_srbusy_sr_busy_read(void) {
	uint32_t word = sce_glbsfr_sfr_srbusy_read();
	return sce_glbsfr_sfr_srbusy_sr_busy_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FRDONE_ADDR (CSR_BASE + -0x100d7fecL)
#define CSR_SCE_GLBSFR_SFR_FRDONE_SIZE 1
static inline uint32_t sce_glbsfr_sfr_frdone_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fecL));
}
#define CSR_SCE_GLBSFR_SFR_FRDONE_FR_DONE_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FRDONE_FR_DONE_SIZE 16
static inline uint32_t sce_glbsfr_sfr_frdone_fr_done_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_frdone_fr_done_read(void) {
	uint32_t word = sce_glbsfr_sfr_frdone_read();
	return sce_glbsfr_sfr_frdone_fr_done_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FRERR_ADDR (CSR_BASE + -0x100d7fe8L)
#define CSR_SCE_GLBSFR_SFR_FRERR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_frerr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fe8L));
}
#define CSR_SCE_GLBSFR_SFR_FRERR_FR_ERR_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FRERR_FR_ERR_SIZE 16
static inline uint32_t sce_glbsfr_sfr_frerr_fr_err_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_frerr_fr_err_read(void) {
	uint32_t word = sce_glbsfr_sfr_frerr_read();
	return sce_glbsfr_sfr_frerr_fr_err_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_ARCLR_ADDR (CSR_BASE + -0x100d7fe4L)
#define CSR_SCE_GLBSFR_SFR_ARCLR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_arclr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fe4L));
}
static inline void sce_glbsfr_sfr_arclr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d7fe4L));
}
#define CSR_SCE_GLBSFR_SFR_ARCLR_AR_CLRRAM_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_ARCLR_AR_CLRRAM_SIZE 32
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_read(void) {
	uint32_t word = sce_glbsfr_sfr_arclr_read();
	return sce_glbsfr_sfr_arclr_ar_clrram_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_arclr_ar_clrram_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_arclr_read();
	uint32_t newword = sce_glbsfr_sfr_arclr_ar_clrram_replace(oldword, plain_value);
	sce_glbsfr_sfr_arclr_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_FRACERR_ADDR (CSR_BASE + -0x100d7fe0L)
#define CSR_SCE_GLBSFR_SFR_FRACERR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_fracerr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fe0L));
}
#define CSR_SCE_GLBSFR_SFR_FRACERR_FR_ACERR_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FRACERR_FR_ACERR_SIZE 8
static inline uint32_t sce_glbsfr_sfr_fracerr_fr_acerr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_fracerr_fr_acerr_read(void) {
	uint32_t word = sce_glbsfr_sfr_fracerr_read();
	return sce_glbsfr_sfr_fracerr_fr_acerr_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_TICKCNT_ADDR (CSR_BASE + -0x100d7fdcL)
#define CSR_SCE_GLBSFR_SFR_TICKCNT_SIZE 1
static inline uint32_t sce_glbsfr_sfr_tickcnt_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fdcL));
}
#define CSR_SCE_GLBSFR_SFR_TICKCNT_SFR_TICKCNT_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_TICKCNT_SFR_TICKCNT_SIZE 32
static inline uint32_t sce_glbsfr_sfr_tickcnt_sfr_tickcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_tickcnt_sfr_tickcnt_read(void) {
	uint32_t word = sce_glbsfr_sfr_tickcnt_read();
	return sce_glbsfr_sfr_tickcnt_sfr_tickcnt_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFEN_ADDR (CSR_BASE + -0x100d7fd0L)
#define CSR_SCE_GLBSFR_SFR_FFEN_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffen_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fd0L));
}
static inline void sce_glbsfr_sfr_ffen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d7fd0L));
}
#define CSR_SCE_GLBSFR_SFR_FFEN_CR_FFEN_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFEN_CR_FFEN_SIZE 6
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffen_read();
	return sce_glbsfr_sfr_ffen_cr_ffen_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ffen_cr_ffen_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ffen_read();
	uint32_t newword = sce_glbsfr_sfr_ffen_cr_ffen_replace(oldword, plain_value);
	sce_glbsfr_sfr_ffen_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_FFCLR_ADDR (CSR_BASE + -0x100d7fccL)
#define CSR_SCE_GLBSFR_SFR_FFCLR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffclr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fccL));
}
static inline void sce_glbsfr_sfr_ffclr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d7fccL));
}
#define CSR_SCE_GLBSFR_SFR_FFCLR_AR_FFCLR_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCLR_AR_FFCLR_SIZE 32
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffclr_read();
	return sce_glbsfr_sfr_ffclr_ar_ffclr_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ffclr_ar_ffclr_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ffclr_read();
	uint32_t newword = sce_glbsfr_sfr_ffclr_ar_ffclr_replace(oldword, plain_value);
	sce_glbsfr_sfr_ffclr_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_ADDR (CSR_BASE + -0x100d7fc0L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fc0L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SR_FF0_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SR_FF0_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff0_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_ADDR (CSR_BASE + -0x100d7fbcL)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fbcL));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SR_FF1_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SR_FF1_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff1_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_ADDR (CSR_BASE + -0x100d7fb8L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fb8L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SR_FF2_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SR_FF2_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff2_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_ADDR (CSR_BASE + -0x100d7fb4L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fb4L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SR_FF3_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SR_FF3_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff3_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_ADDR (CSR_BASE + -0x100d7fb0L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7fb0L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SR_FF4_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SR_FF4_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff4_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_ADDR (CSR_BASE + -0x100d7facL)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7facL));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SR_FF5_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SR_FF5_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff5_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_TS_ADDR (CSR_BASE + -0x100d7f04L)
#define CSR_SCE_GLBSFR_SFR_TS_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ts_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d7f04L));
}
static inline void sce_glbsfr_sfr_ts_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d7f04L));
}
#define CSR_SCE_GLBSFR_SFR_TS_CR_TS_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_TS_CR_TS_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ts_cr_ts_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ts_cr_ts_read(void) {
	uint32_t word = sce_glbsfr_sfr_ts_read();
	return sce_glbsfr_sfr_ts_cr_ts_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ts_cr_ts_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ts_cr_ts_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ts_read();
	uint32_t newword = sce_glbsfr_sfr_ts_cr_ts_replace(oldword, plain_value);
	sce_glbsfr_sfr_ts_write(newword);
}

/* trng */
#define CSR_TRNG_BASE (CSR_BASE + -0x100d2000L)
#define CSR_TRNG_SFR_CRSRC_ADDR (CSR_BASE + -0x100d2000L)
#define CSR_TRNG_SFR_CRSRC_SIZE 1
static inline uint32_t trng_sfr_crsrc_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d2000L));
}
static inline void trng_sfr_crsrc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d2000L));
}
#define CSR_TRNG_SFR_CRSRC_SFR_CRSRC_OFFSET 0
#define CSR_TRNG_SFR_CRSRC_SFR_CRSRC_SIZE 12
static inline uint32_t trng_sfr_crsrc_sfr_crsrc_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_crsrc_sfr_crsrc_read(void) {
	uint32_t word = trng_sfr_crsrc_read();
	return trng_sfr_crsrc_sfr_crsrc_extract(word);
}
static inline uint32_t trng_sfr_crsrc_sfr_crsrc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_crsrc_sfr_crsrc_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_crsrc_read();
	uint32_t newword = trng_sfr_crsrc_sfr_crsrc_replace(oldword, plain_value);
	trng_sfr_crsrc_write(newword);
}
#define CSR_TRNG_SFR_CRANA_ADDR (CSR_BASE + -0x100d1ffcL)
#define CSR_TRNG_SFR_CRANA_SIZE 1
static inline uint32_t trng_sfr_crana_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1ffcL));
}
static inline void trng_sfr_crana_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1ffcL));
}
#define CSR_TRNG_SFR_CRANA_SFR_CRANA_OFFSET 0
#define CSR_TRNG_SFR_CRANA_SFR_CRANA_SIZE 16
static inline uint32_t trng_sfr_crana_sfr_crana_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_crana_sfr_crana_read(void) {
	uint32_t word = trng_sfr_crana_read();
	return trng_sfr_crana_sfr_crana_extract(word);
}
static inline uint32_t trng_sfr_crana_sfr_crana_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_crana_sfr_crana_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_crana_read();
	uint32_t newword = trng_sfr_crana_sfr_crana_replace(oldword, plain_value);
	trng_sfr_crana_write(newword);
}
#define CSR_TRNG_SFR_PP_ADDR (CSR_BASE + -0x100d1ff8L)
#define CSR_TRNG_SFR_PP_SIZE 1
static inline uint32_t trng_sfr_pp_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1ff8L));
}
static inline void trng_sfr_pp_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1ff8L));
}
#define CSR_TRNG_SFR_PP_SFR_PP_OFFSET 0
#define CSR_TRNG_SFR_PP_SFR_PP_SIZE 17
static inline uint32_t trng_sfr_pp_sfr_pp_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_pp_sfr_pp_read(void) {
	uint32_t word = trng_sfr_pp_read();
	return trng_sfr_pp_sfr_pp_extract(word);
}
static inline uint32_t trng_sfr_pp_sfr_pp_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_pp_sfr_pp_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_pp_read();
	uint32_t newword = trng_sfr_pp_sfr_pp_replace(oldword, plain_value);
	trng_sfr_pp_write(newword);
}
#define CSR_TRNG_SFR_OPT_ADDR (CSR_BASE + -0x100d1ff4L)
#define CSR_TRNG_SFR_OPT_SIZE 1
static inline uint32_t trng_sfr_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1ff4L));
}
static inline void trng_sfr_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1ff4L));
}
#define CSR_TRNG_SFR_OPT_SFR_OPT_OFFSET 0
#define CSR_TRNG_SFR_OPT_SFR_OPT_SIZE 17
static inline uint32_t trng_sfr_opt_sfr_opt_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_opt_sfr_opt_read(void) {
	uint32_t word = trng_sfr_opt_read();
	return trng_sfr_opt_sfr_opt_extract(word);
}
static inline uint32_t trng_sfr_opt_sfr_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_opt_sfr_opt_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_opt_read();
	uint32_t newword = trng_sfr_opt_sfr_opt_replace(oldword, plain_value);
	trng_sfr_opt_write(newword);
}
#define CSR_TRNG_SFR_SR_ADDR (CSR_BASE + -0x100d1ff0L)
#define CSR_TRNG_SFR_SR_SIZE 1
static inline uint32_t trng_sfr_sr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1ff0L));
}
#define CSR_TRNG_SFR_SR_SR_RNG_OFFSET 0
#define CSR_TRNG_SFR_SR_SR_RNG_SIZE 32
static inline uint32_t trng_sfr_sr_sr_rng_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_sr_sr_rng_read(void) {
	uint32_t word = trng_sfr_sr_read();
	return trng_sfr_sr_sr_rng_extract(word);
}
#define CSR_TRNG_SFR_AR_GEN_ADDR (CSR_BASE + -0x100d1fecL)
#define CSR_TRNG_SFR_AR_GEN_SIZE 1
static inline uint32_t trng_sfr_ar_gen_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1fecL));
}
static inline void trng_sfr_ar_gen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1fecL));
}
#define CSR_TRNG_SFR_AR_GEN_SFR_AR_GEN_OFFSET 0
#define CSR_TRNG_SFR_AR_GEN_SFR_AR_GEN_SIZE 32
static inline uint32_t trng_sfr_ar_gen_sfr_ar_gen_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_ar_gen_sfr_ar_gen_read(void) {
	uint32_t word = trng_sfr_ar_gen_read();
	return trng_sfr_ar_gen_sfr_ar_gen_extract(word);
}
static inline uint32_t trng_sfr_ar_gen_sfr_ar_gen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_ar_gen_sfr_ar_gen_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_ar_gen_read();
	uint32_t newword = trng_sfr_ar_gen_sfr_ar_gen_replace(oldword, plain_value);
	trng_sfr_ar_gen_write(newword);
}
#define CSR_TRNG_SFR_FR_ADDR (CSR_BASE + -0x100d1fe8L)
#define CSR_TRNG_SFR_FR_SIZE 1
static inline uint32_t trng_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1fe8L));
}
#define CSR_TRNG_SFR_FR_SFR_FR_OFFSET 0
#define CSR_TRNG_SFR_FR_SFR_FR_SIZE 2
static inline uint32_t trng_sfr_fr_sfr_fr_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_fr_sfr_fr_read(void) {
	uint32_t word = trng_sfr_fr_read();
	return trng_sfr_fr_sfr_fr_extract(word);
}
#define CSR_TRNG_SFR_DRPSZ_ADDR (CSR_BASE + -0x100d1fe0L)
#define CSR_TRNG_SFR_DRPSZ_SIZE 1
static inline uint32_t trng_sfr_drpsz_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1fe0L));
}
static inline void trng_sfr_drpsz_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1fe0L));
}
#define CSR_TRNG_SFR_DRPSZ_SFR_DRPSZ_OFFSET 0
#define CSR_TRNG_SFR_DRPSZ_SFR_DRPSZ_SIZE 32
static inline uint32_t trng_sfr_drpsz_sfr_drpsz_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_drpsz_sfr_drpsz_read(void) {
	uint32_t word = trng_sfr_drpsz_read();
	return trng_sfr_drpsz_sfr_drpsz_extract(word);
}
static inline uint32_t trng_sfr_drpsz_sfr_drpsz_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_drpsz_sfr_drpsz_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_drpsz_read();
	uint32_t newword = trng_sfr_drpsz_sfr_drpsz_replace(oldword, plain_value);
	trng_sfr_drpsz_write(newword);
}
#define CSR_TRNG_SFR_DRGEN_ADDR (CSR_BASE + -0x100d1fdcL)
#define CSR_TRNG_SFR_DRGEN_SIZE 1
static inline uint32_t trng_sfr_drgen_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1fdcL));
}
static inline void trng_sfr_drgen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1fdcL));
}
#define CSR_TRNG_SFR_DRGEN_SFR_DRGEN_OFFSET 0
#define CSR_TRNG_SFR_DRGEN_SFR_DRGEN_SIZE 32
static inline uint32_t trng_sfr_drgen_sfr_drgen_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_drgen_sfr_drgen_read(void) {
	uint32_t word = trng_sfr_drgen_read();
	return trng_sfr_drgen_sfr_drgen_extract(word);
}
static inline uint32_t trng_sfr_drgen_sfr_drgen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_drgen_sfr_drgen_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_drgen_read();
	uint32_t newword = trng_sfr_drgen_sfr_drgen_replace(oldword, plain_value);
	trng_sfr_drgen_write(newword);
}
#define CSR_TRNG_SFR_DRRESEED_ADDR (CSR_BASE + -0x100d1fd8L)
#define CSR_TRNG_SFR_DRRESEED_SIZE 1
static inline uint32_t trng_sfr_drreseed_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1fd8L));
}
static inline void trng_sfr_drreseed_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1fd8L));
}
#define CSR_TRNG_SFR_DRRESEED_SFR_DRRESEED_OFFSET 0
#define CSR_TRNG_SFR_DRRESEED_SFR_DRRESEED_SIZE 32
static inline uint32_t trng_sfr_drreseed_sfr_drreseed_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_drreseed_sfr_drreseed_read(void) {
	uint32_t word = trng_sfr_drreseed_read();
	return trng_sfr_drreseed_sfr_drreseed_extract(word);
}
static inline uint32_t trng_sfr_drreseed_sfr_drreseed_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_drreseed_sfr_drreseed_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_drreseed_read();
	uint32_t newword = trng_sfr_drreseed_sfr_drreseed_replace(oldword, plain_value);
	trng_sfr_drreseed_write(newword);
}
#define CSR_TRNG_SFR_BUF_ADDR (CSR_BASE + -0x100d1fd0L)
#define CSR_TRNG_SFR_BUF_SIZE 1
static inline uint32_t trng_sfr_buf_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1fd0L));
}
#define CSR_TRNG_SFR_BUF_SFR_BUF_OFFSET 0
#define CSR_TRNG_SFR_BUF_SFR_BUF_SIZE 32
static inline uint32_t trng_sfr_buf_sfr_buf_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_buf_sfr_buf_read(void) {
	uint32_t word = trng_sfr_buf_read();
	return trng_sfr_buf_sfr_buf_extract(word);
}
#define CSR_TRNG_SFR_CHAIN_RNGCHAINEN0_ADDR (CSR_BASE + -0x100d1fc0L)
#define CSR_TRNG_SFR_CHAIN_RNGCHAINEN0_SIZE 1
static inline uint32_t trng_sfr_chain_rngchainen0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1fc0L));
}
static inline void trng_sfr_chain_rngchainen0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1fc0L));
}
#define CSR_TRNG_SFR_CHAIN_RNGCHAINEN0_RNGCHAINEN0_OFFSET 0
#define CSR_TRNG_SFR_CHAIN_RNGCHAINEN0_RNGCHAINEN0_SIZE 32
static inline uint32_t trng_sfr_chain_rngchainen0_rngchainen0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_chain_rngchainen0_rngchainen0_read(void) {
	uint32_t word = trng_sfr_chain_rngchainen0_read();
	return trng_sfr_chain_rngchainen0_rngchainen0_extract(word);
}
static inline uint32_t trng_sfr_chain_rngchainen0_rngchainen0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_chain_rngchainen0_rngchainen0_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_chain_rngchainen0_read();
	uint32_t newword = trng_sfr_chain_rngchainen0_rngchainen0_replace(oldword, plain_value);
	trng_sfr_chain_rngchainen0_write(newword);
}
#define CSR_TRNG_SFR_CHAIN_RNGCHAINEN1_ADDR (CSR_BASE + -0x100d1fbcL)
#define CSR_TRNG_SFR_CHAIN_RNGCHAINEN1_SIZE 1
static inline uint32_t trng_sfr_chain_rngchainen1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100d1fbcL));
}
static inline void trng_sfr_chain_rngchainen1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100d1fbcL));
}
#define CSR_TRNG_SFR_CHAIN_RNGCHAINEN1_RNGCHAINEN1_OFFSET 0
#define CSR_TRNG_SFR_CHAIN_RNGCHAINEN1_RNGCHAINEN1_SIZE 32
static inline uint32_t trng_sfr_chain_rngchainen1_rngchainen1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t trng_sfr_chain_rngchainen1_rngchainen1_read(void) {
	uint32_t word = trng_sfr_chain_rngchainen1_read();
	return trng_sfr_chain_rngchainen1_rngchainen1_extract(word);
}
static inline uint32_t trng_sfr_chain_rngchainen1_rngchainen1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void trng_sfr_chain_rngchainen1_rngchainen1_write(uint32_t plain_value) {
	uint32_t oldword = trng_sfr_chain_rngchainen1_read();
	uint32_t newword = trng_sfr_chain_rngchainen1_rngchainen1_replace(oldword, plain_value);
	trng_sfr_chain_rngchainen1_write(newword);
}

/* alu */
#define CSR_ALU_BASE (CSR_BASE + -0x100d1000L)

/* duart */
#define CSR_DUART_BASE (CSR_BASE + -0x100be000L)
#define CSR_DUART_SFR_TXD_ADDR (CSR_BASE + -0x100be000L)
#define CSR_DUART_SFR_TXD_SIZE 1
static inline uint32_t duart_sfr_txd_read(void) {
	return csr_read_simple((CSR_BASE + -0x100be000L));
}
static inline void duart_sfr_txd_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100be000L));
}
#define CSR_DUART_SFR_TXD_SFR_TXD_OFFSET 0
#define CSR_DUART_SFR_TXD_SFR_TXD_SIZE 8
static inline uint32_t duart_sfr_txd_sfr_txd_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t duart_sfr_txd_sfr_txd_read(void) {
	uint32_t word = duart_sfr_txd_read();
	return duart_sfr_txd_sfr_txd_extract(word);
}
static inline uint32_t duart_sfr_txd_sfr_txd_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void duart_sfr_txd_sfr_txd_write(uint32_t plain_value) {
	uint32_t oldword = duart_sfr_txd_read();
	uint32_t newword = duart_sfr_txd_sfr_txd_replace(oldword, plain_value);
	duart_sfr_txd_write(newword);
}
#define CSR_DUART_SFR_CR_ADDR (CSR_BASE + -0x100bdffcL)
#define CSR_DUART_SFR_CR_SIZE 1
static inline uint32_t duart_sfr_cr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bdffcL));
}
static inline void duart_sfr_cr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bdffcL));
}
#define CSR_DUART_SFR_CR_SFR_CR_OFFSET 0
#define CSR_DUART_SFR_CR_SFR_CR_SIZE 1
static inline uint32_t duart_sfr_cr_sfr_cr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t duart_sfr_cr_sfr_cr_read(void) {
	uint32_t word = duart_sfr_cr_read();
	return duart_sfr_cr_sfr_cr_extract(word);
}
static inline uint32_t duart_sfr_cr_sfr_cr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void duart_sfr_cr_sfr_cr_write(uint32_t plain_value) {
	uint32_t oldword = duart_sfr_cr_read();
	uint32_t newword = duart_sfr_cr_sfr_cr_replace(oldword, plain_value);
	duart_sfr_cr_write(newword);
}
#define CSR_DUART_SFR_SR_ADDR (CSR_BASE + -0x100bdff8L)
#define CSR_DUART_SFR_SR_SIZE 1
static inline uint32_t duart_sfr_sr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bdff8L));
}
#define CSR_DUART_SFR_SR_SFR_SR_OFFSET 0
#define CSR_DUART_SFR_SR_SFR_SR_SIZE 1
static inline uint32_t duart_sfr_sr_sfr_sr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t duart_sfr_sr_sfr_sr_read(void) {
	uint32_t word = duart_sfr_sr_read();
	return duart_sfr_sr_sfr_sr_extract(word);
}
#define CSR_DUART_SFR_ETUC_ADDR (CSR_BASE + -0x100bdff4L)
#define CSR_DUART_SFR_ETUC_SIZE 1
static inline uint32_t duart_sfr_etuc_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bdff4L));
}
static inline void duart_sfr_etuc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bdff4L));
}
#define CSR_DUART_SFR_ETUC_SFR_ETUC_OFFSET 0
#define CSR_DUART_SFR_ETUC_SFR_ETUC_SIZE 16
static inline uint32_t duart_sfr_etuc_sfr_etuc_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t duart_sfr_etuc_sfr_etuc_read(void) {
	uint32_t word = duart_sfr_etuc_read();
	return duart_sfr_etuc_sfr_etuc_extract(word);
}
static inline uint32_t duart_sfr_etuc_sfr_etuc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void duart_sfr_etuc_sfr_etuc_write(uint32_t plain_value) {
	uint32_t oldword = duart_sfr_etuc_read();
	uint32_t newword = duart_sfr_etuc_sfr_etuc_replace(oldword, plain_value);
	duart_sfr_etuc_write(newword);
}

/* wdg_intf */
#define CSR_WDG_INTF_BASE (CSR_BASE + -0x100bf000L)

/* timer_intf */
#define CSR_TIMER_INTF_BASE (CSR_BASE + -0x100bd000L)

/* evc */
#define CSR_EVC_BASE (CSR_BASE + -0x100bc000L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL0_ADDR (CSR_BASE + -0x100bc000L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL0_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bc000L));
}
static inline void evc_sfr_cm7evsel_cm7evsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bc000L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel0_read();
	return evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel0_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel0_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL1_ADDR (CSR_BASE + -0x100bbffcL)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL1_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbffcL));
}
static inline void evc_sfr_cm7evsel_cm7evsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbffcL));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel1_read();
	return evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel1_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel1_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL2_ADDR (CSR_BASE + -0x100bbff8L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL2_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbff8L));
}
static inline void evc_sfr_cm7evsel_cm7evsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbff8L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel2_read();
	return evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel2_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel2_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL3_ADDR (CSR_BASE + -0x100bbff4L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL3_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbff4L));
}
static inline void evc_sfr_cm7evsel_cm7evsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbff4L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel3_read();
	return evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel3_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel3_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL4_ADDR (CSR_BASE + -0x100bbff0L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL4_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel4_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbff0L));
}
static inline void evc_sfr_cm7evsel_cm7evsel4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbff0L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel4_read();
	return evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel4_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel4_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL5_ADDR (CSR_BASE + -0x100bbfecL)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL5_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel5_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfecL));
}
static inline void evc_sfr_cm7evsel_cm7evsel5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfecL));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel5_read();
	return evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel5_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel5_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL6_ADDR (CSR_BASE + -0x100bbfe8L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL6_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel6_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfe8L));
}
static inline void evc_sfr_cm7evsel_cm7evsel6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfe8L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel6_read();
	return evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel6_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel6_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL7_ADDR (CSR_BASE + -0x100bbfe4L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL7_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel7_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfe4L));
}
static inline void evc_sfr_cm7evsel_cm7evsel7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfe4L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel7_read();
	return evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel7_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel7_write(newword);
}
#define CSR_EVC_SFR_CM7EVEN_ADDR (CSR_BASE + -0x100bbfe0L)
#define CSR_EVC_SFR_CM7EVEN_SIZE 1
static inline uint32_t evc_sfr_cm7even_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfe0L));
}
static inline void evc_sfr_cm7even_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfe0L));
}
#define CSR_EVC_SFR_CM7EVEN_CM7EVEN_OFFSET 0
#define CSR_EVC_SFR_CM7EVEN_CM7EVEN_SIZE 8
static inline uint32_t evc_sfr_cm7even_cm7even_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7even_cm7even_read(void) {
	uint32_t word = evc_sfr_cm7even_read();
	return evc_sfr_cm7even_cm7even_extract(word);
}
static inline uint32_t evc_sfr_cm7even_cm7even_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7even_cm7even_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7even_read();
	uint32_t newword = evc_sfr_cm7even_cm7even_replace(oldword, plain_value);
	evc_sfr_cm7even_write(newword);
}
#define CSR_EVC_SFR_CM7EVFR_ADDR (CSR_BASE + -0x100bbfdcL)
#define CSR_EVC_SFR_CM7EVFR_SIZE 1
static inline uint32_t evc_sfr_cm7evfr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfdcL));
}
#define CSR_EVC_SFR_CM7EVFR_CM7EVS_OFFSET 0
#define CSR_EVC_SFR_CM7EVFR_CM7EVS_SIZE 8
static inline uint32_t evc_sfr_cm7evfr_cm7evs_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evfr_cm7evs_read(void) {
	uint32_t word = evc_sfr_cm7evfr_read();
	return evc_sfr_cm7evfr_cm7evs_extract(word);
}
#define CSR_EVC_SFR_TMREVSEL_ADDR (CSR_BASE + -0x100bbfd0L)
#define CSR_EVC_SFR_TMREVSEL_SIZE 1
static inline uint32_t evc_sfr_tmrevsel_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfd0L));
}
static inline void evc_sfr_tmrevsel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfd0L));
}
#define CSR_EVC_SFR_TMREVSEL_TMR_EVSEL_OFFSET 0
#define CSR_EVC_SFR_TMREVSEL_TMR_EVSEL_SIZE 16
static inline uint32_t evc_sfr_tmrevsel_tmr_evsel_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_tmrevsel_tmr_evsel_read(void) {
	uint32_t word = evc_sfr_tmrevsel_read();
	return evc_sfr_tmrevsel_tmr_evsel_extract(word);
}
static inline uint32_t evc_sfr_tmrevsel_tmr_evsel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_tmrevsel_tmr_evsel_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_tmrevsel_read();
	uint32_t newword = evc_sfr_tmrevsel_tmr_evsel_replace(oldword, plain_value);
	evc_sfr_tmrevsel_write(newword);
}
#define CSR_EVC_SFR_PWMEVSEL_ADDR (CSR_BASE + -0x100bbfccL)
#define CSR_EVC_SFR_PWMEVSEL_SIZE 1
static inline uint32_t evc_sfr_pwmevsel_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfccL));
}
static inline void evc_sfr_pwmevsel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfccL));
}
#define CSR_EVC_SFR_PWMEVSEL_PWM_EVSEL_OFFSET 0
#define CSR_EVC_SFR_PWMEVSEL_PWM_EVSEL_SIZE 32
static inline uint32_t evc_sfr_pwmevsel_pwm_evsel_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_pwmevsel_pwm_evsel_read(void) {
	uint32_t word = evc_sfr_pwmevsel_read();
	return evc_sfr_pwmevsel_pwm_evsel_extract(word);
}
static inline uint32_t evc_sfr_pwmevsel_pwm_evsel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_pwmevsel_pwm_evsel_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_pwmevsel_read();
	uint32_t newword = evc_sfr_pwmevsel_pwm_evsel_replace(oldword, plain_value);
	evc_sfr_pwmevsel_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN0_ADDR (CSR_BASE + -0x100bbfc0L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN0_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfc0L));
}
static inline void evc_sfr_ifeven_ifeven0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfc0L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN0_IFEVEN0_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN0_IFEVEN0_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven0_ifeven0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven0_ifeven0_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven0_read();
	return evc_sfr_ifeven_ifeven0_ifeven0_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven0_ifeven0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven0_ifeven0_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven0_read();
	uint32_t newword = evc_sfr_ifeven_ifeven0_ifeven0_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven0_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN1_ADDR (CSR_BASE + -0x100bbfbcL)
#define CSR_EVC_SFR_IFEVEN_IFEVEN1_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfbcL));
}
static inline void evc_sfr_ifeven_ifeven1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfbcL));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN1_IFEVEN1_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN1_IFEVEN1_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven1_ifeven1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven1_ifeven1_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven1_read();
	return evc_sfr_ifeven_ifeven1_ifeven1_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven1_ifeven1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven1_ifeven1_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven1_read();
	uint32_t newword = evc_sfr_ifeven_ifeven1_ifeven1_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven1_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN2_ADDR (CSR_BASE + -0x100bbfb8L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN2_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfb8L));
}
static inline void evc_sfr_ifeven_ifeven2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfb8L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN2_IFEVEN2_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN2_IFEVEN2_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven2_ifeven2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven2_ifeven2_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven2_read();
	return evc_sfr_ifeven_ifeven2_ifeven2_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven2_ifeven2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven2_ifeven2_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven2_read();
	uint32_t newword = evc_sfr_ifeven_ifeven2_ifeven2_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven2_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN3_ADDR (CSR_BASE + -0x100bbfb4L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN3_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfb4L));
}
static inline void evc_sfr_ifeven_ifeven3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfb4L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN3_IFEVEN3_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN3_IFEVEN3_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven3_ifeven3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven3_ifeven3_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven3_read();
	return evc_sfr_ifeven_ifeven3_ifeven3_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven3_ifeven3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven3_ifeven3_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven3_read();
	uint32_t newword = evc_sfr_ifeven_ifeven3_ifeven3_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven3_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN4_ADDR (CSR_BASE + -0x100bbfb0L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN4_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven4_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfb0L));
}
static inline void evc_sfr_ifeven_ifeven4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfb0L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN4_IFEVEN4_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN4_IFEVEN4_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven4_ifeven4_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven4_ifeven4_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven4_read();
	return evc_sfr_ifeven_ifeven4_ifeven4_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven4_ifeven4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven4_ifeven4_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven4_read();
	uint32_t newword = evc_sfr_ifeven_ifeven4_ifeven4_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven4_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN5_ADDR (CSR_BASE + -0x100bbfacL)
#define CSR_EVC_SFR_IFEVEN_IFEVEN5_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven5_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfacL));
}
static inline void evc_sfr_ifeven_ifeven5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfacL));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN5_IFEVEN5_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN5_IFEVEN5_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven5_ifeven5_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven5_ifeven5_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven5_read();
	return evc_sfr_ifeven_ifeven5_ifeven5_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven5_ifeven5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven5_ifeven5_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven5_read();
	uint32_t newword = evc_sfr_ifeven_ifeven5_ifeven5_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven5_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN6_ADDR (CSR_BASE + -0x100bbfa8L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN6_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven6_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfa8L));
}
static inline void evc_sfr_ifeven_ifeven6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfa8L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN6_IFEVEN6_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN6_IFEVEN6_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven6_ifeven6_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven6_ifeven6_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven6_read();
	return evc_sfr_ifeven_ifeven6_ifeven6_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven6_ifeven6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven6_ifeven6_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven6_read();
	uint32_t newword = evc_sfr_ifeven_ifeven6_ifeven6_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven6_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN7_ADDR (CSR_BASE + -0x100bbfa4L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN7_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven7_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfa4L));
}
static inline void evc_sfr_ifeven_ifeven7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bbfa4L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN7_IFEVEN7_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN7_IFEVEN7_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven7_ifeven7_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven7_ifeven7_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven7_read();
	return evc_sfr_ifeven_ifeven7_ifeven7_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven7_ifeven7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven7_ifeven7_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven7_read();
	uint32_t newword = evc_sfr_ifeven_ifeven7_ifeven7_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven7_write(newword);
}
#define CSR_EVC_SFR_IFEVERRFR_ADDR (CSR_BASE + -0x100bbfa0L)
#define CSR_EVC_SFR_IFEVERRFR_SIZE 1
static inline uint32_t evc_sfr_ifeverrfr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbfa0L));
}
#define CSR_EVC_SFR_IFEVERRFR_IFEV_ERRS_OFFSET 0
#define CSR_EVC_SFR_IFEVERRFR_IFEV_ERRS_SIZE 32
static inline uint32_t evc_sfr_ifeverrfr_ifev_errs_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeverrfr_ifev_errs_read(void) {
	uint32_t word = evc_sfr_ifeverrfr_read();
	return evc_sfr_ifeverrfr_ifev_errs_extract(word);
}
#define CSR_EVC_SFR_CM7ERRFR_ADDR (CSR_BASE + -0x100bbf80L)
#define CSR_EVC_SFR_CM7ERRFR_SIZE 1
static inline uint32_t evc_sfr_cm7errfr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bbf80L));
}
#define CSR_EVC_SFR_CM7ERRFR_ERRIN_OFFSET 0
#define CSR_EVC_SFR_CM7ERRFR_ERRIN_SIZE 32
static inline uint32_t evc_sfr_cm7errfr_errin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7errfr_errin_read(void) {
	uint32_t word = evc_sfr_cm7errfr_read();
	return evc_sfr_cm7errfr_errin_extract(word);
}

/* sysctrl */
#define CSR_SYSCTRL_BASE (CSR_BASE + -0x100c0000L)
#define CSR_SYSCTRL_SFR_CGUSEC_ADDR (CSR_BASE + -0x100c0000L)
#define CSR_SYSCTRL_SFR_CGUSEC_SIZE 1
static inline uint32_t sysctrl_sfr_cgusec_read(void) {
	return csr_read_simple((CSR_BASE + -0x100c0000L));
}
static inline void sysctrl_sfr_cgusec_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100c0000L));
}
#define CSR_SYSCTRL_SFR_CGUSEC_SFR_CGUSEC_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUSEC_SFR_CGUSEC_SIZE 16
static inline uint32_t sysctrl_sfr_cgusec_sfr_cgusec_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgusec_sfr_cgusec_read(void) {
	uint32_t word = sysctrl_sfr_cgusec_read();
	return sysctrl_sfr_cgusec_sfr_cgusec_extract(word);
}
static inline uint32_t sysctrl_sfr_cgusec_sfr_cgusec_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgusec_sfr_cgusec_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgusec_read();
	uint32_t newword = sysctrl_sfr_cgusec_sfr_cgusec_replace(oldword, plain_value);
	sysctrl_sfr_cgusec_write(newword);
}
#define CSR_SYSCTRL_SFR_CGULP_ADDR (CSR_BASE + -0x100bfffcL)
#define CSR_SYSCTRL_SFR_CGULP_SIZE 1
static inline uint32_t sysctrl_sfr_cgulp_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bfffcL));
}
static inline void sysctrl_sfr_cgulp_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bfffcL));
}
#define CSR_SYSCTRL_SFR_CGULP_SFR_CGULP_OFFSET 0
#define CSR_SYSCTRL_SFR_CGULP_SFR_CGULP_SIZE 16
static inline uint32_t sysctrl_sfr_cgulp_sfr_cgulp_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgulp_sfr_cgulp_read(void) {
	uint32_t word = sysctrl_sfr_cgulp_read();
	return sysctrl_sfr_cgulp_sfr_cgulp_extract(word);
}
static inline uint32_t sysctrl_sfr_cgulp_sfr_cgulp_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgulp_sfr_cgulp_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgulp_read();
	uint32_t newword = sysctrl_sfr_cgulp_sfr_cgulp_replace(oldword, plain_value);
	sysctrl_sfr_cgulp_write(newword);
}
#define CSR_SYSCTRL_SFR_SEED_ADDR (CSR_BASE + -0x100bfff8L)
#define CSR_SYSCTRL_SFR_SEED_SIZE 1
static inline uint32_t sysctrl_sfr_seed_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bfff8L));
}
static inline void sysctrl_sfr_seed_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bfff8L));
}
#define CSR_SYSCTRL_SFR_SEED_SFR_SEED_OFFSET 0
#define CSR_SYSCTRL_SFR_SEED_SFR_SEED_SIZE 32
static inline uint32_t sysctrl_sfr_seed_sfr_seed_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_seed_sfr_seed_read(void) {
	uint32_t word = sysctrl_sfr_seed_read();
	return sysctrl_sfr_seed_sfr_seed_extract(word);
}
static inline uint32_t sysctrl_sfr_seed_sfr_seed_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_seed_sfr_seed_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_seed_read();
	uint32_t newword = sysctrl_sfr_seed_sfr_seed_replace(oldword, plain_value);
	sysctrl_sfr_seed_write(newword);
}
#define CSR_SYSCTRL_SFR_SEEDAR_ADDR (CSR_BASE + -0x100bfff4L)
#define CSR_SYSCTRL_SFR_SEEDAR_SIZE 1
static inline uint32_t sysctrl_sfr_seedar_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bfff4L));
}
static inline void sysctrl_sfr_seedar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bfff4L));
}
#define CSR_SYSCTRL_SFR_SEEDAR_SFR_SEEDAR_OFFSET 0
#define CSR_SYSCTRL_SFR_SEEDAR_SFR_SEEDAR_SIZE 32
static inline uint32_t sysctrl_sfr_seedar_sfr_seedar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_seedar_sfr_seedar_read(void) {
	uint32_t word = sysctrl_sfr_seedar_read();
	return sysctrl_sfr_seedar_sfr_seedar_extract(word);
}
static inline uint32_t sysctrl_sfr_seedar_sfr_seedar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_seedar_sfr_seedar_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_seedar_read();
	uint32_t newword = sysctrl_sfr_seedar_sfr_seedar_replace(oldword, plain_value);
	sysctrl_sfr_seedar_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUSEL0_ADDR (CSR_BASE + -0x100bfff0L)
#define CSR_SYSCTRL_SFR_CGUSEL0_SIZE 1
static inline uint32_t sysctrl_sfr_cgusel0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bfff0L));
}
static inline void sysctrl_sfr_cgusel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bfff0L));
}
#define CSR_SYSCTRL_SFR_CGUSEL0_SFR_CGUSEL0_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUSEL0_SFR_CGUSEL0_SIZE 2
static inline uint32_t sysctrl_sfr_cgusel0_sfr_cgusel0_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgusel0_sfr_cgusel0_read(void) {
	uint32_t word = sysctrl_sfr_cgusel0_read();
	return sysctrl_sfr_cgusel0_sfr_cgusel0_extract(word);
}
static inline uint32_t sysctrl_sfr_cgusel0_sfr_cgusel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgusel0_sfr_cgusel0_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgusel0_read();
	uint32_t newword = sysctrl_sfr_cgusel0_sfr_cgusel0_replace(oldword, plain_value);
	sysctrl_sfr_cgusel0_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_0_ADDR (CSR_BASE + -0x100bffecL)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_0_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffecL));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffecL));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_0_CFGFDCR_0_4_0_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_0_CFGFDCR_0_4_0_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_0_cfgfdcr_0_4_0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_0_cfgfdcr_0_4_0_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr_0_4_0_read();
	return sysctrl_sfr_cgufd_cfgfdcr_0_4_0_cfgfdcr_0_4_0_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_0_cfgfdcr_0_4_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_0_cfgfdcr_0_4_0_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr_0_4_0_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr_0_4_0_cfgfdcr_0_4_0_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr_0_4_0_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_1_ADDR (CSR_BASE + -0x100bffe8L)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_1_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffe8L));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffe8L));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_1_CFGFDCR_0_4_1_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_1_CFGFDCR_0_4_1_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_1_cfgfdcr_0_4_1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_1_cfgfdcr_0_4_1_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr_0_4_1_read();
	return sysctrl_sfr_cgufd_cfgfdcr_0_4_1_cfgfdcr_0_4_1_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_1_cfgfdcr_0_4_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_1_cfgfdcr_0_4_1_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr_0_4_1_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr_0_4_1_cfgfdcr_0_4_1_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr_0_4_1_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_2_ADDR (CSR_BASE + -0x100bffe4L)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_2_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffe4L));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffe4L));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_2_CFGFDCR_0_4_2_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_2_CFGFDCR_0_4_2_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_2_cfgfdcr_0_4_2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_2_cfgfdcr_0_4_2_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr_0_4_2_read();
	return sysctrl_sfr_cgufd_cfgfdcr_0_4_2_cfgfdcr_0_4_2_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_2_cfgfdcr_0_4_2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_2_cfgfdcr_0_4_2_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr_0_4_2_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr_0_4_2_cfgfdcr_0_4_2_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr_0_4_2_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_3_ADDR (CSR_BASE + -0x100bffe0L)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_3_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffe0L));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffe0L));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_3_CFGFDCR_0_4_3_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_3_CFGFDCR_0_4_3_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_3_cfgfdcr_0_4_3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_3_cfgfdcr_0_4_3_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr_0_4_3_read();
	return sysctrl_sfr_cgufd_cfgfdcr_0_4_3_cfgfdcr_0_4_3_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_3_cfgfdcr_0_4_3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_3_cfgfdcr_0_4_3_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr_0_4_3_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr_0_4_3_cfgfdcr_0_4_3_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr_0_4_3_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_4_ADDR (CSR_BASE + -0x100bffdcL)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_4_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_4_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffdcL));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffdcL));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_4_CFGFDCR_0_4_4_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR_0_4_4_CFGFDCR_0_4_4_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_4_cfgfdcr_0_4_4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_4_cfgfdcr_0_4_4_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr_0_4_4_read();
	return sysctrl_sfr_cgufd_cfgfdcr_0_4_4_cfgfdcr_0_4_4_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr_0_4_4_cfgfdcr_0_4_4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr_0_4_4_cfgfdcr_0_4_4_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr_0_4_4_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr_0_4_4_cfgfdcr_0_4_4_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr_0_4_4_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFDAO_ADDR (CSR_BASE + -0x100bffd8L)
#define CSR_SYSCTRL_SFR_CGUFDAO_SIZE 1
static inline uint32_t sysctrl_sfr_cgufdao_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffd8L));
}
static inline void sysctrl_sfr_cgufdao_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffd8L));
}
#define CSR_SYSCTRL_SFR_CGUFDAO_CFGFDCR_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFDAO_CFGFDCR_SIZE 16
static inline uint32_t sysctrl_sfr_cgufdao_cfgfdcr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufdao_cfgfdcr_read(void) {
	uint32_t word = sysctrl_sfr_cgufdao_read();
	return sysctrl_sfr_cgufdao_cfgfdcr_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufdao_cfgfdcr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufdao_cfgfdcr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufdao_read();
	uint32_t newword = sysctrl_sfr_cgufdao_cfgfdcr_replace(oldword, plain_value);
	sysctrl_sfr_cgufdao_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUSET_ADDR (CSR_BASE + -0x100bffd4L)
#define CSR_SYSCTRL_SFR_CGUSET_SIZE 1
static inline uint32_t sysctrl_sfr_cguset_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffd4L));
}
static inline void sysctrl_sfr_cguset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffd4L));
}
#define CSR_SYSCTRL_SFR_CGUSET_SFR_CGUSET_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUSET_SFR_CGUSET_SIZE 32
static inline uint32_t sysctrl_sfr_cguset_sfr_cguset_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cguset_sfr_cguset_read(void) {
	uint32_t word = sysctrl_sfr_cguset_read();
	return sysctrl_sfr_cguset_sfr_cguset_extract(word);
}
static inline uint32_t sysctrl_sfr_cguset_sfr_cguset_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cguset_sfr_cguset_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cguset_read();
	uint32_t newword = sysctrl_sfr_cguset_sfr_cguset_replace(oldword, plain_value);
	sysctrl_sfr_cguset_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUSEL1_ADDR (CSR_BASE + -0x100bffd0L)
#define CSR_SYSCTRL_SFR_CGUSEL1_SIZE 1
static inline uint32_t sysctrl_sfr_cgusel1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffd0L));
}
static inline void sysctrl_sfr_cgusel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffd0L));
}
#define CSR_SYSCTRL_SFR_CGUSEL1_SFR_CGUSEL1_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUSEL1_SFR_CGUSEL1_SIZE 1
static inline uint32_t sysctrl_sfr_cgusel1_sfr_cgusel1_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgusel1_sfr_cgusel1_read(void) {
	uint32_t word = sysctrl_sfr_cgusel1_read();
	return sysctrl_sfr_cgusel1_sfr_cgusel1_extract(word);
}
static inline uint32_t sysctrl_sfr_cgusel1_sfr_cgusel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgusel1_sfr_cgusel1_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgusel1_read();
	uint32_t newword = sysctrl_sfr_cgusel1_sfr_cgusel1_replace(oldword, plain_value);
	sysctrl_sfr_cgusel1_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFDPKE_ADDR (CSR_BASE + -0x100bffccL)
#define CSR_SYSCTRL_SFR_CGUFDPKE_SIZE 1
static inline uint32_t sysctrl_sfr_cgufdpke_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffccL));
}
static inline void sysctrl_sfr_cgufdpke_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffccL));
}
#define CSR_SYSCTRL_SFR_CGUFDPKE_SFR_CGUFDPKE_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFDPKE_SFR_CGUFDPKE_SIZE 9
static inline uint32_t sysctrl_sfr_cgufdpke_sfr_cgufdpke_extract(uint32_t oldword) {
	uint32_t mask = 0x1ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufdpke_sfr_cgufdpke_read(void) {
	uint32_t word = sysctrl_sfr_cgufdpke_read();
	return sysctrl_sfr_cgufdpke_sfr_cgufdpke_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufdpke_sfr_cgufdpke_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufdpke_sfr_cgufdpke_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufdpke_read();
	uint32_t newword = sysctrl_sfr_cgufdpke_sfr_cgufdpke_replace(oldword, plain_value);
	sysctrl_sfr_cgufdpke_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ0_ADDR (CSR_BASE + -0x100bffc0L)
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ0_SIZE 1
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffc0L));
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ0_FSFREQ0_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ0_FSFREQ0_SIZE 16
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq0_fsfreq0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq0_fsfreq0_read(void) {
	uint32_t word = sysctrl_sfr_cgufssr_fsfreq0_read();
	return sysctrl_sfr_cgufssr_fsfreq0_fsfreq0_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ1_ADDR (CSR_BASE + -0x100bffbcL)
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ1_SIZE 1
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffbcL));
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ1_FSFREQ1_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ1_FSFREQ1_SIZE 16
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq1_fsfreq1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq1_fsfreq1_read(void) {
	uint32_t word = sysctrl_sfr_cgufssr_fsfreq1_read();
	return sysctrl_sfr_cgufssr_fsfreq1_fsfreq1_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ2_ADDR (CSR_BASE + -0x100bffb8L)
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ2_SIZE 1
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffb8L));
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ2_FSFREQ2_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ2_FSFREQ2_SIZE 16
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq2_fsfreq2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq2_fsfreq2_read(void) {
	uint32_t word = sysctrl_sfr_cgufssr_fsfreq2_read();
	return sysctrl_sfr_cgufssr_fsfreq2_fsfreq2_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ3_ADDR (CSR_BASE + -0x100bffb4L)
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ3_SIZE 1
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffb4L));
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ3_FSFREQ3_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ3_FSFREQ3_SIZE 16
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq3_fsfreq3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq3_fsfreq3_read(void) {
	uint32_t word = sysctrl_sfr_cgufssr_fsfreq3_read();
	return sysctrl_sfr_cgufssr_fsfreq3_fsfreq3_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSVLD_ADDR (CSR_BASE + -0x100bffb0L)
#define CSR_SYSCTRL_SFR_CGUFSVLD_SIZE 1
static inline uint32_t sysctrl_sfr_cgufsvld_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffb0L));
}
#define CSR_SYSCTRL_SFR_CGUFSVLD_SFR_CGUFSVLD_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSVLD_SFR_CGUFSVLD_SIZE 4
static inline uint32_t sysctrl_sfr_cgufsvld_sfr_cgufsvld_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufsvld_sfr_cgufsvld_read(void) {
	uint32_t word = sysctrl_sfr_cgufsvld_read();
	return sysctrl_sfr_cgufsvld_sfr_cgufsvld_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSCR_ADDR (CSR_BASE + -0x100bffacL)
#define CSR_SYSCTRL_SFR_CGUFSCR_SIZE 1
static inline uint32_t sysctrl_sfr_cgufscr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffacL));
}
static inline void sysctrl_sfr_cgufscr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffacL));
}
#define CSR_SYSCTRL_SFR_CGUFSCR_SFR_CGUFSCR_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSCR_SFR_CGUFSCR_SIZE 16
static inline uint32_t sysctrl_sfr_cgufscr_sfr_cgufscr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufscr_sfr_cgufscr_read(void) {
	uint32_t word = sysctrl_sfr_cgufscr_read();
	return sysctrl_sfr_cgufscr_sfr_cgufscr_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufscr_sfr_cgufscr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufscr_sfr_cgufscr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufscr_read();
	uint32_t newword = sysctrl_sfr_cgufscr_sfr_cgufscr_replace(oldword, plain_value);
	sysctrl_sfr_cgufscr_write(newword);
}
#define CSR_SYSCTRL_SFR_ACLKGR_ADDR (CSR_BASE + -0x100bffa0L)
#define CSR_SYSCTRL_SFR_ACLKGR_SIZE 1
static inline uint32_t sysctrl_sfr_aclkgr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bffa0L));
}
static inline void sysctrl_sfr_aclkgr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bffa0L));
}
#define CSR_SYSCTRL_SFR_ACLKGR_SFR_ACLKGR_OFFSET 0
#define CSR_SYSCTRL_SFR_ACLKGR_SFR_ACLKGR_SIZE 8
static inline uint32_t sysctrl_sfr_aclkgr_sfr_aclkgr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_aclkgr_sfr_aclkgr_read(void) {
	uint32_t word = sysctrl_sfr_aclkgr_read();
	return sysctrl_sfr_aclkgr_sfr_aclkgr_extract(word);
}
static inline uint32_t sysctrl_sfr_aclkgr_sfr_aclkgr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_aclkgr_sfr_aclkgr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_aclkgr_read();
	uint32_t newword = sysctrl_sfr_aclkgr_sfr_aclkgr_replace(oldword, plain_value);
	sysctrl_sfr_aclkgr_write(newword);
}
#define CSR_SYSCTRL_SFR_HCLKGR_ADDR (CSR_BASE + -0x100bff9cL)
#define CSR_SYSCTRL_SFR_HCLKGR_SIZE 1
static inline uint32_t sysctrl_sfr_hclkgr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff9cL));
}
static inline void sysctrl_sfr_hclkgr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff9cL));
}
#define CSR_SYSCTRL_SFR_HCLKGR_SFR_HCLKGR_OFFSET 0
#define CSR_SYSCTRL_SFR_HCLKGR_SFR_HCLKGR_SIZE 8
static inline uint32_t sysctrl_sfr_hclkgr_sfr_hclkgr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_hclkgr_sfr_hclkgr_read(void) {
	uint32_t word = sysctrl_sfr_hclkgr_read();
	return sysctrl_sfr_hclkgr_sfr_hclkgr_extract(word);
}
static inline uint32_t sysctrl_sfr_hclkgr_sfr_hclkgr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_hclkgr_sfr_hclkgr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_hclkgr_read();
	uint32_t newword = sysctrl_sfr_hclkgr_sfr_hclkgr_replace(oldword, plain_value);
	sysctrl_sfr_hclkgr_write(newword);
}
#define CSR_SYSCTRL_SFR_ICLKGR_ADDR (CSR_BASE + -0x100bff98L)
#define CSR_SYSCTRL_SFR_ICLKGR_SIZE 1
static inline uint32_t sysctrl_sfr_iclkgr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff98L));
}
static inline void sysctrl_sfr_iclkgr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff98L));
}
#define CSR_SYSCTRL_SFR_ICLKGR_SFR_ICLKGR_OFFSET 0
#define CSR_SYSCTRL_SFR_ICLKGR_SFR_ICLKGR_SIZE 8
static inline uint32_t sysctrl_sfr_iclkgr_sfr_iclkgr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_iclkgr_sfr_iclkgr_read(void) {
	uint32_t word = sysctrl_sfr_iclkgr_read();
	return sysctrl_sfr_iclkgr_sfr_iclkgr_extract(word);
}
static inline uint32_t sysctrl_sfr_iclkgr_sfr_iclkgr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_iclkgr_sfr_iclkgr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_iclkgr_read();
	uint32_t newword = sysctrl_sfr_iclkgr_sfr_iclkgr_replace(oldword, plain_value);
	sysctrl_sfr_iclkgr_write(newword);
}
#define CSR_SYSCTRL_SFR_PCLKGR_ADDR (CSR_BASE + -0x100bff94L)
#define CSR_SYSCTRL_SFR_PCLKGR_SIZE 1
static inline uint32_t sysctrl_sfr_pclkgr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff94L));
}
static inline void sysctrl_sfr_pclkgr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff94L));
}
#define CSR_SYSCTRL_SFR_PCLKGR_SFR_PCLKGR_OFFSET 0
#define CSR_SYSCTRL_SFR_PCLKGR_SFR_PCLKGR_SIZE 8
static inline uint32_t sysctrl_sfr_pclkgr_sfr_pclkgr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_pclkgr_sfr_pclkgr_read(void) {
	uint32_t word = sysctrl_sfr_pclkgr_read();
	return sysctrl_sfr_pclkgr_sfr_pclkgr_extract(word);
}
static inline uint32_t sysctrl_sfr_pclkgr_sfr_pclkgr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_pclkgr_sfr_pclkgr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_pclkgr_read();
	uint32_t newword = sysctrl_sfr_pclkgr_sfr_pclkgr_replace(oldword, plain_value);
	sysctrl_sfr_pclkgr_write(newword);
}
#define CSR_SYSCTRL_SFR_RCURST0_ADDR (CSR_BASE + -0x100bff80L)
#define CSR_SYSCTRL_SFR_RCURST0_SIZE 1
static inline uint32_t sysctrl_sfr_rcurst0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff80L));
}
static inline void sysctrl_sfr_rcurst0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff80L));
}
#define CSR_SYSCTRL_SFR_RCURST0_SFR_RCURST0_OFFSET 0
#define CSR_SYSCTRL_SFR_RCURST0_SFR_RCURST0_SIZE 32
static inline uint32_t sysctrl_sfr_rcurst0_sfr_rcurst0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_rcurst0_sfr_rcurst0_read(void) {
	uint32_t word = sysctrl_sfr_rcurst0_read();
	return sysctrl_sfr_rcurst0_sfr_rcurst0_extract(word);
}
static inline uint32_t sysctrl_sfr_rcurst0_sfr_rcurst0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_rcurst0_sfr_rcurst0_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_rcurst0_read();
	uint32_t newword = sysctrl_sfr_rcurst0_sfr_rcurst0_replace(oldword, plain_value);
	sysctrl_sfr_rcurst0_write(newword);
}
#define CSR_SYSCTRL_SFR_RCURST1_ADDR (CSR_BASE + -0x100bff7cL)
#define CSR_SYSCTRL_SFR_RCURST1_SIZE 1
static inline uint32_t sysctrl_sfr_rcurst1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff7cL));
}
static inline void sysctrl_sfr_rcurst1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff7cL));
}
#define CSR_SYSCTRL_SFR_RCURST1_SFR_RCURST1_OFFSET 0
#define CSR_SYSCTRL_SFR_RCURST1_SFR_RCURST1_SIZE 32
static inline uint32_t sysctrl_sfr_rcurst1_sfr_rcurst1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_rcurst1_sfr_rcurst1_read(void) {
	uint32_t word = sysctrl_sfr_rcurst1_read();
	return sysctrl_sfr_rcurst1_sfr_rcurst1_extract(word);
}
static inline uint32_t sysctrl_sfr_rcurst1_sfr_rcurst1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_rcurst1_sfr_rcurst1_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_rcurst1_read();
	uint32_t newword = sysctrl_sfr_rcurst1_sfr_rcurst1_replace(oldword, plain_value);
	sysctrl_sfr_rcurst1_write(newword);
}
#define CSR_SYSCTRL_SFR_RCUSRCFR_ADDR (CSR_BASE + -0x100bff78L)
#define CSR_SYSCTRL_SFR_RCUSRCFR_SIZE 1
static inline uint32_t sysctrl_sfr_rcusrcfr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff78L));
}
#define CSR_SYSCTRL_SFR_RCUSRCFR_SFR_RCUSRCFR_OFFSET 0
#define CSR_SYSCTRL_SFR_RCUSRCFR_SFR_RCUSRCFR_SIZE 16
static inline uint32_t sysctrl_sfr_rcusrcfr_sfr_rcusrcfr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_rcusrcfr_sfr_rcusrcfr_read(void) {
	uint32_t word = sysctrl_sfr_rcusrcfr_read();
	return sysctrl_sfr_rcusrcfr_sfr_rcusrcfr_extract(word);
}
#define CSR_SYSCTRL_SFR_IPCARIPFLOW_ADDR (CSR_BASE + -0x100bff70L)
#define CSR_SYSCTRL_SFR_IPCARIPFLOW_SIZE 1
static inline uint32_t sysctrl_sfr_ipcaripflow_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff70L));
}
static inline void sysctrl_sfr_ipcaripflow_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff70L));
}
#define CSR_SYSCTRL_SFR_IPCARIPFLOW_SFR_IPCARIPFLOW_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCARIPFLOW_SFR_IPCARIPFLOW_SIZE 32
static inline uint32_t sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_read(void) {
	uint32_t word = sysctrl_sfr_ipcaripflow_read();
	return sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcaripflow_read();
	uint32_t newword = sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_replace(oldword, plain_value);
	sysctrl_sfr_ipcaripflow_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCEN_ADDR (CSR_BASE + -0x100bff6cL)
#define CSR_SYSCTRL_SFR_IPCEN_SIZE 1
static inline uint32_t sysctrl_sfr_ipcen_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff6cL));
}
static inline void sysctrl_sfr_ipcen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff6cL));
}
#define CSR_SYSCTRL_SFR_IPCEN_SFR_IPCEN_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCEN_SFR_IPCEN_SIZE 16
static inline uint32_t sysctrl_sfr_ipcen_sfr_ipcen_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcen_sfr_ipcen_read(void) {
	uint32_t word = sysctrl_sfr_ipcen_read();
	return sysctrl_sfr_ipcen_sfr_ipcen_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcen_sfr_ipcen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcen_sfr_ipcen_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcen_read();
	uint32_t newword = sysctrl_sfr_ipcen_sfr_ipcen_replace(oldword, plain_value);
	sysctrl_sfr_ipcen_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCLPEN_ADDR (CSR_BASE + -0x100bff68L)
#define CSR_SYSCTRL_SFR_IPCLPEN_SIZE 1
static inline uint32_t sysctrl_sfr_ipclpen_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff68L));
}
static inline void sysctrl_sfr_ipclpen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff68L));
}
#define CSR_SYSCTRL_SFR_IPCLPEN_SFR_IPCLPEN_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCLPEN_SFR_IPCLPEN_SIZE 16
static inline uint32_t sysctrl_sfr_ipclpen_sfr_ipclpen_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipclpen_sfr_ipclpen_read(void) {
	uint32_t word = sysctrl_sfr_ipclpen_read();
	return sysctrl_sfr_ipclpen_sfr_ipclpen_extract(word);
}
static inline uint32_t sysctrl_sfr_ipclpen_sfr_ipclpen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipclpen_sfr_ipclpen_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipclpen_read();
	uint32_t newword = sysctrl_sfr_ipclpen_sfr_ipclpen_replace(oldword, plain_value);
	sysctrl_sfr_ipclpen_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCOSC_ADDR (CSR_BASE + -0x100bff64L)
#define CSR_SYSCTRL_SFR_IPCOSC_SIZE 1
static inline uint32_t sysctrl_sfr_ipcosc_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff64L));
}
#define CSR_SYSCTRL_SFR_IPCOSC_SFR_IPCOSC_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCOSC_SFR_IPCOSC_SIZE 7
static inline uint32_t sysctrl_sfr_ipcosc_sfr_ipcosc_extract(uint32_t oldword) {
	uint32_t mask = 0x7f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcosc_sfr_ipcosc_read(void) {
	uint32_t word = sysctrl_sfr_ipcosc_read();
	return sysctrl_sfr_ipcosc_sfr_ipcosc_extract(word);
}
#define CSR_SYSCTRL_SFR_IPCPLLMN_ADDR (CSR_BASE + -0x100bff60L)
#define CSR_SYSCTRL_SFR_IPCPLLMN_SIZE 1
static inline uint32_t sysctrl_sfr_ipcpllmn_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff60L));
}
static inline void sysctrl_sfr_ipcpllmn_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff60L));
}
#define CSR_SYSCTRL_SFR_IPCPLLMN_SFR_IPCPLLMN_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCPLLMN_SFR_IPCPLLMN_SIZE 17
static inline uint32_t sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_read(void) {
	uint32_t word = sysctrl_sfr_ipcpllmn_read();
	return sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcpllmn_read();
	uint32_t newword = sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_replace(oldword, plain_value);
	sysctrl_sfr_ipcpllmn_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCPLLF_ADDR (CSR_BASE + -0x100bff5cL)
#define CSR_SYSCTRL_SFR_IPCPLLF_SIZE 1
static inline uint32_t sysctrl_sfr_ipcpllf_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff5cL));
}
static inline void sysctrl_sfr_ipcpllf_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff5cL));
}
#define CSR_SYSCTRL_SFR_IPCPLLF_SFR_IPCPLLF_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCPLLF_SFR_IPCPLLF_SIZE 25
static inline uint32_t sysctrl_sfr_ipcpllf_sfr_ipcpllf_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcpllf_sfr_ipcpllf_read(void) {
	uint32_t word = sysctrl_sfr_ipcpllf_read();
	return sysctrl_sfr_ipcpllf_sfr_ipcpllf_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcpllf_sfr_ipcpllf_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcpllf_sfr_ipcpllf_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcpllf_read();
	uint32_t newword = sysctrl_sfr_ipcpllf_sfr_ipcpllf_replace(oldword, plain_value);
	sysctrl_sfr_ipcpllf_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCPLLQ_ADDR (CSR_BASE + -0x100bff58L)
#define CSR_SYSCTRL_SFR_IPCPLLQ_SIZE 1
static inline uint32_t sysctrl_sfr_ipcpllq_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff58L));
}
static inline void sysctrl_sfr_ipcpllq_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff58L));
}
#define CSR_SYSCTRL_SFR_IPCPLLQ_SFR_IPCPLLQ_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCPLLQ_SFR_IPCPLLQ_SIZE 15
static inline uint32_t sysctrl_sfr_ipcpllq_sfr_ipcpllq_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcpllq_sfr_ipcpllq_read(void) {
	uint32_t word = sysctrl_sfr_ipcpllq_read();
	return sysctrl_sfr_ipcpllq_sfr_ipcpllq_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcpllq_sfr_ipcpllq_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcpllq_sfr_ipcpllq_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcpllq_read();
	uint32_t newword = sysctrl_sfr_ipcpllq_sfr_ipcpllq_replace(oldword, plain_value);
	sysctrl_sfr_ipcpllq_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCCR_ADDR (CSR_BASE + -0x100bff54L)
#define CSR_SYSCTRL_SFR_IPCCR_SIZE 1
static inline uint32_t sysctrl_sfr_ipccr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100bff54L));
}
static inline void sysctrl_sfr_ipccr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100bff54L));
}
#define CSR_SYSCTRL_SFR_IPCCR_SFR_IPCCR_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCCR_SFR_IPCCR_SIZE 16
static inline uint32_t sysctrl_sfr_ipccr_sfr_ipccr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipccr_sfr_ipccr_read(void) {
	uint32_t word = sysctrl_sfr_ipccr_read();
	return sysctrl_sfr_ipccr_sfr_ipccr_extract(word);
}
static inline uint32_t sysctrl_sfr_ipccr_sfr_ipccr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipccr_sfr_ipccr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipccr_read();
	uint32_t newword = sysctrl_sfr_ipccr_sfr_ipccr_replace(oldword, plain_value);
	sysctrl_sfr_ipccr_write(newword);
}

/* apb_thru */
#define CSR_APB_THRU_BASE (CSR_BASE + 0x22000L)

/* iox */
#define CSR_IOX_BASE (CSR_BASE + 0x2f000L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL0_ADDR (CSR_BASE + 0x2f000L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL0_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f000L));
}
static inline void iox_sfr_afsel_crafsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f000L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL0_CRAFSEL0_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL0_CRAFSEL0_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel0_crafsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel0_crafsel0_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel0_read();
	return iox_sfr_afsel_crafsel0_crafsel0_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel0_crafsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel0_crafsel0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel0_read();
	uint32_t newword = iox_sfr_afsel_crafsel0_crafsel0_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel0_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL1_ADDR (CSR_BASE + 0x2f004L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL1_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f004L));
}
static inline void iox_sfr_afsel_crafsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f004L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL1_CRAFSEL1_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL1_CRAFSEL1_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel1_crafsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel1_crafsel1_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel1_read();
	return iox_sfr_afsel_crafsel1_crafsel1_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel1_crafsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel1_crafsel1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel1_read();
	uint32_t newword = iox_sfr_afsel_crafsel1_crafsel1_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel1_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL2_ADDR (CSR_BASE + 0x2f008L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL2_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f008L));
}
static inline void iox_sfr_afsel_crafsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f008L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL2_CRAFSEL2_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL2_CRAFSEL2_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel2_crafsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel2_crafsel2_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel2_read();
	return iox_sfr_afsel_crafsel2_crafsel2_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel2_crafsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel2_crafsel2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel2_read();
	uint32_t newword = iox_sfr_afsel_crafsel2_crafsel2_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel2_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL3_ADDR (CSR_BASE + 0x2f00cL)
#define CSR_IOX_SFR_AFSEL_CRAFSEL3_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f00cL));
}
static inline void iox_sfr_afsel_crafsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f00cL));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL3_CRAFSEL3_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL3_CRAFSEL3_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel3_crafsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel3_crafsel3_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel3_read();
	return iox_sfr_afsel_crafsel3_crafsel3_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel3_crafsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel3_crafsel3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel3_read();
	uint32_t newword = iox_sfr_afsel_crafsel3_crafsel3_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel3_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL4_ADDR (CSR_BASE + 0x2f010L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL4_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f010L));
}
static inline void iox_sfr_afsel_crafsel4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f010L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL4_CRAFSEL4_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL4_CRAFSEL4_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel4_crafsel4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel4_crafsel4_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel4_read();
	return iox_sfr_afsel_crafsel4_crafsel4_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel4_crafsel4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel4_crafsel4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel4_read();
	uint32_t newword = iox_sfr_afsel_crafsel4_crafsel4_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel4_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL5_ADDR (CSR_BASE + 0x2f014L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL5_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f014L));
}
static inline void iox_sfr_afsel_crafsel5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f014L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL5_CRAFSEL5_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL5_CRAFSEL5_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel5_crafsel5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel5_crafsel5_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel5_read();
	return iox_sfr_afsel_crafsel5_crafsel5_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel5_crafsel5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel5_crafsel5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel5_read();
	uint32_t newword = iox_sfr_afsel_crafsel5_crafsel5_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel5_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL6_ADDR (CSR_BASE + 0x2f018L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL6_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel6_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f018L));
}
static inline void iox_sfr_afsel_crafsel6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f018L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL6_CRAFSEL6_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL6_CRAFSEL6_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel6_crafsel6_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel6_crafsel6_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel6_read();
	return iox_sfr_afsel_crafsel6_crafsel6_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel6_crafsel6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel6_crafsel6_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel6_read();
	uint32_t newword = iox_sfr_afsel_crafsel6_crafsel6_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel6_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL7_ADDR (CSR_BASE + 0x2f01cL)
#define CSR_IOX_SFR_AFSEL_CRAFSEL7_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel7_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f01cL));
}
static inline void iox_sfr_afsel_crafsel7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f01cL));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL7_CRAFSEL7_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL7_CRAFSEL7_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel7_crafsel7_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel7_crafsel7_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel7_read();
	return iox_sfr_afsel_crafsel7_crafsel7_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel7_crafsel7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel7_crafsel7_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel7_read();
	uint32_t newword = iox_sfr_afsel_crafsel7_crafsel7_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel7_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL8_ADDR (CSR_BASE + 0x2f020L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL8_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel8_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f020L));
}
static inline void iox_sfr_afsel_crafsel8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f020L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL8_CRAFSEL8_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL8_CRAFSEL8_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel8_crafsel8_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel8_crafsel8_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel8_read();
	return iox_sfr_afsel_crafsel8_crafsel8_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel8_crafsel8_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel8_crafsel8_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel8_read();
	uint32_t newword = iox_sfr_afsel_crafsel8_crafsel8_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel8_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL9_ADDR (CSR_BASE + 0x2f024L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL9_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel9_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f024L));
}
static inline void iox_sfr_afsel_crafsel9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f024L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL9_CRAFSEL9_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL9_CRAFSEL9_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel9_crafsel9_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel9_crafsel9_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel9_read();
	return iox_sfr_afsel_crafsel9_crafsel9_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel9_crafsel9_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel9_crafsel9_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel9_read();
	uint32_t newword = iox_sfr_afsel_crafsel9_crafsel9_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel9_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL10_ADDR (CSR_BASE + 0x2f028L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL10_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel10_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f028L));
}
static inline void iox_sfr_afsel_crafsel10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f028L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL10_CRAFSEL10_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL10_CRAFSEL10_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel10_crafsel10_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel10_crafsel10_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel10_read();
	return iox_sfr_afsel_crafsel10_crafsel10_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel10_crafsel10_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel10_crafsel10_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel10_read();
	uint32_t newword = iox_sfr_afsel_crafsel10_crafsel10_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel10_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL11_ADDR (CSR_BASE + 0x2f02cL)
#define CSR_IOX_SFR_AFSEL_CRAFSEL11_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel11_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f02cL));
}
static inline void iox_sfr_afsel_crafsel11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f02cL));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL11_CRAFSEL11_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL11_CRAFSEL11_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel11_crafsel11_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel11_crafsel11_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel11_read();
	return iox_sfr_afsel_crafsel11_crafsel11_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel11_crafsel11_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel11_crafsel11_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel11_read();
	uint32_t newword = iox_sfr_afsel_crafsel11_crafsel11_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel11_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT0_ADDR (CSR_BASE + 0x2f100L)
#define CSR_IOX_SFR_INTCR_CRINT0_SIZE 1
static inline uint32_t iox_sfr_intcr_crint0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f100L));
}
static inline void iox_sfr_intcr_crint0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f100L));
}
#define CSR_IOX_SFR_INTCR_CRINT0_CRINT0_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT0_CRINT0_SIZE 10
static inline uint32_t iox_sfr_intcr_crint0_crint0_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint0_crint0_read(void) {
	uint32_t word = iox_sfr_intcr_crint0_read();
	return iox_sfr_intcr_crint0_crint0_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint0_crint0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint0_crint0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint0_read();
	uint32_t newword = iox_sfr_intcr_crint0_crint0_replace(oldword, plain_value);
	iox_sfr_intcr_crint0_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT1_ADDR (CSR_BASE + 0x2f104L)
#define CSR_IOX_SFR_INTCR_CRINT1_SIZE 1
static inline uint32_t iox_sfr_intcr_crint1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f104L));
}
static inline void iox_sfr_intcr_crint1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f104L));
}
#define CSR_IOX_SFR_INTCR_CRINT1_CRINT1_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT1_CRINT1_SIZE 10
static inline uint32_t iox_sfr_intcr_crint1_crint1_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint1_crint1_read(void) {
	uint32_t word = iox_sfr_intcr_crint1_read();
	return iox_sfr_intcr_crint1_crint1_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint1_crint1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint1_crint1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint1_read();
	uint32_t newword = iox_sfr_intcr_crint1_crint1_replace(oldword, plain_value);
	iox_sfr_intcr_crint1_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT2_ADDR (CSR_BASE + 0x2f108L)
#define CSR_IOX_SFR_INTCR_CRINT2_SIZE 1
static inline uint32_t iox_sfr_intcr_crint2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f108L));
}
static inline void iox_sfr_intcr_crint2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f108L));
}
#define CSR_IOX_SFR_INTCR_CRINT2_CRINT2_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT2_CRINT2_SIZE 10
static inline uint32_t iox_sfr_intcr_crint2_crint2_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint2_crint2_read(void) {
	uint32_t word = iox_sfr_intcr_crint2_read();
	return iox_sfr_intcr_crint2_crint2_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint2_crint2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint2_crint2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint2_read();
	uint32_t newword = iox_sfr_intcr_crint2_crint2_replace(oldword, plain_value);
	iox_sfr_intcr_crint2_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT3_ADDR (CSR_BASE + 0x2f10cL)
#define CSR_IOX_SFR_INTCR_CRINT3_SIZE 1
static inline uint32_t iox_sfr_intcr_crint3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f10cL));
}
static inline void iox_sfr_intcr_crint3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f10cL));
}
#define CSR_IOX_SFR_INTCR_CRINT3_CRINT3_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT3_CRINT3_SIZE 10
static inline uint32_t iox_sfr_intcr_crint3_crint3_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint3_crint3_read(void) {
	uint32_t word = iox_sfr_intcr_crint3_read();
	return iox_sfr_intcr_crint3_crint3_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint3_crint3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint3_crint3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint3_read();
	uint32_t newword = iox_sfr_intcr_crint3_crint3_replace(oldword, plain_value);
	iox_sfr_intcr_crint3_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT4_ADDR (CSR_BASE + 0x2f110L)
#define CSR_IOX_SFR_INTCR_CRINT4_SIZE 1
static inline uint32_t iox_sfr_intcr_crint4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f110L));
}
static inline void iox_sfr_intcr_crint4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f110L));
}
#define CSR_IOX_SFR_INTCR_CRINT4_CRINT4_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT4_CRINT4_SIZE 10
static inline uint32_t iox_sfr_intcr_crint4_crint4_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint4_crint4_read(void) {
	uint32_t word = iox_sfr_intcr_crint4_read();
	return iox_sfr_intcr_crint4_crint4_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint4_crint4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint4_crint4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint4_read();
	uint32_t newword = iox_sfr_intcr_crint4_crint4_replace(oldword, plain_value);
	iox_sfr_intcr_crint4_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT5_ADDR (CSR_BASE + 0x2f114L)
#define CSR_IOX_SFR_INTCR_CRINT5_SIZE 1
static inline uint32_t iox_sfr_intcr_crint5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f114L));
}
static inline void iox_sfr_intcr_crint5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f114L));
}
#define CSR_IOX_SFR_INTCR_CRINT5_CRINT5_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT5_CRINT5_SIZE 10
static inline uint32_t iox_sfr_intcr_crint5_crint5_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint5_crint5_read(void) {
	uint32_t word = iox_sfr_intcr_crint5_read();
	return iox_sfr_intcr_crint5_crint5_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint5_crint5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint5_crint5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint5_read();
	uint32_t newword = iox_sfr_intcr_crint5_crint5_replace(oldword, plain_value);
	iox_sfr_intcr_crint5_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT6_ADDR (CSR_BASE + 0x2f118L)
#define CSR_IOX_SFR_INTCR_CRINT6_SIZE 1
static inline uint32_t iox_sfr_intcr_crint6_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f118L));
}
static inline void iox_sfr_intcr_crint6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f118L));
}
#define CSR_IOX_SFR_INTCR_CRINT6_CRINT6_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT6_CRINT6_SIZE 10
static inline uint32_t iox_sfr_intcr_crint6_crint6_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint6_crint6_read(void) {
	uint32_t word = iox_sfr_intcr_crint6_read();
	return iox_sfr_intcr_crint6_crint6_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint6_crint6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint6_crint6_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint6_read();
	uint32_t newword = iox_sfr_intcr_crint6_crint6_replace(oldword, plain_value);
	iox_sfr_intcr_crint6_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT7_ADDR (CSR_BASE + 0x2f11cL)
#define CSR_IOX_SFR_INTCR_CRINT7_SIZE 1
static inline uint32_t iox_sfr_intcr_crint7_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f11cL));
}
static inline void iox_sfr_intcr_crint7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f11cL));
}
#define CSR_IOX_SFR_INTCR_CRINT7_CRINT7_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT7_CRINT7_SIZE 10
static inline uint32_t iox_sfr_intcr_crint7_crint7_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint7_crint7_read(void) {
	uint32_t word = iox_sfr_intcr_crint7_read();
	return iox_sfr_intcr_crint7_crint7_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint7_crint7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint7_crint7_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint7_read();
	uint32_t newword = iox_sfr_intcr_crint7_crint7_replace(oldword, plain_value);
	iox_sfr_intcr_crint7_write(newword);
}
#define CSR_IOX_SFR_INTFR_ADDR (CSR_BASE + 0x2f120L)
#define CSR_IOX_SFR_INTFR_SIZE 1
static inline uint32_t iox_sfr_intfr_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f120L));
}
#define CSR_IOX_SFR_INTFR_FRINT_OFFSET 0
#define CSR_IOX_SFR_INTFR_FRINT_SIZE 8
static inline uint32_t iox_sfr_intfr_frint_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intfr_frint_read(void) {
	uint32_t word = iox_sfr_intfr_read();
	return iox_sfr_intfr_frint_extract(word);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO0_ADDR (CSR_BASE + 0x2f130L)
#define CSR_IOX_SFR_GPIOOUT_CRGO0_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f130L));
}
static inline void iox_sfr_gpioout_crgo0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f130L));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO0_CRGO0_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO0_CRGO0_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo0_crgo0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo0_crgo0_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo0_read();
	return iox_sfr_gpioout_crgo0_crgo0_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo0_crgo0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo0_crgo0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo0_read();
	uint32_t newword = iox_sfr_gpioout_crgo0_crgo0_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo0_write(newword);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO1_ADDR (CSR_BASE + 0x2f134L)
#define CSR_IOX_SFR_GPIOOUT_CRGO1_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f134L));
}
static inline void iox_sfr_gpioout_crgo1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f134L));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO1_CRGO1_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO1_CRGO1_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo1_crgo1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo1_crgo1_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo1_read();
	return iox_sfr_gpioout_crgo1_crgo1_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo1_crgo1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo1_crgo1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo1_read();
	uint32_t newword = iox_sfr_gpioout_crgo1_crgo1_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo1_write(newword);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO2_ADDR (CSR_BASE + 0x2f138L)
#define CSR_IOX_SFR_GPIOOUT_CRGO2_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f138L));
}
static inline void iox_sfr_gpioout_crgo2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f138L));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO2_CRGO2_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO2_CRGO2_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo2_crgo2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo2_crgo2_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo2_read();
	return iox_sfr_gpioout_crgo2_crgo2_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo2_crgo2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo2_crgo2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo2_read();
	uint32_t newword = iox_sfr_gpioout_crgo2_crgo2_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo2_write(newword);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO3_ADDR (CSR_BASE + 0x2f13cL)
#define CSR_IOX_SFR_GPIOOUT_CRGO3_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f13cL));
}
static inline void iox_sfr_gpioout_crgo3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f13cL));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO3_CRGO3_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO3_CRGO3_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo3_crgo3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo3_crgo3_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo3_read();
	return iox_sfr_gpioout_crgo3_crgo3_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo3_crgo3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo3_crgo3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo3_read();
	uint32_t newword = iox_sfr_gpioout_crgo3_crgo3_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo3_write(newword);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO4_ADDR (CSR_BASE + 0x2f140L)
#define CSR_IOX_SFR_GPIOOUT_CRGO4_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f140L));
}
static inline void iox_sfr_gpioout_crgo4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f140L));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO4_CRGO4_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO4_CRGO4_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo4_crgo4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo4_crgo4_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo4_read();
	return iox_sfr_gpioout_crgo4_crgo4_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo4_crgo4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo4_crgo4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo4_read();
	uint32_t newword = iox_sfr_gpioout_crgo4_crgo4_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo4_write(newword);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO5_ADDR (CSR_BASE + 0x2f144L)
#define CSR_IOX_SFR_GPIOOUT_CRGO5_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f144L));
}
static inline void iox_sfr_gpioout_crgo5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f144L));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO5_CRGO5_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO5_CRGO5_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo5_crgo5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo5_crgo5_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo5_read();
	return iox_sfr_gpioout_crgo5_crgo5_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo5_crgo5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo5_crgo5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo5_read();
	uint32_t newword = iox_sfr_gpioout_crgo5_crgo5_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo5_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE0_ADDR (CSR_BASE + 0x2f148L)
#define CSR_IOX_SFR_GPIOOE_CRGOE0_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f148L));
}
static inline void iox_sfr_gpiooe_crgoe0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f148L));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE0_CRGOE0_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE0_CRGOE0_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe0_crgoe0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe0_crgoe0_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe0_read();
	return iox_sfr_gpiooe_crgoe0_crgoe0_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe0_crgoe0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe0_crgoe0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe0_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe0_crgoe0_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe0_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE1_ADDR (CSR_BASE + 0x2f14cL)
#define CSR_IOX_SFR_GPIOOE_CRGOE1_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f14cL));
}
static inline void iox_sfr_gpiooe_crgoe1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f14cL));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE1_CRGOE1_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE1_CRGOE1_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe1_crgoe1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe1_crgoe1_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe1_read();
	return iox_sfr_gpiooe_crgoe1_crgoe1_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe1_crgoe1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe1_crgoe1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe1_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe1_crgoe1_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe1_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE2_ADDR (CSR_BASE + 0x2f150L)
#define CSR_IOX_SFR_GPIOOE_CRGOE2_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f150L));
}
static inline void iox_sfr_gpiooe_crgoe2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f150L));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE2_CRGOE2_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE2_CRGOE2_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe2_crgoe2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe2_crgoe2_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe2_read();
	return iox_sfr_gpiooe_crgoe2_crgoe2_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe2_crgoe2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe2_crgoe2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe2_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe2_crgoe2_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe2_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE3_ADDR (CSR_BASE + 0x2f154L)
#define CSR_IOX_SFR_GPIOOE_CRGOE3_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f154L));
}
static inline void iox_sfr_gpiooe_crgoe3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f154L));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE3_CRGOE3_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE3_CRGOE3_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe3_crgoe3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe3_crgoe3_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe3_read();
	return iox_sfr_gpiooe_crgoe3_crgoe3_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe3_crgoe3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe3_crgoe3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe3_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe3_crgoe3_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe3_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE4_ADDR (CSR_BASE + 0x2f158L)
#define CSR_IOX_SFR_GPIOOE_CRGOE4_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f158L));
}
static inline void iox_sfr_gpiooe_crgoe4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f158L));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE4_CRGOE4_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE4_CRGOE4_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe4_crgoe4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe4_crgoe4_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe4_read();
	return iox_sfr_gpiooe_crgoe4_crgoe4_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe4_crgoe4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe4_crgoe4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe4_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe4_crgoe4_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe4_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE5_ADDR (CSR_BASE + 0x2f15cL)
#define CSR_IOX_SFR_GPIOOE_CRGOE5_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f15cL));
}
static inline void iox_sfr_gpiooe_crgoe5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f15cL));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE5_CRGOE5_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE5_CRGOE5_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe5_crgoe5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe5_crgoe5_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe5_read();
	return iox_sfr_gpiooe_crgoe5_crgoe5_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe5_crgoe5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe5_crgoe5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe5_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe5_crgoe5_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe5_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU0_ADDR (CSR_BASE + 0x2f160L)
#define CSR_IOX_SFR_GPIOPU_CRGPU0_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f160L));
}
static inline void iox_sfr_gpiopu_crgpu0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f160L));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU0_CRGPU0_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU0_CRGPU0_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu0_crgpu0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu0_crgpu0_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu0_read();
	return iox_sfr_gpiopu_crgpu0_crgpu0_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu0_crgpu0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu0_crgpu0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu0_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu0_crgpu0_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu0_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU1_ADDR (CSR_BASE + 0x2f164L)
#define CSR_IOX_SFR_GPIOPU_CRGPU1_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f164L));
}
static inline void iox_sfr_gpiopu_crgpu1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f164L));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU1_CRGPU1_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU1_CRGPU1_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu1_crgpu1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu1_crgpu1_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu1_read();
	return iox_sfr_gpiopu_crgpu1_crgpu1_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu1_crgpu1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu1_crgpu1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu1_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu1_crgpu1_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu1_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU2_ADDR (CSR_BASE + 0x2f168L)
#define CSR_IOX_SFR_GPIOPU_CRGPU2_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f168L));
}
static inline void iox_sfr_gpiopu_crgpu2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f168L));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU2_CRGPU2_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU2_CRGPU2_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu2_crgpu2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu2_crgpu2_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu2_read();
	return iox_sfr_gpiopu_crgpu2_crgpu2_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu2_crgpu2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu2_crgpu2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu2_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu2_crgpu2_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu2_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU3_ADDR (CSR_BASE + 0x2f16cL)
#define CSR_IOX_SFR_GPIOPU_CRGPU3_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f16cL));
}
static inline void iox_sfr_gpiopu_crgpu3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f16cL));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU3_CRGPU3_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU3_CRGPU3_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu3_crgpu3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu3_crgpu3_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu3_read();
	return iox_sfr_gpiopu_crgpu3_crgpu3_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu3_crgpu3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu3_crgpu3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu3_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu3_crgpu3_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu3_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU4_ADDR (CSR_BASE + 0x2f170L)
#define CSR_IOX_SFR_GPIOPU_CRGPU4_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f170L));
}
static inline void iox_sfr_gpiopu_crgpu4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f170L));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU4_CRGPU4_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU4_CRGPU4_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu4_crgpu4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu4_crgpu4_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu4_read();
	return iox_sfr_gpiopu_crgpu4_crgpu4_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu4_crgpu4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu4_crgpu4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu4_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu4_crgpu4_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu4_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU5_ADDR (CSR_BASE + 0x2f174L)
#define CSR_IOX_SFR_GPIOPU_CRGPU5_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f174L));
}
static inline void iox_sfr_gpiopu_crgpu5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f174L));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU5_CRGPU5_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU5_CRGPU5_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu5_crgpu5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu5_crgpu5_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu5_read();
	return iox_sfr_gpiopu_crgpu5_crgpu5_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu5_crgpu5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu5_crgpu5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu5_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu5_crgpu5_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu5_write(newword);
}
#define CSR_IOX_SFR_GPIOIN_SRGI0_ADDR (CSR_BASE + 0x2f178L)
#define CSR_IOX_SFR_GPIOIN_SRGI0_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f178L));
}
#define CSR_IOX_SFR_GPIOIN_SRGI0_SRGI0_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI0_SRGI0_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi0_srgi0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi0_srgi0_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi0_read();
	return iox_sfr_gpioin_srgi0_srgi0_extract(word);
}
#define CSR_IOX_SFR_GPIOIN_SRGI1_ADDR (CSR_BASE + 0x2f17cL)
#define CSR_IOX_SFR_GPIOIN_SRGI1_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f17cL));
}
#define CSR_IOX_SFR_GPIOIN_SRGI1_SRGI1_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI1_SRGI1_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi1_srgi1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi1_srgi1_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi1_read();
	return iox_sfr_gpioin_srgi1_srgi1_extract(word);
}
#define CSR_IOX_SFR_GPIOIN_SRGI2_ADDR (CSR_BASE + 0x2f180L)
#define CSR_IOX_SFR_GPIOIN_SRGI2_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f180L));
}
#define CSR_IOX_SFR_GPIOIN_SRGI2_SRGI2_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI2_SRGI2_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi2_srgi2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi2_srgi2_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi2_read();
	return iox_sfr_gpioin_srgi2_srgi2_extract(word);
}
#define CSR_IOX_SFR_GPIOIN_SRGI3_ADDR (CSR_BASE + 0x2f184L)
#define CSR_IOX_SFR_GPIOIN_SRGI3_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f184L));
}
#define CSR_IOX_SFR_GPIOIN_SRGI3_SRGI3_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI3_SRGI3_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi3_srgi3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi3_srgi3_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi3_read();
	return iox_sfr_gpioin_srgi3_srgi3_extract(word);
}
#define CSR_IOX_SFR_GPIOIN_SRGI4_ADDR (CSR_BASE + 0x2f188L)
#define CSR_IOX_SFR_GPIOIN_SRGI4_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f188L));
}
#define CSR_IOX_SFR_GPIOIN_SRGI4_SRGI4_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI4_SRGI4_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi4_srgi4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi4_srgi4_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi4_read();
	return iox_sfr_gpioin_srgi4_srgi4_extract(word);
}
#define CSR_IOX_SFR_GPIOIN_SRGI5_ADDR (CSR_BASE + 0x2f18cL)
#define CSR_IOX_SFR_GPIOIN_SRGI5_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f18cL));
}
#define CSR_IOX_SFR_GPIOIN_SRGI5_SRGI5_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI5_SRGI5_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi5_srgi5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi5_srgi5_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi5_read();
	return iox_sfr_gpioin_srgi5_srgi5_extract(word);
}
#define CSR_IOX_SFR_PIOSEL_ADDR (CSR_BASE + 0x2f200L)
#define CSR_IOX_SFR_PIOSEL_SIZE 1
static inline uint32_t iox_sfr_piosel_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f200L));
}
static inline void iox_sfr_piosel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f200L));
}
#define CSR_IOX_SFR_PIOSEL_PIOSEL_OFFSET 0
#define CSR_IOX_SFR_PIOSEL_PIOSEL_SIZE 32
static inline uint32_t iox_sfr_piosel_piosel_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_piosel_piosel_read(void) {
	uint32_t word = iox_sfr_piosel_read();
	return iox_sfr_piosel_piosel_extract(word);
}
static inline uint32_t iox_sfr_piosel_piosel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_piosel_piosel_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_piosel_read();
	uint32_t newword = iox_sfr_piosel_piosel_replace(oldword, plain_value);
	iox_sfr_piosel_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0_ADDR (CSR_BASE + 0x2f230L)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f230L));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f230L));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel0_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel0_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel0_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1_ADDR (CSR_BASE + 0x2f234L)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f234L));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f234L));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel1_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel1_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel1_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2_ADDR (CSR_BASE + 0x2f238L)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f238L));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f238L));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel2_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel2_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel2_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3_ADDR (CSR_BASE + 0x2f23cL)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f23cL));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f23cL));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel3_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel3_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel3_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL4_ADDR (CSR_BASE + 0x2f240L)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL4_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f240L));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f240L));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL4_CR_CFG_SCHMSEL4_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL4_CR_CFG_SCHMSEL4_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel4_cr_cfg_schmsel4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel4_cr_cfg_schmsel4_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel4_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel4_cr_cfg_schmsel4_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel4_cr_cfg_schmsel4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel4_cr_cfg_schmsel4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel4_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel4_cr_cfg_schmsel4_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel4_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL5_ADDR (CSR_BASE + 0x2f244L)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL5_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f244L));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f244L));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL5_CR_CFG_SCHMSEL5_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL5_CR_CFG_SCHMSEL5_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel5_cr_cfg_schmsel5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel5_cr_cfg_schmsel5_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel5_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel5_cr_cfg_schmsel5_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel5_cr_cfg_schmsel5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel5_cr_cfg_schmsel5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel5_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel5_cr_cfg_schmsel5_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel5_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_ADDR (CSR_BASE + 0x2f248L)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f248L));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f248L));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow0_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow0_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow0_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_ADDR (CSR_BASE + 0x2f24cL)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f24cL));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f24cL));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow1_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow1_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow1_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_ADDR (CSR_BASE + 0x2f250L)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f250L));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f250L));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow2_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow2_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow2_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_ADDR (CSR_BASE + 0x2f254L)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f254L));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f254L));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow3_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow3_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow3_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_ADDR (CSR_BASE + 0x2f258L)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f258L));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f258L));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_CR_CFG_SLEWSLOW4_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_CR_CFG_SLEWSLOW4_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow4_cr_cfg_slewslow4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow4_cr_cfg_slewslow4_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow4_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow4_cr_cfg_slewslow4_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow4_cr_cfg_slewslow4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow4_cr_cfg_slewslow4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow4_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow4_cr_cfg_slewslow4_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow4_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_ADDR (CSR_BASE + 0x2f25cL)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f25cL));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f25cL));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_CR_CFG_SLEWSLOW5_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_CR_CFG_SLEWSLOW5_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow5_cr_cfg_slewslow5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow5_cr_cfg_slewslow5_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow5_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow5_cr_cfg_slewslow5_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow5_cr_cfg_slewslow5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow5_cr_cfg_slewslow5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow5_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow5_cr_cfg_slewslow5_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow5_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_ADDR (CSR_BASE + 0x2f260L)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f260L));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f260L));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel0_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel0_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel0_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_ADDR (CSR_BASE + 0x2f264L)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f264L));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f264L));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel1_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel1_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel1_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_ADDR (CSR_BASE + 0x2f268L)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f268L));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f268L));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel2_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel2_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel2_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_ADDR (CSR_BASE + 0x2f26cL)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f26cL));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f26cL));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel3_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel3_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel3_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_ADDR (CSR_BASE + 0x2f270L)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f270L));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f270L));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_CR_CFG_DRVSEL4_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_CR_CFG_DRVSEL4_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel4_cr_cfg_drvsel4_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel4_cr_cfg_drvsel4_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel4_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel4_cr_cfg_drvsel4_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel4_cr_cfg_drvsel4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel4_cr_cfg_drvsel4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel4_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel4_cr_cfg_drvsel4_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel4_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_ADDR (CSR_BASE + 0x2f274L)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2f274L));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2f274L));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_CR_CFG_DRVSEL5_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_CR_CFG_DRVSEL5_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel5_cr_cfg_drvsel5_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel5_cr_cfg_drvsel5_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel5_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel5_cr_cfg_drvsel5_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel5_cr_cfg_drvsel5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel5_cr_cfg_drvsel5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel5_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel5_cr_cfg_drvsel5_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel5_write(newword);
}

/* pwm */
#define CSR_PWM_BASE (CSR_BASE + 0x20000L)

/* sddc */
#define CSR_SDDC_BASE (CSR_BASE + 0x21000L)
#define CSR_SDDC_SFR_IO_ADDR (CSR_BASE + 0x21000L)
#define CSR_SDDC_SFR_IO_SIZE 1
static inline uint32_t sddc_sfr_io_read(void) {
	return csr_read_simple((CSR_BASE + 0x21000L));
}
static inline void sddc_sfr_io_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21000L));
}
#define CSR_SDDC_SFR_IO_SFR_IO_OFFSET 0
#define CSR_SDDC_SFR_IO_SFR_IO_SIZE 2
static inline uint32_t sddc_sfr_io_sfr_io_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_sfr_io_sfr_io_read(void) {
	uint32_t word = sddc_sfr_io_read();
	return sddc_sfr_io_sfr_io_extract(word);
}
static inline uint32_t sddc_sfr_io_sfr_io_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_sfr_io_sfr_io_write(uint32_t plain_value) {
	uint32_t oldword = sddc_sfr_io_read();
	uint32_t newword = sddc_sfr_io_sfr_io_replace(oldword, plain_value);
	sddc_sfr_io_write(newword);
}
#define CSR_SDDC_SFR_AR_ADDR (CSR_BASE + 0x21004L)
#define CSR_SDDC_SFR_AR_SIZE 1
static inline uint32_t sddc_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + 0x21004L));
}
static inline void sddc_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21004L));
}
#define CSR_SDDC_SFR_AR_SFR_AR_OFFSET 0
#define CSR_SDDC_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t sddc_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_sfr_ar_sfr_ar_read(void) {
	uint32_t word = sddc_sfr_ar_read();
	return sddc_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t sddc_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = sddc_sfr_ar_read();
	uint32_t newword = sddc_sfr_ar_sfr_ar_replace(oldword, plain_value);
	sddc_sfr_ar_write(newword);
}
#define CSR_SDDC_CR_OCR_ADDR (CSR_BASE + 0x21010L)
#define CSR_SDDC_CR_OCR_SIZE 1
static inline uint32_t sddc_cr_ocr_read(void) {
	return csr_read_simple((CSR_BASE + 0x21010L));
}
static inline void sddc_cr_ocr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21010L));
}
#define CSR_SDDC_CR_OCR_CR_OCR_OFFSET 0
#define CSR_SDDC_CR_OCR_CR_OCR_SIZE 24
static inline uint32_t sddc_cr_ocr_cr_ocr_extract(uint32_t oldword) {
	uint32_t mask = 0xffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_ocr_cr_ocr_read(void) {
	uint32_t word = sddc_cr_ocr_read();
	return sddc_cr_ocr_cr_ocr_extract(word);
}
static inline uint32_t sddc_cr_ocr_cr_ocr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_ocr_cr_ocr_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_ocr_read();
	uint32_t newword = sddc_cr_ocr_cr_ocr_replace(oldword, plain_value);
	sddc_cr_ocr_write(newword);
}
#define CSR_SDDC_CR_RDFFTHRES_ADDR (CSR_BASE + 0x21014L)
#define CSR_SDDC_CR_RDFFTHRES_SIZE 1
static inline uint32_t sddc_cr_rdffthres_read(void) {
	return csr_read_simple((CSR_BASE + 0x21014L));
}
static inline void sddc_cr_rdffthres_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21014L));
}
#define CSR_SDDC_CR_RDFFTHRES_CR_RDFFTHRES_OFFSET 0
#define CSR_SDDC_CR_RDFFTHRES_CR_RDFFTHRES_SIZE 8
static inline uint32_t sddc_cr_rdffthres_cr_rdffthres_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_rdffthres_cr_rdffthres_read(void) {
	uint32_t word = sddc_cr_rdffthres_read();
	return sddc_cr_rdffthres_cr_rdffthres_extract(word);
}
static inline uint32_t sddc_cr_rdffthres_cr_rdffthres_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_rdffthres_cr_rdffthres_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_rdffthres_read();
	uint32_t newword = sddc_cr_rdffthres_cr_rdffthres_replace(oldword, plain_value);
	sddc_cr_rdffthres_write(newword);
}
#define CSR_SDDC_CR_REV_ADDR (CSR_BASE + 0x21018L)
#define CSR_SDDC_CR_REV_SIZE 1
static inline uint32_t sddc_cr_rev_read(void) {
	return csr_read_simple((CSR_BASE + 0x21018L));
}
static inline void sddc_cr_rev_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21018L));
}
#define CSR_SDDC_CR_REV_CFG_REG_SD_SPEC_REVISION_OFFSET 0
#define CSR_SDDC_CR_REV_CFG_REG_SD_SPEC_REVISION_SIZE 8
static inline uint32_t sddc_cr_rev_cfg_reg_sd_spec_revision_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_rev_cfg_reg_sd_spec_revision_read(void) {
	uint32_t word = sddc_cr_rev_read();
	return sddc_cr_rev_cfg_reg_sd_spec_revision_extract(word);
}
static inline uint32_t sddc_cr_rev_cfg_reg_sd_spec_revision_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_rev_cfg_reg_sd_spec_revision_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_rev_read();
	uint32_t newword = sddc_cr_rev_cfg_reg_sd_spec_revision_replace(oldword, plain_value);
	sddc_cr_rev_write(newword);
}
#define CSR_SDDC_CR_REV_CFG_REG_CCCR_SDIO_REVISION_OFFSET 8
#define CSR_SDDC_CR_REV_CFG_REG_CCCR_SDIO_REVISION_SIZE 8
static inline uint32_t sddc_cr_rev_cfg_reg_cccr_sdio_revision_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t sddc_cr_rev_cfg_reg_cccr_sdio_revision_read(void) {
	uint32_t word = sddc_cr_rev_read();
	return sddc_cr_rev_cfg_reg_cccr_sdio_revision_extract(word);
}
static inline uint32_t sddc_cr_rev_cfg_reg_cccr_sdio_revision_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void sddc_cr_rev_cfg_reg_cccr_sdio_revision_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_rev_read();
	uint32_t newword = sddc_cr_rev_cfg_reg_cccr_sdio_revision_replace(oldword, plain_value);
	sddc_cr_rev_write(newword);
}
#define CSR_SDDC_CR_BACSA_ADDR (CSR_BASE + 0x2101cL)
#define CSR_SDDC_CR_BACSA_SIZE 1
static inline uint32_t sddc_cr_bacsa_read(void) {
	return csr_read_simple((CSR_BASE + 0x2101cL));
}
static inline void sddc_cr_bacsa_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2101cL));
}
#define CSR_SDDC_CR_BACSA_CFG_BASE_ADDR_CSA_OFFSET 0
#define CSR_SDDC_CR_BACSA_CFG_BASE_ADDR_CSA_SIZE 18
static inline uint32_t sddc_cr_bacsa_cfg_base_addr_csa_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_bacsa_cfg_base_addr_csa_read(void) {
	uint32_t word = sddc_cr_bacsa_read();
	return sddc_cr_bacsa_cfg_base_addr_csa_extract(word);
}
static inline uint32_t sddc_cr_bacsa_cfg_base_addr_csa_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_bacsa_cfg_base_addr_csa_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_bacsa_read();
	uint32_t newword = sddc_cr_bacsa_cfg_base_addr_csa_replace(oldword, plain_value);
	sddc_cr_bacsa_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_ADDR (CSR_BASE + 0x21020L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21020L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21020L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func0_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func0_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func0_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_ADDR (CSR_BASE + 0x21024L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func1_read(void) {
	return csr_read_simple((CSR_BASE + 0x21024L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21024L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func1_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func1_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func1_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_ADDR (CSR_BASE + 0x21028L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func2_read(void) {
	return csr_read_simple((CSR_BASE + 0x21028L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21028L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func2_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func2_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func2_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_ADDR (CSR_BASE + 0x2102cL)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2102cL));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2102cL));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func3_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func3_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func3_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_ADDR (CSR_BASE + 0x21030L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func4_read(void) {
	return csr_read_simple((CSR_BASE + 0x21030L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21030L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func4_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func4_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func4_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_ADDR (CSR_BASE + 0x21034L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func5_read(void) {
	return csr_read_simple((CSR_BASE + 0x21034L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21034L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func5_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func5_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func5_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_ADDR (CSR_BASE + 0x21038L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func6_read(void) {
	return csr_read_simple((CSR_BASE + 0x21038L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21038L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func6_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func6_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func6_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_ADDR (CSR_BASE + 0x2103cL)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func7_read(void) {
	return csr_read_simple((CSR_BASE + 0x2103cL));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2103cL));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func7_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func7_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func7_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_ADDR (CSR_BASE + 0x21040L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21040L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21040L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_ADDR (CSR_BASE + 0x21044L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_read(void) {
	return csr_read_simple((CSR_BASE + 0x21044L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21044L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_ADDR (CSR_BASE + 0x21048L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_read(void) {
	return csr_read_simple((CSR_BASE + 0x21048L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21048L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_ADDR (CSR_BASE + 0x2104cL)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2104cL));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2104cL));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_ADDR (CSR_BASE + 0x21050L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_read(void) {
	return csr_read_simple((CSR_BASE + 0x21050L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21050L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_ADDR (CSR_BASE + 0x21054L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_read(void) {
	return csr_read_simple((CSR_BASE + 0x21054L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21054L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_ADDR (CSR_BASE + 0x21058L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_read(void) {
	return csr_read_simple((CSR_BASE + 0x21058L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21058L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_ADDR (CSR_BASE + 0x2105cL)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_read(void) {
	return csr_read_simple((CSR_BASE + 0x2105cL));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2105cL));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_ADDR (CSR_BASE + 0x21060L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21060L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21060L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_ADDR (CSR_BASE + 0x21064L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_read(void) {
	return csr_read_simple((CSR_BASE + 0x21064L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21064L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_ADDR (CSR_BASE + 0x21068L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_read(void) {
	return csr_read_simple((CSR_BASE + 0x21068L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21068L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_ADDR (CSR_BASE + 0x2106cL)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2106cL));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2106cL));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_ADDR (CSR_BASE + 0x21070L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_read(void) {
	return csr_read_simple((CSR_BASE + 0x21070L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21070L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_ADDR (CSR_BASE + 0x21074L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_read(void) {
	return csr_read_simple((CSR_BASE + 0x21074L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21074L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_ADDR (CSR_BASE + 0x21078L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_read(void) {
	return csr_read_simple((CSR_BASE + 0x21078L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21078L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_ADDR (CSR_BASE + 0x2107cL)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_read(void) {
	return csr_read_simple((CSR_BASE + 0x2107cL));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2107cL));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_write(newword);
}
#define CSR_SDDC_CR_WRITE_PROTECT_ADDR (CSR_BASE + 0x21080L)
#define CSR_SDDC_CR_WRITE_PROTECT_SIZE 1
static inline uint32_t sddc_cr_write_protect_read(void) {
	return csr_read_simple((CSR_BASE + 0x21080L));
}
static inline void sddc_cr_write_protect_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21080L));
}
#define CSR_SDDC_CR_WRITE_PROTECT_CR_WRITE_PROTECT_OFFSET 0
#define CSR_SDDC_CR_WRITE_PROTECT_CR_WRITE_PROTECT_SIZE 1
static inline uint32_t sddc_cr_write_protect_cr_write_protect_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_write_protect_cr_write_protect_read(void) {
	uint32_t word = sddc_cr_write_protect_read();
	return sddc_cr_write_protect_cr_write_protect_extract(word);
}
static inline uint32_t sddc_cr_write_protect_cr_write_protect_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_write_protect_cr_write_protect_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_write_protect_read();
	uint32_t newword = sddc_cr_write_protect_cr_write_protect_replace(oldword, plain_value);
	sddc_cr_write_protect_write(newword);
}
#define CSR_SDDC_CR_REG_DSR_ADDR (CSR_BASE + 0x21084L)
#define CSR_SDDC_CR_REG_DSR_SIZE 1
static inline uint32_t sddc_cr_reg_dsr_read(void) {
	return csr_read_simple((CSR_BASE + 0x21084L));
}
static inline void sddc_cr_reg_dsr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21084L));
}
#define CSR_SDDC_CR_REG_DSR_CR_REG_DSR_OFFSET 0
#define CSR_SDDC_CR_REG_DSR_CR_REG_DSR_SIZE 16
static inline uint32_t sddc_cr_reg_dsr_cr_reg_dsr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_dsr_cr_reg_dsr_read(void) {
	uint32_t word = sddc_cr_reg_dsr_read();
	return sddc_cr_reg_dsr_cr_reg_dsr_extract(word);
}
static inline uint32_t sddc_cr_reg_dsr_cr_reg_dsr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_dsr_cr_reg_dsr_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_dsr_read();
	uint32_t newword = sddc_cr_reg_dsr_cr_reg_dsr_replace(oldword, plain_value);
	sddc_cr_reg_dsr_write(newword);
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID0_ADDR (CSR_BASE + 0x21088L)
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID0_SIZE 1
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21088L));
}
static inline void sddc_cr_reg_cid_cfg_reg_cid0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21088L));
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0_OFFSET 0
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0_SIZE 32
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_read(void) {
	uint32_t word = sddc_cr_reg_cid_cfg_reg_cid0_read();
	return sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_extract(word);
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_cid_cfg_reg_cid0_read();
	uint32_t newword = sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_replace(oldword, plain_value);
	sddc_cr_reg_cid_cfg_reg_cid0_write(newword);
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID1_ADDR (CSR_BASE + 0x2108cL)
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID1_SIZE 1
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2108cL));
}
static inline void sddc_cr_reg_cid_cfg_reg_cid1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2108cL));
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1_OFFSET 0
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1_SIZE 32
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_read(void) {
	uint32_t word = sddc_cr_reg_cid_cfg_reg_cid1_read();
	return sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_extract(word);
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_cid_cfg_reg_cid1_read();
	uint32_t newword = sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_replace(oldword, plain_value);
	sddc_cr_reg_cid_cfg_reg_cid1_write(newword);
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID2_ADDR (CSR_BASE + 0x21090L)
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID2_SIZE 1
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid2_read(void) {
	return csr_read_simple((CSR_BASE + 0x21090L));
}
static inline void sddc_cr_reg_cid_cfg_reg_cid2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21090L));
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2_OFFSET 0
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2_SIZE 32
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_read(void) {
	uint32_t word = sddc_cr_reg_cid_cfg_reg_cid2_read();
	return sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_extract(word);
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_cid_cfg_reg_cid2_read();
	uint32_t newword = sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_replace(oldword, plain_value);
	sddc_cr_reg_cid_cfg_reg_cid2_write(newword);
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID3_ADDR (CSR_BASE + 0x21094L)
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID3_SIZE 1
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid3_read(void) {
	return csr_read_simple((CSR_BASE + 0x21094L));
}
static inline void sddc_cr_reg_cid_cfg_reg_cid3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21094L));
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3_OFFSET 0
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3_SIZE 32
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_read(void) {
	uint32_t word = sddc_cr_reg_cid_cfg_reg_cid3_read();
	return sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_extract(word);
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_cid_cfg_reg_cid3_read();
	uint32_t newword = sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_replace(oldword, plain_value);
	sddc_cr_reg_cid_cfg_reg_cid3_write(newword);
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD0_ADDR (CSR_BASE + 0x21098L)
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD0_SIZE 1
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21098L));
}
static inline void sddc_cr_reg_csd_cfg_reg_csd0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21098L));
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0_OFFSET 0
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0_SIZE 32
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_read(void) {
	uint32_t word = sddc_cr_reg_csd_cfg_reg_csd0_read();
	return sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_extract(word);
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_csd_cfg_reg_csd0_read();
	uint32_t newword = sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_replace(oldword, plain_value);
	sddc_cr_reg_csd_cfg_reg_csd0_write(newword);
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD1_ADDR (CSR_BASE + 0x2109cL)
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD1_SIZE 1
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2109cL));
}
static inline void sddc_cr_reg_csd_cfg_reg_csd1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2109cL));
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1_OFFSET 0
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1_SIZE 32
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_read(void) {
	uint32_t word = sddc_cr_reg_csd_cfg_reg_csd1_read();
	return sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_extract(word);
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_csd_cfg_reg_csd1_read();
	uint32_t newword = sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_replace(oldword, plain_value);
	sddc_cr_reg_csd_cfg_reg_csd1_write(newword);
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD2_ADDR (CSR_BASE + 0x210a0L)
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD2_SIZE 1
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd2_read(void) {
	return csr_read_simple((CSR_BASE + 0x210a0L));
}
static inline void sddc_cr_reg_csd_cfg_reg_csd2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210a0L));
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2_OFFSET 0
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2_SIZE 32
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_read(void) {
	uint32_t word = sddc_cr_reg_csd_cfg_reg_csd2_read();
	return sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_extract(word);
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_csd_cfg_reg_csd2_read();
	uint32_t newword = sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_replace(oldword, plain_value);
	sddc_cr_reg_csd_cfg_reg_csd2_write(newword);
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD3_ADDR (CSR_BASE + 0x210a4L)
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD3_SIZE 1
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd3_read(void) {
	return csr_read_simple((CSR_BASE + 0x210a4L));
}
static inline void sddc_cr_reg_csd_cfg_reg_csd3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210a4L));
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3_OFFSET 0
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3_SIZE 32
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_read(void) {
	uint32_t word = sddc_cr_reg_csd_cfg_reg_csd3_read();
	return sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_extract(word);
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_csd_cfg_reg_csd3_read();
	uint32_t newword = sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_replace(oldword, plain_value);
	sddc_cr_reg_csd_cfg_reg_csd3_write(newword);
}
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR0_ADDR (CSR_BASE + 0x210a8L)
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR0_SIZE 1
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr0_read(void) {
	return csr_read_simple((CSR_BASE + 0x210a8L));
}
static inline void sddc_cr_reg_scr_cfg_reg_scr0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210a8L));
}
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0_OFFSET 0
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0_SIZE 32
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_read(void) {
	uint32_t word = sddc_cr_reg_scr_cfg_reg_scr0_read();
	return sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_extract(word);
}
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_scr_cfg_reg_scr0_read();
	uint32_t newword = sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_replace(oldword, plain_value);
	sddc_cr_reg_scr_cfg_reg_scr0_write(newword);
}
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR1_ADDR (CSR_BASE + 0x210acL)
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR1_SIZE 1
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr1_read(void) {
	return csr_read_simple((CSR_BASE + 0x210acL));
}
static inline void sddc_cr_reg_scr_cfg_reg_scr1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210acL));
}
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1_OFFSET 0
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1_SIZE 32
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_read(void) {
	uint32_t word = sddc_cr_reg_scr_cfg_reg_scr1_read();
	return sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_extract(word);
}
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_scr_cfg_reg_scr1_read();
	uint32_t newword = sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_replace(oldword, plain_value);
	sddc_cr_reg_scr_cfg_reg_scr1_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_ADDR (CSR_BASE + 0x210b0L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status0_read(void) {
	return csr_read_simple((CSR_BASE + 0x210b0L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210b0L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status0_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status0_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status0_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_ADDR (CSR_BASE + 0x210b4L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status1_read(void) {
	return csr_read_simple((CSR_BASE + 0x210b4L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210b4L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status1_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status1_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status1_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_ADDR (CSR_BASE + 0x210b8L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status2_read(void) {
	return csr_read_simple((CSR_BASE + 0x210b8L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210b8L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status2_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status2_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status2_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_ADDR (CSR_BASE + 0x210bcL)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status3_read(void) {
	return csr_read_simple((CSR_BASE + 0x210bcL));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210bcL));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status3_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status3_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status3_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_ADDR (CSR_BASE + 0x210c0L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status4_read(void) {
	return csr_read_simple((CSR_BASE + 0x210c0L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210c0L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status4_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status4_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status4_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_ADDR (CSR_BASE + 0x210c4L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status5_read(void) {
	return csr_read_simple((CSR_BASE + 0x210c4L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210c4L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status5_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status5_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status5_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_ADDR (CSR_BASE + 0x210c8L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status6_read(void) {
	return csr_read_simple((CSR_BASE + 0x210c8L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210c8L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status6_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status6_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status6_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_ADDR (CSR_BASE + 0x210ccL)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status7_read(void) {
	return csr_read_simple((CSR_BASE + 0x210ccL));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210ccL));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status7_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status7_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status7_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_ADDR (CSR_BASE + 0x210d0L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status8_read(void) {
	return csr_read_simple((CSR_BASE + 0x210d0L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210d0L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status8_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status8_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status8_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_ADDR (CSR_BASE + 0x210d4L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status9_read(void) {
	return csr_read_simple((CSR_BASE + 0x210d4L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210d4L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status9_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status9_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status9_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_ADDR (CSR_BASE + 0x210d8L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status10_read(void) {
	return csr_read_simple((CSR_BASE + 0x210d8L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210d8L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status10_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status10_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status10_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_ADDR (CSR_BASE + 0x210dcL)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status11_read(void) {
	return csr_read_simple((CSR_BASE + 0x210dcL));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210dcL));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status11_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status11_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status11_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_ADDR (CSR_BASE + 0x210e0L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status12_read(void) {
	return csr_read_simple((CSR_BASE + 0x210e0L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status12_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210e0L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status12_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status12_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status12_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_ADDR (CSR_BASE + 0x210e4L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status13_read(void) {
	return csr_read_simple((CSR_BASE + 0x210e4L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status13_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210e4L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status13_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status13_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status13_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_ADDR (CSR_BASE + 0x210e8L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status14_read(void) {
	return csr_read_simple((CSR_BASE + 0x210e8L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status14_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210e8L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status14_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status14_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status14_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_ADDR (CSR_BASE + 0x210ecL)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status15_read(void) {
	return csr_read_simple((CSR_BASE + 0x210ecL));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status15_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x210ecL));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status15_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status15_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status15_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_ADDR (CSR_BASE + 0x21100L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21100L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21100L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_ADDR (CSR_BASE + 0x21104L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_read(void) {
	return csr_read_simple((CSR_BASE + 0x21104L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21104L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_ADDR (CSR_BASE + 0x21108L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_read(void) {
	return csr_read_simple((CSR_BASE + 0x21108L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21108L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_ADDR (CSR_BASE + 0x2110cL)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2110cL));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2110cL));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_ADDR (CSR_BASE + 0x21110L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_read(void) {
	return csr_read_simple((CSR_BASE + 0x21110L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21110L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_ADDR (CSR_BASE + 0x21114L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_read(void) {
	return csr_read_simple((CSR_BASE + 0x21114L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21114L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_ADDR (CSR_BASE + 0x21118L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_read(void) {
	return csr_read_simple((CSR_BASE + 0x21118L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21118L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_ADDR (CSR_BASE + 0x2111cL)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_read(void) {
	return csr_read_simple((CSR_BASE + 0x2111cL));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2111cL));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_ADDR (CSR_BASE + 0x21120L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_read(void) {
	return csr_read_simple((CSR_BASE + 0x21120L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21120L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_ADDR (CSR_BASE + 0x21124L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_read(void) {
	return csr_read_simple((CSR_BASE + 0x21124L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21124L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_ADDR (CSR_BASE + 0x21128L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_read(void) {
	return csr_read_simple((CSR_BASE + 0x21128L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21128L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_ADDR (CSR_BASE + 0x2112cL)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_read(void) {
	return csr_read_simple((CSR_BASE + 0x2112cL));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2112cL));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_ADDR (CSR_BASE + 0x21130L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_read(void) {
	return csr_read_simple((CSR_BASE + 0x21130L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21130L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_ADDR (CSR_BASE + 0x21134L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_read(void) {
	return csr_read_simple((CSR_BASE + 0x21134L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21134L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_ADDR (CSR_BASE + 0x21138L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_read(void) {
	return csr_read_simple((CSR_BASE + 0x21138L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21138L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_ADDR (CSR_BASE + 0x2113cL)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_read(void) {
	return csr_read_simple((CSR_BASE + 0x2113cL));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2113cL));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_ADDR (CSR_BASE + 0x21140L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_read(void) {
	return csr_read_simple((CSR_BASE + 0x21140L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21140L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_ADDR (CSR_BASE + 0x21144L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_read(void) {
	return csr_read_simple((CSR_BASE + 0x21144L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21144L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_ADDR (CSR_BASE + 0x21148L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21148L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21148L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_ADDR (CSR_BASE + 0x2114cL)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2114cL));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2114cL));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_ADDR (CSR_BASE + 0x21150L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_read(void) {
	return csr_read_simple((CSR_BASE + 0x21150L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21150L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_ADDR (CSR_BASE + 0x21154L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_read(void) {
	return csr_read_simple((CSR_BASE + 0x21154L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21154L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_ADDR (CSR_BASE + 0x21158L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_read(void) {
	return csr_read_simple((CSR_BASE + 0x21158L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21158L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_ADDR (CSR_BASE + 0x2115cL)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2115cL));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2115cL));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_ADDR (CSR_BASE + 0x21160L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_read(void) {
	return csr_read_simple((CSR_BASE + 0x21160L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21160L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_ADDR (CSR_BASE + 0x21168L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21168L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21168L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_ADDR (CSR_BASE + 0x2116cL)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2116cL));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2116cL));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_ADDR (CSR_BASE + 0x21170L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_read(void) {
	return csr_read_simple((CSR_BASE + 0x21170L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21170L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_ADDR (CSR_BASE + 0x21174L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_read(void) {
	return csr_read_simple((CSR_BASE + 0x21174L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21174L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_ADDR (CSR_BASE + 0x21178L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_read(void) {
	return csr_read_simple((CSR_BASE + 0x21178L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21178L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_ADDR (CSR_BASE + 0x2117cL)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2117cL));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2117cL));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_ADDR (CSR_BASE + 0x21180L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_read(void) {
	return csr_read_simple((CSR_BASE + 0x21180L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21180L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_ADDR (CSR_BASE + 0x21188L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_read(void) {
	return csr_read_simple((CSR_BASE + 0x21188L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21188L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_ADDR (CSR_BASE + 0x2118cL)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2118cL));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2118cL));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_ADDR (CSR_BASE + 0x21190L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_read(void) {
	return csr_read_simple((CSR_BASE + 0x21190L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21190L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_ADDR (CSR_BASE + 0x21194L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_read(void) {
	return csr_read_simple((CSR_BASE + 0x21194L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21194L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_ADDR (CSR_BASE + 0x21198L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_read(void) {
	return csr_read_simple((CSR_BASE + 0x21198L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x21198L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_ADDR (CSR_BASE + 0x2119cL)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2119cL));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2119cL));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_ADDR (CSR_BASE + 0x211a0L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_read(void) {
	return csr_read_simple((CSR_BASE + 0x211a0L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211a0L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_ADDR (CSR_BASE + 0x211a8L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_read(void) {
	return csr_read_simple((CSR_BASE + 0x211a8L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211a8L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_ADDR (CSR_BASE + 0x211acL)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_read(void) {
	return csr_read_simple((CSR_BASE + 0x211acL));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211acL));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_ADDR (CSR_BASE + 0x211b0L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_read(void) {
	return csr_read_simple((CSR_BASE + 0x211b0L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211b0L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_ADDR (CSR_BASE + 0x211b4L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_read(void) {
	return csr_read_simple((CSR_BASE + 0x211b4L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211b4L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_ADDR (CSR_BASE + 0x211b8L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_read(void) {
	return csr_read_simple((CSR_BASE + 0x211b8L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211b8L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_ADDR (CSR_BASE + 0x211bcL)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_read(void) {
	return csr_read_simple((CSR_BASE + 0x211bcL));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211bcL));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_ADDR (CSR_BASE + 0x211c0L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_read(void) {
	return csr_read_simple((CSR_BASE + 0x211c0L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211c0L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_ADDR (CSR_BASE + 0x211c8L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info0_read(void) {
	return csr_read_simple((CSR_BASE + 0x211c8L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211c8L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info0_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info0_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_ADDR (CSR_BASE + 0x211ccL)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info1_read(void) {
	return csr_read_simple((CSR_BASE + 0x211ccL));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211ccL));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info1_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info1_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_ADDR (CSR_BASE + 0x211d0L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info2_read(void) {
	return csr_read_simple((CSR_BASE + 0x211d0L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211d0L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info2_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info2_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_ADDR (CSR_BASE + 0x211d4L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info3_read(void) {
	return csr_read_simple((CSR_BASE + 0x211d4L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211d4L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info3_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info3_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_ADDR (CSR_BASE + 0x211d8L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info4_read(void) {
	return csr_read_simple((CSR_BASE + 0x211d8L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211d8L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info4_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info4_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_ADDR (CSR_BASE + 0x211dcL)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info5_read(void) {
	return csr_read_simple((CSR_BASE + 0x211dcL));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211dcL));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info5_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info5_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_ADDR (CSR_BASE + 0x211e0L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info6_read(void) {
	return csr_read_simple((CSR_BASE + 0x211e0L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211e0L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info6_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info6_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info6_write(newword);
}
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_ADDR (CSR_BASE + 0x211f0L)
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_SIZE 1
static inline uint32_t sddc_cr_reg_uhs_1_support_read(void) {
	return csr_read_simple((CSR_BASE + 0x211f0L));
}
static inline void sddc_cr_reg_uhs_1_support_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x211f0L));
}
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT_OFFSET 0
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT_SIZE 16
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_max_current_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_max_current_read(void) {
	uint32_t word = sddc_cr_reg_uhs_1_support_read();
	return sddc_cr_reg_uhs_1_support_cfg_reg_max_current_extract(word);
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_max_current_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_uhs_1_support_cfg_reg_max_current_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_uhs_1_support_read();
	uint32_t newword = sddc_cr_reg_uhs_1_support_cfg_reg_max_current_replace(oldword, plain_value);
	sddc_cr_reg_uhs_1_support_write(newword);
}
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION_OFFSET 16
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION_SIZE 8
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_read(void) {
	uint32_t word = sddc_cr_reg_uhs_1_support_read();
	return sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_extract(word);
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_uhs_1_support_read();
	uint32_t newword = sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_replace(oldword, plain_value);
	sddc_cr_reg_uhs_1_support_write(newword);
}
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT_OFFSET 24
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT_SIZE 8
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_read(void) {
	uint32_t word = sddc_cr_reg_uhs_1_support_read();
	return sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_extract(word);
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_uhs_1_support_read();
	uint32_t newword = sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_replace(oldword, plain_value);
	sddc_cr_reg_uhs_1_support_write(newword);
}

/* rp_pio */
#define CSR_RP_PIO_BASE (CSR_BASE + 0x23000L)
#define CSR_RP_PIO_SFR_CTRL_ADDR (CSR_BASE + 0x23000L)
#define CSR_RP_PIO_SFR_CTRL_SIZE 1
static inline uint32_t rp_pio_sfr_ctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x23000L));
}
static inline void rp_pio_sfr_ctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23000L));
}
#define CSR_RP_PIO_SFR_CTRL_EN_OFFSET 0
#define CSR_RP_PIO_SFR_CTRL_EN_SIZE 4
static inline uint32_t rp_pio_sfr_ctrl_en_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_ctrl_en_read(void) {
	uint32_t word = rp_pio_sfr_ctrl_read();
	return rp_pio_sfr_ctrl_en_extract(word);
}
static inline uint32_t rp_pio_sfr_ctrl_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_ctrl_en_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_ctrl_read();
	uint32_t newword = rp_pio_sfr_ctrl_en_replace(oldword, plain_value);
	rp_pio_sfr_ctrl_write(newword);
}
#define CSR_RP_PIO_SFR_CTRL_RESTART_OFFSET 4
#define CSR_RP_PIO_SFR_CTRL_RESTART_SIZE 4
static inline uint32_t rp_pio_sfr_ctrl_restart_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_ctrl_restart_read(void) {
	uint32_t word = rp_pio_sfr_ctrl_read();
	return rp_pio_sfr_ctrl_restart_extract(word);
}
static inline uint32_t rp_pio_sfr_ctrl_restart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_ctrl_restart_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_ctrl_read();
	uint32_t newword = rp_pio_sfr_ctrl_restart_replace(oldword, plain_value);
	rp_pio_sfr_ctrl_write(newword);
}
#define CSR_RP_PIO_SFR_CTRL_CLKDIV_RESTART_OFFSET 8
#define CSR_RP_PIO_SFR_CTRL_CLKDIV_RESTART_SIZE 4
static inline uint32_t rp_pio_sfr_ctrl_clkdiv_restart_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_ctrl_clkdiv_restart_read(void) {
	uint32_t word = rp_pio_sfr_ctrl_read();
	return rp_pio_sfr_ctrl_clkdiv_restart_extract(word);
}
static inline uint32_t rp_pio_sfr_ctrl_clkdiv_restart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_ctrl_clkdiv_restart_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_ctrl_read();
	uint32_t newword = rp_pio_sfr_ctrl_clkdiv_restart_replace(oldword, plain_value);
	rp_pio_sfr_ctrl_write(newword);
}
#define CSR_RP_PIO_SFR_FSTAT_ADDR (CSR_BASE + 0x23004L)
#define CSR_RP_PIO_SFR_FSTAT_SIZE 1
static inline uint32_t rp_pio_sfr_fstat_read(void) {
	return csr_read_simple((CSR_BASE + 0x23004L));
}
#define CSR_RP_PIO_SFR_FSTAT_RX_FULL_OFFSET 0
#define CSR_RP_PIO_SFR_FSTAT_RX_FULL_SIZE 4
static inline uint32_t rp_pio_sfr_fstat_rx_full_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_fstat_rx_full_read(void) {
	uint32_t word = rp_pio_sfr_fstat_read();
	return rp_pio_sfr_fstat_rx_full_extract(word);
}
#define CSR_RP_PIO_SFR_FSTAT_CONSTANT0_OFFSET 4
#define CSR_RP_PIO_SFR_FSTAT_CONSTANT0_SIZE 4
static inline uint32_t rp_pio_sfr_fstat_constant0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_fstat_constant0_read(void) {
	uint32_t word = rp_pio_sfr_fstat_read();
	return rp_pio_sfr_fstat_constant0_extract(word);
}
#define CSR_RP_PIO_SFR_FSTAT_RX_EMPTY_OFFSET 8
#define CSR_RP_PIO_SFR_FSTAT_RX_EMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_fstat_rx_empty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_fstat_rx_empty_read(void) {
	uint32_t word = rp_pio_sfr_fstat_read();
	return rp_pio_sfr_fstat_rx_empty_extract(word);
}
#define CSR_RP_PIO_SFR_FSTAT_CONSTANT1_OFFSET 12
#define CSR_RP_PIO_SFR_FSTAT_CONSTANT1_SIZE 4
static inline uint32_t rp_pio_sfr_fstat_constant1_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t rp_pio_sfr_fstat_constant1_read(void) {
	uint32_t word = rp_pio_sfr_fstat_read();
	return rp_pio_sfr_fstat_constant1_extract(word);
}
#define CSR_RP_PIO_SFR_FSTAT_TX_FULL_OFFSET 16
#define CSR_RP_PIO_SFR_FSTAT_TX_FULL_SIZE 4
static inline uint32_t rp_pio_sfr_fstat_tx_full_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_fstat_tx_full_read(void) {
	uint32_t word = rp_pio_sfr_fstat_read();
	return rp_pio_sfr_fstat_tx_full_extract(word);
}
#define CSR_RP_PIO_SFR_FSTAT_CONSTANT2_OFFSET 20
#define CSR_RP_PIO_SFR_FSTAT_CONSTANT2_SIZE 4
static inline uint32_t rp_pio_sfr_fstat_constant2_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_fstat_constant2_read(void) {
	uint32_t word = rp_pio_sfr_fstat_read();
	return rp_pio_sfr_fstat_constant2_extract(word);
}
#define CSR_RP_PIO_SFR_FSTAT_TX_EMPTY_OFFSET 24
#define CSR_RP_PIO_SFR_FSTAT_TX_EMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_fstat_tx_empty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t rp_pio_sfr_fstat_tx_empty_read(void) {
	uint32_t word = rp_pio_sfr_fstat_read();
	return rp_pio_sfr_fstat_tx_empty_extract(word);
}
#define CSR_RP_PIO_SFR_FSTAT_CONSTANT3_OFFSET 28
#define CSR_RP_PIO_SFR_FSTAT_CONSTANT3_SIZE 4
static inline uint32_t rp_pio_sfr_fstat_constant3_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 28) & mask );
}
static inline uint32_t rp_pio_sfr_fstat_constant3_read(void) {
	uint32_t word = rp_pio_sfr_fstat_read();
	return rp_pio_sfr_fstat_constant3_extract(word);
}
#define CSR_RP_PIO_SFR_FDEBUG_ADDR (CSR_BASE + 0x23008L)
#define CSR_RP_PIO_SFR_FDEBUG_SIZE 1
static inline uint32_t rp_pio_sfr_fdebug_read(void) {
	return csr_read_simple((CSR_BASE + 0x23008L));
}
static inline void rp_pio_sfr_fdebug_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23008L));
}
#define CSR_RP_PIO_SFR_FDEBUG_RXSTALL_OFFSET 0
#define CSR_RP_PIO_SFR_FDEBUG_RXSTALL_SIZE 4
static inline uint32_t rp_pio_sfr_fdebug_rxstall_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_fdebug_rxstall_read(void) {
	uint32_t word = rp_pio_sfr_fdebug_read();
	return rp_pio_sfr_fdebug_rxstall_extract(word);
}
static inline uint32_t rp_pio_sfr_fdebug_rxstall_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_fdebug_rxstall_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fdebug_read();
	uint32_t newword = rp_pio_sfr_fdebug_rxstall_replace(oldword, plain_value);
	rp_pio_sfr_fdebug_write(newword);
}
#define CSR_RP_PIO_SFR_FDEBUG_NC_DBG3_OFFSET 4
#define CSR_RP_PIO_SFR_FDEBUG_NC_DBG3_SIZE 4
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg3_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg3_read(void) {
	uint32_t word = rp_pio_sfr_fdebug_read();
	return rp_pio_sfr_fdebug_nc_dbg3_extract(word);
}
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_fdebug_nc_dbg3_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fdebug_read();
	uint32_t newword = rp_pio_sfr_fdebug_nc_dbg3_replace(oldword, plain_value);
	rp_pio_sfr_fdebug_write(newword);
}
#define CSR_RP_PIO_SFR_FDEBUG_RXUNDER_OFFSET 8
#define CSR_RP_PIO_SFR_FDEBUG_RXUNDER_SIZE 4
static inline uint32_t rp_pio_sfr_fdebug_rxunder_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_fdebug_rxunder_read(void) {
	uint32_t word = rp_pio_sfr_fdebug_read();
	return rp_pio_sfr_fdebug_rxunder_extract(word);
}
static inline uint32_t rp_pio_sfr_fdebug_rxunder_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_fdebug_rxunder_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fdebug_read();
	uint32_t newword = rp_pio_sfr_fdebug_rxunder_replace(oldword, plain_value);
	rp_pio_sfr_fdebug_write(newword);
}
#define CSR_RP_PIO_SFR_FDEBUG_NC_DBG2_OFFSET 12
#define CSR_RP_PIO_SFR_FDEBUG_NC_DBG2_SIZE 4
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg2_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg2_read(void) {
	uint32_t word = rp_pio_sfr_fdebug_read();
	return rp_pio_sfr_fdebug_nc_dbg2_extract(word);
}
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 12))) | (mask & plain_value)<< 12 ;
}
static inline void rp_pio_sfr_fdebug_nc_dbg2_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fdebug_read();
	uint32_t newword = rp_pio_sfr_fdebug_nc_dbg2_replace(oldword, plain_value);
	rp_pio_sfr_fdebug_write(newword);
}
#define CSR_RP_PIO_SFR_FDEBUG_TXOVER_OFFSET 16
#define CSR_RP_PIO_SFR_FDEBUG_TXOVER_SIZE 4
static inline uint32_t rp_pio_sfr_fdebug_txover_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_fdebug_txover_read(void) {
	uint32_t word = rp_pio_sfr_fdebug_read();
	return rp_pio_sfr_fdebug_txover_extract(word);
}
static inline uint32_t rp_pio_sfr_fdebug_txover_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_fdebug_txover_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fdebug_read();
	uint32_t newword = rp_pio_sfr_fdebug_txover_replace(oldword, plain_value);
	rp_pio_sfr_fdebug_write(newword);
}
#define CSR_RP_PIO_SFR_FDEBUG_NC_DBG1_OFFSET 20
#define CSR_RP_PIO_SFR_FDEBUG_NC_DBG1_SIZE 4
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg1_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg1_read(void) {
	uint32_t word = rp_pio_sfr_fdebug_read();
	return rp_pio_sfr_fdebug_nc_dbg1_extract(word);
}
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_fdebug_nc_dbg1_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fdebug_read();
	uint32_t newword = rp_pio_sfr_fdebug_nc_dbg1_replace(oldword, plain_value);
	rp_pio_sfr_fdebug_write(newword);
}
#define CSR_RP_PIO_SFR_FDEBUG_TXSTALL_OFFSET 24
#define CSR_RP_PIO_SFR_FDEBUG_TXSTALL_SIZE 4
static inline uint32_t rp_pio_sfr_fdebug_txstall_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t rp_pio_sfr_fdebug_txstall_read(void) {
	uint32_t word = rp_pio_sfr_fdebug_read();
	return rp_pio_sfr_fdebug_txstall_extract(word);
}
static inline uint32_t rp_pio_sfr_fdebug_txstall_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void rp_pio_sfr_fdebug_txstall_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fdebug_read();
	uint32_t newword = rp_pio_sfr_fdebug_txstall_replace(oldword, plain_value);
	rp_pio_sfr_fdebug_write(newword);
}
#define CSR_RP_PIO_SFR_FDEBUG_NC_DBG0_OFFSET 28
#define CSR_RP_PIO_SFR_FDEBUG_NC_DBG0_SIZE 4
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 28) & mask );
}
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg0_read(void) {
	uint32_t word = rp_pio_sfr_fdebug_read();
	return rp_pio_sfr_fdebug_nc_dbg0_extract(word);
}
static inline uint32_t rp_pio_sfr_fdebug_nc_dbg0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 28))) | (mask & plain_value)<< 28 ;
}
static inline void rp_pio_sfr_fdebug_nc_dbg0_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fdebug_read();
	uint32_t newword = rp_pio_sfr_fdebug_nc_dbg0_replace(oldword, plain_value);
	rp_pio_sfr_fdebug_write(newword);
}
#define CSR_RP_PIO_SFR_FLEVEL_ADDR (CSR_BASE + 0x2300cL)
#define CSR_RP_PIO_SFR_FLEVEL_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_read(void) {
	return csr_read_simple((CSR_BASE + 0x2300cL));
}
#define CSR_RP_PIO_SFR_FLEVEL_TX_LEVEL0_OFFSET 0
#define CSR_RP_PIO_SFR_FLEVEL_TX_LEVEL0_SIZE 3
static inline uint32_t rp_pio_sfr_flevel_tx_level0_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_tx_level0_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_tx_level0_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT0_OFFSET 3
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT0_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_constant0_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_constant0_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_constant0_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_RX_LEVEL0_OFFSET 4
#define CSR_RP_PIO_SFR_FLEVEL_RX_LEVEL0_SIZE 3
static inline uint32_t rp_pio_sfr_flevel_rx_level0_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_rx_level0_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_rx_level0_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT1_OFFSET 7
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT1_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_constant1_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 7) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_constant1_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_constant1_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_TX_LEVEL1_OFFSET 8
#define CSR_RP_PIO_SFR_FLEVEL_TX_LEVEL1_SIZE 3
static inline uint32_t rp_pio_sfr_flevel_tx_level1_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_tx_level1_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_tx_level1_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT2_OFFSET 11
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT2_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_constant2_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 11) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_constant2_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_constant2_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_RX_LEVEL1_OFFSET 12
#define CSR_RP_PIO_SFR_FLEVEL_RX_LEVEL1_SIZE 3
static inline uint32_t rp_pio_sfr_flevel_rx_level1_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_rx_level1_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_rx_level1_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT3_OFFSET 15
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT3_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_constant3_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 15) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_constant3_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_constant3_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_TX_LEVEL2_OFFSET 16
#define CSR_RP_PIO_SFR_FLEVEL_TX_LEVEL2_SIZE 3
static inline uint32_t rp_pio_sfr_flevel_tx_level2_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_tx_level2_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_tx_level2_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT4_OFFSET 19
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT4_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_constant4_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_constant4_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_constant4_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_RX_LEVEL2_OFFSET 20
#define CSR_RP_PIO_SFR_FLEVEL_RX_LEVEL2_SIZE 3
static inline uint32_t rp_pio_sfr_flevel_rx_level2_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_rx_level2_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_rx_level2_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT5_OFFSET 23
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT5_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_constant5_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 23) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_constant5_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_constant5_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_TX_LEVEL3_OFFSET 24
#define CSR_RP_PIO_SFR_FLEVEL_TX_LEVEL3_SIZE 3
static inline uint32_t rp_pio_sfr_flevel_tx_level3_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_tx_level3_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_tx_level3_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT6_OFFSET 27
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT6_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_constant6_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 27) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_constant6_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_constant6_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_RX_LEVEL3_OFFSET 28
#define CSR_RP_PIO_SFR_FLEVEL_RX_LEVEL3_SIZE 3
static inline uint32_t rp_pio_sfr_flevel_rx_level3_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 28) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_rx_level3_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_rx_level3_extract(word);
}
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT7_OFFSET 31
#define CSR_RP_PIO_SFR_FLEVEL_CONSTANT7_SIZE 1
static inline uint32_t rp_pio_sfr_flevel_constant7_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_flevel_constant7_read(void) {
	uint32_t word = rp_pio_sfr_flevel_read();
	return rp_pio_sfr_flevel_constant7_extract(word);
}
#define CSR_RP_PIO_SFR_TXF0_ADDR (CSR_BASE + 0x23010L)
#define CSR_RP_PIO_SFR_TXF0_SIZE 1
static inline uint32_t rp_pio_sfr_txf0_read(void) {
	return csr_read_simple((CSR_BASE + 0x23010L));
}
static inline void rp_pio_sfr_txf0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23010L));
}
#define CSR_RP_PIO_SFR_TXF0_FDIN_OFFSET 0
#define CSR_RP_PIO_SFR_TXF0_FDIN_SIZE 32
static inline uint32_t rp_pio_sfr_txf0_fdin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_txf0_fdin_read(void) {
	uint32_t word = rp_pio_sfr_txf0_read();
	return rp_pio_sfr_txf0_fdin_extract(word);
}
static inline uint32_t rp_pio_sfr_txf0_fdin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_txf0_fdin_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_txf0_read();
	uint32_t newword = rp_pio_sfr_txf0_fdin_replace(oldword, plain_value);
	rp_pio_sfr_txf0_write(newword);
}
#define CSR_RP_PIO_SFR_TXF1_ADDR (CSR_BASE + 0x23014L)
#define CSR_RP_PIO_SFR_TXF1_SIZE 1
static inline uint32_t rp_pio_sfr_txf1_read(void) {
	return csr_read_simple((CSR_BASE + 0x23014L));
}
static inline void rp_pio_sfr_txf1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23014L));
}
#define CSR_RP_PIO_SFR_TXF1_FDIN_OFFSET 0
#define CSR_RP_PIO_SFR_TXF1_FDIN_SIZE 32
static inline uint32_t rp_pio_sfr_txf1_fdin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_txf1_fdin_read(void) {
	uint32_t word = rp_pio_sfr_txf1_read();
	return rp_pio_sfr_txf1_fdin_extract(word);
}
static inline uint32_t rp_pio_sfr_txf1_fdin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_txf1_fdin_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_txf1_read();
	uint32_t newword = rp_pio_sfr_txf1_fdin_replace(oldword, plain_value);
	rp_pio_sfr_txf1_write(newword);
}
#define CSR_RP_PIO_SFR_TXF2_ADDR (CSR_BASE + 0x23018L)
#define CSR_RP_PIO_SFR_TXF2_SIZE 1
static inline uint32_t rp_pio_sfr_txf2_read(void) {
	return csr_read_simple((CSR_BASE + 0x23018L));
}
static inline void rp_pio_sfr_txf2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23018L));
}
#define CSR_RP_PIO_SFR_TXF2_FDIN_OFFSET 0
#define CSR_RP_PIO_SFR_TXF2_FDIN_SIZE 32
static inline uint32_t rp_pio_sfr_txf2_fdin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_txf2_fdin_read(void) {
	uint32_t word = rp_pio_sfr_txf2_read();
	return rp_pio_sfr_txf2_fdin_extract(word);
}
static inline uint32_t rp_pio_sfr_txf2_fdin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_txf2_fdin_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_txf2_read();
	uint32_t newword = rp_pio_sfr_txf2_fdin_replace(oldword, plain_value);
	rp_pio_sfr_txf2_write(newword);
}
#define CSR_RP_PIO_SFR_TXF3_ADDR (CSR_BASE + 0x2301cL)
#define CSR_RP_PIO_SFR_TXF3_SIZE 1
static inline uint32_t rp_pio_sfr_txf3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2301cL));
}
static inline void rp_pio_sfr_txf3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2301cL));
}
#define CSR_RP_PIO_SFR_TXF3_FDIN_OFFSET 0
#define CSR_RP_PIO_SFR_TXF3_FDIN_SIZE 32
static inline uint32_t rp_pio_sfr_txf3_fdin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_txf3_fdin_read(void) {
	uint32_t word = rp_pio_sfr_txf3_read();
	return rp_pio_sfr_txf3_fdin_extract(word);
}
static inline uint32_t rp_pio_sfr_txf3_fdin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_txf3_fdin_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_txf3_read();
	uint32_t newword = rp_pio_sfr_txf3_fdin_replace(oldword, plain_value);
	rp_pio_sfr_txf3_write(newword);
}
#define CSR_RP_PIO_SFR_RXF0_ADDR (CSR_BASE + 0x23020L)
#define CSR_RP_PIO_SFR_RXF0_SIZE 1
static inline uint32_t rp_pio_sfr_rxf0_read(void) {
	return csr_read_simple((CSR_BASE + 0x23020L));
}
#define CSR_RP_PIO_SFR_RXF0_PDOUT_OFFSET 0
#define CSR_RP_PIO_SFR_RXF0_PDOUT_SIZE 32
static inline uint32_t rp_pio_sfr_rxf0_pdout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_rxf0_pdout_read(void) {
	uint32_t word = rp_pio_sfr_rxf0_read();
	return rp_pio_sfr_rxf0_pdout_extract(word);
}
#define CSR_RP_PIO_SFR_RXF1_ADDR (CSR_BASE + 0x23024L)
#define CSR_RP_PIO_SFR_RXF1_SIZE 1
static inline uint32_t rp_pio_sfr_rxf1_read(void) {
	return csr_read_simple((CSR_BASE + 0x23024L));
}
#define CSR_RP_PIO_SFR_RXF1_PDOUT_OFFSET 0
#define CSR_RP_PIO_SFR_RXF1_PDOUT_SIZE 32
static inline uint32_t rp_pio_sfr_rxf1_pdout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_rxf1_pdout_read(void) {
	uint32_t word = rp_pio_sfr_rxf1_read();
	return rp_pio_sfr_rxf1_pdout_extract(word);
}
#define CSR_RP_PIO_SFR_RXF2_ADDR (CSR_BASE + 0x23028L)
#define CSR_RP_PIO_SFR_RXF2_SIZE 1
static inline uint32_t rp_pio_sfr_rxf2_read(void) {
	return csr_read_simple((CSR_BASE + 0x23028L));
}
#define CSR_RP_PIO_SFR_RXF2_PDOUT_OFFSET 0
#define CSR_RP_PIO_SFR_RXF2_PDOUT_SIZE 32
static inline uint32_t rp_pio_sfr_rxf2_pdout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_rxf2_pdout_read(void) {
	uint32_t word = rp_pio_sfr_rxf2_read();
	return rp_pio_sfr_rxf2_pdout_extract(word);
}
#define CSR_RP_PIO_SFR_RXF3_ADDR (CSR_BASE + 0x2302cL)
#define CSR_RP_PIO_SFR_RXF3_SIZE 1
static inline uint32_t rp_pio_sfr_rxf3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2302cL));
}
#define CSR_RP_PIO_SFR_RXF3_PDOUT_OFFSET 0
#define CSR_RP_PIO_SFR_RXF3_PDOUT_SIZE 32
static inline uint32_t rp_pio_sfr_rxf3_pdout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_rxf3_pdout_read(void) {
	uint32_t word = rp_pio_sfr_rxf3_read();
	return rp_pio_sfr_rxf3_pdout_extract(word);
}
#define CSR_RP_PIO_SFR_IRQ_ADDR (CSR_BASE + 0x23030L)
#define CSR_RP_PIO_SFR_IRQ_SIZE 1
static inline uint32_t rp_pio_sfr_irq_read(void) {
	return csr_read_simple((CSR_BASE + 0x23030L));
}
static inline void rp_pio_sfr_irq_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23030L));
}
#define CSR_RP_PIO_SFR_IRQ_SFR_IRQ_OFFSET 0
#define CSR_RP_PIO_SFR_IRQ_SFR_IRQ_SIZE 8
static inline uint32_t rp_pio_sfr_irq_sfr_irq_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_irq_sfr_irq_read(void) {
	uint32_t word = rp_pio_sfr_irq_read();
	return rp_pio_sfr_irq_sfr_irq_extract(word);
}
static inline uint32_t rp_pio_sfr_irq_sfr_irq_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_irq_sfr_irq_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq_read();
	uint32_t newword = rp_pio_sfr_irq_sfr_irq_replace(oldword, plain_value);
	rp_pio_sfr_irq_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ_FORCE_ADDR (CSR_BASE + 0x23034L)
#define CSR_RP_PIO_SFR_IRQ_FORCE_SIZE 1
static inline uint32_t rp_pio_sfr_irq_force_read(void) {
	return csr_read_simple((CSR_BASE + 0x23034L));
}
static inline void rp_pio_sfr_irq_force_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23034L));
}
#define CSR_RP_PIO_SFR_IRQ_FORCE_SFR_IRQ_FORCE_OFFSET 0
#define CSR_RP_PIO_SFR_IRQ_FORCE_SFR_IRQ_FORCE_SIZE 8
static inline uint32_t rp_pio_sfr_irq_force_sfr_irq_force_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_irq_force_sfr_irq_force_read(void) {
	uint32_t word = rp_pio_sfr_irq_force_read();
	return rp_pio_sfr_irq_force_sfr_irq_force_extract(word);
}
static inline uint32_t rp_pio_sfr_irq_force_sfr_irq_force_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_irq_force_sfr_irq_force_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq_force_read();
	uint32_t newword = rp_pio_sfr_irq_force_sfr_irq_force_replace(oldword, plain_value);
	rp_pio_sfr_irq_force_write(newword);
}
#define CSR_RP_PIO_SFR_SYNC_BYPASS_ADDR (CSR_BASE + 0x23038L)
#define CSR_RP_PIO_SFR_SYNC_BYPASS_SIZE 1
static inline uint32_t rp_pio_sfr_sync_bypass_read(void) {
	return csr_read_simple((CSR_BASE + 0x23038L));
}
static inline void rp_pio_sfr_sync_bypass_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23038L));
}
#define CSR_RP_PIO_SFR_SYNC_BYPASS_SFR_SYNC_BYPASS_OFFSET 0
#define CSR_RP_PIO_SFR_SYNC_BYPASS_SFR_SYNC_BYPASS_SIZE 32
static inline uint32_t rp_pio_sfr_sync_bypass_sfr_sync_bypass_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sync_bypass_sfr_sync_bypass_read(void) {
	uint32_t word = rp_pio_sfr_sync_bypass_read();
	return rp_pio_sfr_sync_bypass_sfr_sync_bypass_extract(word);
}
static inline uint32_t rp_pio_sfr_sync_bypass_sfr_sync_bypass_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sync_bypass_sfr_sync_bypass_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sync_bypass_read();
	uint32_t newword = rp_pio_sfr_sync_bypass_sfr_sync_bypass_replace(oldword, plain_value);
	rp_pio_sfr_sync_bypass_write(newword);
}
#define CSR_RP_PIO_SFR_DBG_PADOUT_ADDR (CSR_BASE + 0x2303cL)
#define CSR_RP_PIO_SFR_DBG_PADOUT_SIZE 1
static inline uint32_t rp_pio_sfr_dbg_padout_read(void) {
	return csr_read_simple((CSR_BASE + 0x2303cL));
}
#define CSR_RP_PIO_SFR_DBG_PADOUT_SFR_DBG_PADOUT_OFFSET 0
#define CSR_RP_PIO_SFR_DBG_PADOUT_SFR_DBG_PADOUT_SIZE 32
static inline uint32_t rp_pio_sfr_dbg_padout_sfr_dbg_padout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_dbg_padout_sfr_dbg_padout_read(void) {
	uint32_t word = rp_pio_sfr_dbg_padout_read();
	return rp_pio_sfr_dbg_padout_sfr_dbg_padout_extract(word);
}
#define CSR_RP_PIO_SFR_DBG_PADOE_ADDR (CSR_BASE + 0x23040L)
#define CSR_RP_PIO_SFR_DBG_PADOE_SIZE 1
static inline uint32_t rp_pio_sfr_dbg_padoe_read(void) {
	return csr_read_simple((CSR_BASE + 0x23040L));
}
#define CSR_RP_PIO_SFR_DBG_PADOE_SFR_DBG_PADOE_OFFSET 0
#define CSR_RP_PIO_SFR_DBG_PADOE_SFR_DBG_PADOE_SIZE 32
static inline uint32_t rp_pio_sfr_dbg_padoe_sfr_dbg_padoe_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_dbg_padoe_sfr_dbg_padoe_read(void) {
	uint32_t word = rp_pio_sfr_dbg_padoe_read();
	return rp_pio_sfr_dbg_padoe_sfr_dbg_padoe_extract(word);
}
#define CSR_RP_PIO_SFR_DBG_CFGINFO_ADDR (CSR_BASE + 0x23044L)
#define CSR_RP_PIO_SFR_DBG_CFGINFO_SIZE 1
static inline uint32_t rp_pio_sfr_dbg_cfginfo_read(void) {
	return csr_read_simple((CSR_BASE + 0x23044L));
}
#define CSR_RP_PIO_SFR_DBG_CFGINFO_CONSTANT0_OFFSET 0
#define CSR_RP_PIO_SFR_DBG_CFGINFO_CONSTANT0_SIZE 8
static inline uint32_t rp_pio_sfr_dbg_cfginfo_constant0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_dbg_cfginfo_constant0_read(void) {
	uint32_t word = rp_pio_sfr_dbg_cfginfo_read();
	return rp_pio_sfr_dbg_cfginfo_constant0_extract(word);
}
#define CSR_RP_PIO_SFR_DBG_CFGINFO_CONSTANT1_OFFSET 8
#define CSR_RP_PIO_SFR_DBG_CFGINFO_CONSTANT1_SIZE 8
static inline uint32_t rp_pio_sfr_dbg_cfginfo_constant1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_dbg_cfginfo_constant1_read(void) {
	uint32_t word = rp_pio_sfr_dbg_cfginfo_read();
	return rp_pio_sfr_dbg_cfginfo_constant1_extract(word);
}
#define CSR_RP_PIO_SFR_DBG_CFGINFO_CONSTANT2_OFFSET 16
#define CSR_RP_PIO_SFR_DBG_CFGINFO_CONSTANT2_SIZE 16
static inline uint32_t rp_pio_sfr_dbg_cfginfo_constant2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_dbg_cfginfo_constant2_read(void) {
	uint32_t word = rp_pio_sfr_dbg_cfginfo_read();
	return rp_pio_sfr_dbg_cfginfo_constant2_extract(word);
}
#define CSR_RP_PIO_SFR_INSTR_MEM0_ADDR (CSR_BASE + 0x23048L)
#define CSR_RP_PIO_SFR_INSTR_MEM0_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem0_read(void) {
	return csr_read_simple((CSR_BASE + 0x23048L));
}
static inline void rp_pio_sfr_instr_mem0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23048L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM0_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM0_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem0_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem0_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem0_read();
	return rp_pio_sfr_instr_mem0_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem0_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem0_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem0_read();
	uint32_t newword = rp_pio_sfr_instr_mem0_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem0_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM1_ADDR (CSR_BASE + 0x2304cL)
#define CSR_RP_PIO_SFR_INSTR_MEM1_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2304cL));
}
static inline void rp_pio_sfr_instr_mem1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2304cL));
}
#define CSR_RP_PIO_SFR_INSTR_MEM1_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM1_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem1_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem1_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem1_read();
	return rp_pio_sfr_instr_mem1_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem1_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem1_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem1_read();
	uint32_t newword = rp_pio_sfr_instr_mem1_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem1_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM2_ADDR (CSR_BASE + 0x23050L)
#define CSR_RP_PIO_SFR_INSTR_MEM2_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem2_read(void) {
	return csr_read_simple((CSR_BASE + 0x23050L));
}
static inline void rp_pio_sfr_instr_mem2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23050L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM2_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM2_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem2_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem2_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem2_read();
	return rp_pio_sfr_instr_mem2_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem2_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem2_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem2_read();
	uint32_t newword = rp_pio_sfr_instr_mem2_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem2_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM3_ADDR (CSR_BASE + 0x23054L)
#define CSR_RP_PIO_SFR_INSTR_MEM3_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem3_read(void) {
	return csr_read_simple((CSR_BASE + 0x23054L));
}
static inline void rp_pio_sfr_instr_mem3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23054L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM3_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM3_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem3_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem3_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem3_read();
	return rp_pio_sfr_instr_mem3_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem3_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem3_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem3_read();
	uint32_t newword = rp_pio_sfr_instr_mem3_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem3_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM4_ADDR (CSR_BASE + 0x23058L)
#define CSR_RP_PIO_SFR_INSTR_MEM4_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem4_read(void) {
	return csr_read_simple((CSR_BASE + 0x23058L));
}
static inline void rp_pio_sfr_instr_mem4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23058L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM4_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM4_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem4_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem4_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem4_read();
	return rp_pio_sfr_instr_mem4_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem4_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem4_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem4_read();
	uint32_t newword = rp_pio_sfr_instr_mem4_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem4_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM5_ADDR (CSR_BASE + 0x2305cL)
#define CSR_RP_PIO_SFR_INSTR_MEM5_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2305cL));
}
static inline void rp_pio_sfr_instr_mem5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2305cL));
}
#define CSR_RP_PIO_SFR_INSTR_MEM5_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM5_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem5_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem5_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem5_read();
	return rp_pio_sfr_instr_mem5_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem5_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem5_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem5_read();
	uint32_t newword = rp_pio_sfr_instr_mem5_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem5_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM6_ADDR (CSR_BASE + 0x23060L)
#define CSR_RP_PIO_SFR_INSTR_MEM6_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem6_read(void) {
	return csr_read_simple((CSR_BASE + 0x23060L));
}
static inline void rp_pio_sfr_instr_mem6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23060L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM6_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM6_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem6_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem6_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem6_read();
	return rp_pio_sfr_instr_mem6_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem6_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem6_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem6_read();
	uint32_t newword = rp_pio_sfr_instr_mem6_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem6_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM7_ADDR (CSR_BASE + 0x23064L)
#define CSR_RP_PIO_SFR_INSTR_MEM7_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem7_read(void) {
	return csr_read_simple((CSR_BASE + 0x23064L));
}
static inline void rp_pio_sfr_instr_mem7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23064L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM7_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM7_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem7_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem7_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem7_read();
	return rp_pio_sfr_instr_mem7_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem7_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem7_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem7_read();
	uint32_t newword = rp_pio_sfr_instr_mem7_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem7_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM8_ADDR (CSR_BASE + 0x23068L)
#define CSR_RP_PIO_SFR_INSTR_MEM8_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem8_read(void) {
	return csr_read_simple((CSR_BASE + 0x23068L));
}
static inline void rp_pio_sfr_instr_mem8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23068L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM8_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM8_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem8_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem8_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem8_read();
	return rp_pio_sfr_instr_mem8_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem8_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem8_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem8_read();
	uint32_t newword = rp_pio_sfr_instr_mem8_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem8_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM9_ADDR (CSR_BASE + 0x2306cL)
#define CSR_RP_PIO_SFR_INSTR_MEM9_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem9_read(void) {
	return csr_read_simple((CSR_BASE + 0x2306cL));
}
static inline void rp_pio_sfr_instr_mem9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2306cL));
}
#define CSR_RP_PIO_SFR_INSTR_MEM9_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM9_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem9_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem9_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem9_read();
	return rp_pio_sfr_instr_mem9_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem9_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem9_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem9_read();
	uint32_t newword = rp_pio_sfr_instr_mem9_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem9_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM10_ADDR (CSR_BASE + 0x23070L)
#define CSR_RP_PIO_SFR_INSTR_MEM10_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem10_read(void) {
	return csr_read_simple((CSR_BASE + 0x23070L));
}
static inline void rp_pio_sfr_instr_mem10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23070L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM10_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM10_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem10_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem10_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem10_read();
	return rp_pio_sfr_instr_mem10_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem10_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem10_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem10_read();
	uint32_t newword = rp_pio_sfr_instr_mem10_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem10_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM11_ADDR (CSR_BASE + 0x23074L)
#define CSR_RP_PIO_SFR_INSTR_MEM11_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem11_read(void) {
	return csr_read_simple((CSR_BASE + 0x23074L));
}
static inline void rp_pio_sfr_instr_mem11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23074L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM11_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM11_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem11_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem11_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem11_read();
	return rp_pio_sfr_instr_mem11_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem11_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem11_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem11_read();
	uint32_t newword = rp_pio_sfr_instr_mem11_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem11_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM12_ADDR (CSR_BASE + 0x23078L)
#define CSR_RP_PIO_SFR_INSTR_MEM12_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem12_read(void) {
	return csr_read_simple((CSR_BASE + 0x23078L));
}
static inline void rp_pio_sfr_instr_mem12_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23078L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM12_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM12_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem12_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem12_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem12_read();
	return rp_pio_sfr_instr_mem12_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem12_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem12_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem12_read();
	uint32_t newword = rp_pio_sfr_instr_mem12_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem12_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM13_ADDR (CSR_BASE + 0x2307cL)
#define CSR_RP_PIO_SFR_INSTR_MEM13_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem13_read(void) {
	return csr_read_simple((CSR_BASE + 0x2307cL));
}
static inline void rp_pio_sfr_instr_mem13_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2307cL));
}
#define CSR_RP_PIO_SFR_INSTR_MEM13_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM13_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem13_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem13_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem13_read();
	return rp_pio_sfr_instr_mem13_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem13_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem13_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem13_read();
	uint32_t newword = rp_pio_sfr_instr_mem13_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem13_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM14_ADDR (CSR_BASE + 0x23080L)
#define CSR_RP_PIO_SFR_INSTR_MEM14_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem14_read(void) {
	return csr_read_simple((CSR_BASE + 0x23080L));
}
static inline void rp_pio_sfr_instr_mem14_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23080L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM14_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM14_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem14_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem14_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem14_read();
	return rp_pio_sfr_instr_mem14_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem14_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem14_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem14_read();
	uint32_t newword = rp_pio_sfr_instr_mem14_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem14_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM15_ADDR (CSR_BASE + 0x23084L)
#define CSR_RP_PIO_SFR_INSTR_MEM15_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem15_read(void) {
	return csr_read_simple((CSR_BASE + 0x23084L));
}
static inline void rp_pio_sfr_instr_mem15_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23084L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM15_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM15_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem15_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem15_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem15_read();
	return rp_pio_sfr_instr_mem15_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem15_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem15_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem15_read();
	uint32_t newword = rp_pio_sfr_instr_mem15_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem15_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM16_ADDR (CSR_BASE + 0x23088L)
#define CSR_RP_PIO_SFR_INSTR_MEM16_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem16_read(void) {
	return csr_read_simple((CSR_BASE + 0x23088L));
}
static inline void rp_pio_sfr_instr_mem16_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23088L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM16_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM16_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem16_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem16_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem16_read();
	return rp_pio_sfr_instr_mem16_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem16_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem16_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem16_read();
	uint32_t newword = rp_pio_sfr_instr_mem16_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem16_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM17_ADDR (CSR_BASE + 0x2308cL)
#define CSR_RP_PIO_SFR_INSTR_MEM17_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem17_read(void) {
	return csr_read_simple((CSR_BASE + 0x2308cL));
}
static inline void rp_pio_sfr_instr_mem17_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2308cL));
}
#define CSR_RP_PIO_SFR_INSTR_MEM17_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM17_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem17_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem17_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem17_read();
	return rp_pio_sfr_instr_mem17_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem17_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem17_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem17_read();
	uint32_t newword = rp_pio_sfr_instr_mem17_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem17_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM18_ADDR (CSR_BASE + 0x23090L)
#define CSR_RP_PIO_SFR_INSTR_MEM18_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem18_read(void) {
	return csr_read_simple((CSR_BASE + 0x23090L));
}
static inline void rp_pio_sfr_instr_mem18_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23090L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM18_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM18_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem18_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem18_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem18_read();
	return rp_pio_sfr_instr_mem18_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem18_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem18_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem18_read();
	uint32_t newword = rp_pio_sfr_instr_mem18_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem18_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM19_ADDR (CSR_BASE + 0x23094L)
#define CSR_RP_PIO_SFR_INSTR_MEM19_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem19_read(void) {
	return csr_read_simple((CSR_BASE + 0x23094L));
}
static inline void rp_pio_sfr_instr_mem19_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23094L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM19_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM19_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem19_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem19_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem19_read();
	return rp_pio_sfr_instr_mem19_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem19_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem19_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem19_read();
	uint32_t newword = rp_pio_sfr_instr_mem19_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem19_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM20_ADDR (CSR_BASE + 0x23098L)
#define CSR_RP_PIO_SFR_INSTR_MEM20_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem20_read(void) {
	return csr_read_simple((CSR_BASE + 0x23098L));
}
static inline void rp_pio_sfr_instr_mem20_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23098L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM20_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM20_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem20_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem20_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem20_read();
	return rp_pio_sfr_instr_mem20_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem20_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem20_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem20_read();
	uint32_t newword = rp_pio_sfr_instr_mem20_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem20_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM21_ADDR (CSR_BASE + 0x2309cL)
#define CSR_RP_PIO_SFR_INSTR_MEM21_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem21_read(void) {
	return csr_read_simple((CSR_BASE + 0x2309cL));
}
static inline void rp_pio_sfr_instr_mem21_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2309cL));
}
#define CSR_RP_PIO_SFR_INSTR_MEM21_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM21_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem21_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem21_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem21_read();
	return rp_pio_sfr_instr_mem21_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem21_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem21_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem21_read();
	uint32_t newword = rp_pio_sfr_instr_mem21_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem21_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM22_ADDR (CSR_BASE + 0x230a0L)
#define CSR_RP_PIO_SFR_INSTR_MEM22_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem22_read(void) {
	return csr_read_simple((CSR_BASE + 0x230a0L));
}
static inline void rp_pio_sfr_instr_mem22_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230a0L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM22_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM22_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem22_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem22_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem22_read();
	return rp_pio_sfr_instr_mem22_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem22_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem22_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem22_read();
	uint32_t newword = rp_pio_sfr_instr_mem22_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem22_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM23_ADDR (CSR_BASE + 0x230a4L)
#define CSR_RP_PIO_SFR_INSTR_MEM23_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem23_read(void) {
	return csr_read_simple((CSR_BASE + 0x230a4L));
}
static inline void rp_pio_sfr_instr_mem23_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230a4L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM23_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM23_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem23_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem23_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem23_read();
	return rp_pio_sfr_instr_mem23_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem23_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem23_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem23_read();
	uint32_t newword = rp_pio_sfr_instr_mem23_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem23_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM24_ADDR (CSR_BASE + 0x230a8L)
#define CSR_RP_PIO_SFR_INSTR_MEM24_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem24_read(void) {
	return csr_read_simple((CSR_BASE + 0x230a8L));
}
static inline void rp_pio_sfr_instr_mem24_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230a8L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM24_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM24_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem24_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem24_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem24_read();
	return rp_pio_sfr_instr_mem24_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem24_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem24_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem24_read();
	uint32_t newword = rp_pio_sfr_instr_mem24_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem24_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM25_ADDR (CSR_BASE + 0x230acL)
#define CSR_RP_PIO_SFR_INSTR_MEM25_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem25_read(void) {
	return csr_read_simple((CSR_BASE + 0x230acL));
}
static inline void rp_pio_sfr_instr_mem25_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230acL));
}
#define CSR_RP_PIO_SFR_INSTR_MEM25_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM25_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem25_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem25_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem25_read();
	return rp_pio_sfr_instr_mem25_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem25_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem25_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem25_read();
	uint32_t newword = rp_pio_sfr_instr_mem25_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem25_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM26_ADDR (CSR_BASE + 0x230b0L)
#define CSR_RP_PIO_SFR_INSTR_MEM26_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem26_read(void) {
	return csr_read_simple((CSR_BASE + 0x230b0L));
}
static inline void rp_pio_sfr_instr_mem26_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230b0L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM26_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM26_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem26_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem26_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem26_read();
	return rp_pio_sfr_instr_mem26_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem26_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem26_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem26_read();
	uint32_t newword = rp_pio_sfr_instr_mem26_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem26_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM27_ADDR (CSR_BASE + 0x230b4L)
#define CSR_RP_PIO_SFR_INSTR_MEM27_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem27_read(void) {
	return csr_read_simple((CSR_BASE + 0x230b4L));
}
static inline void rp_pio_sfr_instr_mem27_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230b4L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM27_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM27_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem27_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem27_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem27_read();
	return rp_pio_sfr_instr_mem27_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem27_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem27_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem27_read();
	uint32_t newword = rp_pio_sfr_instr_mem27_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem27_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM28_ADDR (CSR_BASE + 0x230b8L)
#define CSR_RP_PIO_SFR_INSTR_MEM28_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem28_read(void) {
	return csr_read_simple((CSR_BASE + 0x230b8L));
}
static inline void rp_pio_sfr_instr_mem28_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230b8L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM28_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM28_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem28_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem28_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem28_read();
	return rp_pio_sfr_instr_mem28_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem28_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem28_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem28_read();
	uint32_t newword = rp_pio_sfr_instr_mem28_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem28_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM29_ADDR (CSR_BASE + 0x230bcL)
#define CSR_RP_PIO_SFR_INSTR_MEM29_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem29_read(void) {
	return csr_read_simple((CSR_BASE + 0x230bcL));
}
static inline void rp_pio_sfr_instr_mem29_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230bcL));
}
#define CSR_RP_PIO_SFR_INSTR_MEM29_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM29_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem29_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem29_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem29_read();
	return rp_pio_sfr_instr_mem29_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem29_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem29_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem29_read();
	uint32_t newword = rp_pio_sfr_instr_mem29_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem29_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM30_ADDR (CSR_BASE + 0x230c0L)
#define CSR_RP_PIO_SFR_INSTR_MEM30_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem30_read(void) {
	return csr_read_simple((CSR_BASE + 0x230c0L));
}
static inline void rp_pio_sfr_instr_mem30_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230c0L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM30_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM30_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem30_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem30_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem30_read();
	return rp_pio_sfr_instr_mem30_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem30_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem30_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem30_read();
	uint32_t newword = rp_pio_sfr_instr_mem30_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem30_write(newword);
}
#define CSR_RP_PIO_SFR_INSTR_MEM31_ADDR (CSR_BASE + 0x230c4L)
#define CSR_RP_PIO_SFR_INSTR_MEM31_SIZE 1
static inline uint32_t rp_pio_sfr_instr_mem31_read(void) {
	return csr_read_simple((CSR_BASE + 0x230c4L));
}
static inline void rp_pio_sfr_instr_mem31_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230c4L));
}
#define CSR_RP_PIO_SFR_INSTR_MEM31_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_INSTR_MEM31_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_instr_mem31_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_instr_mem31_instr_read(void) {
	uint32_t word = rp_pio_sfr_instr_mem31_read();
	return rp_pio_sfr_instr_mem31_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_instr_mem31_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_instr_mem31_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_instr_mem31_read();
	uint32_t newword = rp_pio_sfr_instr_mem31_instr_replace(oldword, plain_value);
	rp_pio_sfr_instr_mem31_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_CLKDIV_ADDR (CSR_BASE + 0x230c8L)
#define CSR_RP_PIO_SFR_SM0_CLKDIV_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_clkdiv_read(void) {
	return csr_read_simple((CSR_BASE + 0x230c8L));
}
static inline void rp_pio_sfr_sm0_clkdiv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230c8L));
}
#define CSR_RP_PIO_SFR_SM0_CLKDIV_UNUSED_DIV_OFFSET 0
#define CSR_RP_PIO_SFR_SM0_CLKDIV_UNUSED_DIV_SIZE 8
static inline uint32_t rp_pio_sfr_sm0_clkdiv_unused_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_clkdiv_unused_div_read(void) {
	uint32_t word = rp_pio_sfr_sm0_clkdiv_read();
	return rp_pio_sfr_sm0_clkdiv_unused_div_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_clkdiv_unused_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm0_clkdiv_unused_div_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm0_clkdiv_unused_div_replace(oldword, plain_value);
	rp_pio_sfr_sm0_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_CLKDIV_DIV_FRAC_OFFSET 8
#define CSR_RP_PIO_SFR_SM0_CLKDIV_DIV_FRAC_SIZE 8
static inline uint32_t rp_pio_sfr_sm0_clkdiv_div_frac_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_clkdiv_div_frac_read(void) {
	uint32_t word = rp_pio_sfr_sm0_clkdiv_read();
	return rp_pio_sfr_sm0_clkdiv_div_frac_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_clkdiv_div_frac_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_sm0_clkdiv_div_frac_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm0_clkdiv_div_frac_replace(oldword, plain_value);
	rp_pio_sfr_sm0_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_CLKDIV_DIV_INT_OFFSET 16
#define CSR_RP_PIO_SFR_SM0_CLKDIV_DIV_INT_SIZE 16
static inline uint32_t rp_pio_sfr_sm0_clkdiv_div_int_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_clkdiv_div_int_read(void) {
	uint32_t word = rp_pio_sfr_sm0_clkdiv_read();
	return rp_pio_sfr_sm0_clkdiv_div_int_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_clkdiv_div_int_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_sm0_clkdiv_div_int_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm0_clkdiv_div_int_replace(oldword, plain_value);
	rp_pio_sfr_sm0_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_ADDR (CSR_BASE + 0x230ccL)
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_execctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x230ccL));
}
static inline void rp_pio_sfr_sm0_execctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230ccL));
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_STATUS_N_OFFSET 0
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_STATUS_N_SIZE 4
static inline uint32_t rp_pio_sfr_sm0_execctrl_status_n_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_status_n_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_status_n_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_status_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm0_execctrl_status_n_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_status_n_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_STATUS_SEL_OFFSET 4
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_STATUS_SEL_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_execctrl_status_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_status_sel_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_status_sel_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_status_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_sm0_execctrl_status_sel_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_status_sel_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_RESVD_EXEC_OFFSET 5
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_RESVD_EXEC_SIZE 2
static inline uint32_t rp_pio_sfr_sm0_execctrl_resvd_exec_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_resvd_exec_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_resvd_exec_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_resvd_exec_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void rp_pio_sfr_sm0_execctrl_resvd_exec_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_resvd_exec_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_WRAP_TARGET_OFFSET 7
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_WRAP_TARGET_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_execctrl_wrap_target_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 7) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_wrap_target_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_wrap_target_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_wrap_target_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 7))) | (mask & plain_value)<< 7 ;
}
static inline void rp_pio_sfr_sm0_execctrl_wrap_target_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_wrap_target_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_PEND_OFFSET 12
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_PEND_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_execctrl_pend_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_pend_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_pend_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_pend_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 12))) | (mask & plain_value)<< 12 ;
}
static inline void rp_pio_sfr_sm0_execctrl_pend_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_pend_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_OUT_STICKY_OFFSET 17
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_OUT_STICKY_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_execctrl_out_sticky_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_out_sticky_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_out_sticky_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_out_sticky_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void rp_pio_sfr_sm0_execctrl_out_sticky_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_out_sticky_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_INLINE_OUT_EN_OFFSET 18
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_INLINE_OUT_EN_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_execctrl_inline_out_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 18) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_inline_out_en_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_inline_out_en_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_inline_out_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 18))) | (mask & plain_value)<< 18 ;
}
static inline void rp_pio_sfr_sm0_execctrl_inline_out_en_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_inline_out_en_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_OUT_EN_SEL_OFFSET 19
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_OUT_EN_SEL_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_execctrl_out_en_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_out_en_sel_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_out_en_sel_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_out_en_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void rp_pio_sfr_sm0_execctrl_out_en_sel_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_out_en_sel_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_JMP_PIN_OFFSET 24
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_JMP_PIN_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_execctrl_jmp_pin_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_jmp_pin_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_jmp_pin_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_jmp_pin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void rp_pio_sfr_sm0_execctrl_jmp_pin_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_jmp_pin_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_SIDE_PINDIR_OFFSET 29
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_SIDE_PINDIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_execctrl_side_pindir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_side_pindir_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_side_pindir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_side_pindir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void rp_pio_sfr_sm0_execctrl_side_pindir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_side_pindir_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_SIDESET_ENABLE_BIT_OFFSET 30
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_SIDESET_ENABLE_BIT_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_execctrl_sideset_enable_bit_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_sideset_enable_bit_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_sideset_enable_bit_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_sideset_enable_bit_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void rp_pio_sfr_sm0_execctrl_sideset_enable_bit_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_sideset_enable_bit_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_EXEC_STALLED_RO0_OFFSET 31
#define CSR_RP_PIO_SFR_SM0_EXECCTRL_EXEC_STALLED_RO0_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_execctrl_exec_stalled_ro0_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_exec_stalled_ro0_read(void) {
	uint32_t word = rp_pio_sfr_sm0_execctrl_read();
	return rp_pio_sfr_sm0_execctrl_exec_stalled_ro0_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_execctrl_exec_stalled_ro0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void rp_pio_sfr_sm0_execctrl_exec_stalled_ro0_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_execctrl_exec_stalled_ro0_replace(oldword, plain_value);
	rp_pio_sfr_sm0_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_ADDR (CSR_BASE + 0x230d0L)
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x230d0L));
}
static inline void rp_pio_sfr_sm0_shiftctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230d0L));
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_RESVD_SHIFT_OFFSET 0
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_RESVD_SHIFT_SIZE 16
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_resvd_shift_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_resvd_shift_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_resvd_shift_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_resvd_shift_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_resvd_shift_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_resvd_shift_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_AUTO_PUSH_OFFSET 16
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_AUTO_PUSH_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_auto_push_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_auto_push_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_auto_push_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_auto_push_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_auto_push_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_auto_push_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_AUTO_PULL_OFFSET 17
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_AUTO_PULL_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_auto_pull_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_auto_pull_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_auto_pull_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_auto_pull_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_auto_pull_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_auto_pull_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_IN_SHIFT_DIR_OFFSET 18
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_IN_SHIFT_DIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_in_shift_dir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 18) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_in_shift_dir_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_in_shift_dir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_in_shift_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 18))) | (mask & plain_value)<< 18 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_in_shift_dir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_in_shift_dir_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_OUT_SHIFT_DIR_OFFSET 19
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_OUT_SHIFT_DIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_out_shift_dir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_out_shift_dir_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_out_shift_dir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_out_shift_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_out_shift_dir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_out_shift_dir_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_ISR_THRESHOLD_OFFSET 20
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_ISR_THRESHOLD_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_isr_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_isr_threshold_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_isr_threshold_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_isr_threshold_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_isr_threshold_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_isr_threshold_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_OSR_THRESHOLD_OFFSET 25
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_OSR_THRESHOLD_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_osr_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 25) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_osr_threshold_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_osr_threshold_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_osr_threshold_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 25))) | (mask & plain_value)<< 25 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_osr_threshold_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_osr_threshold_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_JOIN_TX_OFFSET 30
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_JOIN_TX_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_join_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_join_tx_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_join_tx_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_join_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_join_tx_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_join_tx_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_JOIN_RX_OFFSET 31
#define CSR_RP_PIO_SFR_SM0_SHIFTCTRL_JOIN_RX_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_join_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_join_rx_read(void) {
	uint32_t word = rp_pio_sfr_sm0_shiftctrl_read();
	return rp_pio_sfr_sm0_shiftctrl_join_rx_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_shiftctrl_join_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void rp_pio_sfr_sm0_shiftctrl_join_rx_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_shiftctrl_join_rx_replace(oldword, plain_value);
	rp_pio_sfr_sm0_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_ADDR_ADDR (CSR_BASE + 0x230d4L)
#define CSR_RP_PIO_SFR_SM0_ADDR_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_addr_read(void) {
	return csr_read_simple((CSR_BASE + 0x230d4L));
}
#define CSR_RP_PIO_SFR_SM0_ADDR_PC_OFFSET 0
#define CSR_RP_PIO_SFR_SM0_ADDR_PC_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_addr_pc_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_addr_pc_read(void) {
	uint32_t word = rp_pio_sfr_sm0_addr_read();
	return rp_pio_sfr_sm0_addr_pc_extract(word);
}
#define CSR_RP_PIO_SFR_SM0_INSTR_ADDR (CSR_BASE + 0x230d8L)
#define CSR_RP_PIO_SFR_SM0_INSTR_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_instr_read(void) {
	return csr_read_simple((CSR_BASE + 0x230d8L));
}
static inline void rp_pio_sfr_sm0_instr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230d8L));
}
#define CSR_RP_PIO_SFR_SM0_INSTR_IMM_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_SM0_INSTR_IMM_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_sm0_instr_imm_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_instr_imm_instr_read(void) {
	uint32_t word = rp_pio_sfr_sm0_instr_read();
	return rp_pio_sfr_sm0_instr_imm_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_instr_imm_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm0_instr_imm_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_instr_read();
	uint32_t newword = rp_pio_sfr_sm0_instr_imm_instr_replace(oldword, plain_value);
	rp_pio_sfr_sm0_instr_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_PINCTRL_ADDR (CSR_BASE + 0x230dcL)
#define CSR_RP_PIO_SFR_SM0_PINCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm0_pinctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x230dcL));
}
static inline void rp_pio_sfr_sm0_pinctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230dcL));
}
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_OUT_BASE_OFFSET 0
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_OUT_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_out_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_out_base_read(void) {
	uint32_t word = rp_pio_sfr_sm0_pinctrl_read();
	return rp_pio_sfr_sm0_pinctrl_pins_out_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_out_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm0_pinctrl_pins_out_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_pinctrl_pins_out_base_replace(oldword, plain_value);
	rp_pio_sfr_sm0_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_SET_BASE_OFFSET 5
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_SET_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_set_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_set_base_read(void) {
	uint32_t word = rp_pio_sfr_sm0_pinctrl_read();
	return rp_pio_sfr_sm0_pinctrl_pins_set_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_set_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void rp_pio_sfr_sm0_pinctrl_pins_set_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_pinctrl_pins_set_base_replace(oldword, plain_value);
	rp_pio_sfr_sm0_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_SIDE_BASE_OFFSET 10
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_SIDE_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_side_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 10) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_side_base_read(void) {
	uint32_t word = rp_pio_sfr_sm0_pinctrl_read();
	return rp_pio_sfr_sm0_pinctrl_pins_side_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_side_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 10))) | (mask & plain_value)<< 10 ;
}
static inline void rp_pio_sfr_sm0_pinctrl_pins_side_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_pinctrl_pins_side_base_replace(oldword, plain_value);
	rp_pio_sfr_sm0_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_IN_BASE_OFFSET 15
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_IN_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_in_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 15) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_in_base_read(void) {
	uint32_t word = rp_pio_sfr_sm0_pinctrl_read();
	return rp_pio_sfr_sm0_pinctrl_pins_in_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_in_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 15))) | (mask & plain_value)<< 15 ;
}
static inline void rp_pio_sfr_sm0_pinctrl_pins_in_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_pinctrl_pins_in_base_replace(oldword, plain_value);
	rp_pio_sfr_sm0_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_OUT_COUNT_OFFSET 20
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_OUT_COUNT_SIZE 6
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_out_count_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_out_count_read(void) {
	uint32_t word = rp_pio_sfr_sm0_pinctrl_read();
	return rp_pio_sfr_sm0_pinctrl_pins_out_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_out_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_sm0_pinctrl_pins_out_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_pinctrl_pins_out_count_replace(oldword, plain_value);
	rp_pio_sfr_sm0_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_SET_COUNT_OFFSET 26
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_SET_COUNT_SIZE 3
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_set_count_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 26) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_set_count_read(void) {
	uint32_t word = rp_pio_sfr_sm0_pinctrl_read();
	return rp_pio_sfr_sm0_pinctrl_pins_set_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_set_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 26))) | (mask & plain_value)<< 26 ;
}
static inline void rp_pio_sfr_sm0_pinctrl_pins_set_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_pinctrl_pins_set_count_replace(oldword, plain_value);
	rp_pio_sfr_sm0_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_SIDE_COUNT_OFFSET 29
#define CSR_RP_PIO_SFR_SM0_PINCTRL_PINS_SIDE_COUNT_SIZE 3
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_side_count_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_side_count_read(void) {
	uint32_t word = rp_pio_sfr_sm0_pinctrl_read();
	return rp_pio_sfr_sm0_pinctrl_pins_side_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm0_pinctrl_pins_side_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void rp_pio_sfr_sm0_pinctrl_pins_side_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm0_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm0_pinctrl_pins_side_count_replace(oldword, plain_value);
	rp_pio_sfr_sm0_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_CLKDIV_ADDR (CSR_BASE + 0x230e0L)
#define CSR_RP_PIO_SFR_SM1_CLKDIV_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_clkdiv_read(void) {
	return csr_read_simple((CSR_BASE + 0x230e0L));
}
static inline void rp_pio_sfr_sm1_clkdiv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230e0L));
}
#define CSR_RP_PIO_SFR_SM1_CLKDIV_UNUSED_DIV_OFFSET 0
#define CSR_RP_PIO_SFR_SM1_CLKDIV_UNUSED_DIV_SIZE 8
static inline uint32_t rp_pio_sfr_sm1_clkdiv_unused_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_clkdiv_unused_div_read(void) {
	uint32_t word = rp_pio_sfr_sm1_clkdiv_read();
	return rp_pio_sfr_sm1_clkdiv_unused_div_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_clkdiv_unused_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm1_clkdiv_unused_div_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm1_clkdiv_unused_div_replace(oldword, plain_value);
	rp_pio_sfr_sm1_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_CLKDIV_DIV_FRAC_OFFSET 8
#define CSR_RP_PIO_SFR_SM1_CLKDIV_DIV_FRAC_SIZE 8
static inline uint32_t rp_pio_sfr_sm1_clkdiv_div_frac_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_clkdiv_div_frac_read(void) {
	uint32_t word = rp_pio_sfr_sm1_clkdiv_read();
	return rp_pio_sfr_sm1_clkdiv_div_frac_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_clkdiv_div_frac_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_sm1_clkdiv_div_frac_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm1_clkdiv_div_frac_replace(oldword, plain_value);
	rp_pio_sfr_sm1_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_CLKDIV_DIV_INT_OFFSET 16
#define CSR_RP_PIO_SFR_SM1_CLKDIV_DIV_INT_SIZE 16
static inline uint32_t rp_pio_sfr_sm1_clkdiv_div_int_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_clkdiv_div_int_read(void) {
	uint32_t word = rp_pio_sfr_sm1_clkdiv_read();
	return rp_pio_sfr_sm1_clkdiv_div_int_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_clkdiv_div_int_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_sm1_clkdiv_div_int_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm1_clkdiv_div_int_replace(oldword, plain_value);
	rp_pio_sfr_sm1_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_ADDR (CSR_BASE + 0x230e4L)
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_execctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x230e4L));
}
static inline void rp_pio_sfr_sm1_execctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230e4L));
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_STATUS_N_OFFSET 0
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_STATUS_N_SIZE 4
static inline uint32_t rp_pio_sfr_sm1_execctrl_status_n_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_status_n_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_status_n_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_status_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm1_execctrl_status_n_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_status_n_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_STATUS_SEL_OFFSET 4
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_STATUS_SEL_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_execctrl_status_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_status_sel_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_status_sel_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_status_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_sm1_execctrl_status_sel_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_status_sel_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_RESVD_EXEC_OFFSET 5
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_RESVD_EXEC_SIZE 2
static inline uint32_t rp_pio_sfr_sm1_execctrl_resvd_exec_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_resvd_exec_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_resvd_exec_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_resvd_exec_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void rp_pio_sfr_sm1_execctrl_resvd_exec_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_resvd_exec_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_WRAP_TARGET_OFFSET 7
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_WRAP_TARGET_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_execctrl_wrap_target_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 7) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_wrap_target_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_wrap_target_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_wrap_target_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 7))) | (mask & plain_value)<< 7 ;
}
static inline void rp_pio_sfr_sm1_execctrl_wrap_target_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_wrap_target_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_PEND_OFFSET 12
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_PEND_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_execctrl_pend_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_pend_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_pend_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_pend_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 12))) | (mask & plain_value)<< 12 ;
}
static inline void rp_pio_sfr_sm1_execctrl_pend_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_pend_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_OUT_STICKY_OFFSET 17
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_OUT_STICKY_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_execctrl_out_sticky_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_out_sticky_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_out_sticky_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_out_sticky_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void rp_pio_sfr_sm1_execctrl_out_sticky_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_out_sticky_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_INLINE_OUT_EN_OFFSET 18
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_INLINE_OUT_EN_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_execctrl_inline_out_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 18) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_inline_out_en_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_inline_out_en_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_inline_out_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 18))) | (mask & plain_value)<< 18 ;
}
static inline void rp_pio_sfr_sm1_execctrl_inline_out_en_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_inline_out_en_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_OUT_EN_SEL_OFFSET 19
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_OUT_EN_SEL_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_execctrl_out_en_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_out_en_sel_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_out_en_sel_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_out_en_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void rp_pio_sfr_sm1_execctrl_out_en_sel_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_out_en_sel_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_JMP_PIN_OFFSET 24
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_JMP_PIN_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_execctrl_jmp_pin_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_jmp_pin_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_jmp_pin_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_jmp_pin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void rp_pio_sfr_sm1_execctrl_jmp_pin_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_jmp_pin_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_SIDE_PINDIR_OFFSET 29
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_SIDE_PINDIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_execctrl_side_pindir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_side_pindir_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_side_pindir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_side_pindir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void rp_pio_sfr_sm1_execctrl_side_pindir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_side_pindir_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_SIDESET_ENABLE_BIT_OFFSET 30
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_SIDESET_ENABLE_BIT_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_execctrl_sideset_enable_bit_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_sideset_enable_bit_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_sideset_enable_bit_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_sideset_enable_bit_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void rp_pio_sfr_sm1_execctrl_sideset_enable_bit_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_sideset_enable_bit_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_EXEC_STALLED_RO1_OFFSET 31
#define CSR_RP_PIO_SFR_SM1_EXECCTRL_EXEC_STALLED_RO1_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_execctrl_exec_stalled_ro1_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_exec_stalled_ro1_read(void) {
	uint32_t word = rp_pio_sfr_sm1_execctrl_read();
	return rp_pio_sfr_sm1_execctrl_exec_stalled_ro1_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_execctrl_exec_stalled_ro1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void rp_pio_sfr_sm1_execctrl_exec_stalled_ro1_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_execctrl_exec_stalled_ro1_replace(oldword, plain_value);
	rp_pio_sfr_sm1_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_ADDR (CSR_BASE + 0x230e8L)
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x230e8L));
}
static inline void rp_pio_sfr_sm1_shiftctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230e8L));
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_RESVD_SHIFT_OFFSET 0
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_RESVD_SHIFT_SIZE 16
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_resvd_shift_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_resvd_shift_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_resvd_shift_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_resvd_shift_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_resvd_shift_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_resvd_shift_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_AUTO_PUSH_OFFSET 16
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_AUTO_PUSH_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_auto_push_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_auto_push_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_auto_push_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_auto_push_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_auto_push_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_auto_push_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_AUTO_PULL_OFFSET 17
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_AUTO_PULL_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_auto_pull_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_auto_pull_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_auto_pull_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_auto_pull_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_auto_pull_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_auto_pull_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_IN_SHIFT_DIR_OFFSET 18
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_IN_SHIFT_DIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_in_shift_dir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 18) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_in_shift_dir_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_in_shift_dir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_in_shift_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 18))) | (mask & plain_value)<< 18 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_in_shift_dir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_in_shift_dir_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_OUT_SHIFT_DIR_OFFSET 19
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_OUT_SHIFT_DIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_out_shift_dir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_out_shift_dir_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_out_shift_dir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_out_shift_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_out_shift_dir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_out_shift_dir_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_ISR_THRESHOLD_OFFSET 20
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_ISR_THRESHOLD_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_isr_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_isr_threshold_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_isr_threshold_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_isr_threshold_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_isr_threshold_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_isr_threshold_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_OSR_THRESHOLD_OFFSET 25
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_OSR_THRESHOLD_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_osr_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 25) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_osr_threshold_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_osr_threshold_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_osr_threshold_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 25))) | (mask & plain_value)<< 25 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_osr_threshold_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_osr_threshold_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_JOIN_TX_OFFSET 30
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_JOIN_TX_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_join_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_join_tx_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_join_tx_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_join_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_join_tx_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_join_tx_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_JOIN_RX_OFFSET 31
#define CSR_RP_PIO_SFR_SM1_SHIFTCTRL_JOIN_RX_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_join_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_join_rx_read(void) {
	uint32_t word = rp_pio_sfr_sm1_shiftctrl_read();
	return rp_pio_sfr_sm1_shiftctrl_join_rx_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_shiftctrl_join_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void rp_pio_sfr_sm1_shiftctrl_join_rx_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_shiftctrl_join_rx_replace(oldword, plain_value);
	rp_pio_sfr_sm1_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_ADDR_ADDR (CSR_BASE + 0x230ecL)
#define CSR_RP_PIO_SFR_SM1_ADDR_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_addr_read(void) {
	return csr_read_simple((CSR_BASE + 0x230ecL));
}
#define CSR_RP_PIO_SFR_SM1_ADDR_PC_OFFSET 0
#define CSR_RP_PIO_SFR_SM1_ADDR_PC_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_addr_pc_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_addr_pc_read(void) {
	uint32_t word = rp_pio_sfr_sm1_addr_read();
	return rp_pio_sfr_sm1_addr_pc_extract(word);
}
#define CSR_RP_PIO_SFR_SM1_INSTR_ADDR (CSR_BASE + 0x230f0L)
#define CSR_RP_PIO_SFR_SM1_INSTR_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_instr_read(void) {
	return csr_read_simple((CSR_BASE + 0x230f0L));
}
static inline void rp_pio_sfr_sm1_instr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230f0L));
}
#define CSR_RP_PIO_SFR_SM1_INSTR_IMM_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_SM1_INSTR_IMM_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_sm1_instr_imm_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_instr_imm_instr_read(void) {
	uint32_t word = rp_pio_sfr_sm1_instr_read();
	return rp_pio_sfr_sm1_instr_imm_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_instr_imm_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm1_instr_imm_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_instr_read();
	uint32_t newword = rp_pio_sfr_sm1_instr_imm_instr_replace(oldword, plain_value);
	rp_pio_sfr_sm1_instr_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_PINCTRL_ADDR (CSR_BASE + 0x230f4L)
#define CSR_RP_PIO_SFR_SM1_PINCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm1_pinctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x230f4L));
}
static inline void rp_pio_sfr_sm1_pinctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230f4L));
}
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_OUT_BASE_OFFSET 0
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_OUT_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_out_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_out_base_read(void) {
	uint32_t word = rp_pio_sfr_sm1_pinctrl_read();
	return rp_pio_sfr_sm1_pinctrl_pins_out_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_out_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm1_pinctrl_pins_out_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_pinctrl_pins_out_base_replace(oldword, plain_value);
	rp_pio_sfr_sm1_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_SET_BASE_OFFSET 5
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_SET_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_set_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_set_base_read(void) {
	uint32_t word = rp_pio_sfr_sm1_pinctrl_read();
	return rp_pio_sfr_sm1_pinctrl_pins_set_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_set_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void rp_pio_sfr_sm1_pinctrl_pins_set_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_pinctrl_pins_set_base_replace(oldword, plain_value);
	rp_pio_sfr_sm1_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_SIDE_BASE_OFFSET 10
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_SIDE_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_side_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 10) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_side_base_read(void) {
	uint32_t word = rp_pio_sfr_sm1_pinctrl_read();
	return rp_pio_sfr_sm1_pinctrl_pins_side_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_side_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 10))) | (mask & plain_value)<< 10 ;
}
static inline void rp_pio_sfr_sm1_pinctrl_pins_side_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_pinctrl_pins_side_base_replace(oldword, plain_value);
	rp_pio_sfr_sm1_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_IN_BASE_OFFSET 15
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_IN_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_in_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 15) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_in_base_read(void) {
	uint32_t word = rp_pio_sfr_sm1_pinctrl_read();
	return rp_pio_sfr_sm1_pinctrl_pins_in_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_in_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 15))) | (mask & plain_value)<< 15 ;
}
static inline void rp_pio_sfr_sm1_pinctrl_pins_in_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_pinctrl_pins_in_base_replace(oldword, plain_value);
	rp_pio_sfr_sm1_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_OUT_COUNT_OFFSET 20
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_OUT_COUNT_SIZE 6
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_out_count_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_out_count_read(void) {
	uint32_t word = rp_pio_sfr_sm1_pinctrl_read();
	return rp_pio_sfr_sm1_pinctrl_pins_out_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_out_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_sm1_pinctrl_pins_out_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_pinctrl_pins_out_count_replace(oldword, plain_value);
	rp_pio_sfr_sm1_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_SET_COUNT_OFFSET 26
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_SET_COUNT_SIZE 3
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_set_count_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 26) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_set_count_read(void) {
	uint32_t word = rp_pio_sfr_sm1_pinctrl_read();
	return rp_pio_sfr_sm1_pinctrl_pins_set_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_set_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 26))) | (mask & plain_value)<< 26 ;
}
static inline void rp_pio_sfr_sm1_pinctrl_pins_set_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_pinctrl_pins_set_count_replace(oldword, plain_value);
	rp_pio_sfr_sm1_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_SIDE_COUNT_OFFSET 29
#define CSR_RP_PIO_SFR_SM1_PINCTRL_PINS_SIDE_COUNT_SIZE 3
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_side_count_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_side_count_read(void) {
	uint32_t word = rp_pio_sfr_sm1_pinctrl_read();
	return rp_pio_sfr_sm1_pinctrl_pins_side_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm1_pinctrl_pins_side_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void rp_pio_sfr_sm1_pinctrl_pins_side_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm1_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm1_pinctrl_pins_side_count_replace(oldword, plain_value);
	rp_pio_sfr_sm1_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_CLKDIV_ADDR (CSR_BASE + 0x230f8L)
#define CSR_RP_PIO_SFR_SM2_CLKDIV_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_clkdiv_read(void) {
	return csr_read_simple((CSR_BASE + 0x230f8L));
}
static inline void rp_pio_sfr_sm2_clkdiv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230f8L));
}
#define CSR_RP_PIO_SFR_SM2_CLKDIV_UNUSED_DIV_OFFSET 0
#define CSR_RP_PIO_SFR_SM2_CLKDIV_UNUSED_DIV_SIZE 8
static inline uint32_t rp_pio_sfr_sm2_clkdiv_unused_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_clkdiv_unused_div_read(void) {
	uint32_t word = rp_pio_sfr_sm2_clkdiv_read();
	return rp_pio_sfr_sm2_clkdiv_unused_div_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_clkdiv_unused_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm2_clkdiv_unused_div_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm2_clkdiv_unused_div_replace(oldword, plain_value);
	rp_pio_sfr_sm2_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_CLKDIV_DIV_FRAC_OFFSET 8
#define CSR_RP_PIO_SFR_SM2_CLKDIV_DIV_FRAC_SIZE 8
static inline uint32_t rp_pio_sfr_sm2_clkdiv_div_frac_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_clkdiv_div_frac_read(void) {
	uint32_t word = rp_pio_sfr_sm2_clkdiv_read();
	return rp_pio_sfr_sm2_clkdiv_div_frac_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_clkdiv_div_frac_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_sm2_clkdiv_div_frac_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm2_clkdiv_div_frac_replace(oldword, plain_value);
	rp_pio_sfr_sm2_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_CLKDIV_DIV_INT_OFFSET 16
#define CSR_RP_PIO_SFR_SM2_CLKDIV_DIV_INT_SIZE 16
static inline uint32_t rp_pio_sfr_sm2_clkdiv_div_int_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_clkdiv_div_int_read(void) {
	uint32_t word = rp_pio_sfr_sm2_clkdiv_read();
	return rp_pio_sfr_sm2_clkdiv_div_int_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_clkdiv_div_int_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_sm2_clkdiv_div_int_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm2_clkdiv_div_int_replace(oldword, plain_value);
	rp_pio_sfr_sm2_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_ADDR (CSR_BASE + 0x230fcL)
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_execctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x230fcL));
}
static inline void rp_pio_sfr_sm2_execctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x230fcL));
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_STATUS_N_OFFSET 0
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_STATUS_N_SIZE 4
static inline uint32_t rp_pio_sfr_sm2_execctrl_status_n_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_status_n_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_status_n_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_status_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm2_execctrl_status_n_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_status_n_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_STATUS_SEL_OFFSET 4
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_STATUS_SEL_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_execctrl_status_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_status_sel_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_status_sel_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_status_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_sm2_execctrl_status_sel_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_status_sel_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_RESVD_EXEC_OFFSET 5
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_RESVD_EXEC_SIZE 2
static inline uint32_t rp_pio_sfr_sm2_execctrl_resvd_exec_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_resvd_exec_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_resvd_exec_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_resvd_exec_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void rp_pio_sfr_sm2_execctrl_resvd_exec_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_resvd_exec_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_WRAP_TARGET_OFFSET 7
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_WRAP_TARGET_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_execctrl_wrap_target_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 7) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_wrap_target_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_wrap_target_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_wrap_target_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 7))) | (mask & plain_value)<< 7 ;
}
static inline void rp_pio_sfr_sm2_execctrl_wrap_target_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_wrap_target_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_PEND_OFFSET 12
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_PEND_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_execctrl_pend_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_pend_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_pend_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_pend_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 12))) | (mask & plain_value)<< 12 ;
}
static inline void rp_pio_sfr_sm2_execctrl_pend_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_pend_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_OUT_STICKY_OFFSET 17
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_OUT_STICKY_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_execctrl_out_sticky_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_out_sticky_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_out_sticky_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_out_sticky_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void rp_pio_sfr_sm2_execctrl_out_sticky_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_out_sticky_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_INLINE_OUT_EN_OFFSET 18
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_INLINE_OUT_EN_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_execctrl_inline_out_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 18) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_inline_out_en_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_inline_out_en_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_inline_out_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 18))) | (mask & plain_value)<< 18 ;
}
static inline void rp_pio_sfr_sm2_execctrl_inline_out_en_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_inline_out_en_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_OUT_EN_SEL_OFFSET 19
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_OUT_EN_SEL_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_execctrl_out_en_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_out_en_sel_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_out_en_sel_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_out_en_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void rp_pio_sfr_sm2_execctrl_out_en_sel_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_out_en_sel_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_JMP_PIN_OFFSET 24
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_JMP_PIN_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_execctrl_jmp_pin_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_jmp_pin_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_jmp_pin_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_jmp_pin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void rp_pio_sfr_sm2_execctrl_jmp_pin_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_jmp_pin_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_SIDE_PINDIR_OFFSET 29
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_SIDE_PINDIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_execctrl_side_pindir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_side_pindir_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_side_pindir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_side_pindir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void rp_pio_sfr_sm2_execctrl_side_pindir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_side_pindir_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_SIDESET_ENABLE_BIT_OFFSET 30
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_SIDESET_ENABLE_BIT_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_execctrl_sideset_enable_bit_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_sideset_enable_bit_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_sideset_enable_bit_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_sideset_enable_bit_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void rp_pio_sfr_sm2_execctrl_sideset_enable_bit_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_sideset_enable_bit_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_EXEC_STALLED_RO2_OFFSET 31
#define CSR_RP_PIO_SFR_SM2_EXECCTRL_EXEC_STALLED_RO2_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_execctrl_exec_stalled_ro2_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_exec_stalled_ro2_read(void) {
	uint32_t word = rp_pio_sfr_sm2_execctrl_read();
	return rp_pio_sfr_sm2_execctrl_exec_stalled_ro2_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_execctrl_exec_stalled_ro2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void rp_pio_sfr_sm2_execctrl_exec_stalled_ro2_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_execctrl_exec_stalled_ro2_replace(oldword, plain_value);
	rp_pio_sfr_sm2_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_ADDR (CSR_BASE + 0x23100L)
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x23100L));
}
static inline void rp_pio_sfr_sm2_shiftctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23100L));
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_RESVD_SHIFT_OFFSET 0
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_RESVD_SHIFT_SIZE 16
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_resvd_shift_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_resvd_shift_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_resvd_shift_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_resvd_shift_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_resvd_shift_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_resvd_shift_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_AUTO_PUSH_OFFSET 16
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_AUTO_PUSH_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_auto_push_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_auto_push_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_auto_push_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_auto_push_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_auto_push_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_auto_push_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_AUTO_PULL_OFFSET 17
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_AUTO_PULL_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_auto_pull_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_auto_pull_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_auto_pull_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_auto_pull_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_auto_pull_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_auto_pull_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_IN_SHIFT_DIR_OFFSET 18
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_IN_SHIFT_DIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_in_shift_dir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 18) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_in_shift_dir_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_in_shift_dir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_in_shift_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 18))) | (mask & plain_value)<< 18 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_in_shift_dir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_in_shift_dir_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_OUT_SHIFT_DIR_OFFSET 19
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_OUT_SHIFT_DIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_out_shift_dir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_out_shift_dir_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_out_shift_dir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_out_shift_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_out_shift_dir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_out_shift_dir_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_ISR_THRESHOLD_OFFSET 20
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_ISR_THRESHOLD_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_isr_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_isr_threshold_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_isr_threshold_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_isr_threshold_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_isr_threshold_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_isr_threshold_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_OSR_THRESHOLD_OFFSET 25
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_OSR_THRESHOLD_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_osr_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 25) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_osr_threshold_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_osr_threshold_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_osr_threshold_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 25))) | (mask & plain_value)<< 25 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_osr_threshold_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_osr_threshold_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_JOIN_TX_OFFSET 30
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_JOIN_TX_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_join_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_join_tx_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_join_tx_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_join_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_join_tx_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_join_tx_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_JOIN_RX_OFFSET 31
#define CSR_RP_PIO_SFR_SM2_SHIFTCTRL_JOIN_RX_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_join_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_join_rx_read(void) {
	uint32_t word = rp_pio_sfr_sm2_shiftctrl_read();
	return rp_pio_sfr_sm2_shiftctrl_join_rx_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_shiftctrl_join_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void rp_pio_sfr_sm2_shiftctrl_join_rx_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_shiftctrl_join_rx_replace(oldword, plain_value);
	rp_pio_sfr_sm2_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_ADDR_ADDR (CSR_BASE + 0x23104L)
#define CSR_RP_PIO_SFR_SM2_ADDR_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_addr_read(void) {
	return csr_read_simple((CSR_BASE + 0x23104L));
}
#define CSR_RP_PIO_SFR_SM2_ADDR_PC_OFFSET 0
#define CSR_RP_PIO_SFR_SM2_ADDR_PC_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_addr_pc_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_addr_pc_read(void) {
	uint32_t word = rp_pio_sfr_sm2_addr_read();
	return rp_pio_sfr_sm2_addr_pc_extract(word);
}
#define CSR_RP_PIO_SFR_SM2_INSTR_ADDR (CSR_BASE + 0x23108L)
#define CSR_RP_PIO_SFR_SM2_INSTR_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_instr_read(void) {
	return csr_read_simple((CSR_BASE + 0x23108L));
}
static inline void rp_pio_sfr_sm2_instr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23108L));
}
#define CSR_RP_PIO_SFR_SM2_INSTR_IMM_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_SM2_INSTR_IMM_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_sm2_instr_imm_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_instr_imm_instr_read(void) {
	uint32_t word = rp_pio_sfr_sm2_instr_read();
	return rp_pio_sfr_sm2_instr_imm_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_instr_imm_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm2_instr_imm_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_instr_read();
	uint32_t newword = rp_pio_sfr_sm2_instr_imm_instr_replace(oldword, plain_value);
	rp_pio_sfr_sm2_instr_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_PINCTRL_ADDR (CSR_BASE + 0x2310cL)
#define CSR_RP_PIO_SFR_SM2_PINCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm2_pinctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x2310cL));
}
static inline void rp_pio_sfr_sm2_pinctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2310cL));
}
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_OUT_BASE_OFFSET 0
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_OUT_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_out_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_out_base_read(void) {
	uint32_t word = rp_pio_sfr_sm2_pinctrl_read();
	return rp_pio_sfr_sm2_pinctrl_pins_out_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_out_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm2_pinctrl_pins_out_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_pinctrl_pins_out_base_replace(oldword, plain_value);
	rp_pio_sfr_sm2_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_SET_BASE_OFFSET 5
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_SET_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_set_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_set_base_read(void) {
	uint32_t word = rp_pio_sfr_sm2_pinctrl_read();
	return rp_pio_sfr_sm2_pinctrl_pins_set_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_set_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void rp_pio_sfr_sm2_pinctrl_pins_set_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_pinctrl_pins_set_base_replace(oldword, plain_value);
	rp_pio_sfr_sm2_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_SIDE_BASE_OFFSET 10
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_SIDE_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_side_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 10) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_side_base_read(void) {
	uint32_t word = rp_pio_sfr_sm2_pinctrl_read();
	return rp_pio_sfr_sm2_pinctrl_pins_side_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_side_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 10))) | (mask & plain_value)<< 10 ;
}
static inline void rp_pio_sfr_sm2_pinctrl_pins_side_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_pinctrl_pins_side_base_replace(oldword, plain_value);
	rp_pio_sfr_sm2_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_IN_BASE_OFFSET 15
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_IN_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_in_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 15) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_in_base_read(void) {
	uint32_t word = rp_pio_sfr_sm2_pinctrl_read();
	return rp_pio_sfr_sm2_pinctrl_pins_in_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_in_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 15))) | (mask & plain_value)<< 15 ;
}
static inline void rp_pio_sfr_sm2_pinctrl_pins_in_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_pinctrl_pins_in_base_replace(oldword, plain_value);
	rp_pio_sfr_sm2_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_OUT_COUNT_OFFSET 20
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_OUT_COUNT_SIZE 6
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_out_count_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_out_count_read(void) {
	uint32_t word = rp_pio_sfr_sm2_pinctrl_read();
	return rp_pio_sfr_sm2_pinctrl_pins_out_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_out_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_sm2_pinctrl_pins_out_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_pinctrl_pins_out_count_replace(oldword, plain_value);
	rp_pio_sfr_sm2_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_SET_COUNT_OFFSET 26
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_SET_COUNT_SIZE 3
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_set_count_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 26) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_set_count_read(void) {
	uint32_t word = rp_pio_sfr_sm2_pinctrl_read();
	return rp_pio_sfr_sm2_pinctrl_pins_set_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_set_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 26))) | (mask & plain_value)<< 26 ;
}
static inline void rp_pio_sfr_sm2_pinctrl_pins_set_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_pinctrl_pins_set_count_replace(oldword, plain_value);
	rp_pio_sfr_sm2_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_SIDE_COUNT_OFFSET 29
#define CSR_RP_PIO_SFR_SM2_PINCTRL_PINS_SIDE_COUNT_SIZE 3
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_side_count_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_side_count_read(void) {
	uint32_t word = rp_pio_sfr_sm2_pinctrl_read();
	return rp_pio_sfr_sm2_pinctrl_pins_side_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm2_pinctrl_pins_side_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void rp_pio_sfr_sm2_pinctrl_pins_side_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm2_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm2_pinctrl_pins_side_count_replace(oldword, plain_value);
	rp_pio_sfr_sm2_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_CLKDIV_ADDR (CSR_BASE + 0x23110L)
#define CSR_RP_PIO_SFR_SM3_CLKDIV_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_clkdiv_read(void) {
	return csr_read_simple((CSR_BASE + 0x23110L));
}
static inline void rp_pio_sfr_sm3_clkdiv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23110L));
}
#define CSR_RP_PIO_SFR_SM3_CLKDIV_UNUSED_DIV_OFFSET 0
#define CSR_RP_PIO_SFR_SM3_CLKDIV_UNUSED_DIV_SIZE 8
static inline uint32_t rp_pio_sfr_sm3_clkdiv_unused_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_clkdiv_unused_div_read(void) {
	uint32_t word = rp_pio_sfr_sm3_clkdiv_read();
	return rp_pio_sfr_sm3_clkdiv_unused_div_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_clkdiv_unused_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm3_clkdiv_unused_div_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm3_clkdiv_unused_div_replace(oldword, plain_value);
	rp_pio_sfr_sm3_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_CLKDIV_DIV_FRAC_OFFSET 8
#define CSR_RP_PIO_SFR_SM3_CLKDIV_DIV_FRAC_SIZE 8
static inline uint32_t rp_pio_sfr_sm3_clkdiv_div_frac_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_clkdiv_div_frac_read(void) {
	uint32_t word = rp_pio_sfr_sm3_clkdiv_read();
	return rp_pio_sfr_sm3_clkdiv_div_frac_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_clkdiv_div_frac_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_sm3_clkdiv_div_frac_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm3_clkdiv_div_frac_replace(oldword, plain_value);
	rp_pio_sfr_sm3_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_CLKDIV_DIV_INT_OFFSET 16
#define CSR_RP_PIO_SFR_SM3_CLKDIV_DIV_INT_SIZE 16
static inline uint32_t rp_pio_sfr_sm3_clkdiv_div_int_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_clkdiv_div_int_read(void) {
	uint32_t word = rp_pio_sfr_sm3_clkdiv_read();
	return rp_pio_sfr_sm3_clkdiv_div_int_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_clkdiv_div_int_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_sm3_clkdiv_div_int_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_clkdiv_read();
	uint32_t newword = rp_pio_sfr_sm3_clkdiv_div_int_replace(oldword, plain_value);
	rp_pio_sfr_sm3_clkdiv_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_ADDR (CSR_BASE + 0x23114L)
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_execctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x23114L));
}
static inline void rp_pio_sfr_sm3_execctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23114L));
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_STATUS_N_OFFSET 0
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_STATUS_N_SIZE 4
static inline uint32_t rp_pio_sfr_sm3_execctrl_status_n_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_status_n_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_status_n_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_status_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm3_execctrl_status_n_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_status_n_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_STATUS_SEL_OFFSET 4
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_STATUS_SEL_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_execctrl_status_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_status_sel_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_status_sel_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_status_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_sm3_execctrl_status_sel_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_status_sel_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_RESVD_EXEC_OFFSET 5
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_RESVD_EXEC_SIZE 2
static inline uint32_t rp_pio_sfr_sm3_execctrl_resvd_exec_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_resvd_exec_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_resvd_exec_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_resvd_exec_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void rp_pio_sfr_sm3_execctrl_resvd_exec_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_resvd_exec_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_WRAP_TARGET_OFFSET 7
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_WRAP_TARGET_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_execctrl_wrap_target_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 7) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_wrap_target_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_wrap_target_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_wrap_target_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 7))) | (mask & plain_value)<< 7 ;
}
static inline void rp_pio_sfr_sm3_execctrl_wrap_target_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_wrap_target_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_PEND_OFFSET 12
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_PEND_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_execctrl_pend_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_pend_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_pend_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_pend_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 12))) | (mask & plain_value)<< 12 ;
}
static inline void rp_pio_sfr_sm3_execctrl_pend_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_pend_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_OUT_STICKY_OFFSET 17
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_OUT_STICKY_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_execctrl_out_sticky_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_out_sticky_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_out_sticky_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_out_sticky_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void rp_pio_sfr_sm3_execctrl_out_sticky_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_out_sticky_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_INLINE_OUT_EN_OFFSET 18
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_INLINE_OUT_EN_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_execctrl_inline_out_en_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 18) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_inline_out_en_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_inline_out_en_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_inline_out_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 18))) | (mask & plain_value)<< 18 ;
}
static inline void rp_pio_sfr_sm3_execctrl_inline_out_en_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_inline_out_en_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_OUT_EN_SEL_OFFSET 19
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_OUT_EN_SEL_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_execctrl_out_en_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_out_en_sel_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_out_en_sel_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_out_en_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void rp_pio_sfr_sm3_execctrl_out_en_sel_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_out_en_sel_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_JMP_PIN_OFFSET 24
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_JMP_PIN_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_execctrl_jmp_pin_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_jmp_pin_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_jmp_pin_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_jmp_pin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void rp_pio_sfr_sm3_execctrl_jmp_pin_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_jmp_pin_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_SIDE_PINDIR_OFFSET 29
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_SIDE_PINDIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_execctrl_side_pindir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_side_pindir_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_side_pindir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_side_pindir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void rp_pio_sfr_sm3_execctrl_side_pindir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_side_pindir_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_SIDESET_ENABLE_BIT_OFFSET 30
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_SIDESET_ENABLE_BIT_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_execctrl_sideset_enable_bit_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_sideset_enable_bit_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_sideset_enable_bit_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_sideset_enable_bit_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void rp_pio_sfr_sm3_execctrl_sideset_enable_bit_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_sideset_enable_bit_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_EXEC_STALLED_RO3_OFFSET 31
#define CSR_RP_PIO_SFR_SM3_EXECCTRL_EXEC_STALLED_RO3_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_execctrl_exec_stalled_ro3_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_exec_stalled_ro3_read(void) {
	uint32_t word = rp_pio_sfr_sm3_execctrl_read();
	return rp_pio_sfr_sm3_execctrl_exec_stalled_ro3_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_execctrl_exec_stalled_ro3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void rp_pio_sfr_sm3_execctrl_exec_stalled_ro3_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_execctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_execctrl_exec_stalled_ro3_replace(oldword, plain_value);
	rp_pio_sfr_sm3_execctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_ADDR (CSR_BASE + 0x23118L)
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x23118L));
}
static inline void rp_pio_sfr_sm3_shiftctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23118L));
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_RESVD_SHIFT_OFFSET 0
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_RESVD_SHIFT_SIZE 16
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_resvd_shift_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_resvd_shift_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_resvd_shift_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_resvd_shift_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_resvd_shift_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_resvd_shift_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_AUTO_PUSH_OFFSET 16
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_AUTO_PUSH_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_auto_push_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_auto_push_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_auto_push_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_auto_push_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_auto_push_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_auto_push_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_AUTO_PULL_OFFSET 17
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_AUTO_PULL_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_auto_pull_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 17) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_auto_pull_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_auto_pull_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_auto_pull_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 17))) | (mask & plain_value)<< 17 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_auto_pull_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_auto_pull_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_IN_SHIFT_DIR_OFFSET 18
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_IN_SHIFT_DIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_in_shift_dir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 18) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_in_shift_dir_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_in_shift_dir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_in_shift_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 18))) | (mask & plain_value)<< 18 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_in_shift_dir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_in_shift_dir_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_OUT_SHIFT_DIR_OFFSET 19
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_OUT_SHIFT_DIR_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_out_shift_dir_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_out_shift_dir_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_out_shift_dir_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_out_shift_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_out_shift_dir_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_out_shift_dir_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_ISR_THRESHOLD_OFFSET 20
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_ISR_THRESHOLD_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_isr_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_isr_threshold_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_isr_threshold_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_isr_threshold_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_isr_threshold_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_isr_threshold_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_OSR_THRESHOLD_OFFSET 25
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_OSR_THRESHOLD_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_osr_threshold_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 25) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_osr_threshold_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_osr_threshold_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_osr_threshold_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 25))) | (mask & plain_value)<< 25 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_osr_threshold_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_osr_threshold_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_JOIN_TX_OFFSET 30
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_JOIN_TX_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_join_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 30) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_join_tx_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_join_tx_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_join_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 30))) | (mask & plain_value)<< 30 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_join_tx_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_join_tx_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_JOIN_RX_OFFSET 31
#define CSR_RP_PIO_SFR_SM3_SHIFTCTRL_JOIN_RX_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_join_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_join_rx_read(void) {
	uint32_t word = rp_pio_sfr_sm3_shiftctrl_read();
	return rp_pio_sfr_sm3_shiftctrl_join_rx_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_shiftctrl_join_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void rp_pio_sfr_sm3_shiftctrl_join_rx_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_shiftctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_shiftctrl_join_rx_replace(oldword, plain_value);
	rp_pio_sfr_sm3_shiftctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_ADDR_ADDR (CSR_BASE + 0x2311cL)
#define CSR_RP_PIO_SFR_SM3_ADDR_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_addr_read(void) {
	return csr_read_simple((CSR_BASE + 0x2311cL));
}
#define CSR_RP_PIO_SFR_SM3_ADDR_PC_OFFSET 0
#define CSR_RP_PIO_SFR_SM3_ADDR_PC_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_addr_pc_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_addr_pc_read(void) {
	uint32_t word = rp_pio_sfr_sm3_addr_read();
	return rp_pio_sfr_sm3_addr_pc_extract(word);
}
#define CSR_RP_PIO_SFR_SM3_INSTR_ADDR (CSR_BASE + 0x23120L)
#define CSR_RP_PIO_SFR_SM3_INSTR_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_instr_read(void) {
	return csr_read_simple((CSR_BASE + 0x23120L));
}
static inline void rp_pio_sfr_sm3_instr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23120L));
}
#define CSR_RP_PIO_SFR_SM3_INSTR_IMM_INSTR_OFFSET 0
#define CSR_RP_PIO_SFR_SM3_INSTR_IMM_INSTR_SIZE 16
static inline uint32_t rp_pio_sfr_sm3_instr_imm_instr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_instr_imm_instr_read(void) {
	uint32_t word = rp_pio_sfr_sm3_instr_read();
	return rp_pio_sfr_sm3_instr_imm_instr_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_instr_imm_instr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm3_instr_imm_instr_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_instr_read();
	uint32_t newword = rp_pio_sfr_sm3_instr_imm_instr_replace(oldword, plain_value);
	rp_pio_sfr_sm3_instr_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_PINCTRL_ADDR (CSR_BASE + 0x23124L)
#define CSR_RP_PIO_SFR_SM3_PINCTRL_SIZE 1
static inline uint32_t rp_pio_sfr_sm3_pinctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x23124L));
}
static inline void rp_pio_sfr_sm3_pinctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23124L));
}
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_OUT_BASE_OFFSET 0
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_OUT_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_out_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_out_base_read(void) {
	uint32_t word = rp_pio_sfr_sm3_pinctrl_read();
	return rp_pio_sfr_sm3_pinctrl_pins_out_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_out_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_sm3_pinctrl_pins_out_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_pinctrl_pins_out_base_replace(oldword, plain_value);
	rp_pio_sfr_sm3_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_SET_BASE_OFFSET 5
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_SET_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_set_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_set_base_read(void) {
	uint32_t word = rp_pio_sfr_sm3_pinctrl_read();
	return rp_pio_sfr_sm3_pinctrl_pins_set_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_set_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void rp_pio_sfr_sm3_pinctrl_pins_set_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_pinctrl_pins_set_base_replace(oldword, plain_value);
	rp_pio_sfr_sm3_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_SIDE_BASE_OFFSET 10
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_SIDE_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_side_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 10) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_side_base_read(void) {
	uint32_t word = rp_pio_sfr_sm3_pinctrl_read();
	return rp_pio_sfr_sm3_pinctrl_pins_side_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_side_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 10))) | (mask & plain_value)<< 10 ;
}
static inline void rp_pio_sfr_sm3_pinctrl_pins_side_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_pinctrl_pins_side_base_replace(oldword, plain_value);
	rp_pio_sfr_sm3_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_IN_BASE_OFFSET 15
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_IN_BASE_SIZE 5
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_in_base_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 15) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_in_base_read(void) {
	uint32_t word = rp_pio_sfr_sm3_pinctrl_read();
	return rp_pio_sfr_sm3_pinctrl_pins_in_base_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_in_base_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 15))) | (mask & plain_value)<< 15 ;
}
static inline void rp_pio_sfr_sm3_pinctrl_pins_in_base_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_pinctrl_pins_in_base_replace(oldword, plain_value);
	rp_pio_sfr_sm3_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_OUT_COUNT_OFFSET 20
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_OUT_COUNT_SIZE 6
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_out_count_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 20) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_out_count_read(void) {
	uint32_t word = rp_pio_sfr_sm3_pinctrl_read();
	return rp_pio_sfr_sm3_pinctrl_pins_out_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_out_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 20))) | (mask & plain_value)<< 20 ;
}
static inline void rp_pio_sfr_sm3_pinctrl_pins_out_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_pinctrl_pins_out_count_replace(oldword, plain_value);
	rp_pio_sfr_sm3_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_SET_COUNT_OFFSET 26
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_SET_COUNT_SIZE 3
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_set_count_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 26) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_set_count_read(void) {
	uint32_t word = rp_pio_sfr_sm3_pinctrl_read();
	return rp_pio_sfr_sm3_pinctrl_pins_set_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_set_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 26))) | (mask & plain_value)<< 26 ;
}
static inline void rp_pio_sfr_sm3_pinctrl_pins_set_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_pinctrl_pins_set_count_replace(oldword, plain_value);
	rp_pio_sfr_sm3_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_SIDE_COUNT_OFFSET 29
#define CSR_RP_PIO_SFR_SM3_PINCTRL_PINS_SIDE_COUNT_SIZE 3
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_side_count_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 29) & mask );
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_side_count_read(void) {
	uint32_t word = rp_pio_sfr_sm3_pinctrl_read();
	return rp_pio_sfr_sm3_pinctrl_pins_side_count_extract(word);
}
static inline uint32_t rp_pio_sfr_sm3_pinctrl_pins_side_count_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 29))) | (mask & plain_value)<< 29 ;
}
static inline void rp_pio_sfr_sm3_pinctrl_pins_side_count_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_sm3_pinctrl_read();
	uint32_t newword = rp_pio_sfr_sm3_pinctrl_pins_side_count_replace(oldword, plain_value);
	rp_pio_sfr_sm3_pinctrl_write(newword);
}
#define CSR_RP_PIO_SFR_INTR_ADDR (CSR_BASE + 0x23128L)
#define CSR_RP_PIO_SFR_INTR_SIZE 1
static inline uint32_t rp_pio_sfr_intr_read(void) {
	return csr_read_simple((CSR_BASE + 0x23128L));
}
#define CSR_RP_PIO_SFR_INTR_INTR_RXNEMPTY_OFFSET 0
#define CSR_RP_PIO_SFR_INTR_INTR_RXNEMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_intr_intr_rxnempty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_intr_intr_rxnempty_read(void) {
	uint32_t word = rp_pio_sfr_intr_read();
	return rp_pio_sfr_intr_intr_rxnempty_extract(word);
}
#define CSR_RP_PIO_SFR_INTR_INTR_TXNFULL_OFFSET 4
#define CSR_RP_PIO_SFR_INTR_INTR_TXNFULL_SIZE 4
static inline uint32_t rp_pio_sfr_intr_intr_txnfull_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_intr_intr_txnfull_read(void) {
	uint32_t word = rp_pio_sfr_intr_read();
	return rp_pio_sfr_intr_intr_txnfull_extract(word);
}
#define CSR_RP_PIO_SFR_INTR_INTR_SM_OFFSET 8
#define CSR_RP_PIO_SFR_INTR_INTR_SM_SIZE 4
static inline uint32_t rp_pio_sfr_intr_intr_sm_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_intr_intr_sm_read(void) {
	uint32_t word = rp_pio_sfr_intr_read();
	return rp_pio_sfr_intr_intr_sm_extract(word);
}
#define CSR_RP_PIO_SFR_IRQ0_INTE_ADDR (CSR_BASE + 0x2312cL)
#define CSR_RP_PIO_SFR_IRQ0_INTE_SIZE 1
static inline uint32_t rp_pio_sfr_irq0_inte_read(void) {
	return csr_read_simple((CSR_BASE + 0x2312cL));
}
static inline void rp_pio_sfr_irq0_inte_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2312cL));
}
#define CSR_RP_PIO_SFR_IRQ0_INTE_IRQ0_INTE_RXNEMPTY_OFFSET 0
#define CSR_RP_PIO_SFR_IRQ0_INTE_IRQ0_INTE_RXNEMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_rxnempty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_rxnempty_read(void) {
	uint32_t word = rp_pio_sfr_irq0_inte_read();
	return rp_pio_sfr_irq0_inte_irq0_inte_rxnempty_extract(word);
}
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_rxnempty_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_irq0_inte_irq0_inte_rxnempty_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq0_inte_read();
	uint32_t newword = rp_pio_sfr_irq0_inte_irq0_inte_rxnempty_replace(oldword, plain_value);
	rp_pio_sfr_irq0_inte_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ0_INTE_IRQ0_INTE_TXNFULL_OFFSET 4
#define CSR_RP_PIO_SFR_IRQ0_INTE_IRQ0_INTE_TXNFULL_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_txnfull_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_txnfull_read(void) {
	uint32_t word = rp_pio_sfr_irq0_inte_read();
	return rp_pio_sfr_irq0_inte_irq0_inte_txnfull_extract(word);
}
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_txnfull_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_irq0_inte_irq0_inte_txnfull_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq0_inte_read();
	uint32_t newword = rp_pio_sfr_irq0_inte_irq0_inte_txnfull_replace(oldword, plain_value);
	rp_pio_sfr_irq0_inte_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ0_INTE_IRQ0_INTE_SM_OFFSET 8
#define CSR_RP_PIO_SFR_IRQ0_INTE_IRQ0_INTE_SM_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_sm_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_sm_read(void) {
	uint32_t word = rp_pio_sfr_irq0_inte_read();
	return rp_pio_sfr_irq0_inte_irq0_inte_sm_extract(word);
}
static inline uint32_t rp_pio_sfr_irq0_inte_irq0_inte_sm_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_irq0_inte_irq0_inte_sm_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq0_inte_read();
	uint32_t newword = rp_pio_sfr_irq0_inte_irq0_inte_sm_replace(oldword, plain_value);
	rp_pio_sfr_irq0_inte_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ0_INTF_ADDR (CSR_BASE + 0x23130L)
#define CSR_RP_PIO_SFR_IRQ0_INTF_SIZE 1
static inline uint32_t rp_pio_sfr_irq0_intf_read(void) {
	return csr_read_simple((CSR_BASE + 0x23130L));
}
static inline void rp_pio_sfr_irq0_intf_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23130L));
}
#define CSR_RP_PIO_SFR_IRQ0_INTF_IRQ0_INTF_RXNEMPTY_OFFSET 0
#define CSR_RP_PIO_SFR_IRQ0_INTF_IRQ0_INTF_RXNEMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_rxnempty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_rxnempty_read(void) {
	uint32_t word = rp_pio_sfr_irq0_intf_read();
	return rp_pio_sfr_irq0_intf_irq0_intf_rxnempty_extract(word);
}
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_rxnempty_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_irq0_intf_irq0_intf_rxnempty_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq0_intf_read();
	uint32_t newword = rp_pio_sfr_irq0_intf_irq0_intf_rxnempty_replace(oldword, plain_value);
	rp_pio_sfr_irq0_intf_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ0_INTF_IRQ0_INTF_TXNFULL_OFFSET 4
#define CSR_RP_PIO_SFR_IRQ0_INTF_IRQ0_INTF_TXNFULL_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_txnfull_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_txnfull_read(void) {
	uint32_t word = rp_pio_sfr_irq0_intf_read();
	return rp_pio_sfr_irq0_intf_irq0_intf_txnfull_extract(word);
}
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_txnfull_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_irq0_intf_irq0_intf_txnfull_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq0_intf_read();
	uint32_t newword = rp_pio_sfr_irq0_intf_irq0_intf_txnfull_replace(oldword, plain_value);
	rp_pio_sfr_irq0_intf_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ0_INTF_IRQ0_INTF_SM_OFFSET 8
#define CSR_RP_PIO_SFR_IRQ0_INTF_IRQ0_INTF_SM_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_sm_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_sm_read(void) {
	uint32_t word = rp_pio_sfr_irq0_intf_read();
	return rp_pio_sfr_irq0_intf_irq0_intf_sm_extract(word);
}
static inline uint32_t rp_pio_sfr_irq0_intf_irq0_intf_sm_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_irq0_intf_irq0_intf_sm_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq0_intf_read();
	uint32_t newword = rp_pio_sfr_irq0_intf_irq0_intf_sm_replace(oldword, plain_value);
	rp_pio_sfr_irq0_intf_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ0_INTS_ADDR (CSR_BASE + 0x23134L)
#define CSR_RP_PIO_SFR_IRQ0_INTS_SIZE 1
static inline uint32_t rp_pio_sfr_irq0_ints_read(void) {
	return csr_read_simple((CSR_BASE + 0x23134L));
}
#define CSR_RP_PIO_SFR_IRQ0_INTS_IRQ0_INTS_RXNEMPTY_OFFSET 0
#define CSR_RP_PIO_SFR_IRQ0_INTS_IRQ0_INTS_RXNEMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_ints_irq0_ints_rxnempty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_ints_irq0_ints_rxnempty_read(void) {
	uint32_t word = rp_pio_sfr_irq0_ints_read();
	return rp_pio_sfr_irq0_ints_irq0_ints_rxnempty_extract(word);
}
#define CSR_RP_PIO_SFR_IRQ0_INTS_IRQ0_INTS_TXNFULL_OFFSET 4
#define CSR_RP_PIO_SFR_IRQ0_INTS_IRQ0_INTS_TXNFULL_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_ints_irq0_ints_txnfull_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_ints_irq0_ints_txnfull_read(void) {
	uint32_t word = rp_pio_sfr_irq0_ints_read();
	return rp_pio_sfr_irq0_ints_irq0_ints_txnfull_extract(word);
}
#define CSR_RP_PIO_SFR_IRQ0_INTS_IRQ0_INTS_SM_OFFSET 8
#define CSR_RP_PIO_SFR_IRQ0_INTS_IRQ0_INTS_SM_SIZE 4
static inline uint32_t rp_pio_sfr_irq0_ints_irq0_ints_sm_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_irq0_ints_irq0_ints_sm_read(void) {
	uint32_t word = rp_pio_sfr_irq0_ints_read();
	return rp_pio_sfr_irq0_ints_irq0_ints_sm_extract(word);
}
#define CSR_RP_PIO_SFR_IRQ1_INTE_ADDR (CSR_BASE + 0x23138L)
#define CSR_RP_PIO_SFR_IRQ1_INTE_SIZE 1
static inline uint32_t rp_pio_sfr_irq1_inte_read(void) {
	return csr_read_simple((CSR_BASE + 0x23138L));
}
static inline void rp_pio_sfr_irq1_inte_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23138L));
}
#define CSR_RP_PIO_SFR_IRQ1_INTE_IRQ1_INTE_RXNEMPTY_OFFSET 0
#define CSR_RP_PIO_SFR_IRQ1_INTE_IRQ1_INTE_RXNEMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_rxnempty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_rxnempty_read(void) {
	uint32_t word = rp_pio_sfr_irq1_inte_read();
	return rp_pio_sfr_irq1_inte_irq1_inte_rxnempty_extract(word);
}
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_rxnempty_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_irq1_inte_irq1_inte_rxnempty_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq1_inte_read();
	uint32_t newword = rp_pio_sfr_irq1_inte_irq1_inte_rxnempty_replace(oldword, plain_value);
	rp_pio_sfr_irq1_inte_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ1_INTE_IRQ1_INTE_TXNFULL_OFFSET 4
#define CSR_RP_PIO_SFR_IRQ1_INTE_IRQ1_INTE_TXNFULL_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_txnfull_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_txnfull_read(void) {
	uint32_t word = rp_pio_sfr_irq1_inte_read();
	return rp_pio_sfr_irq1_inte_irq1_inte_txnfull_extract(word);
}
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_txnfull_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_irq1_inte_irq1_inte_txnfull_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq1_inte_read();
	uint32_t newword = rp_pio_sfr_irq1_inte_irq1_inte_txnfull_replace(oldword, plain_value);
	rp_pio_sfr_irq1_inte_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ1_INTE_IRQ1_INTE_SM_OFFSET 8
#define CSR_RP_PIO_SFR_IRQ1_INTE_IRQ1_INTE_SM_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_sm_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_sm_read(void) {
	uint32_t word = rp_pio_sfr_irq1_inte_read();
	return rp_pio_sfr_irq1_inte_irq1_inte_sm_extract(word);
}
static inline uint32_t rp_pio_sfr_irq1_inte_irq1_inte_sm_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_irq1_inte_irq1_inte_sm_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq1_inte_read();
	uint32_t newword = rp_pio_sfr_irq1_inte_irq1_inte_sm_replace(oldword, plain_value);
	rp_pio_sfr_irq1_inte_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ1_INTF_ADDR (CSR_BASE + 0x2313cL)
#define CSR_RP_PIO_SFR_IRQ1_INTF_SIZE 1
static inline uint32_t rp_pio_sfr_irq1_intf_read(void) {
	return csr_read_simple((CSR_BASE + 0x2313cL));
}
static inline void rp_pio_sfr_irq1_intf_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2313cL));
}
#define CSR_RP_PIO_SFR_IRQ1_INTF_IRQ1_INTF_RXNEMPTY_OFFSET 0
#define CSR_RP_PIO_SFR_IRQ1_INTF_IRQ1_INTF_RXNEMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_rxnempty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_rxnempty_read(void) {
	uint32_t word = rp_pio_sfr_irq1_intf_read();
	return rp_pio_sfr_irq1_intf_irq1_intf_rxnempty_extract(word);
}
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_rxnempty_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_irq1_intf_irq1_intf_rxnempty_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq1_intf_read();
	uint32_t newword = rp_pio_sfr_irq1_intf_irq1_intf_rxnempty_replace(oldword, plain_value);
	rp_pio_sfr_irq1_intf_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ1_INTF_IRQ1_INTF_TXNFULL_OFFSET 4
#define CSR_RP_PIO_SFR_IRQ1_INTF_IRQ1_INTF_TXNFULL_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_txnfull_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_txnfull_read(void) {
	uint32_t word = rp_pio_sfr_irq1_intf_read();
	return rp_pio_sfr_irq1_intf_irq1_intf_txnfull_extract(word);
}
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_txnfull_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_irq1_intf_irq1_intf_txnfull_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq1_intf_read();
	uint32_t newword = rp_pio_sfr_irq1_intf_irq1_intf_txnfull_replace(oldword, plain_value);
	rp_pio_sfr_irq1_intf_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ1_INTF_IRQ1_INTF_SM_OFFSET 8
#define CSR_RP_PIO_SFR_IRQ1_INTF_IRQ1_INTF_SM_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_sm_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_sm_read(void) {
	uint32_t word = rp_pio_sfr_irq1_intf_read();
	return rp_pio_sfr_irq1_intf_irq1_intf_sm_extract(word);
}
static inline uint32_t rp_pio_sfr_irq1_intf_irq1_intf_sm_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_irq1_intf_irq1_intf_sm_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_irq1_intf_read();
	uint32_t newword = rp_pio_sfr_irq1_intf_irq1_intf_sm_replace(oldword, plain_value);
	rp_pio_sfr_irq1_intf_write(newword);
}
#define CSR_RP_PIO_SFR_IRQ1_INTS_ADDR (CSR_BASE + 0x23140L)
#define CSR_RP_PIO_SFR_IRQ1_INTS_SIZE 1
static inline uint32_t rp_pio_sfr_irq1_ints_read(void) {
	return csr_read_simple((CSR_BASE + 0x23140L));
}
#define CSR_RP_PIO_SFR_IRQ1_INTS_IRQ1_INTS_RXNEMPTY_OFFSET 0
#define CSR_RP_PIO_SFR_IRQ1_INTS_IRQ1_INTS_RXNEMPTY_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_ints_irq1_ints_rxnempty_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_ints_irq1_ints_rxnempty_read(void) {
	uint32_t word = rp_pio_sfr_irq1_ints_read();
	return rp_pio_sfr_irq1_ints_irq1_ints_rxnempty_extract(word);
}
#define CSR_RP_PIO_SFR_IRQ1_INTS_IRQ1_INTS_TXNFULL_OFFSET 4
#define CSR_RP_PIO_SFR_IRQ1_INTS_IRQ1_INTS_TXNFULL_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_ints_irq1_ints_txnfull_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_ints_irq1_ints_txnfull_read(void) {
	uint32_t word = rp_pio_sfr_irq1_ints_read();
	return rp_pio_sfr_irq1_ints_irq1_ints_txnfull_extract(word);
}
#define CSR_RP_PIO_SFR_IRQ1_INTS_IRQ1_INTS_SM_OFFSET 8
#define CSR_RP_PIO_SFR_IRQ1_INTS_IRQ1_INTS_SM_SIZE 4
static inline uint32_t rp_pio_sfr_irq1_ints_irq1_ints_sm_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_irq1_ints_irq1_ints_sm_read(void) {
	uint32_t word = rp_pio_sfr_irq1_ints_read();
	return rp_pio_sfr_irq1_ints_irq1_ints_sm_extract(word);
}
#define CSR_RP_PIO_SFR_IO_OE_INV_ADDR (CSR_BASE + 0x23180L)
#define CSR_RP_PIO_SFR_IO_OE_INV_SIZE 1
static inline uint32_t rp_pio_sfr_io_oe_inv_read(void) {
	return csr_read_simple((CSR_BASE + 0x23180L));
}
static inline void rp_pio_sfr_io_oe_inv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23180L));
}
#define CSR_RP_PIO_SFR_IO_OE_INV_SFR_IO_OE_INV_OFFSET 0
#define CSR_RP_PIO_SFR_IO_OE_INV_SFR_IO_OE_INV_SIZE 32
static inline uint32_t rp_pio_sfr_io_oe_inv_sfr_io_oe_inv_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_io_oe_inv_sfr_io_oe_inv_read(void) {
	uint32_t word = rp_pio_sfr_io_oe_inv_read();
	return rp_pio_sfr_io_oe_inv_sfr_io_oe_inv_extract(word);
}
static inline uint32_t rp_pio_sfr_io_oe_inv_sfr_io_oe_inv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_io_oe_inv_sfr_io_oe_inv_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_io_oe_inv_read();
	uint32_t newword = rp_pio_sfr_io_oe_inv_sfr_io_oe_inv_replace(oldword, plain_value);
	rp_pio_sfr_io_oe_inv_write(newword);
}
#define CSR_RP_PIO_SFR_IO_O_INV_ADDR (CSR_BASE + 0x23184L)
#define CSR_RP_PIO_SFR_IO_O_INV_SIZE 1
static inline uint32_t rp_pio_sfr_io_o_inv_read(void) {
	return csr_read_simple((CSR_BASE + 0x23184L));
}
static inline void rp_pio_sfr_io_o_inv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23184L));
}
#define CSR_RP_PIO_SFR_IO_O_INV_SFR_IO_O_INV_OFFSET 0
#define CSR_RP_PIO_SFR_IO_O_INV_SFR_IO_O_INV_SIZE 32
static inline uint32_t rp_pio_sfr_io_o_inv_sfr_io_o_inv_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_io_o_inv_sfr_io_o_inv_read(void) {
	uint32_t word = rp_pio_sfr_io_o_inv_read();
	return rp_pio_sfr_io_o_inv_sfr_io_o_inv_extract(word);
}
static inline uint32_t rp_pio_sfr_io_o_inv_sfr_io_o_inv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_io_o_inv_sfr_io_o_inv_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_io_o_inv_read();
	uint32_t newword = rp_pio_sfr_io_o_inv_sfr_io_o_inv_replace(oldword, plain_value);
	rp_pio_sfr_io_o_inv_write(newword);
}
#define CSR_RP_PIO_SFR_IO_I_INV_ADDR (CSR_BASE + 0x23188L)
#define CSR_RP_PIO_SFR_IO_I_INV_SIZE 1
static inline uint32_t rp_pio_sfr_io_i_inv_read(void) {
	return csr_read_simple((CSR_BASE + 0x23188L));
}
static inline void rp_pio_sfr_io_i_inv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x23188L));
}
#define CSR_RP_PIO_SFR_IO_I_INV_SFR_IO_I_INV_OFFSET 0
#define CSR_RP_PIO_SFR_IO_I_INV_SFR_IO_I_INV_SIZE 32
static inline uint32_t rp_pio_sfr_io_i_inv_sfr_io_i_inv_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_io_i_inv_sfr_io_i_inv_read(void) {
	uint32_t word = rp_pio_sfr_io_i_inv_read();
	return rp_pio_sfr_io_i_inv_sfr_io_i_inv_extract(word);
}
static inline uint32_t rp_pio_sfr_io_i_inv_sfr_io_i_inv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_io_i_inv_sfr_io_i_inv_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_io_i_inv_read();
	uint32_t newword = rp_pio_sfr_io_i_inv_sfr_io_i_inv_replace(oldword, plain_value);
	rp_pio_sfr_io_i_inv_write(newword);
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_ADDR (CSR_BASE + 0x2318cL)
#define CSR_RP_PIO_SFR_FIFO_MARGIN_SIZE 1
static inline uint32_t rp_pio_sfr_fifo_margin_read(void) {
	return csr_read_simple((CSR_BASE + 0x2318cL));
}
static inline void rp_pio_sfr_fifo_margin_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2318cL));
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_TX_MARGIN0_OFFSET 0
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_TX_MARGIN0_SIZE 2
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin0_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin0_read(void) {
	uint32_t word = rp_pio_sfr_fifo_margin_read();
	return rp_pio_sfr_fifo_margin_fifo_tx_margin0_extract(word);
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rp_pio_sfr_fifo_margin_fifo_tx_margin0_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fifo_margin_read();
	uint32_t newword = rp_pio_sfr_fifo_margin_fifo_tx_margin0_replace(oldword, plain_value);
	rp_pio_sfr_fifo_margin_write(newword);
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_RX_MARGIN0_OFFSET 2
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_RX_MARGIN0_SIZE 2
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin0_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin0_read(void) {
	uint32_t word = rp_pio_sfr_fifo_margin_read();
	return rp_pio_sfr_fifo_margin_fifo_rx_margin0_extract(word);
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void rp_pio_sfr_fifo_margin_fifo_rx_margin0_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fifo_margin_read();
	uint32_t newword = rp_pio_sfr_fifo_margin_fifo_rx_margin0_replace(oldword, plain_value);
	rp_pio_sfr_fifo_margin_write(newword);
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_TX_MARGIN1_OFFSET 4
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_TX_MARGIN1_SIZE 2
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin1_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin1_read(void) {
	uint32_t word = rp_pio_sfr_fifo_margin_read();
	return rp_pio_sfr_fifo_margin_fifo_tx_margin1_extract(word);
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void rp_pio_sfr_fifo_margin_fifo_tx_margin1_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fifo_margin_read();
	uint32_t newword = rp_pio_sfr_fifo_margin_fifo_tx_margin1_replace(oldword, plain_value);
	rp_pio_sfr_fifo_margin_write(newword);
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_RX_MARGIN1_OFFSET 6
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_RX_MARGIN1_SIZE 2
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin1_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin1_read(void) {
	uint32_t word = rp_pio_sfr_fifo_margin_read();
	return rp_pio_sfr_fifo_margin_fifo_rx_margin1_extract(word);
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void rp_pio_sfr_fifo_margin_fifo_rx_margin1_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fifo_margin_read();
	uint32_t newword = rp_pio_sfr_fifo_margin_fifo_rx_margin1_replace(oldword, plain_value);
	rp_pio_sfr_fifo_margin_write(newword);
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_TX_MARGIN2_OFFSET 8
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_TX_MARGIN2_SIZE 2
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin2_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin2_read(void) {
	uint32_t word = rp_pio_sfr_fifo_margin_read();
	return rp_pio_sfr_fifo_margin_fifo_tx_margin2_extract(word);
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void rp_pio_sfr_fifo_margin_fifo_tx_margin2_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fifo_margin_read();
	uint32_t newword = rp_pio_sfr_fifo_margin_fifo_tx_margin2_replace(oldword, plain_value);
	rp_pio_sfr_fifo_margin_write(newword);
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_RX_MARGIN2_OFFSET 10
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_RX_MARGIN2_SIZE 2
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin2_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 10) & mask );
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin2_read(void) {
	uint32_t word = rp_pio_sfr_fifo_margin_read();
	return rp_pio_sfr_fifo_margin_fifo_rx_margin2_extract(word);
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 10))) | (mask & plain_value)<< 10 ;
}
static inline void rp_pio_sfr_fifo_margin_fifo_rx_margin2_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fifo_margin_read();
	uint32_t newword = rp_pio_sfr_fifo_margin_fifo_rx_margin2_replace(oldword, plain_value);
	rp_pio_sfr_fifo_margin_write(newword);
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_TX_MARGIN3_OFFSET 12
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_TX_MARGIN3_SIZE 2
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin3_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin3_read(void) {
	uint32_t word = rp_pio_sfr_fifo_margin_read();
	return rp_pio_sfr_fifo_margin_fifo_tx_margin3_extract(word);
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_tx_margin3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 12))) | (mask & plain_value)<< 12 ;
}
static inline void rp_pio_sfr_fifo_margin_fifo_tx_margin3_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fifo_margin_read();
	uint32_t newword = rp_pio_sfr_fifo_margin_fifo_tx_margin3_replace(oldword, plain_value);
	rp_pio_sfr_fifo_margin_write(newword);
}
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_RX_MARGIN3_OFFSET 14
#define CSR_RP_PIO_SFR_FIFO_MARGIN_FIFO_RX_MARGIN3_SIZE 2
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin3_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 14) & mask );
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin3_read(void) {
	uint32_t word = rp_pio_sfr_fifo_margin_read();
	return rp_pio_sfr_fifo_margin_fifo_rx_margin3_extract(word);
}
static inline uint32_t rp_pio_sfr_fifo_margin_fifo_rx_margin3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 14))) | (mask & plain_value)<< 14 ;
}
static inline void rp_pio_sfr_fifo_margin_fifo_rx_margin3_write(uint32_t plain_value) {
	uint32_t oldword = rp_pio_sfr_fifo_margin_read();
	uint32_t newword = rp_pio_sfr_fifo_margin_fifo_rx_margin3_replace(oldword, plain_value);
	rp_pio_sfr_fifo_margin_write(newword);
}
#define CSR_RP_PIO_SFR_ZERO0_ADDR (CSR_BASE + 0x23190L)
#define CSR_RP_PIO_SFR_ZERO0_SIZE 1
static inline uint32_t rp_pio_sfr_zero0_read(void) {
	return csr_read_simple((CSR_BASE + 0x23190L));
}
#define CSR_RP_PIO_SFR_ZERO0_SFR_ZERO0_OFFSET 0
#define CSR_RP_PIO_SFR_ZERO0_SFR_ZERO0_SIZE 32
static inline uint32_t rp_pio_sfr_zero0_sfr_zero0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_zero0_sfr_zero0_read(void) {
	uint32_t word = rp_pio_sfr_zero0_read();
	return rp_pio_sfr_zero0_sfr_zero0_extract(word);
}
#define CSR_RP_PIO_SFR_ZERO1_ADDR (CSR_BASE + 0x23194L)
#define CSR_RP_PIO_SFR_ZERO1_SIZE 1
static inline uint32_t rp_pio_sfr_zero1_read(void) {
	return csr_read_simple((CSR_BASE + 0x23194L));
}
#define CSR_RP_PIO_SFR_ZERO1_SFR_ZERO1_OFFSET 0
#define CSR_RP_PIO_SFR_ZERO1_SFR_ZERO1_SIZE 32
static inline uint32_t rp_pio_sfr_zero1_sfr_zero1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_zero1_sfr_zero1_read(void) {
	uint32_t word = rp_pio_sfr_zero1_read();
	return rp_pio_sfr_zero1_sfr_zero1_extract(word);
}
#define CSR_RP_PIO_SFR_ZERO2_ADDR (CSR_BASE + 0x23198L)
#define CSR_RP_PIO_SFR_ZERO2_SIZE 1
static inline uint32_t rp_pio_sfr_zero2_read(void) {
	return csr_read_simple((CSR_BASE + 0x23198L));
}
#define CSR_RP_PIO_SFR_ZERO2_SFR_ZERO2_OFFSET 0
#define CSR_RP_PIO_SFR_ZERO2_SFR_ZERO2_SIZE 32
static inline uint32_t rp_pio_sfr_zero2_sfr_zero2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_zero2_sfr_zero2_read(void) {
	uint32_t word = rp_pio_sfr_zero2_read();
	return rp_pio_sfr_zero2_sfr_zero2_extract(word);
}
#define CSR_RP_PIO_SFR_ZERO3_ADDR (CSR_BASE + 0x2319cL)
#define CSR_RP_PIO_SFR_ZERO3_SIZE 1
static inline uint32_t rp_pio_sfr_zero3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2319cL));
}
#define CSR_RP_PIO_SFR_ZERO3_SFR_ZERO3_OFFSET 0
#define CSR_RP_PIO_SFR_ZERO3_SFR_ZERO3_SIZE 32
static inline uint32_t rp_pio_sfr_zero3_sfr_zero3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rp_pio_sfr_zero3_sfr_zero3_read(void) {
	uint32_t word = rp_pio_sfr_zero3_read();
	return rp_pio_sfr_zero3_sfr_zero3_extract(word);
}

/* bio */
#define CSR_BIO_BASE (CSR_BASE + 0x24000L)
#define CSR_BIO_SFR_CTRL_ADDR (CSR_BASE + 0x24000L)
#define CSR_BIO_SFR_CTRL_SIZE 1
static inline uint32_t bio_sfr_ctrl_read(void) {
	return csr_read_simple((CSR_BASE + 0x24000L));
}
static inline void bio_sfr_ctrl_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24000L));
}
#define CSR_BIO_SFR_CTRL_EN_OFFSET 0
#define CSR_BIO_SFR_CTRL_EN_SIZE 4
static inline uint32_t bio_sfr_ctrl_en_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_ctrl_en_read(void) {
	uint32_t word = bio_sfr_ctrl_read();
	return bio_sfr_ctrl_en_extract(word);
}
static inline uint32_t bio_sfr_ctrl_en_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_ctrl_en_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_ctrl_read();
	uint32_t newword = bio_sfr_ctrl_en_replace(oldword, plain_value);
	bio_sfr_ctrl_write(newword);
}
#define CSR_BIO_SFR_CTRL_RESTART_OFFSET 4
#define CSR_BIO_SFR_CTRL_RESTART_SIZE 4
static inline uint32_t bio_sfr_ctrl_restart_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t bio_sfr_ctrl_restart_read(void) {
	uint32_t word = bio_sfr_ctrl_read();
	return bio_sfr_ctrl_restart_extract(word);
}
static inline uint32_t bio_sfr_ctrl_restart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void bio_sfr_ctrl_restart_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_ctrl_read();
	uint32_t newword = bio_sfr_ctrl_restart_replace(oldword, plain_value);
	bio_sfr_ctrl_write(newword);
}
#define CSR_BIO_SFR_CTRL_CLKDIV_RESTART_OFFSET 8
#define CSR_BIO_SFR_CTRL_CLKDIV_RESTART_SIZE 4
static inline uint32_t bio_sfr_ctrl_clkdiv_restart_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_ctrl_clkdiv_restart_read(void) {
	uint32_t word = bio_sfr_ctrl_read();
	return bio_sfr_ctrl_clkdiv_restart_extract(word);
}
static inline uint32_t bio_sfr_ctrl_clkdiv_restart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void bio_sfr_ctrl_clkdiv_restart_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_ctrl_read();
	uint32_t newword = bio_sfr_ctrl_clkdiv_restart_replace(oldword, plain_value);
	bio_sfr_ctrl_write(newword);
}
#define CSR_BIO_SFR_CFGINFO_ADDR (CSR_BASE + 0x24004L)
#define CSR_BIO_SFR_CFGINFO_SIZE 1
static inline uint32_t bio_sfr_cfginfo_read(void) {
	return csr_read_simple((CSR_BASE + 0x24004L));
}
#define CSR_BIO_SFR_CFGINFO_CONSTANT0_OFFSET 0
#define CSR_BIO_SFR_CFGINFO_CONSTANT0_SIZE 8
static inline uint32_t bio_sfr_cfginfo_constant0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_cfginfo_constant0_read(void) {
	uint32_t word = bio_sfr_cfginfo_read();
	return bio_sfr_cfginfo_constant0_extract(word);
}
#define CSR_BIO_SFR_CFGINFO_CONSTANT1_OFFSET 8
#define CSR_BIO_SFR_CFGINFO_CONSTANT1_SIZE 8
static inline uint32_t bio_sfr_cfginfo_constant1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_cfginfo_constant1_read(void) {
	uint32_t word = bio_sfr_cfginfo_read();
	return bio_sfr_cfginfo_constant1_extract(word);
}
#define CSR_BIO_SFR_CFGINFO_CONSTANT2_OFFSET 16
#define CSR_BIO_SFR_CFGINFO_CONSTANT2_SIZE 16
static inline uint32_t bio_sfr_cfginfo_constant2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t bio_sfr_cfginfo_constant2_read(void) {
	uint32_t word = bio_sfr_cfginfo_read();
	return bio_sfr_cfginfo_constant2_extract(word);
}
#define CSR_BIO_SFR_CONFIG_ADDR (CSR_BASE + 0x24008L)
#define CSR_BIO_SFR_CONFIG_SIZE 1
static inline uint32_t bio_sfr_config_read(void) {
	return csr_read_simple((CSR_BASE + 0x24008L));
}
static inline void bio_sfr_config_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24008L));
}
#define CSR_BIO_SFR_CONFIG_SNAP_TO_WHICH_OFFSET 0
#define CSR_BIO_SFR_CONFIG_SNAP_TO_WHICH_SIZE 2
static inline uint32_t bio_sfr_config_snap_to_which_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_config_snap_to_which_read(void) {
	uint32_t word = bio_sfr_config_read();
	return bio_sfr_config_snap_to_which_extract(word);
}
static inline uint32_t bio_sfr_config_snap_to_which_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_config_snap_to_which_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_config_read();
	uint32_t newword = bio_sfr_config_snap_to_which_replace(oldword, plain_value);
	bio_sfr_config_write(newword);
}
#define CSR_BIO_SFR_CONFIG_SNAP_TO_QUANTUM_OFFSET 2
#define CSR_BIO_SFR_CONFIG_SNAP_TO_QUANTUM_SIZE 1
static inline uint32_t bio_sfr_config_snap_to_quantum_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t bio_sfr_config_snap_to_quantum_read(void) {
	uint32_t word = bio_sfr_config_read();
	return bio_sfr_config_snap_to_quantum_extract(word);
}
static inline uint32_t bio_sfr_config_snap_to_quantum_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void bio_sfr_config_snap_to_quantum_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_config_read();
	uint32_t newword = bio_sfr_config_snap_to_quantum_replace(oldword, plain_value);
	bio_sfr_config_write(newword);
}
#define CSR_BIO_SFR_FLEVEL_ADDR (CSR_BASE + 0x2400cL)
#define CSR_BIO_SFR_FLEVEL_SIZE 1
static inline uint32_t bio_sfr_flevel_read(void) {
	return csr_read_simple((CSR_BASE + 0x2400cL));
}
#define CSR_BIO_SFR_FLEVEL_PCLK_REGFIFO_LEVEL0_OFFSET 0
#define CSR_BIO_SFR_FLEVEL_PCLK_REGFIFO_LEVEL0_SIZE 4
static inline uint32_t bio_sfr_flevel_pclk_regfifo_level0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_flevel_pclk_regfifo_level0_read(void) {
	uint32_t word = bio_sfr_flevel_read();
	return bio_sfr_flevel_pclk_regfifo_level0_extract(word);
}
#define CSR_BIO_SFR_FLEVEL_PCLK_REGFIFO_LEVEL1_OFFSET 4
#define CSR_BIO_SFR_FLEVEL_PCLK_REGFIFO_LEVEL1_SIZE 4
static inline uint32_t bio_sfr_flevel_pclk_regfifo_level1_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t bio_sfr_flevel_pclk_regfifo_level1_read(void) {
	uint32_t word = bio_sfr_flevel_read();
	return bio_sfr_flevel_pclk_regfifo_level1_extract(word);
}
#define CSR_BIO_SFR_FLEVEL_PCLK_REGFIFO_LEVEL2_OFFSET 8
#define CSR_BIO_SFR_FLEVEL_PCLK_REGFIFO_LEVEL2_SIZE 4
static inline uint32_t bio_sfr_flevel_pclk_regfifo_level2_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_flevel_pclk_regfifo_level2_read(void) {
	uint32_t word = bio_sfr_flevel_read();
	return bio_sfr_flevel_pclk_regfifo_level2_extract(word);
}
#define CSR_BIO_SFR_FLEVEL_PCLK_REGFIFO_LEVEL3_OFFSET 12
#define CSR_BIO_SFR_FLEVEL_PCLK_REGFIFO_LEVEL3_SIZE 4
static inline uint32_t bio_sfr_flevel_pclk_regfifo_level3_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 12) & mask );
}
static inline uint32_t bio_sfr_flevel_pclk_regfifo_level3_read(void) {
	uint32_t word = bio_sfr_flevel_read();
	return bio_sfr_flevel_pclk_regfifo_level3_extract(word);
}
#define CSR_BIO_SFR_TXF0_ADDR (CSR_BASE + 0x24010L)
#define CSR_BIO_SFR_TXF0_SIZE 1
static inline uint32_t bio_sfr_txf0_read(void) {
	return csr_read_simple((CSR_BASE + 0x24010L));
}
static inline void bio_sfr_txf0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24010L));
}
#define CSR_BIO_SFR_TXF0_FDIN_OFFSET 0
#define CSR_BIO_SFR_TXF0_FDIN_SIZE 32
static inline uint32_t bio_sfr_txf0_fdin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_txf0_fdin_read(void) {
	uint32_t word = bio_sfr_txf0_read();
	return bio_sfr_txf0_fdin_extract(word);
}
static inline uint32_t bio_sfr_txf0_fdin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_txf0_fdin_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_txf0_read();
	uint32_t newword = bio_sfr_txf0_fdin_replace(oldword, plain_value);
	bio_sfr_txf0_write(newword);
}
#define CSR_BIO_SFR_TXF1_ADDR (CSR_BASE + 0x24014L)
#define CSR_BIO_SFR_TXF1_SIZE 1
static inline uint32_t bio_sfr_txf1_read(void) {
	return csr_read_simple((CSR_BASE + 0x24014L));
}
static inline void bio_sfr_txf1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24014L));
}
#define CSR_BIO_SFR_TXF1_FDIN_OFFSET 0
#define CSR_BIO_SFR_TXF1_FDIN_SIZE 32
static inline uint32_t bio_sfr_txf1_fdin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_txf1_fdin_read(void) {
	uint32_t word = bio_sfr_txf1_read();
	return bio_sfr_txf1_fdin_extract(word);
}
static inline uint32_t bio_sfr_txf1_fdin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_txf1_fdin_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_txf1_read();
	uint32_t newword = bio_sfr_txf1_fdin_replace(oldword, plain_value);
	bio_sfr_txf1_write(newword);
}
#define CSR_BIO_SFR_TXF2_ADDR (CSR_BASE + 0x24018L)
#define CSR_BIO_SFR_TXF2_SIZE 1
static inline uint32_t bio_sfr_txf2_read(void) {
	return csr_read_simple((CSR_BASE + 0x24018L));
}
static inline void bio_sfr_txf2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24018L));
}
#define CSR_BIO_SFR_TXF2_FDIN_OFFSET 0
#define CSR_BIO_SFR_TXF2_FDIN_SIZE 32
static inline uint32_t bio_sfr_txf2_fdin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_txf2_fdin_read(void) {
	uint32_t word = bio_sfr_txf2_read();
	return bio_sfr_txf2_fdin_extract(word);
}
static inline uint32_t bio_sfr_txf2_fdin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_txf2_fdin_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_txf2_read();
	uint32_t newword = bio_sfr_txf2_fdin_replace(oldword, plain_value);
	bio_sfr_txf2_write(newword);
}
#define CSR_BIO_SFR_TXF3_ADDR (CSR_BASE + 0x2401cL)
#define CSR_BIO_SFR_TXF3_SIZE 1
static inline uint32_t bio_sfr_txf3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2401cL));
}
static inline void bio_sfr_txf3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2401cL));
}
#define CSR_BIO_SFR_TXF3_FDIN_OFFSET 0
#define CSR_BIO_SFR_TXF3_FDIN_SIZE 32
static inline uint32_t bio_sfr_txf3_fdin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_txf3_fdin_read(void) {
	uint32_t word = bio_sfr_txf3_read();
	return bio_sfr_txf3_fdin_extract(word);
}
static inline uint32_t bio_sfr_txf3_fdin_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_txf3_fdin_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_txf3_read();
	uint32_t newword = bio_sfr_txf3_fdin_replace(oldword, plain_value);
	bio_sfr_txf3_write(newword);
}
#define CSR_BIO_SFR_RXF0_ADDR (CSR_BASE + 0x24020L)
#define CSR_BIO_SFR_RXF0_SIZE 1
static inline uint32_t bio_sfr_rxf0_read(void) {
	return csr_read_simple((CSR_BASE + 0x24020L));
}
#define CSR_BIO_SFR_RXF0_FDOUT_OFFSET 0
#define CSR_BIO_SFR_RXF0_FDOUT_SIZE 32
static inline uint32_t bio_sfr_rxf0_fdout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_rxf0_fdout_read(void) {
	uint32_t word = bio_sfr_rxf0_read();
	return bio_sfr_rxf0_fdout_extract(word);
}
#define CSR_BIO_SFR_RXF1_ADDR (CSR_BASE + 0x24024L)
#define CSR_BIO_SFR_RXF1_SIZE 1
static inline uint32_t bio_sfr_rxf1_read(void) {
	return csr_read_simple((CSR_BASE + 0x24024L));
}
#define CSR_BIO_SFR_RXF1_FDOUT_OFFSET 0
#define CSR_BIO_SFR_RXF1_FDOUT_SIZE 32
static inline uint32_t bio_sfr_rxf1_fdout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_rxf1_fdout_read(void) {
	uint32_t word = bio_sfr_rxf1_read();
	return bio_sfr_rxf1_fdout_extract(word);
}
#define CSR_BIO_SFR_RXF2_ADDR (CSR_BASE + 0x24028L)
#define CSR_BIO_SFR_RXF2_SIZE 1
static inline uint32_t bio_sfr_rxf2_read(void) {
	return csr_read_simple((CSR_BASE + 0x24028L));
}
#define CSR_BIO_SFR_RXF2_FDOUT_OFFSET 0
#define CSR_BIO_SFR_RXF2_FDOUT_SIZE 32
static inline uint32_t bio_sfr_rxf2_fdout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_rxf2_fdout_read(void) {
	uint32_t word = bio_sfr_rxf2_read();
	return bio_sfr_rxf2_fdout_extract(word);
}
#define CSR_BIO_SFR_RXF3_ADDR (CSR_BASE + 0x2402cL)
#define CSR_BIO_SFR_RXF3_SIZE 1
static inline uint32_t bio_sfr_rxf3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2402cL));
}
#define CSR_BIO_SFR_RXF3_FDOUT_OFFSET 0
#define CSR_BIO_SFR_RXF3_FDOUT_SIZE 32
static inline uint32_t bio_sfr_rxf3_fdout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_rxf3_fdout_read(void) {
	uint32_t word = bio_sfr_rxf3_read();
	return bio_sfr_rxf3_fdout_extract(word);
}
#define CSR_BIO_SFR_ELEVEL0_ADDR (CSR_BASE + 0x24030L)
#define CSR_BIO_SFR_ELEVEL0_SIZE 1
static inline uint32_t bio_sfr_elevel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x24030L));
}
static inline void bio_sfr_elevel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24030L));
}
#define CSR_BIO_SFR_ELEVEL0_PCLK_FIFO_EVENT_LEVEL0_OFFSET 0
#define CSR_BIO_SFR_ELEVEL0_PCLK_FIFO_EVENT_LEVEL0_SIZE 8
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level0_read(void) {
	uint32_t word = bio_sfr_elevel0_read();
	return bio_sfr_elevel0_pclk_fifo_event_level0_extract(word);
}
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_elevel0_pclk_fifo_event_level0_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_elevel0_read();
	uint32_t newword = bio_sfr_elevel0_pclk_fifo_event_level0_replace(oldword, plain_value);
	bio_sfr_elevel0_write(newword);
}
#define CSR_BIO_SFR_ELEVEL0_PCLK_FIFO_EVENT_LEVEL1_OFFSET 8
#define CSR_BIO_SFR_ELEVEL0_PCLK_FIFO_EVENT_LEVEL1_SIZE 8
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level1_read(void) {
	uint32_t word = bio_sfr_elevel0_read();
	return bio_sfr_elevel0_pclk_fifo_event_level1_extract(word);
}
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void bio_sfr_elevel0_pclk_fifo_event_level1_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_elevel0_read();
	uint32_t newword = bio_sfr_elevel0_pclk_fifo_event_level1_replace(oldword, plain_value);
	bio_sfr_elevel0_write(newword);
}
#define CSR_BIO_SFR_ELEVEL0_PCLK_FIFO_EVENT_LEVEL2_OFFSET 16
#define CSR_BIO_SFR_ELEVEL0_PCLK_FIFO_EVENT_LEVEL2_SIZE 8
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level2_read(void) {
	uint32_t word = bio_sfr_elevel0_read();
	return bio_sfr_elevel0_pclk_fifo_event_level2_extract(word);
}
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void bio_sfr_elevel0_pclk_fifo_event_level2_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_elevel0_read();
	uint32_t newword = bio_sfr_elevel0_pclk_fifo_event_level2_replace(oldword, plain_value);
	bio_sfr_elevel0_write(newword);
}
#define CSR_BIO_SFR_ELEVEL0_PCLK_FIFO_EVENT_LEVEL3_OFFSET 24
#define CSR_BIO_SFR_ELEVEL0_PCLK_FIFO_EVENT_LEVEL3_SIZE 8
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level3_read(void) {
	uint32_t word = bio_sfr_elevel0_read();
	return bio_sfr_elevel0_pclk_fifo_event_level3_extract(word);
}
static inline uint32_t bio_sfr_elevel0_pclk_fifo_event_level3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void bio_sfr_elevel0_pclk_fifo_event_level3_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_elevel0_read();
	uint32_t newword = bio_sfr_elevel0_pclk_fifo_event_level3_replace(oldword, plain_value);
	bio_sfr_elevel0_write(newword);
}
#define CSR_BIO_SFR_ELEVEL1_ADDR (CSR_BASE + 0x24034L)
#define CSR_BIO_SFR_ELEVEL1_SIZE 1
static inline uint32_t bio_sfr_elevel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x24034L));
}
static inline void bio_sfr_elevel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24034L));
}
#define CSR_BIO_SFR_ELEVEL1_PCLK_FIFO_EVENT_LEVEL4_OFFSET 0
#define CSR_BIO_SFR_ELEVEL1_PCLK_FIFO_EVENT_LEVEL4_SIZE 8
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level4_read(void) {
	uint32_t word = bio_sfr_elevel1_read();
	return bio_sfr_elevel1_pclk_fifo_event_level4_extract(word);
}
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_elevel1_pclk_fifo_event_level4_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_elevel1_read();
	uint32_t newword = bio_sfr_elevel1_pclk_fifo_event_level4_replace(oldword, plain_value);
	bio_sfr_elevel1_write(newword);
}
#define CSR_BIO_SFR_ELEVEL1_PCLK_FIFO_EVENT_LEVEL5_OFFSET 8
#define CSR_BIO_SFR_ELEVEL1_PCLK_FIFO_EVENT_LEVEL5_SIZE 8
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level5_read(void) {
	uint32_t word = bio_sfr_elevel1_read();
	return bio_sfr_elevel1_pclk_fifo_event_level5_extract(word);
}
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void bio_sfr_elevel1_pclk_fifo_event_level5_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_elevel1_read();
	uint32_t newword = bio_sfr_elevel1_pclk_fifo_event_level5_replace(oldword, plain_value);
	bio_sfr_elevel1_write(newword);
}
#define CSR_BIO_SFR_ELEVEL1_PCLK_FIFO_EVENT_LEVEL6_OFFSET 16
#define CSR_BIO_SFR_ELEVEL1_PCLK_FIFO_EVENT_LEVEL6_SIZE 8
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level6_read(void) {
	uint32_t word = bio_sfr_elevel1_read();
	return bio_sfr_elevel1_pclk_fifo_event_level6_extract(word);
}
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void bio_sfr_elevel1_pclk_fifo_event_level6_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_elevel1_read();
	uint32_t newword = bio_sfr_elevel1_pclk_fifo_event_level6_replace(oldword, plain_value);
	bio_sfr_elevel1_write(newword);
}
#define CSR_BIO_SFR_ELEVEL1_PCLK_FIFO_EVENT_LEVEL7_OFFSET 24
#define CSR_BIO_SFR_ELEVEL1_PCLK_FIFO_EVENT_LEVEL7_SIZE 8
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level7_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level7_read(void) {
	uint32_t word = bio_sfr_elevel1_read();
	return bio_sfr_elevel1_pclk_fifo_event_level7_extract(word);
}
static inline uint32_t bio_sfr_elevel1_pclk_fifo_event_level7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void bio_sfr_elevel1_pclk_fifo_event_level7_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_elevel1_read();
	uint32_t newword = bio_sfr_elevel1_pclk_fifo_event_level7_replace(oldword, plain_value);
	bio_sfr_elevel1_write(newword);
}
#define CSR_BIO_SFR_ETYPE_ADDR (CSR_BASE + 0x24038L)
#define CSR_BIO_SFR_ETYPE_SIZE 1
static inline uint32_t bio_sfr_etype_read(void) {
	return csr_read_simple((CSR_BASE + 0x24038L));
}
static inline void bio_sfr_etype_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24038L));
}
#define CSR_BIO_SFR_ETYPE_PCLK_FIFO_EVENT_LT_MASK_OFFSET 0
#define CSR_BIO_SFR_ETYPE_PCLK_FIFO_EVENT_LT_MASK_SIZE 8
static inline uint32_t bio_sfr_etype_pclk_fifo_event_lt_mask_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_etype_pclk_fifo_event_lt_mask_read(void) {
	uint32_t word = bio_sfr_etype_read();
	return bio_sfr_etype_pclk_fifo_event_lt_mask_extract(word);
}
static inline uint32_t bio_sfr_etype_pclk_fifo_event_lt_mask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_etype_pclk_fifo_event_lt_mask_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_etype_read();
	uint32_t newword = bio_sfr_etype_pclk_fifo_event_lt_mask_replace(oldword, plain_value);
	bio_sfr_etype_write(newword);
}
#define CSR_BIO_SFR_ETYPE_PCLK_FIFO_EVENT_EQ_MASK_OFFSET 8
#define CSR_BIO_SFR_ETYPE_PCLK_FIFO_EVENT_EQ_MASK_SIZE 8
static inline uint32_t bio_sfr_etype_pclk_fifo_event_eq_mask_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_etype_pclk_fifo_event_eq_mask_read(void) {
	uint32_t word = bio_sfr_etype_read();
	return bio_sfr_etype_pclk_fifo_event_eq_mask_extract(word);
}
static inline uint32_t bio_sfr_etype_pclk_fifo_event_eq_mask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void bio_sfr_etype_pclk_fifo_event_eq_mask_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_etype_read();
	uint32_t newword = bio_sfr_etype_pclk_fifo_event_eq_mask_replace(oldword, plain_value);
	bio_sfr_etype_write(newword);
}
#define CSR_BIO_SFR_ETYPE_PCLK_FIFO_EVENT_GT_MASK_OFFSET 16
#define CSR_BIO_SFR_ETYPE_PCLK_FIFO_EVENT_GT_MASK_SIZE 8
static inline uint32_t bio_sfr_etype_pclk_fifo_event_gt_mask_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t bio_sfr_etype_pclk_fifo_event_gt_mask_read(void) {
	uint32_t word = bio_sfr_etype_read();
	return bio_sfr_etype_pclk_fifo_event_gt_mask_extract(word);
}
static inline uint32_t bio_sfr_etype_pclk_fifo_event_gt_mask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void bio_sfr_etype_pclk_fifo_event_gt_mask_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_etype_read();
	uint32_t newword = bio_sfr_etype_pclk_fifo_event_gt_mask_replace(oldword, plain_value);
	bio_sfr_etype_write(newword);
}
#define CSR_BIO_SFR_EVENT_SET_ADDR (CSR_BASE + 0x2403cL)
#define CSR_BIO_SFR_EVENT_SET_SIZE 1
static inline uint32_t bio_sfr_event_set_read(void) {
	return csr_read_simple((CSR_BASE + 0x2403cL));
}
static inline void bio_sfr_event_set_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2403cL));
}
#define CSR_BIO_SFR_EVENT_SET_SFR_EVENT_SET_OFFSET 0
#define CSR_BIO_SFR_EVENT_SET_SFR_EVENT_SET_SIZE 24
static inline uint32_t bio_sfr_event_set_sfr_event_set_extract(uint32_t oldword) {
	uint32_t mask = 0xffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_event_set_sfr_event_set_read(void) {
	uint32_t word = bio_sfr_event_set_read();
	return bio_sfr_event_set_sfr_event_set_extract(word);
}
static inline uint32_t bio_sfr_event_set_sfr_event_set_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_event_set_sfr_event_set_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_event_set_read();
	uint32_t newword = bio_sfr_event_set_sfr_event_set_replace(oldword, plain_value);
	bio_sfr_event_set_write(newword);
}
#define CSR_BIO_SFR_EVENT_CLR_ADDR (CSR_BASE + 0x24040L)
#define CSR_BIO_SFR_EVENT_CLR_SIZE 1
static inline uint32_t bio_sfr_event_clr_read(void) {
	return csr_read_simple((CSR_BASE + 0x24040L));
}
static inline void bio_sfr_event_clr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24040L));
}
#define CSR_BIO_SFR_EVENT_CLR_SFR_EVENT_CLR_OFFSET 0
#define CSR_BIO_SFR_EVENT_CLR_SFR_EVENT_CLR_SIZE 24
static inline uint32_t bio_sfr_event_clr_sfr_event_clr_extract(uint32_t oldword) {
	uint32_t mask = 0xffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_event_clr_sfr_event_clr_read(void) {
	uint32_t word = bio_sfr_event_clr_read();
	return bio_sfr_event_clr_sfr_event_clr_extract(word);
}
static inline uint32_t bio_sfr_event_clr_sfr_event_clr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_event_clr_sfr_event_clr_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_event_clr_read();
	uint32_t newword = bio_sfr_event_clr_sfr_event_clr_replace(oldword, plain_value);
	bio_sfr_event_clr_write(newword);
}
#define CSR_BIO_SFR_EVENT_STATUS_ADDR (CSR_BASE + 0x24044L)
#define CSR_BIO_SFR_EVENT_STATUS_SIZE 1
static inline uint32_t bio_sfr_event_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x24044L));
}
#define CSR_BIO_SFR_EVENT_STATUS_SFR_EVENT_STATUS_OFFSET 0
#define CSR_BIO_SFR_EVENT_STATUS_SFR_EVENT_STATUS_SIZE 32
static inline uint32_t bio_sfr_event_status_sfr_event_status_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_event_status_sfr_event_status_read(void) {
	uint32_t word = bio_sfr_event_status_read();
	return bio_sfr_event_status_sfr_event_status_extract(word);
}
#define CSR_BIO_SFR_EXTCLOCK_ADDR (CSR_BASE + 0x24048L)
#define CSR_BIO_SFR_EXTCLOCK_SIZE 1
static inline uint32_t bio_sfr_extclock_read(void) {
	return csr_read_simple((CSR_BASE + 0x24048L));
}
static inline void bio_sfr_extclock_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24048L));
}
#define CSR_BIO_SFR_EXTCLOCK_USE_EXTCLK_OFFSET 0
#define CSR_BIO_SFR_EXTCLOCK_USE_EXTCLK_SIZE 4
static inline uint32_t bio_sfr_extclock_use_extclk_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_extclock_use_extclk_read(void) {
	uint32_t word = bio_sfr_extclock_read();
	return bio_sfr_extclock_use_extclk_extract(word);
}
static inline uint32_t bio_sfr_extclock_use_extclk_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_extclock_use_extclk_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_extclock_read();
	uint32_t newword = bio_sfr_extclock_use_extclk_replace(oldword, plain_value);
	bio_sfr_extclock_write(newword);
}
#define CSR_BIO_SFR_EXTCLOCK_EXTCLK_GPIO_0_OFFSET 4
#define CSR_BIO_SFR_EXTCLOCK_EXTCLK_GPIO_0_SIZE 5
static inline uint32_t bio_sfr_extclock_extclk_gpio_0_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t bio_sfr_extclock_extclk_gpio_0_read(void) {
	uint32_t word = bio_sfr_extclock_read();
	return bio_sfr_extclock_extclk_gpio_0_extract(word);
}
static inline uint32_t bio_sfr_extclock_extclk_gpio_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void bio_sfr_extclock_extclk_gpio_0_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_extclock_read();
	uint32_t newword = bio_sfr_extclock_extclk_gpio_0_replace(oldword, plain_value);
	bio_sfr_extclock_write(newword);
}
#define CSR_BIO_SFR_EXTCLOCK_EXTCLK_GPIO_1_OFFSET 9
#define CSR_BIO_SFR_EXTCLOCK_EXTCLK_GPIO_1_SIZE 5
static inline uint32_t bio_sfr_extclock_extclk_gpio_1_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 9) & mask );
}
static inline uint32_t bio_sfr_extclock_extclk_gpio_1_read(void) {
	uint32_t word = bio_sfr_extclock_read();
	return bio_sfr_extclock_extclk_gpio_1_extract(word);
}
static inline uint32_t bio_sfr_extclock_extclk_gpio_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 9))) | (mask & plain_value)<< 9 ;
}
static inline void bio_sfr_extclock_extclk_gpio_1_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_extclock_read();
	uint32_t newword = bio_sfr_extclock_extclk_gpio_1_replace(oldword, plain_value);
	bio_sfr_extclock_write(newword);
}
#define CSR_BIO_SFR_EXTCLOCK_EXTCLK_GPIO_2_OFFSET 14
#define CSR_BIO_SFR_EXTCLOCK_EXTCLK_GPIO_2_SIZE 5
static inline uint32_t bio_sfr_extclock_extclk_gpio_2_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 14) & mask );
}
static inline uint32_t bio_sfr_extclock_extclk_gpio_2_read(void) {
	uint32_t word = bio_sfr_extclock_read();
	return bio_sfr_extclock_extclk_gpio_2_extract(word);
}
static inline uint32_t bio_sfr_extclock_extclk_gpio_2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 14))) | (mask & plain_value)<< 14 ;
}
static inline void bio_sfr_extclock_extclk_gpio_2_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_extclock_read();
	uint32_t newword = bio_sfr_extclock_extclk_gpio_2_replace(oldword, plain_value);
	bio_sfr_extclock_write(newword);
}
#define CSR_BIO_SFR_EXTCLOCK_EXTCLK_GPIO_3_OFFSET 19
#define CSR_BIO_SFR_EXTCLOCK_EXTCLK_GPIO_3_SIZE 5
static inline uint32_t bio_sfr_extclock_extclk_gpio_3_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 19) & mask );
}
static inline uint32_t bio_sfr_extclock_extclk_gpio_3_read(void) {
	uint32_t word = bio_sfr_extclock_read();
	return bio_sfr_extclock_extclk_gpio_3_extract(word);
}
static inline uint32_t bio_sfr_extclock_extclk_gpio_3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 19))) | (mask & plain_value)<< 19 ;
}
static inline void bio_sfr_extclock_extclk_gpio_3_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_extclock_read();
	uint32_t newword = bio_sfr_extclock_extclk_gpio_3_replace(oldword, plain_value);
	bio_sfr_extclock_write(newword);
}
#define CSR_BIO_SFR_QDIV0_ADDR (CSR_BASE + 0x24050L)
#define CSR_BIO_SFR_QDIV0_SIZE 1
static inline uint32_t bio_sfr_qdiv0_read(void) {
	return csr_read_simple((CSR_BASE + 0x24050L));
}
static inline void bio_sfr_qdiv0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24050L));
}
#define CSR_BIO_SFR_QDIV0_UNUSED_DIV_OFFSET 0
#define CSR_BIO_SFR_QDIV0_UNUSED_DIV_SIZE 8
static inline uint32_t bio_sfr_qdiv0_unused_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_qdiv0_unused_div_read(void) {
	uint32_t word = bio_sfr_qdiv0_read();
	return bio_sfr_qdiv0_unused_div_extract(word);
}
static inline uint32_t bio_sfr_qdiv0_unused_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_qdiv0_unused_div_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv0_read();
	uint32_t newword = bio_sfr_qdiv0_unused_div_replace(oldword, plain_value);
	bio_sfr_qdiv0_write(newword);
}
#define CSR_BIO_SFR_QDIV0_DIV_FRAC_OFFSET 8
#define CSR_BIO_SFR_QDIV0_DIV_FRAC_SIZE 8
static inline uint32_t bio_sfr_qdiv0_div_frac_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_qdiv0_div_frac_read(void) {
	uint32_t word = bio_sfr_qdiv0_read();
	return bio_sfr_qdiv0_div_frac_extract(word);
}
static inline uint32_t bio_sfr_qdiv0_div_frac_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void bio_sfr_qdiv0_div_frac_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv0_read();
	uint32_t newword = bio_sfr_qdiv0_div_frac_replace(oldword, plain_value);
	bio_sfr_qdiv0_write(newword);
}
#define CSR_BIO_SFR_QDIV0_DIV_INT_OFFSET 16
#define CSR_BIO_SFR_QDIV0_DIV_INT_SIZE 16
static inline uint32_t bio_sfr_qdiv0_div_int_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t bio_sfr_qdiv0_div_int_read(void) {
	uint32_t word = bio_sfr_qdiv0_read();
	return bio_sfr_qdiv0_div_int_extract(word);
}
static inline uint32_t bio_sfr_qdiv0_div_int_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void bio_sfr_qdiv0_div_int_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv0_read();
	uint32_t newword = bio_sfr_qdiv0_div_int_replace(oldword, plain_value);
	bio_sfr_qdiv0_write(newword);
}
#define CSR_BIO_SFR_QDIV1_ADDR (CSR_BASE + 0x24054L)
#define CSR_BIO_SFR_QDIV1_SIZE 1
static inline uint32_t bio_sfr_qdiv1_read(void) {
	return csr_read_simple((CSR_BASE + 0x24054L));
}
static inline void bio_sfr_qdiv1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24054L));
}
#define CSR_BIO_SFR_QDIV1_UNUSED_DIV_OFFSET 0
#define CSR_BIO_SFR_QDIV1_UNUSED_DIV_SIZE 8
static inline uint32_t bio_sfr_qdiv1_unused_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_qdiv1_unused_div_read(void) {
	uint32_t word = bio_sfr_qdiv1_read();
	return bio_sfr_qdiv1_unused_div_extract(word);
}
static inline uint32_t bio_sfr_qdiv1_unused_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_qdiv1_unused_div_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv1_read();
	uint32_t newword = bio_sfr_qdiv1_unused_div_replace(oldword, plain_value);
	bio_sfr_qdiv1_write(newword);
}
#define CSR_BIO_SFR_QDIV1_DIV_FRAC_OFFSET 8
#define CSR_BIO_SFR_QDIV1_DIV_FRAC_SIZE 8
static inline uint32_t bio_sfr_qdiv1_div_frac_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_qdiv1_div_frac_read(void) {
	uint32_t word = bio_sfr_qdiv1_read();
	return bio_sfr_qdiv1_div_frac_extract(word);
}
static inline uint32_t bio_sfr_qdiv1_div_frac_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void bio_sfr_qdiv1_div_frac_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv1_read();
	uint32_t newword = bio_sfr_qdiv1_div_frac_replace(oldword, plain_value);
	bio_sfr_qdiv1_write(newword);
}
#define CSR_BIO_SFR_QDIV1_DIV_INT_OFFSET 16
#define CSR_BIO_SFR_QDIV1_DIV_INT_SIZE 16
static inline uint32_t bio_sfr_qdiv1_div_int_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t bio_sfr_qdiv1_div_int_read(void) {
	uint32_t word = bio_sfr_qdiv1_read();
	return bio_sfr_qdiv1_div_int_extract(word);
}
static inline uint32_t bio_sfr_qdiv1_div_int_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void bio_sfr_qdiv1_div_int_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv1_read();
	uint32_t newword = bio_sfr_qdiv1_div_int_replace(oldword, plain_value);
	bio_sfr_qdiv1_write(newword);
}
#define CSR_BIO_SFR_QDIV2_ADDR (CSR_BASE + 0x24058L)
#define CSR_BIO_SFR_QDIV2_SIZE 1
static inline uint32_t bio_sfr_qdiv2_read(void) {
	return csr_read_simple((CSR_BASE + 0x24058L));
}
static inline void bio_sfr_qdiv2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24058L));
}
#define CSR_BIO_SFR_QDIV2_UNUSED_DIV_OFFSET 0
#define CSR_BIO_SFR_QDIV2_UNUSED_DIV_SIZE 8
static inline uint32_t bio_sfr_qdiv2_unused_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_qdiv2_unused_div_read(void) {
	uint32_t word = bio_sfr_qdiv2_read();
	return bio_sfr_qdiv2_unused_div_extract(word);
}
static inline uint32_t bio_sfr_qdiv2_unused_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_qdiv2_unused_div_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv2_read();
	uint32_t newword = bio_sfr_qdiv2_unused_div_replace(oldword, plain_value);
	bio_sfr_qdiv2_write(newword);
}
#define CSR_BIO_SFR_QDIV2_DIV_FRAC_OFFSET 8
#define CSR_BIO_SFR_QDIV2_DIV_FRAC_SIZE 8
static inline uint32_t bio_sfr_qdiv2_div_frac_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_qdiv2_div_frac_read(void) {
	uint32_t word = bio_sfr_qdiv2_read();
	return bio_sfr_qdiv2_div_frac_extract(word);
}
static inline uint32_t bio_sfr_qdiv2_div_frac_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void bio_sfr_qdiv2_div_frac_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv2_read();
	uint32_t newword = bio_sfr_qdiv2_div_frac_replace(oldword, plain_value);
	bio_sfr_qdiv2_write(newword);
}
#define CSR_BIO_SFR_QDIV2_DIV_INT_OFFSET 16
#define CSR_BIO_SFR_QDIV2_DIV_INT_SIZE 16
static inline uint32_t bio_sfr_qdiv2_div_int_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t bio_sfr_qdiv2_div_int_read(void) {
	uint32_t word = bio_sfr_qdiv2_read();
	return bio_sfr_qdiv2_div_int_extract(word);
}
static inline uint32_t bio_sfr_qdiv2_div_int_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void bio_sfr_qdiv2_div_int_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv2_read();
	uint32_t newword = bio_sfr_qdiv2_div_int_replace(oldword, plain_value);
	bio_sfr_qdiv2_write(newword);
}
#define CSR_BIO_SFR_QDIV3_ADDR (CSR_BASE + 0x2405cL)
#define CSR_BIO_SFR_QDIV3_SIZE 1
static inline uint32_t bio_sfr_qdiv3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2405cL));
}
static inline void bio_sfr_qdiv3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2405cL));
}
#define CSR_BIO_SFR_QDIV3_UNUSED_DIV_OFFSET 0
#define CSR_BIO_SFR_QDIV3_UNUSED_DIV_SIZE 8
static inline uint32_t bio_sfr_qdiv3_unused_div_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_qdiv3_unused_div_read(void) {
	uint32_t word = bio_sfr_qdiv3_read();
	return bio_sfr_qdiv3_unused_div_extract(word);
}
static inline uint32_t bio_sfr_qdiv3_unused_div_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_qdiv3_unused_div_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv3_read();
	uint32_t newword = bio_sfr_qdiv3_unused_div_replace(oldword, plain_value);
	bio_sfr_qdiv3_write(newword);
}
#define CSR_BIO_SFR_QDIV3_DIV_FRAC_OFFSET 8
#define CSR_BIO_SFR_QDIV3_DIV_FRAC_SIZE 8
static inline uint32_t bio_sfr_qdiv3_div_frac_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t bio_sfr_qdiv3_div_frac_read(void) {
	uint32_t word = bio_sfr_qdiv3_read();
	return bio_sfr_qdiv3_div_frac_extract(word);
}
static inline uint32_t bio_sfr_qdiv3_div_frac_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void bio_sfr_qdiv3_div_frac_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv3_read();
	uint32_t newword = bio_sfr_qdiv3_div_frac_replace(oldword, plain_value);
	bio_sfr_qdiv3_write(newword);
}
#define CSR_BIO_SFR_QDIV3_DIV_INT_OFFSET 16
#define CSR_BIO_SFR_QDIV3_DIV_INT_SIZE 16
static inline uint32_t bio_sfr_qdiv3_div_int_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t bio_sfr_qdiv3_div_int_read(void) {
	uint32_t word = bio_sfr_qdiv3_read();
	return bio_sfr_qdiv3_div_int_extract(word);
}
static inline uint32_t bio_sfr_qdiv3_div_int_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void bio_sfr_qdiv3_div_int_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_qdiv3_read();
	uint32_t newword = bio_sfr_qdiv3_div_int_replace(oldword, plain_value);
	bio_sfr_qdiv3_write(newword);
}
#define CSR_BIO_SFR_SYNC_BYPASS_ADDR (CSR_BASE + 0x24060L)
#define CSR_BIO_SFR_SYNC_BYPASS_SIZE 1
static inline uint32_t bio_sfr_sync_bypass_read(void) {
	return csr_read_simple((CSR_BASE + 0x24060L));
}
static inline void bio_sfr_sync_bypass_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24060L));
}
#define CSR_BIO_SFR_SYNC_BYPASS_SFR_SYNC_BYPASS_OFFSET 0
#define CSR_BIO_SFR_SYNC_BYPASS_SFR_SYNC_BYPASS_SIZE 32
static inline uint32_t bio_sfr_sync_bypass_sfr_sync_bypass_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_sync_bypass_sfr_sync_bypass_read(void) {
	uint32_t word = bio_sfr_sync_bypass_read();
	return bio_sfr_sync_bypass_sfr_sync_bypass_extract(word);
}
static inline uint32_t bio_sfr_sync_bypass_sfr_sync_bypass_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_sync_bypass_sfr_sync_bypass_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_sync_bypass_read();
	uint32_t newword = bio_sfr_sync_bypass_sfr_sync_bypass_replace(oldword, plain_value);
	bio_sfr_sync_bypass_write(newword);
}
#define CSR_BIO_SFR_IO_OE_INV_ADDR (CSR_BASE + 0x24064L)
#define CSR_BIO_SFR_IO_OE_INV_SIZE 1
static inline uint32_t bio_sfr_io_oe_inv_read(void) {
	return csr_read_simple((CSR_BASE + 0x24064L));
}
static inline void bio_sfr_io_oe_inv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24064L));
}
#define CSR_BIO_SFR_IO_OE_INV_SFR_IO_OE_INV_OFFSET 0
#define CSR_BIO_SFR_IO_OE_INV_SFR_IO_OE_INV_SIZE 32
static inline uint32_t bio_sfr_io_oe_inv_sfr_io_oe_inv_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_io_oe_inv_sfr_io_oe_inv_read(void) {
	uint32_t word = bio_sfr_io_oe_inv_read();
	return bio_sfr_io_oe_inv_sfr_io_oe_inv_extract(word);
}
static inline uint32_t bio_sfr_io_oe_inv_sfr_io_oe_inv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_io_oe_inv_sfr_io_oe_inv_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_io_oe_inv_read();
	uint32_t newword = bio_sfr_io_oe_inv_sfr_io_oe_inv_replace(oldword, plain_value);
	bio_sfr_io_oe_inv_write(newword);
}
#define CSR_BIO_SFR_IO_O_INV_ADDR (CSR_BASE + 0x24068L)
#define CSR_BIO_SFR_IO_O_INV_SIZE 1
static inline uint32_t bio_sfr_io_o_inv_read(void) {
	return csr_read_simple((CSR_BASE + 0x24068L));
}
static inline void bio_sfr_io_o_inv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24068L));
}
#define CSR_BIO_SFR_IO_O_INV_SFR_IO_O_INV_OFFSET 0
#define CSR_BIO_SFR_IO_O_INV_SFR_IO_O_INV_SIZE 32
static inline uint32_t bio_sfr_io_o_inv_sfr_io_o_inv_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_io_o_inv_sfr_io_o_inv_read(void) {
	uint32_t word = bio_sfr_io_o_inv_read();
	return bio_sfr_io_o_inv_sfr_io_o_inv_extract(word);
}
static inline uint32_t bio_sfr_io_o_inv_sfr_io_o_inv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_io_o_inv_sfr_io_o_inv_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_io_o_inv_read();
	uint32_t newword = bio_sfr_io_o_inv_sfr_io_o_inv_replace(oldword, plain_value);
	bio_sfr_io_o_inv_write(newword);
}
#define CSR_BIO_SFR_IO_I_INV_ADDR (CSR_BASE + 0x2406cL)
#define CSR_BIO_SFR_IO_I_INV_SIZE 1
static inline uint32_t bio_sfr_io_i_inv_read(void) {
	return csr_read_simple((CSR_BASE + 0x2406cL));
}
static inline void bio_sfr_io_i_inv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2406cL));
}
#define CSR_BIO_SFR_IO_I_INV_SFR_IO_I_INV_OFFSET 0
#define CSR_BIO_SFR_IO_I_INV_SFR_IO_I_INV_SIZE 32
static inline uint32_t bio_sfr_io_i_inv_sfr_io_i_inv_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_io_i_inv_sfr_io_i_inv_read(void) {
	uint32_t word = bio_sfr_io_i_inv_read();
	return bio_sfr_io_i_inv_sfr_io_i_inv_extract(word);
}
static inline uint32_t bio_sfr_io_i_inv_sfr_io_i_inv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_io_i_inv_sfr_io_i_inv_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_io_i_inv_read();
	uint32_t newword = bio_sfr_io_i_inv_sfr_io_i_inv_replace(oldword, plain_value);
	bio_sfr_io_i_inv_write(newword);
}
#define CSR_BIO_SFR_IRQMASK_0_ADDR (CSR_BASE + 0x24070L)
#define CSR_BIO_SFR_IRQMASK_0_SIZE 1
static inline uint32_t bio_sfr_irqmask_0_read(void) {
	return csr_read_simple((CSR_BASE + 0x24070L));
}
static inline void bio_sfr_irqmask_0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24070L));
}
#define CSR_BIO_SFR_IRQMASK_0_SFR_IRQMASK_0_OFFSET 0
#define CSR_BIO_SFR_IRQMASK_0_SFR_IRQMASK_0_SIZE 32
static inline uint32_t bio_sfr_irqmask_0_sfr_irqmask_0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_irqmask_0_sfr_irqmask_0_read(void) {
	uint32_t word = bio_sfr_irqmask_0_read();
	return bio_sfr_irqmask_0_sfr_irqmask_0_extract(word);
}
static inline uint32_t bio_sfr_irqmask_0_sfr_irqmask_0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_irqmask_0_sfr_irqmask_0_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_irqmask_0_read();
	uint32_t newword = bio_sfr_irqmask_0_sfr_irqmask_0_replace(oldword, plain_value);
	bio_sfr_irqmask_0_write(newword);
}
#define CSR_BIO_SFR_IRQMASK_1_ADDR (CSR_BASE + 0x24074L)
#define CSR_BIO_SFR_IRQMASK_1_SIZE 1
static inline uint32_t bio_sfr_irqmask_1_read(void) {
	return csr_read_simple((CSR_BASE + 0x24074L));
}
static inline void bio_sfr_irqmask_1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24074L));
}
#define CSR_BIO_SFR_IRQMASK_1_SFR_IRQMASK_1_OFFSET 0
#define CSR_BIO_SFR_IRQMASK_1_SFR_IRQMASK_1_SIZE 32
static inline uint32_t bio_sfr_irqmask_1_sfr_irqmask_1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_irqmask_1_sfr_irqmask_1_read(void) {
	uint32_t word = bio_sfr_irqmask_1_read();
	return bio_sfr_irqmask_1_sfr_irqmask_1_extract(word);
}
static inline uint32_t bio_sfr_irqmask_1_sfr_irqmask_1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_irqmask_1_sfr_irqmask_1_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_irqmask_1_read();
	uint32_t newword = bio_sfr_irqmask_1_sfr_irqmask_1_replace(oldword, plain_value);
	bio_sfr_irqmask_1_write(newword);
}
#define CSR_BIO_SFR_IRQMASK_2_ADDR (CSR_BASE + 0x24078L)
#define CSR_BIO_SFR_IRQMASK_2_SIZE 1
static inline uint32_t bio_sfr_irqmask_2_read(void) {
	return csr_read_simple((CSR_BASE + 0x24078L));
}
static inline void bio_sfr_irqmask_2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24078L));
}
#define CSR_BIO_SFR_IRQMASK_2_SFR_IRQMASK_2_OFFSET 0
#define CSR_BIO_SFR_IRQMASK_2_SFR_IRQMASK_2_SIZE 32
static inline uint32_t bio_sfr_irqmask_2_sfr_irqmask_2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_irqmask_2_sfr_irqmask_2_read(void) {
	uint32_t word = bio_sfr_irqmask_2_read();
	return bio_sfr_irqmask_2_sfr_irqmask_2_extract(word);
}
static inline uint32_t bio_sfr_irqmask_2_sfr_irqmask_2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_irqmask_2_sfr_irqmask_2_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_irqmask_2_read();
	uint32_t newword = bio_sfr_irqmask_2_sfr_irqmask_2_replace(oldword, plain_value);
	bio_sfr_irqmask_2_write(newword);
}
#define CSR_BIO_SFR_IRQMASK_3_ADDR (CSR_BASE + 0x2407cL)
#define CSR_BIO_SFR_IRQMASK_3_SIZE 1
static inline uint32_t bio_sfr_irqmask_3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2407cL));
}
static inline void bio_sfr_irqmask_3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2407cL));
}
#define CSR_BIO_SFR_IRQMASK_3_SFR_IRQMASK_3_OFFSET 0
#define CSR_BIO_SFR_IRQMASK_3_SFR_IRQMASK_3_SIZE 32
static inline uint32_t bio_sfr_irqmask_3_sfr_irqmask_3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_irqmask_3_sfr_irqmask_3_read(void) {
	uint32_t word = bio_sfr_irqmask_3_read();
	return bio_sfr_irqmask_3_sfr_irqmask_3_extract(word);
}
static inline uint32_t bio_sfr_irqmask_3_sfr_irqmask_3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_irqmask_3_sfr_irqmask_3_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_irqmask_3_read();
	uint32_t newword = bio_sfr_irqmask_3_sfr_irqmask_3_replace(oldword, plain_value);
	bio_sfr_irqmask_3_write(newword);
}
#define CSR_BIO_SFR_IRQ_EDGE_ADDR (CSR_BASE + 0x24080L)
#define CSR_BIO_SFR_IRQ_EDGE_SIZE 1
static inline uint32_t bio_sfr_irq_edge_read(void) {
	return csr_read_simple((CSR_BASE + 0x24080L));
}
static inline void bio_sfr_irq_edge_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24080L));
}
#define CSR_BIO_SFR_IRQ_EDGE_SFR_IRQ_EDGE_OFFSET 0
#define CSR_BIO_SFR_IRQ_EDGE_SFR_IRQ_EDGE_SIZE 4
static inline uint32_t bio_sfr_irq_edge_sfr_irq_edge_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_irq_edge_sfr_irq_edge_read(void) {
	uint32_t word = bio_sfr_irq_edge_read();
	return bio_sfr_irq_edge_sfr_irq_edge_extract(word);
}
static inline uint32_t bio_sfr_irq_edge_sfr_irq_edge_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void bio_sfr_irq_edge_sfr_irq_edge_write(uint32_t plain_value) {
	uint32_t oldword = bio_sfr_irq_edge_read();
	uint32_t newword = bio_sfr_irq_edge_sfr_irq_edge_replace(oldword, plain_value);
	bio_sfr_irq_edge_write(newword);
}
#define CSR_BIO_SFR_DBG_PADOUT_ADDR (CSR_BASE + 0x24084L)
#define CSR_BIO_SFR_DBG_PADOUT_SIZE 1
static inline uint32_t bio_sfr_dbg_padout_read(void) {
	return csr_read_simple((CSR_BASE + 0x24084L));
}
#define CSR_BIO_SFR_DBG_PADOUT_SFR_DBG_PADOUT_OFFSET 0
#define CSR_BIO_SFR_DBG_PADOUT_SFR_DBG_PADOUT_SIZE 32
static inline uint32_t bio_sfr_dbg_padout_sfr_dbg_padout_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_dbg_padout_sfr_dbg_padout_read(void) {
	uint32_t word = bio_sfr_dbg_padout_read();
	return bio_sfr_dbg_padout_sfr_dbg_padout_extract(word);
}
#define CSR_BIO_SFR_DBG_PADOE_ADDR (CSR_BASE + 0x24088L)
#define CSR_BIO_SFR_DBG_PADOE_SIZE 1
static inline uint32_t bio_sfr_dbg_padoe_read(void) {
	return csr_read_simple((CSR_BASE + 0x24088L));
}
#define CSR_BIO_SFR_DBG_PADOE_SFR_DBG_PADOE_OFFSET 0
#define CSR_BIO_SFR_DBG_PADOE_SFR_DBG_PADOE_SIZE 32
static inline uint32_t bio_sfr_dbg_padoe_sfr_dbg_padoe_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t bio_sfr_dbg_padoe_sfr_dbg_padoe_read(void) {
	uint32_t word = bio_sfr_dbg_padoe_read();
	return bio_sfr_dbg_padoe_sfr_dbg_padoe_extract(word);
}

/* coresub_sramtrm */
#define CSR_CORESUB_SRAMTRM_BASE (CSR_BASE + -0x100ec000L)
#define CSR_CORESUB_SRAMTRM_SFR_CACHE_ADDR (CSR_BASE + -0x100ec000L)
#define CSR_CORESUB_SRAMTRM_SFR_CACHE_SIZE 1
static inline uint32_t coresub_sramtrm_sfr_cache_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ec000L));
}
static inline void coresub_sramtrm_sfr_cache_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ec000L));
}
#define CSR_CORESUB_SRAMTRM_SFR_CACHE_SFR_CACHE_OFFSET 0
#define CSR_CORESUB_SRAMTRM_SFR_CACHE_SFR_CACHE_SIZE 3
static inline uint32_t coresub_sramtrm_sfr_cache_sfr_cache_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t coresub_sramtrm_sfr_cache_sfr_cache_read(void) {
	uint32_t word = coresub_sramtrm_sfr_cache_read();
	return coresub_sramtrm_sfr_cache_sfr_cache_extract(word);
}
static inline uint32_t coresub_sramtrm_sfr_cache_sfr_cache_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void coresub_sramtrm_sfr_cache_sfr_cache_write(uint32_t plain_value) {
	uint32_t oldword = coresub_sramtrm_sfr_cache_read();
	uint32_t newword = coresub_sramtrm_sfr_cache_sfr_cache_replace(oldword, plain_value);
	coresub_sramtrm_sfr_cache_write(newword);
}
#define CSR_CORESUB_SRAMTRM_SFR_ITCM_ADDR (CSR_BASE + -0x100ebffcL)
#define CSR_CORESUB_SRAMTRM_SFR_ITCM_SIZE 1
static inline uint32_t coresub_sramtrm_sfr_itcm_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ebffcL));
}
static inline void coresub_sramtrm_sfr_itcm_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ebffcL));
}
#define CSR_CORESUB_SRAMTRM_SFR_ITCM_SFR_ITCM_OFFSET 0
#define CSR_CORESUB_SRAMTRM_SFR_ITCM_SFR_ITCM_SIZE 5
static inline uint32_t coresub_sramtrm_sfr_itcm_sfr_itcm_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t coresub_sramtrm_sfr_itcm_sfr_itcm_read(void) {
	uint32_t word = coresub_sramtrm_sfr_itcm_read();
	return coresub_sramtrm_sfr_itcm_sfr_itcm_extract(word);
}
static inline uint32_t coresub_sramtrm_sfr_itcm_sfr_itcm_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void coresub_sramtrm_sfr_itcm_sfr_itcm_write(uint32_t plain_value) {
	uint32_t oldword = coresub_sramtrm_sfr_itcm_read();
	uint32_t newword = coresub_sramtrm_sfr_itcm_sfr_itcm_replace(oldword, plain_value);
	coresub_sramtrm_sfr_itcm_write(newword);
}
#define CSR_CORESUB_SRAMTRM_SFR_DTCM_ADDR (CSR_BASE + -0x100ebff8L)
#define CSR_CORESUB_SRAMTRM_SFR_DTCM_SIZE 1
static inline uint32_t coresub_sramtrm_sfr_dtcm_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ebff8L));
}
static inline void coresub_sramtrm_sfr_dtcm_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ebff8L));
}
#define CSR_CORESUB_SRAMTRM_SFR_DTCM_SFR_DTCM_OFFSET 0
#define CSR_CORESUB_SRAMTRM_SFR_DTCM_SFR_DTCM_SIZE 5
static inline uint32_t coresub_sramtrm_sfr_dtcm_sfr_dtcm_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t coresub_sramtrm_sfr_dtcm_sfr_dtcm_read(void) {
	uint32_t word = coresub_sramtrm_sfr_dtcm_read();
	return coresub_sramtrm_sfr_dtcm_sfr_dtcm_extract(word);
}
static inline uint32_t coresub_sramtrm_sfr_dtcm_sfr_dtcm_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void coresub_sramtrm_sfr_dtcm_sfr_dtcm_write(uint32_t plain_value) {
	uint32_t oldword = coresub_sramtrm_sfr_dtcm_read();
	uint32_t newword = coresub_sramtrm_sfr_dtcm_sfr_dtcm_replace(oldword, plain_value);
	coresub_sramtrm_sfr_dtcm_write(newword);
}
#define CSR_CORESUB_SRAMTRM_SFR_SRAM0_ADDR (CSR_BASE + -0x100ebff4L)
#define CSR_CORESUB_SRAMTRM_SFR_SRAM0_SIZE 1
static inline uint32_t coresub_sramtrm_sfr_sram0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ebff4L));
}
static inline void coresub_sramtrm_sfr_sram0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ebff4L));
}
#define CSR_CORESUB_SRAMTRM_SFR_SRAM0_SFR_SRAM0_OFFSET 0
#define CSR_CORESUB_SRAMTRM_SFR_SRAM0_SFR_SRAM0_SIZE 5
static inline uint32_t coresub_sramtrm_sfr_sram0_sfr_sram0_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t coresub_sramtrm_sfr_sram0_sfr_sram0_read(void) {
	uint32_t word = coresub_sramtrm_sfr_sram0_read();
	return coresub_sramtrm_sfr_sram0_sfr_sram0_extract(word);
}
static inline uint32_t coresub_sramtrm_sfr_sram0_sfr_sram0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void coresub_sramtrm_sfr_sram0_sfr_sram0_write(uint32_t plain_value) {
	uint32_t oldword = coresub_sramtrm_sfr_sram0_read();
	uint32_t newword = coresub_sramtrm_sfr_sram0_sfr_sram0_replace(oldword, plain_value);
	coresub_sramtrm_sfr_sram0_write(newword);
}
#define CSR_CORESUB_SRAMTRM_SFR_SRAM1_ADDR (CSR_BASE + -0x100ebff0L)
#define CSR_CORESUB_SRAMTRM_SFR_SRAM1_SIZE 1
static inline uint32_t coresub_sramtrm_sfr_sram1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ebff0L));
}
static inline void coresub_sramtrm_sfr_sram1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ebff0L));
}
#define CSR_CORESUB_SRAMTRM_SFR_SRAM1_SFR_SRAM1_OFFSET 0
#define CSR_CORESUB_SRAMTRM_SFR_SRAM1_SFR_SRAM1_SIZE 5
static inline uint32_t coresub_sramtrm_sfr_sram1_sfr_sram1_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t coresub_sramtrm_sfr_sram1_sfr_sram1_read(void) {
	uint32_t word = coresub_sramtrm_sfr_sram1_read();
	return coresub_sramtrm_sfr_sram1_sfr_sram1_extract(word);
}
static inline uint32_t coresub_sramtrm_sfr_sram1_sfr_sram1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void coresub_sramtrm_sfr_sram1_sfr_sram1_write(uint32_t plain_value) {
	uint32_t oldword = coresub_sramtrm_sfr_sram1_read();
	uint32_t newword = coresub_sramtrm_sfr_sram1_sfr_sram1_replace(oldword, plain_value);
	coresub_sramtrm_sfr_sram1_write(newword);
}
#define CSR_CORESUB_SRAMTRM_SFR_VEXRAM_ADDR (CSR_BASE + -0x100ebfecL)
#define CSR_CORESUB_SRAMTRM_SFR_VEXRAM_SIZE 1
static inline uint32_t coresub_sramtrm_sfr_vexram_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ebfecL));
}
static inline void coresub_sramtrm_sfr_vexram_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ebfecL));
}
#define CSR_CORESUB_SRAMTRM_SFR_VEXRAM_SFR_VEXRAM_OFFSET 0
#define CSR_CORESUB_SRAMTRM_SFR_VEXRAM_SFR_VEXRAM_SIZE 3
static inline uint32_t coresub_sramtrm_sfr_vexram_sfr_vexram_extract(uint32_t oldword) {
	uint32_t mask = 0x7;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t coresub_sramtrm_sfr_vexram_sfr_vexram_read(void) {
	uint32_t word = coresub_sramtrm_sfr_vexram_read();
	return coresub_sramtrm_sfr_vexram_sfr_vexram_extract(word);
}
static inline uint32_t coresub_sramtrm_sfr_vexram_sfr_vexram_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void coresub_sramtrm_sfr_vexram_sfr_vexram_write(uint32_t plain_value) {
	uint32_t oldword = coresub_sramtrm_sfr_vexram_read();
	uint32_t newword = coresub_sramtrm_sfr_vexram_sfr_vexram_replace(oldword, plain_value);
	coresub_sramtrm_sfr_vexram_write(newword);
}
#define CSR_CORESUB_SRAMTRM_SFR_SRAMERR_ADDR (CSR_BASE + -0x100ebfe0L)
#define CSR_CORESUB_SRAMTRM_SFR_SRAMERR_SIZE 1
static inline uint32_t coresub_sramtrm_sfr_sramerr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ebfe0L));
}
#define CSR_CORESUB_SRAMTRM_SFR_SRAMERR_SRAMBANKERR_OFFSET 0
#define CSR_CORESUB_SRAMTRM_SFR_SRAMERR_SRAMBANKERR_SIZE 4
static inline uint32_t coresub_sramtrm_sfr_sramerr_srambankerr_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t coresub_sramtrm_sfr_sramerr_srambankerr_read(void) {
	uint32_t word = coresub_sramtrm_sfr_sramerr_read();
	return coresub_sramtrm_sfr_sramerr_srambankerr_extract(word);
}

/* mdma */
#define CSR_MDMA_BASE (CSR_BASE + -0x100ee000L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL0_ADDR (CSR_BASE + -0x100ee000L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL0_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ee000L));
}
static inline void mdma_sfr_evsel_cr_evsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ee000L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL0_CR_EVSEL0_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL0_CR_EVSEL0_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel0_cr_evsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel0_cr_evsel0_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel0_read();
	return mdma_sfr_evsel_cr_evsel0_cr_evsel0_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel0_cr_evsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel0_cr_evsel0_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel0_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel0_cr_evsel0_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel0_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL1_ADDR (CSR_BASE + -0x100edffcL)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL1_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edffcL));
}
static inline void mdma_sfr_evsel_cr_evsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edffcL));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL1_CR_EVSEL1_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL1_CR_EVSEL1_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel1_cr_evsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel1_cr_evsel1_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel1_read();
	return mdma_sfr_evsel_cr_evsel1_cr_evsel1_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel1_cr_evsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel1_cr_evsel1_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel1_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel1_cr_evsel1_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel1_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL2_ADDR (CSR_BASE + -0x100edff8L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL2_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edff8L));
}
static inline void mdma_sfr_evsel_cr_evsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edff8L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL2_CR_EVSEL2_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL2_CR_EVSEL2_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel2_cr_evsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel2_cr_evsel2_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel2_read();
	return mdma_sfr_evsel_cr_evsel2_cr_evsel2_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel2_cr_evsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel2_cr_evsel2_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel2_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel2_cr_evsel2_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel2_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL3_ADDR (CSR_BASE + -0x100edff4L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL3_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edff4L));
}
static inline void mdma_sfr_evsel_cr_evsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edff4L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL3_CR_EVSEL3_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL3_CR_EVSEL3_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel3_cr_evsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel3_cr_evsel3_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel3_read();
	return mdma_sfr_evsel_cr_evsel3_cr_evsel3_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel3_cr_evsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel3_cr_evsel3_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel3_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel3_cr_evsel3_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel3_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL4_ADDR (CSR_BASE + -0x100edff0L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL4_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel4_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edff0L));
}
static inline void mdma_sfr_evsel_cr_evsel4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edff0L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL4_CR_EVSEL4_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL4_CR_EVSEL4_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel4_cr_evsel4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel4_cr_evsel4_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel4_read();
	return mdma_sfr_evsel_cr_evsel4_cr_evsel4_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel4_cr_evsel4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel4_cr_evsel4_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel4_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel4_cr_evsel4_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel4_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL5_ADDR (CSR_BASE + -0x100edfecL)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL5_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel5_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfecL));
}
static inline void mdma_sfr_evsel_cr_evsel5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfecL));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL5_CR_EVSEL5_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL5_CR_EVSEL5_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel5_cr_evsel5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel5_cr_evsel5_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel5_read();
	return mdma_sfr_evsel_cr_evsel5_cr_evsel5_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel5_cr_evsel5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel5_cr_evsel5_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel5_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel5_cr_evsel5_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel5_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL6_ADDR (CSR_BASE + -0x100edfe8L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL6_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel6_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfe8L));
}
static inline void mdma_sfr_evsel_cr_evsel6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfe8L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL6_CR_EVSEL6_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL6_CR_EVSEL6_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel6_cr_evsel6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel6_cr_evsel6_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel6_read();
	return mdma_sfr_evsel_cr_evsel6_cr_evsel6_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel6_cr_evsel6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel6_cr_evsel6_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel6_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel6_cr_evsel6_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel6_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL7_ADDR (CSR_BASE + -0x100edfe4L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL7_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel7_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfe4L));
}
static inline void mdma_sfr_evsel_cr_evsel7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfe4L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL7_CR_EVSEL7_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL7_CR_EVSEL7_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel7_cr_evsel7_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel7_cr_evsel7_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel7_read();
	return mdma_sfr_evsel_cr_evsel7_cr_evsel7_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel7_cr_evsel7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel7_cr_evsel7_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel7_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel7_cr_evsel7_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel7_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ0_ADDR (CSR_BASE + -0x100edfe0L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ0_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfe0L));
}
static inline void mdma_sfr_cr_cr_mdmareq0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfe0L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq0_read();
	return mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq0_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq0_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ1_ADDR (CSR_BASE + -0x100edfdcL)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ1_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfdcL));
}
static inline void mdma_sfr_cr_cr_mdmareq1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfdcL));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq1_read();
	return mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq1_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq1_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ2_ADDR (CSR_BASE + -0x100edfd8L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ2_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfd8L));
}
static inline void mdma_sfr_cr_cr_mdmareq2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfd8L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq2_read();
	return mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq2_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq2_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ3_ADDR (CSR_BASE + -0x100edfd4L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ3_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfd4L));
}
static inline void mdma_sfr_cr_cr_mdmareq3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfd4L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq3_read();
	return mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq3_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq3_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ4_ADDR (CSR_BASE + -0x100edfd0L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ4_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq4_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfd0L));
}
static inline void mdma_sfr_cr_cr_mdmareq4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfd0L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq4_read();
	return mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq4_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq4_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ5_ADDR (CSR_BASE + -0x100edfccL)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ5_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq5_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfccL));
}
static inline void mdma_sfr_cr_cr_mdmareq5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfccL));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq5_read();
	return mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq5_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq5_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ6_ADDR (CSR_BASE + -0x100edfc8L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ6_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq6_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfc8L));
}
static inline void mdma_sfr_cr_cr_mdmareq6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfc8L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq6_read();
	return mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq6_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq6_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ7_ADDR (CSR_BASE + -0x100edfc4L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ7_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq7_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfc4L));
}
static inline void mdma_sfr_cr_cr_mdmareq7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100edfc4L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq7_read();
	return mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq7_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq7_write(newword);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ0_ADDR (CSR_BASE + -0x100edfc0L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ0_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfc0L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq0_sr_mdmareq0_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq0_sr_mdmareq0_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq0_read();
	return mdma_sfr_sr_sr_mdmareq0_sr_mdmareq0_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ1_ADDR (CSR_BASE + -0x100edfbcL)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ1_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfbcL));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq1_sr_mdmareq1_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq1_sr_mdmareq1_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq1_read();
	return mdma_sfr_sr_sr_mdmareq1_sr_mdmareq1_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ2_ADDR (CSR_BASE + -0x100edfb8L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ2_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfb8L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq2_sr_mdmareq2_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq2_sr_mdmareq2_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq2_read();
	return mdma_sfr_sr_sr_mdmareq2_sr_mdmareq2_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ3_ADDR (CSR_BASE + -0x100edfb4L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ3_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfb4L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq3_sr_mdmareq3_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq3_sr_mdmareq3_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq3_read();
	return mdma_sfr_sr_sr_mdmareq3_sr_mdmareq3_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ4_ADDR (CSR_BASE + -0x100edfb0L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ4_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq4_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfb0L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq4_sr_mdmareq4_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq4_sr_mdmareq4_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq4_read();
	return mdma_sfr_sr_sr_mdmareq4_sr_mdmareq4_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ5_ADDR (CSR_BASE + -0x100edfacL)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ5_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq5_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfacL));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq5_sr_mdmareq5_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq5_sr_mdmareq5_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq5_read();
	return mdma_sfr_sr_sr_mdmareq5_sr_mdmareq5_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ6_ADDR (CSR_BASE + -0x100edfa8L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ6_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq6_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfa8L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq6_sr_mdmareq6_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq6_sr_mdmareq6_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq6_read();
	return mdma_sfr_sr_sr_mdmareq6_sr_mdmareq6_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ7_ADDR (CSR_BASE + -0x100edfa4L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ7_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq7_read(void) {
	return csr_read_simple((CSR_BASE + -0x100edfa4L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq7_sr_mdmareq7_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq7_sr_mdmareq7_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq7_read();
	return mdma_sfr_sr_sr_mdmareq7_sr_mdmareq7_extract(word);
}

/* qfc */
#define CSR_QFC_BASE (CSR_BASE + -0x100f0000L)
#define CSR_QFC_SFR_IO_ADDR (CSR_BASE + -0x100f0000L)
#define CSR_QFC_SFR_IO_SIZE 1
static inline uint32_t qfc_sfr_io_read(void) {
	return csr_read_simple((CSR_BASE + -0x100f0000L));
}
static inline void qfc_sfr_io_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100f0000L));
}
#define CSR_QFC_SFR_IO_SFR_IO_OFFSET 0
#define CSR_QFC_SFR_IO_SFR_IO_SIZE 8
static inline uint32_t qfc_sfr_io_sfr_io_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_sfr_io_sfr_io_read(void) {
	uint32_t word = qfc_sfr_io_read();
	return qfc_sfr_io_sfr_io_extract(word);
}
static inline uint32_t qfc_sfr_io_sfr_io_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_sfr_io_sfr_io_write(uint32_t plain_value) {
	uint32_t oldword = qfc_sfr_io_read();
	uint32_t newword = qfc_sfr_io_sfr_io_replace(oldword, plain_value);
	qfc_sfr_io_write(newword);
}
#define CSR_QFC_SFR_AR_ADDR (CSR_BASE + -0x100efffcL)
#define CSR_QFC_SFR_AR_SIZE 1
static inline uint32_t qfc_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x100efffcL));
}
static inline void qfc_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100efffcL));
}
#define CSR_QFC_SFR_AR_SFR_AR_OFFSET 0
#define CSR_QFC_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t qfc_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_sfr_ar_sfr_ar_read(void) {
	uint32_t word = qfc_sfr_ar_read();
	return qfc_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t qfc_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = qfc_sfr_ar_read();
	uint32_t newword = qfc_sfr_ar_sfr_ar_replace(oldword, plain_value);
	qfc_sfr_ar_write(newword);
}
#define CSR_QFC_SFR_IODRV_ADDR (CSR_BASE + -0x100efff8L)
#define CSR_QFC_SFR_IODRV_SIZE 1
static inline uint32_t qfc_sfr_iodrv_read(void) {
	return csr_read_simple((CSR_BASE + -0x100efff8L));
}
static inline void qfc_sfr_iodrv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100efff8L));
}
#define CSR_QFC_SFR_IODRV_PADDRVSEL_OFFSET 0
#define CSR_QFC_SFR_IODRV_PADDRVSEL_SIZE 12
static inline uint32_t qfc_sfr_iodrv_paddrvsel_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_sfr_iodrv_paddrvsel_read(void) {
	uint32_t word = qfc_sfr_iodrv_read();
	return qfc_sfr_iodrv_paddrvsel_extract(word);
}
static inline uint32_t qfc_sfr_iodrv_paddrvsel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_sfr_iodrv_paddrvsel_write(uint32_t plain_value) {
	uint32_t oldword = qfc_sfr_iodrv_read();
	uint32_t newword = qfc_sfr_iodrv_paddrvsel_replace(oldword, plain_value);
	qfc_sfr_iodrv_write(newword);
}
#define CSR_QFC_CR_XIP_ADDRMODE_ADDR (CSR_BASE + -0x100efff0L)
#define CSR_QFC_CR_XIP_ADDRMODE_SIZE 1
static inline uint32_t qfc_cr_xip_addrmode_read(void) {
	return csr_read_simple((CSR_BASE + -0x100efff0L));
}
static inline void qfc_cr_xip_addrmode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100efff0L));
}
#define CSR_QFC_CR_XIP_ADDRMODE_CR_XIP_ADDRMODE_OFFSET 0
#define CSR_QFC_CR_XIP_ADDRMODE_CR_XIP_ADDRMODE_SIZE 2
static inline uint32_t qfc_cr_xip_addrmode_cr_xip_addrmode_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_addrmode_cr_xip_addrmode_read(void) {
	uint32_t word = qfc_cr_xip_addrmode_read();
	return qfc_cr_xip_addrmode_cr_xip_addrmode_extract(word);
}
static inline uint32_t qfc_cr_xip_addrmode_cr_xip_addrmode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_addrmode_cr_xip_addrmode_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_addrmode_read();
	uint32_t newword = qfc_cr_xip_addrmode_cr_xip_addrmode_replace(oldword, plain_value);
	qfc_cr_xip_addrmode_write(newword);
}
#define CSR_QFC_CR_XIP_OPCODE_ADDR (CSR_BASE + -0x100effecL)
#define CSR_QFC_CR_XIP_OPCODE_SIZE 1
static inline uint32_t qfc_cr_xip_opcode_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effecL));
}
static inline void qfc_cr_xip_opcode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effecL));
}
#define CSR_QFC_CR_XIP_OPCODE_CR_XIP_OPCODE_OFFSET 0
#define CSR_QFC_CR_XIP_OPCODE_CR_XIP_OPCODE_SIZE 32
static inline uint32_t qfc_cr_xip_opcode_cr_xip_opcode_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_opcode_cr_xip_opcode_read(void) {
	uint32_t word = qfc_cr_xip_opcode_read();
	return qfc_cr_xip_opcode_cr_xip_opcode_extract(word);
}
static inline uint32_t qfc_cr_xip_opcode_cr_xip_opcode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_opcode_cr_xip_opcode_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_opcode_read();
	uint32_t newword = qfc_cr_xip_opcode_cr_xip_opcode_replace(oldword, plain_value);
	qfc_cr_xip_opcode_write(newword);
}
#define CSR_QFC_CR_XIP_WIDTH_ADDR (CSR_BASE + -0x100effe8L)
#define CSR_QFC_CR_XIP_WIDTH_SIZE 1
static inline uint32_t qfc_cr_xip_width_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effe8L));
}
static inline void qfc_cr_xip_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effe8L));
}
#define CSR_QFC_CR_XIP_WIDTH_CR_XIP_WIDTH_OFFSET 0
#define CSR_QFC_CR_XIP_WIDTH_CR_XIP_WIDTH_SIZE 6
static inline uint32_t qfc_cr_xip_width_cr_xip_width_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_width_cr_xip_width_read(void) {
	uint32_t word = qfc_cr_xip_width_read();
	return qfc_cr_xip_width_cr_xip_width_extract(word);
}
static inline uint32_t qfc_cr_xip_width_cr_xip_width_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_width_cr_xip_width_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_width_read();
	uint32_t newword = qfc_cr_xip_width_cr_xip_width_replace(oldword, plain_value);
	qfc_cr_xip_width_write(newword);
}
#define CSR_QFC_CR_XIP_SSEL_ADDR (CSR_BASE + -0x100effe4L)
#define CSR_QFC_CR_XIP_SSEL_SIZE 1
static inline uint32_t qfc_cr_xip_ssel_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effe4L));
}
static inline void qfc_cr_xip_ssel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effe4L));
}
#define CSR_QFC_CR_XIP_SSEL_CR_XIP_SSEL_OFFSET 0
#define CSR_QFC_CR_XIP_SSEL_CR_XIP_SSEL_SIZE 7
static inline uint32_t qfc_cr_xip_ssel_cr_xip_ssel_extract(uint32_t oldword) {
	uint32_t mask = 0x7f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_ssel_cr_xip_ssel_read(void) {
	uint32_t word = qfc_cr_xip_ssel_read();
	return qfc_cr_xip_ssel_cr_xip_ssel_extract(word);
}
static inline uint32_t qfc_cr_xip_ssel_cr_xip_ssel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_ssel_cr_xip_ssel_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_ssel_read();
	uint32_t newword = qfc_cr_xip_ssel_cr_xip_ssel_replace(oldword, plain_value);
	qfc_cr_xip_ssel_write(newword);
}
#define CSR_QFC_CR_XIP_DUMCYC_ADDR (CSR_BASE + -0x100effe0L)
#define CSR_QFC_CR_XIP_DUMCYC_SIZE 1
static inline uint32_t qfc_cr_xip_dumcyc_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effe0L));
}
static inline void qfc_cr_xip_dumcyc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effe0L));
}
#define CSR_QFC_CR_XIP_DUMCYC_CR_XIP_DUMCYC_OFFSET 0
#define CSR_QFC_CR_XIP_DUMCYC_CR_XIP_DUMCYC_SIZE 16
static inline uint32_t qfc_cr_xip_dumcyc_cr_xip_dumcyc_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_dumcyc_cr_xip_dumcyc_read(void) {
	uint32_t word = qfc_cr_xip_dumcyc_read();
	return qfc_cr_xip_dumcyc_cr_xip_dumcyc_extract(word);
}
static inline uint32_t qfc_cr_xip_dumcyc_cr_xip_dumcyc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_dumcyc_cr_xip_dumcyc_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_dumcyc_read();
	uint32_t newword = qfc_cr_xip_dumcyc_cr_xip_dumcyc_replace(oldword, plain_value);
	qfc_cr_xip_dumcyc_write(newword);
}
#define CSR_QFC_CR_XIP_CFG_ADDR (CSR_BASE + -0x100effdcL)
#define CSR_QFC_CR_XIP_CFG_SIZE 1
static inline uint32_t qfc_cr_xip_cfg_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effdcL));
}
static inline void qfc_cr_xip_cfg_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effdcL));
}
#define CSR_QFC_CR_XIP_CFG_CR_XIP_CFG_OFFSET 0
#define CSR_QFC_CR_XIP_CFG_CR_XIP_CFG_SIZE 14
static inline uint32_t qfc_cr_xip_cfg_cr_xip_cfg_extract(uint32_t oldword) {
	uint32_t mask = 0x3fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_cfg_cr_xip_cfg_read(void) {
	uint32_t word = qfc_cr_xip_cfg_read();
	return qfc_cr_xip_cfg_cr_xip_cfg_extract(word);
}
static inline uint32_t qfc_cr_xip_cfg_cr_xip_cfg_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_cfg_cr_xip_cfg_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_cfg_read();
	uint32_t newword = qfc_cr_xip_cfg_cr_xip_cfg_replace(oldword, plain_value);
	qfc_cr_xip_cfg_write(newword);
}
#define CSR_QFC_CR_AESKEY_AESKEYIN0_ADDR (CSR_BASE + -0x100effc0L)
#define CSR_QFC_CR_AESKEY_AESKEYIN0_SIZE 1
static inline uint32_t qfc_cr_aeskey_aeskeyin0_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effc0L));
}
static inline void qfc_cr_aeskey_aeskeyin0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effc0L));
}
#define CSR_QFC_CR_AESKEY_AESKEYIN0_AESKEYIN0_OFFSET 0
#define CSR_QFC_CR_AESKEY_AESKEYIN0_AESKEYIN0_SIZE 32
static inline uint32_t qfc_cr_aeskey_aeskeyin0_aeskeyin0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_aeskey_aeskeyin0_aeskeyin0_read(void) {
	uint32_t word = qfc_cr_aeskey_aeskeyin0_read();
	return qfc_cr_aeskey_aeskeyin0_aeskeyin0_extract(word);
}
static inline uint32_t qfc_cr_aeskey_aeskeyin0_aeskeyin0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_aeskey_aeskeyin0_aeskeyin0_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_aeskey_aeskeyin0_read();
	uint32_t newword = qfc_cr_aeskey_aeskeyin0_aeskeyin0_replace(oldword, plain_value);
	qfc_cr_aeskey_aeskeyin0_write(newword);
}
#define CSR_QFC_CR_AESKEY_AESKEYIN1_ADDR (CSR_BASE + -0x100effbcL)
#define CSR_QFC_CR_AESKEY_AESKEYIN1_SIZE 1
static inline uint32_t qfc_cr_aeskey_aeskeyin1_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effbcL));
}
static inline void qfc_cr_aeskey_aeskeyin1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effbcL));
}
#define CSR_QFC_CR_AESKEY_AESKEYIN1_AESKEYIN1_OFFSET 0
#define CSR_QFC_CR_AESKEY_AESKEYIN1_AESKEYIN1_SIZE 32
static inline uint32_t qfc_cr_aeskey_aeskeyin1_aeskeyin1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_aeskey_aeskeyin1_aeskeyin1_read(void) {
	uint32_t word = qfc_cr_aeskey_aeskeyin1_read();
	return qfc_cr_aeskey_aeskeyin1_aeskeyin1_extract(word);
}
static inline uint32_t qfc_cr_aeskey_aeskeyin1_aeskeyin1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_aeskey_aeskeyin1_aeskeyin1_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_aeskey_aeskeyin1_read();
	uint32_t newword = qfc_cr_aeskey_aeskeyin1_aeskeyin1_replace(oldword, plain_value);
	qfc_cr_aeskey_aeskeyin1_write(newword);
}
#define CSR_QFC_CR_AESKEY_AESKEYIN2_ADDR (CSR_BASE + -0x100effb8L)
#define CSR_QFC_CR_AESKEY_AESKEYIN2_SIZE 1
static inline uint32_t qfc_cr_aeskey_aeskeyin2_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effb8L));
}
static inline void qfc_cr_aeskey_aeskeyin2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effb8L));
}
#define CSR_QFC_CR_AESKEY_AESKEYIN2_AESKEYIN2_OFFSET 0
#define CSR_QFC_CR_AESKEY_AESKEYIN2_AESKEYIN2_SIZE 32
static inline uint32_t qfc_cr_aeskey_aeskeyin2_aeskeyin2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_aeskey_aeskeyin2_aeskeyin2_read(void) {
	uint32_t word = qfc_cr_aeskey_aeskeyin2_read();
	return qfc_cr_aeskey_aeskeyin2_aeskeyin2_extract(word);
}
static inline uint32_t qfc_cr_aeskey_aeskeyin2_aeskeyin2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_aeskey_aeskeyin2_aeskeyin2_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_aeskey_aeskeyin2_read();
	uint32_t newword = qfc_cr_aeskey_aeskeyin2_aeskeyin2_replace(oldword, plain_value);
	qfc_cr_aeskey_aeskeyin2_write(newword);
}
#define CSR_QFC_CR_AESKEY_AESKEYIN3_ADDR (CSR_BASE + -0x100effb4L)
#define CSR_QFC_CR_AESKEY_AESKEYIN3_SIZE 1
static inline uint32_t qfc_cr_aeskey_aeskeyin3_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effb4L));
}
static inline void qfc_cr_aeskey_aeskeyin3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effb4L));
}
#define CSR_QFC_CR_AESKEY_AESKEYIN3_AESKEYIN3_OFFSET 0
#define CSR_QFC_CR_AESKEY_AESKEYIN3_AESKEYIN3_SIZE 32
static inline uint32_t qfc_cr_aeskey_aeskeyin3_aeskeyin3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_aeskey_aeskeyin3_aeskeyin3_read(void) {
	uint32_t word = qfc_cr_aeskey_aeskeyin3_read();
	return qfc_cr_aeskey_aeskeyin3_aeskeyin3_extract(word);
}
static inline uint32_t qfc_cr_aeskey_aeskeyin3_aeskeyin3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_aeskey_aeskeyin3_aeskeyin3_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_aeskey_aeskeyin3_read();
	uint32_t newword = qfc_cr_aeskey_aeskeyin3_aeskeyin3_replace(oldword, plain_value);
	qfc_cr_aeskey_aeskeyin3_write(newword);
}
#define CSR_QFC_CR_AESENA_ADDR (CSR_BASE + -0x100effb0L)
#define CSR_QFC_CR_AESENA_SIZE 1
static inline uint32_t qfc_cr_aesena_read(void) {
	return csr_read_simple((CSR_BASE + -0x100effb0L));
}
static inline void qfc_cr_aesena_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100effb0L));
}
#define CSR_QFC_CR_AESENA_CR_AESENA_OFFSET 0
#define CSR_QFC_CR_AESENA_CR_AESENA_SIZE 1
static inline uint32_t qfc_cr_aesena_cr_aesena_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_aesena_cr_aesena_read(void) {
	uint32_t word = qfc_cr_aesena_read();
	return qfc_cr_aesena_cr_aesena_extract(word);
}
static inline uint32_t qfc_cr_aesena_cr_aesena_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_aesena_cr_aesena_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_aesena_read();
	uint32_t newword = qfc_cr_aesena_cr_aesena_replace(oldword, plain_value);
	qfc_cr_aesena_write(newword);
}

/* mbox_apb */
#define CSR_MBOX_APB_BASE (CSR_BASE + -0x100ed000L)
#define CSR_MBOX_APB_SFR_WDATA_ADDR (CSR_BASE + -0x100ed000L)
#define CSR_MBOX_APB_SFR_WDATA_SIZE 1
static inline uint32_t mbox_apb_sfr_wdata_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ed000L));
}
static inline void mbox_apb_sfr_wdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ed000L));
}
#define CSR_MBOX_APB_SFR_WDATA_SFR_WDATA_OFFSET 0
#define CSR_MBOX_APB_SFR_WDATA_SFR_WDATA_SIZE 32
static inline uint32_t mbox_apb_sfr_wdata_sfr_wdata_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mbox_apb_sfr_wdata_sfr_wdata_read(void) {
	uint32_t word = mbox_apb_sfr_wdata_read();
	return mbox_apb_sfr_wdata_sfr_wdata_extract(word);
}
static inline uint32_t mbox_apb_sfr_wdata_sfr_wdata_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mbox_apb_sfr_wdata_sfr_wdata_write(uint32_t plain_value) {
	uint32_t oldword = mbox_apb_sfr_wdata_read();
	uint32_t newword = mbox_apb_sfr_wdata_sfr_wdata_replace(oldword, plain_value);
	mbox_apb_sfr_wdata_write(newword);
}
#define CSR_MBOX_APB_SFR_RDATA_ADDR (CSR_BASE + -0x100ecffcL)
#define CSR_MBOX_APB_SFR_RDATA_SIZE 1
static inline uint32_t mbox_apb_sfr_rdata_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ecffcL));
}
#define CSR_MBOX_APB_SFR_RDATA_SFR_RDATA_OFFSET 0
#define CSR_MBOX_APB_SFR_RDATA_SFR_RDATA_SIZE 32
static inline uint32_t mbox_apb_sfr_rdata_sfr_rdata_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mbox_apb_sfr_rdata_sfr_rdata_read(void) {
	uint32_t word = mbox_apb_sfr_rdata_read();
	return mbox_apb_sfr_rdata_sfr_rdata_extract(word);
}
#define CSR_MBOX_APB_SFR_STATUS_ADDR (CSR_BASE + -0x100ecff8L)
#define CSR_MBOX_APB_SFR_STATUS_SIZE 1
static inline uint32_t mbox_apb_sfr_status_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ecff8L));
}
#define CSR_MBOX_APB_SFR_STATUS_RX_AVAIL_OFFSET 0
#define CSR_MBOX_APB_SFR_STATUS_RX_AVAIL_SIZE 1
static inline uint32_t mbox_apb_sfr_status_rx_avail_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mbox_apb_sfr_status_rx_avail_read(void) {
	uint32_t word = mbox_apb_sfr_status_read();
	return mbox_apb_sfr_status_rx_avail_extract(word);
}
#define CSR_MBOX_APB_SFR_STATUS_TX_FREE_OFFSET 1
#define CSR_MBOX_APB_SFR_STATUS_TX_FREE_SIZE 1
static inline uint32_t mbox_apb_sfr_status_tx_free_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t mbox_apb_sfr_status_tx_free_read(void) {
	uint32_t word = mbox_apb_sfr_status_read();
	return mbox_apb_sfr_status_tx_free_extract(word);
}
#define CSR_MBOX_APB_SFR_STATUS_ABORT_IN_PROGRESS_OFFSET 2
#define CSR_MBOX_APB_SFR_STATUS_ABORT_IN_PROGRESS_SIZE 1
static inline uint32_t mbox_apb_sfr_status_abort_in_progress_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t mbox_apb_sfr_status_abort_in_progress_read(void) {
	uint32_t word = mbox_apb_sfr_status_read();
	return mbox_apb_sfr_status_abort_in_progress_extract(word);
}
#define CSR_MBOX_APB_SFR_STATUS_ABORT_ACK_OFFSET 3
#define CSR_MBOX_APB_SFR_STATUS_ABORT_ACK_SIZE 1
static inline uint32_t mbox_apb_sfr_status_abort_ack_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t mbox_apb_sfr_status_abort_ack_read(void) {
	uint32_t word = mbox_apb_sfr_status_read();
	return mbox_apb_sfr_status_abort_ack_extract(word);
}
#define CSR_MBOX_APB_SFR_STATUS_TX_ERR_OFFSET 4
#define CSR_MBOX_APB_SFR_STATUS_TX_ERR_SIZE 1
static inline uint32_t mbox_apb_sfr_status_tx_err_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t mbox_apb_sfr_status_tx_err_read(void) {
	uint32_t word = mbox_apb_sfr_status_read();
	return mbox_apb_sfr_status_tx_err_extract(word);
}
#define CSR_MBOX_APB_SFR_STATUS_RX_ERR_OFFSET 5
#define CSR_MBOX_APB_SFR_STATUS_RX_ERR_SIZE 1
static inline uint32_t mbox_apb_sfr_status_rx_err_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t mbox_apb_sfr_status_rx_err_read(void) {
	uint32_t word = mbox_apb_sfr_status_read();
	return mbox_apb_sfr_status_rx_err_extract(word);
}
#define CSR_MBOX_APB_SFR_ABORT_ADDR (CSR_BASE + -0x100ecfe8L)
#define CSR_MBOX_APB_SFR_ABORT_SIZE 1
static inline uint32_t mbox_apb_sfr_abort_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ecfe8L));
}
static inline void mbox_apb_sfr_abort_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ecfe8L));
}
#define CSR_MBOX_APB_SFR_ABORT_SFR_ABORT_OFFSET 0
#define CSR_MBOX_APB_SFR_ABORT_SFR_ABORT_SIZE 32
static inline uint32_t mbox_apb_sfr_abort_sfr_abort_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mbox_apb_sfr_abort_sfr_abort_read(void) {
	uint32_t word = mbox_apb_sfr_abort_read();
	return mbox_apb_sfr_abort_sfr_abort_extract(word);
}
static inline uint32_t mbox_apb_sfr_abort_sfr_abort_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mbox_apb_sfr_abort_sfr_abort_write(uint32_t plain_value) {
	uint32_t oldword = mbox_apb_sfr_abort_read();
	uint32_t newword = mbox_apb_sfr_abort_sfr_abort_replace(oldword, plain_value);
	mbox_apb_sfr_abort_write(newword);
}
#define CSR_MBOX_APB_SFR_DONE_ADDR (CSR_BASE + -0x100ecfe4L)
#define CSR_MBOX_APB_SFR_DONE_SIZE 1
static inline uint32_t mbox_apb_sfr_done_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ecfe4L));
}
static inline void mbox_apb_sfr_done_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ecfe4L));
}
#define CSR_MBOX_APB_SFR_DONE_SFR_DONE_OFFSET 0
#define CSR_MBOX_APB_SFR_DONE_SFR_DONE_SIZE 32
static inline uint32_t mbox_apb_sfr_done_sfr_done_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mbox_apb_sfr_done_sfr_done_read(void) {
	uint32_t word = mbox_apb_sfr_done_read();
	return mbox_apb_sfr_done_sfr_done_extract(word);
}
static inline uint32_t mbox_apb_sfr_done_sfr_done_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mbox_apb_sfr_done_sfr_done_write(uint32_t plain_value) {
	uint32_t oldword = mbox_apb_sfr_done_read();
	uint32_t newword = mbox_apb_sfr_done_sfr_done_replace(oldword, plain_value);
	mbox_apb_sfr_done_write(newword);
}

/* gluechain */
#define CSR_GLUECHAIN_BASE (CSR_BASE + -0x100ac000L)
#define CSR_GLUECHAIN_SFR_GCMASK_ADDR (CSR_BASE + -0x100ac000L)
#define CSR_GLUECHAIN_SFR_GCMASK_SIZE 1
static inline uint32_t gluechain_sfr_gcmask_read(void) {
	return csr_read_simple((CSR_BASE + -0x100ac000L));
}
static inline void gluechain_sfr_gcmask_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100ac000L));
}
#define CSR_GLUECHAIN_SFR_GCMASK_CR_GCMASK_OFFSET 0
#define CSR_GLUECHAIN_SFR_GCMASK_CR_GCMASK_SIZE 32
static inline uint32_t gluechain_sfr_gcmask_cr_gcmask_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gluechain_sfr_gcmask_cr_gcmask_read(void) {
	uint32_t word = gluechain_sfr_gcmask_read();
	return gluechain_sfr_gcmask_cr_gcmask_extract(word);
}
static inline uint32_t gluechain_sfr_gcmask_cr_gcmask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void gluechain_sfr_gcmask_cr_gcmask_write(uint32_t plain_value) {
	uint32_t oldword = gluechain_sfr_gcmask_read();
	uint32_t newword = gluechain_sfr_gcmask_cr_gcmask_replace(oldword, plain_value);
	gluechain_sfr_gcmask_write(newword);
}
#define CSR_GLUECHAIN_SFR_GCSR_ADDR (CSR_BASE + -0x100abffcL)
#define CSR_GLUECHAIN_SFR_GCSR_SIZE 1
static inline uint32_t gluechain_sfr_gcsr_read(void) {
	return csr_read_simple((CSR_BASE + -0x100abffcL));
}
#define CSR_GLUECHAIN_SFR_GCSR_GLUEREG_OFFSET 0
#define CSR_GLUECHAIN_SFR_GCSR_GLUEREG_SIZE 32
static inline uint32_t gluechain_sfr_gcsr_gluereg_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gluechain_sfr_gcsr_gluereg_read(void) {
	uint32_t word = gluechain_sfr_gcsr_read();
	return gluechain_sfr_gcsr_gluereg_extract(word);
}
#define CSR_GLUECHAIN_SFR_GCRST_ADDR (CSR_BASE + -0x100abff8L)
#define CSR_GLUECHAIN_SFR_GCRST_SIZE 1
static inline uint32_t gluechain_sfr_gcrst_read(void) {
	return csr_read_simple((CSR_BASE + -0x100abff8L));
}
static inline void gluechain_sfr_gcrst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100abff8L));
}
#define CSR_GLUECHAIN_SFR_GCRST_GLUERST_OFFSET 0
#define CSR_GLUECHAIN_SFR_GCRST_GLUERST_SIZE 32
static inline uint32_t gluechain_sfr_gcrst_gluerst_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gluechain_sfr_gcrst_gluerst_read(void) {
	uint32_t word = gluechain_sfr_gcrst_read();
	return gluechain_sfr_gcrst_gluerst_extract(word);
}
static inline uint32_t gluechain_sfr_gcrst_gluerst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void gluechain_sfr_gcrst_gluerst_write(uint32_t plain_value) {
	uint32_t oldword = gluechain_sfr_gcrst_read();
	uint32_t newword = gluechain_sfr_gcrst_gluerst_replace(oldword, plain_value);
	gluechain_sfr_gcrst_write(newword);
}
#define CSR_GLUECHAIN_SFR_GCTEST_ADDR (CSR_BASE + -0x100abff4L)
#define CSR_GLUECHAIN_SFR_GCTEST_SIZE 1
static inline uint32_t gluechain_sfr_gctest_read(void) {
	return csr_read_simple((CSR_BASE + -0x100abff4L));
}
static inline void gluechain_sfr_gctest_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x100abff4L));
}
#define CSR_GLUECHAIN_SFR_GCTEST_GLUETEST_OFFSET 0
#define CSR_GLUECHAIN_SFR_GCTEST_GLUETEST_SIZE 32
static inline uint32_t gluechain_sfr_gctest_gluetest_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gluechain_sfr_gctest_gluetest_read(void) {
	uint32_t word = gluechain_sfr_gctest_read();
	return gluechain_sfr_gctest_gluetest_extract(word);
}
static inline uint32_t gluechain_sfr_gctest_gluetest_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void gluechain_sfr_gctest_gluetest_write(uint32_t plain_value) {
	uint32_t oldword = gluechain_sfr_gctest_read();
	uint32_t newword = gluechain_sfr_gctest_gluetest_replace(oldword, plain_value);
	gluechain_sfr_gctest_write(newword);
}

#endif
//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (9b4f6007) on 2024-03-03 02:37:01
//--------------------------------------------------------------------------------
#ifndef __GENERATED_MEM_H
#define __GENERATED_MEM_H

#ifndef SCE_BASE
#define SCE_BASE 0x40028000L
#define SCE_SIZE 0x00008000
#endif

#ifndef SYSCTRL_BASE
#define SYSCTRL_BASE 0x40040000L
#define SYSCTRL_SIZE 0x00010000
#endif

#ifndef IFSUB_BASE
#define IFSUB_BASE 0x50120000L
#define IFSUB_SIZE 0x00003000
#endif

#ifndef CORESUB_BASE
#define CORESUB_BASE 0x40010000L
#define CORESUB_SIZE 0x00010000
#endif

#ifndef SECSUB_BASE
#define SECSUB_BASE 0x40050000L
#define SECSUB_SIZE 0x00010000
#endif

#ifndef PIO_BASE
#define PIO_BASE 0x50123000L
#define PIO_SIZE 0x00001000
#endif

#ifndef BIO_BASE
#define BIO_BASE 0x50124000L
#define BIO_SIZE 0x00001000
#endif

#ifndef SEG_LKEY_BASE
#define SEG_LKEY_BASE 0x40020000L
#define SEG_LKEY_SIZE 0x00000100
#endif

#ifndef SEG_KEY_BASE
#define SEG_KEY_BASE 0x40020100L
#define SEG_KEY_SIZE 0x00000100
#endif

#ifndef SEG_SKEY_BASE
#define SEG_SKEY_BASE 0x40020200L
#define SEG_SKEY_SIZE 0x00000100
#endif

#ifndef SEG_SCRT_BASE
#define SEG_SCRT_BASE 0x40020300L
#define SEG_SCRT_SIZE 0x00000100
#endif

#ifndef SEG_MSG_BASE
#define SEG_MSG_BASE 0x40020400L
#define SEG_MSG_SIZE 0x00000200
#endif

#ifndef SEG_HOUT_BASE
#define SEG_HOUT_BASE 0x40020600L
#define SEG_HOUT_SIZE 0x00000100
#endif

#ifndef SEG_SOB_BASE
#define SEG_SOB_BASE 0x40020700L
#define SEG_SOB_SIZE 0x00000100
#endif

#ifndef SEG_PCON_BASE
#define SEG_PCON_BASE 0x40020800L
#define SEG_PCON_SIZE 0x00000000
#endif

#ifndef SEG_PKB_BASE
#define SEG_PKB_BASE 0x40020800L
#define SEG_PKB_SIZE 0x00000200
#endif

#ifndef SEG_PIB_BASE
#define SEG_PIB_BASE 0x40020a00L
#define SEG_PIB_SIZE 0x00000400
#endif

#ifndef SEG_PSIB_BASE
#define SEG_PSIB_BASE 0x40020e00L
#define SEG_PSIB_SIZE 0x00000400
#endif

#ifndef SEG_POB_BASE
#define SEG_POB_BASE 0x40021200L
#define SEG_POB_SIZE 0x00000400
#endif

#ifndef SEG_PSOB_BASE
#define SEG_PSOB_BASE 0x40021600L
#define SEG_PSOB_SIZE 0x00000400
#endif

#ifndef SEG_AKEY_BASE
#define SEG_AKEY_BASE 0x40021a00L
#define SEG_AKEY_SIZE 0x00000100
#endif

#ifndef SEG_AIB_BASE
#define SEG_AIB_BASE 0x40021b00L
#define SEG_AIB_SIZE 0x00000100
#endif

#ifndef SEG_AOB_BASE
#define SEG_AOB_BASE 0x40021c00L
#define SEG_AOB_SIZE 0x00000100
#endif

#ifndef SEG_RNGA_BASE
#define SEG_RNGA_BASE 0x40021d00L
#define SEG_RNGA_SIZE 0x00000400
#endif

#ifndef SEG_RNGB_BASE
#define SEG_RNGB_BASE 0x40022100L
#define SEG_RNGB_SIZE 0x00000400
#endif

#ifndef IFRAM0_BASE
#define IFRAM0_BASE 0x50000000L
#define IFRAM0_SIZE 0x00020000
#endif

#ifndef IFRAM1_BASE
#define IFRAM1_BASE 0x50020000L
#define IFRAM1_SIZE 0x00020000
#endif

#ifndef NULL_BASE
#define NULL_BASE 0x50040000L
#define NULL_SIZE 0x00010000
#endif

#ifndef UDMA_BASE
#define UDMA_BASE 0x50100000L
#define UDMA_SIZE 0x00020000
#endif

#ifndef UDP_BASE
#define UDP_BASE 0x50122000L
#define UDP_SIZE 0x00001000
#endif

#ifndef SDDC_DAT_BASE
#define SDDC_DAT_BASE 0x50140000L
#define SDDC_DAT_SIZE 0x00010000
#endif

#ifndef UDC_BASE
#define UDC_BASE 0x50200000L
#define UDC_SIZE 0x00010000
#endif

#ifndef SRAM_BASE
#define SRAM_BASE 0x61000000L
#define SRAM_SIZE 0x00200000
#endif

#ifndef RERAM_BASE
#define RERAM_BASE 0x60000000L
#define RERAM_SIZE 0x00400000
#endif

#ifndef XIP_BASE
#define XIP_BASE 0x70000000L
#define XIP_SIZE 0x08000000
#endif

#ifndef PL230_BASE
#define PL230_BASE 0x40011000L
#define PL230_SIZE 0x00001000
#endif

#ifndef MDMA_BASE
#define MDMA_BASE 0x40012000L
#define MDMA_SIZE 0x00001000
#endif

#ifndef MBOX_APB_BASE
#define MBOX_APB_BASE 0x40013000L
#define MBOX_APB_SIZE 0x00001000
#endif

#ifndef IOX_BASE
#define IOX_BASE 0x5012f000L
#define IOX_SIZE 0x00001000
#endif

#ifndef AOC_BASE
#define AOC_BASE 0x40060000L
#define AOC_SIZE 0x00001000
#endif

#ifndef BIO_RAM_BASE
#define BIO_RAM_BASE 0x50125000L
#define BIO_RAM_SIZE 0x00001000
#endif

#ifndef MEM_REGIONS
#define MEM_REGIONS "SCE       0x40028000 0x8000 \nSYSCTRL   0x40040000 0x10000 \nIFSUB     0x50120000 0x3000 \nCORESUB   0x40010000 0x10000 \nSECSUB    0x40050000 0x10000 \nPIO       0x50123000 0x1000 \nBIO       0x50124000 0x1000 \nSEG_LKEY  0x40020000 0x100 \nSEG_KEY   0x40020100 0x100 \nSEG_SKEY  0x40020200 0x100 \nSEG_SCRT  0x40020300 0x100 \nSEG_MSG   0x40020400 0x200 \nSEG_HOUT  0x40020600 0x100 \nSEG_SOB   0x40020700 0x100 \nSEG_PCON  0x40020800 0x0 \nSEG_PKB   0x40020800 0x200 \nSEG_PIB   0x40020a00 0x400 \nSEG_PSIB  0x40020e00 0x400 \nSEG_POB   0x40021200 0x400 \nSEG_PSOB  0x40021600 0x400 \nSEG_AKEY  0x40021a00 0x100 \nSEG_AIB   0x40021b00 0x100 \nSEG_AOB   0x40021c00 0x100 \nSEG_RNGA  0x40021d00 0x400 \nSEG_RNGB  0x40022100 0x400 \nIFRAM0    0x50000000 0x20000 \nIFRAM1    0x50020000 0x20000 \nNULL      0x50040000 0x10000 \nUDMA      0x50100000 0x20000 \nUDP       0x50122000 0x1000 \nSDDC_DAT  0x50140000 0x10000 \nUDC       0x50200000 0x10000 \nSRAM      0x61000000 0x200000 \nRERAM     0x60000000 0x400000 \nXIP       0x70000000 0x8000000 \nPL230     0x40011000 0x1000 \nMDMA      0x40012000 0x1000 \nMBOX_APB  0x40013000 0x1000 \nIOX       0x5012f000 0x1000 \nAOC       0x40060000 0x1000 \nBIO_RAM   0x50125000 0x1000 "
#endif
#endif
//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (9b4f6007) on 2024-03-03 02:37:01
//--------------------------------------------------------------------------------
#ifndef __GENERATED_SOC_H
#define __GENERATED_SOC_H

#ifndef __ASSEMBLER__
#endif // !__ASSEMBLER__

#endif
