//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (e08384a2) on 2023-07-03 14:27:43
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x4002d000L
#endif

/* aes */
#define CSR_AES_BASE (CSR_BASE + 0x0L)
#define CSR_AES_SFR_CRFUNC_ADDR (CSR_BASE + 0x0L)
#define CSR_AES_SFR_CRFUNC_SIZE 1
static inline uint32_t aes_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void aes_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
#define CSR_AES_SFR_CRFUNC_SFR_CRFUNC_OFFSET 0
#define CSR_AES_SFR_CRFUNC_SFR_CRFUNC_SIZE 8
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_read(void) {
	uint32_t word = aes_sfr_crfunc_read();
	return aes_sfr_crfunc_sfr_crfunc_extract(word);
}
static inline uint32_t aes_sfr_crfunc_sfr_crfunc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_crfunc_sfr_crfunc_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_crfunc_read();
	uint32_t newword = aes_sfr_crfunc_sfr_crfunc_replace(oldword, plain_value);
	aes_sfr_crfunc_write(newword);
}
#define CSR_AES_SFR_AR_ADDR (CSR_BASE + 0x4L)
#define CSR_AES_SFR_AR_SIZE 1
static inline uint32_t aes_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void aes_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
#define CSR_AES_SFR_AR_SFR_AR_OFFSET 0
#define CSR_AES_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t aes_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_ar_sfr_ar_read(void) {
	uint32_t word = aes_sfr_ar_read();
	return aes_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t aes_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_ar_read();
	uint32_t newword = aes_sfr_ar_sfr_ar_replace(oldword, plain_value);
	aes_sfr_ar_write(newword);
}
#define CSR_AES_SFR_SRMFSM_ADDR (CSR_BASE + 0x8L)
#define CSR_AES_SFR_SRMFSM_SIZE 1
static inline uint32_t aes_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
#define CSR_AES_SFR_SRMFSM_SFR_SRMFSM_OFFSET 0
#define CSR_AES_SFR_SRMFSM_SFR_SRMFSM_SIZE 8
static inline uint32_t aes_sfr_srmfsm_sfr_srmfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_srmfsm_sfr_srmfsm_read(void) {
	uint32_t word = aes_sfr_srmfsm_read();
	return aes_sfr_srmfsm_sfr_srmfsm_extract(word);
}
#define CSR_AES_SFR_FR_ADDR (CSR_BASE + 0xcL)
#define CSR_AES_SFR_FR_SIZE 1
static inline uint32_t aes_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + 0xcL));
}
#define CSR_AES_SFR_FR_MFSM_DONE_OFFSET 0
#define CSR_AES_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_fr_mfsm_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_mfsm_done_extract(word);
}
#define CSR_AES_SFR_FR_ACORE_DONE_OFFSET 1
#define CSR_AES_SFR_FR_ACORE_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_acore_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t aes_sfr_fr_acore_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_acore_done_extract(word);
}
#define CSR_AES_SFR_FR_CHNLO_DONE_OFFSET 2
#define CSR_AES_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t aes_sfr_fr_chnlo_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_chnlo_done_extract(word);
}
#define CSR_AES_SFR_FR_CHNLI_DONE_OFFSET 3
#define CSR_AES_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t aes_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t aes_sfr_fr_chnli_done_read(void) {
	uint32_t word = aes_sfr_fr_read();
	return aes_sfr_fr_chnli_done_extract(word);
}
#define CSR_AES_SFR_OPT_ADDR (CSR_BASE + 0x10L)
#define CSR_AES_SFR_OPT_SIZE 1
static inline uint32_t aes_sfr_opt_read(void) {
	return csr_read_simple((CSR_BASE + 0x10L));
}
static inline void aes_sfr_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10L));
}
#define CSR_AES_SFR_OPT_OPT_KLEN0_OFFSET 0
#define CSR_AES_SFR_OPT_OPT_KLEN0_SIZE 4
static inline uint32_t aes_sfr_opt_opt_klen0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_opt_opt_klen0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_klen0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_klen0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_opt_opt_klen0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_klen0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT_OPT_MODE0_OFFSET 4
#define CSR_AES_SFR_OPT_OPT_MODE0_SIZE 4
static inline uint32_t aes_sfr_opt_opt_mode0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t aes_sfr_opt_opt_mode0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_mode0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_mode0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void aes_sfr_opt_opt_mode0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_mode0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT_OPT_IFSTART0_OFFSET 8
#define CSR_AES_SFR_OPT_OPT_IFSTART0_SIZE 1
static inline uint32_t aes_sfr_opt_opt_ifstart0_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t aes_sfr_opt_opt_ifstart0_read(void) {
	uint32_t word = aes_sfr_opt_read();
	return aes_sfr_opt_opt_ifstart0_extract(word);
}
static inline uint32_t aes_sfr_opt_opt_ifstart0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void aes_sfr_opt_opt_ifstart0_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt_read();
	uint32_t newword = aes_sfr_opt_opt_ifstart0_replace(oldword, plain_value);
	aes_sfr_opt_write(newword);
}
#define CSR_AES_SFR_OPT1_ADDR (CSR_BASE + 0x14L)
#define CSR_AES_SFR_OPT1_SIZE 1
static inline uint32_t aes_sfr_opt1_read(void) {
	return csr_read_simple((CSR_BASE + 0x14L));
}
static inline void aes_sfr_opt1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x14L));
}
#define CSR_AES_SFR_OPT1_SFR_OPT1_OFFSET 0
#define CSR_AES_SFR_OPT1_SFR_OPT1_SIZE 16
static inline uint32_t aes_sfr_opt1_sfr_opt1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_opt1_sfr_opt1_read(void) {
	uint32_t word = aes_sfr_opt1_read();
	return aes_sfr_opt1_sfr_opt1_extract(word);
}
static inline uint32_t aes_sfr_opt1_sfr_opt1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_opt1_sfr_opt1_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_opt1_read();
	uint32_t newword = aes_sfr_opt1_sfr_opt1_replace(oldword, plain_value);
	aes_sfr_opt1_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_IV_ADDR (CSR_BASE + 0x30L)
#define CSR_AES_SFR_SEGPTR_PTRID_IV_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_IV_read(void) {
	return csr_read_simple((CSR_BASE + 0x30L));
}
static inline void aes_sfr_segptr_PTRID_IV_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x30L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_IV_PTRID_IV_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_IV_PTRID_IV_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_iv_read();
	return aes_sfr_segptr_ptrid_iv_ptrid_iv_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_iv_ptrid_iv_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_iv_ptrid_iv_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_iv_read();
	uint32_t newword = aes_sfr_segptr_ptrid_iv_ptrid_iv_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_iv_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_ADDR (CSR_BASE + 0x34L)
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AKEY_read(void) {
	return csr_read_simple((CSR_BASE + 0x34L));
}
static inline void aes_sfr_segptr_PTRID_AKEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x34L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_akey_read();
	return aes_sfr_segptr_ptrid_akey_ptrid_akey_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_akey_ptrid_akey_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_akey_ptrid_akey_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_akey_read();
	uint32_t newword = aes_sfr_segptr_ptrid_akey_ptrid_akey_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_akey_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_ADDR (CSR_BASE + 0x38L)
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AIB_read(void) {
	return csr_read_simple((CSR_BASE + 0x38L));
}
static inline void aes_sfr_segptr_PTRID_AIB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x38L));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_PTRID_AIB_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AIB_PTRID_AIB_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_aib_read();
	return aes_sfr_segptr_ptrid_aib_ptrid_aib_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_aib_ptrid_aib_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_aib_ptrid_aib_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_aib_read();
	uint32_t newword = aes_sfr_segptr_ptrid_aib_ptrid_aib_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_aib_write(newword);
}
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_ADDR (CSR_BASE + 0x3cL)
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_SIZE 1
static inline uint32_t aes_sfr_segptr_PTRID_AOB_read(void) {
	return csr_read_simple((CSR_BASE + 0x3cL));
}
static inline void aes_sfr_segptr_PTRID_AOB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3cL));
}
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_PTRID_AOB_OFFSET 0
#define CSR_AES_SFR_SEGPTR_PTRID_AOB_PTRID_AOB_SIZE 12
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_read(void) {
	uint32_t word = aes_sfr_segptr_ptrid_aob_read();
	return aes_sfr_segptr_ptrid_aob_ptrid_aob_extract(word);
}
static inline uint32_t aes_sfr_segptr_ptrid_aob_ptrid_aob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void aes_sfr_segptr_ptrid_aob_ptrid_aob_write(uint32_t plain_value) {
	uint32_t oldword = aes_sfr_segptr_ptrid_aob_read();
	uint32_t newword = aes_sfr_segptr_ptrid_aob_ptrid_aob_replace(oldword, plain_value);
	aes_sfr_segptr_ptrid_aob_write(newword);
}

/* combohash */
#define CSR_COMBOHASH_BASE (CSR_BASE + -0x2000L)
#define CSR_COMBOHASH_SFR_CRFUNC_ADDR (CSR_BASE + -0x2000L)
#define CSR_COMBOHASH_SFR_CRFUNC_SIZE 1
static inline uint32_t combohash_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + -0x2000L));
}
static inline void combohash_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2000L));
}
#define CSR_COMBOHASH_SFR_CRFUNC_CR_FUNC_OFFSET 0
#define CSR_COMBOHASH_SFR_CRFUNC_CR_FUNC_SIZE 8
static inline uint32_t combohash_sfr_crfunc_cr_func_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_crfunc_cr_func_read(void) {
	uint32_t word = combohash_sfr_crfunc_read();
	return combohash_sfr_crfunc_cr_func_extract(word);
}
static inline uint32_t combohash_sfr_crfunc_cr_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_crfunc_cr_func_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_crfunc_read();
	uint32_t newword = combohash_sfr_crfunc_cr_func_replace(oldword, plain_value);
	combohash_sfr_crfunc_write(newword);
}
#define CSR_COMBOHASH_SFR_AR_ADDR (CSR_BASE + -0x1ffcL)
#define CSR_COMBOHASH_SFR_AR_SIZE 1
static inline uint32_t combohash_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x1ffcL));
}
static inline void combohash_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1ffcL));
}
#define CSR_COMBOHASH_SFR_AR_SFR_AR_OFFSET 0
#define CSR_COMBOHASH_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t combohash_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_ar_sfr_ar_read(void) {
	uint32_t word = combohash_sfr_ar_read();
	return combohash_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t combohash_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_ar_read();
	uint32_t newword = combohash_sfr_ar_sfr_ar_replace(oldword, plain_value);
	combohash_sfr_ar_write(newword);
}
#define CSR_COMBOHASH_SFR_SRMFSM_ADDR (CSR_BASE + -0x1ff8L)
#define CSR_COMBOHASH_SFR_SRMFSM_SIZE 1
static inline uint32_t combohash_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + -0x1ff8L));
}
#define CSR_COMBOHASH_SFR_SRMFSM_MFSM_OFFSET 0
#define CSR_COMBOHASH_SFR_SRMFSM_MFSM_SIZE 8
static inline uint32_t combohash_sfr_srmfsm_mfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_srmfsm_mfsm_read(void) {
	uint32_t word = combohash_sfr_srmfsm_read();
	return combohash_sfr_srmfsm_mfsm_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_ADDR (CSR_BASE + -0x1ff4L)
#define CSR_COMBOHASH_SFR_FR_SIZE 1
static inline uint32_t combohash_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + -0x1ff4L));
}
#define CSR_COMBOHASH_SFR_FR_MFSM_DONE_OFFSET 0
#define CSR_COMBOHASH_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_fr_mfsm_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_mfsm_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_HASH_DONE_OFFSET 1
#define CSR_COMBOHASH_SFR_FR_HASH_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_hash_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t combohash_sfr_fr_hash_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_hash_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_CHNLO_DONE_OFFSET 2
#define CSR_COMBOHASH_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t combohash_sfr_fr_chnlo_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_chnlo_done_extract(word);
}
#define CSR_COMBOHASH_SFR_FR_CHNLI_DONE_OFFSET 3
#define CSR_COMBOHASH_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t combohash_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t combohash_sfr_fr_chnli_done_read(void) {
	uint32_t word = combohash_sfr_fr_read();
	return combohash_sfr_fr_chnli_done_extract(word);
}
#define CSR_COMBOHASH_SFR_OPT1_ADDR (CSR_BASE + -0x1ff0L)
#define CSR_COMBOHASH_SFR_OPT1_SIZE 1
static inline uint32_t combohash_sfr_opt1_read(void) {
	return csr_read_simple((CSR_BASE + -0x1ff0L));
}
static inline void combohash_sfr_opt1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1ff0L));
}
#define CSR_COMBOHASH_SFR_OPT1_CR_OPT_HASHCNT_OFFSET 0
#define CSR_COMBOHASH_SFR_OPT1_CR_OPT_HASHCNT_SIZE 16
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_read(void) {
	uint32_t word = combohash_sfr_opt1_read();
	return combohash_sfr_opt1_cr_opt_hashcnt_extract(word);
}
static inline uint32_t combohash_sfr_opt1_cr_opt_hashcnt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_opt1_cr_opt_hashcnt_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt1_read();
	uint32_t newword = combohash_sfr_opt1_cr_opt_hashcnt_replace(oldword, plain_value);
	combohash_sfr_opt1_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_ADDR (CSR_BASE + -0x1fecL)
#define CSR_COMBOHASH_SFR_OPT2_SIZE 1
static inline uint32_t combohash_sfr_opt2_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fecL));
}
static inline void combohash_sfr_opt2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fecL));
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_SCRTCHK_OFFSET 0
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_SCRTCHK_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_scrtchk_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_scrtchk_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_opt2_cr_opt_scrtchk_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_scrtchk_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSOB_OFFSET 1
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSOB_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_ifsob_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifsob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void combohash_sfr_opt2_cr_opt_ifsob_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_ifsob_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSTART_OFFSET 2
#define CSR_COMBOHASH_SFR_OPT2_CR_OPT_IFSTART_SIZE 1
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_read(void) {
	uint32_t word = combohash_sfr_opt2_read();
	return combohash_sfr_opt2_cr_opt_ifstart_extract(word);
}
static inline uint32_t combohash_sfr_opt2_cr_opt_ifstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void combohash_sfr_opt2_cr_opt_ifstart_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_opt2_read();
	uint32_t newword = combohash_sfr_opt2_cr_opt_ifstart_replace(oldword, plain_value);
	combohash_sfr_opt2_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_ADDR (CSR_BASE + -0x1fe0L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_LKEY_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fe0L));
}
static inline void combohash_sfr_segptr_SEGID_LKEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fe0L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_lkey_read();
	return combohash_sfr_segptr_segid_lkey_segid_lkey_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_lkey_segid_lkey_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_lkey_segid_lkey_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_lkey_read();
	uint32_t newword = combohash_sfr_segptr_segid_lkey_segid_lkey_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_lkey_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_ADDR (CSR_BASE + -0x1fdcL)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_KEY_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fdcL));
}
static inline void combohash_sfr_segptr_SEGID_KEY_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fdcL));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SEGID_KEY_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_KEY_SEGID_KEY_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_key_read();
	return combohash_sfr_segptr_segid_key_segid_key_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_key_segid_key_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_key_segid_key_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_key_read();
	uint32_t newword = combohash_sfr_segptr_segid_key_segid_key_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_key_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_ADDR (CSR_BASE + -0x1fd4L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_SCRT_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fd4L));
}
static inline void combohash_sfr_segptr_SEGID_SCRT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fd4L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_scrt_read();
	return combohash_sfr_segptr_segid_scrt_segid_scrt_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_scrt_segid_scrt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_scrt_segid_scrt_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_scrt_read();
	uint32_t newword = combohash_sfr_segptr_segid_scrt_segid_scrt_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_scrt_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_ADDR (CSR_BASE + -0x1fd0L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_MSG_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fd0L));
}
static inline void combohash_sfr_segptr_SEGID_MSG_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fd0L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SEGID_MSG_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_MSG_SEGID_MSG_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_msg_read();
	return combohash_sfr_segptr_segid_msg_segid_msg_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_msg_segid_msg_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_msg_segid_msg_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_msg_read();
	uint32_t newword = combohash_sfr_segptr_segid_msg_segid_msg_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_msg_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_ADDR (CSR_BASE + -0x1fccL)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_HOUT_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fccL));
}
static inline void combohash_sfr_segptr_SEGID_HOUT_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fccL));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_hout_read();
	return combohash_sfr_segptr_segid_hout_segid_hout_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_hout_segid_hout_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_hout_segid_hout_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_hout_read();
	uint32_t newword = combohash_sfr_segptr_segid_hout_segid_hout_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_hout_write(newword);
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SOB_ADDR (CSR_BASE + -0x1fc8L)
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SOB_SIZE 1
static inline uint32_t combohash_sfr_segptr_SEGID_SOB_read(void) {
	return csr_read_simple((CSR_BASE + -0x1fc8L));
}
static inline void combohash_sfr_segptr_SEGID_SOB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1fc8L));
}
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SOB_SEGID_SOB_OFFSET 0
#define CSR_COMBOHASH_SFR_SEGPTR_SEGID_SOB_SEGID_SOB_SIZE 12
static inline uint32_t combohash_sfr_segptr_segid_sob_segid_sob_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t combohash_sfr_segptr_segid_sob_segid_sob_read(void) {
	uint32_t word = combohash_sfr_segptr_segid_sob_read();
	return combohash_sfr_segptr_segid_sob_segid_sob_extract(word);
}
static inline uint32_t combohash_sfr_segptr_segid_sob_segid_sob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void combohash_sfr_segptr_segid_sob_segid_sob_write(uint32_t plain_value) {
	uint32_t oldword = combohash_sfr_segptr_segid_sob_read();
	uint32_t newword = combohash_sfr_segptr_segid_sob_segid_sob_replace(oldword, plain_value);
	combohash_sfr_segptr_segid_sob_write(newword);
}

/* pke */
#define CSR_PKE_BASE (CSR_BASE + -0x1000L)
#define CSR_PKE_SFR_CRFUNC_ADDR (CSR_BASE + -0x1000L)
#define CSR_PKE_SFR_CRFUNC_SIZE 1
static inline uint32_t pke_sfr_crfunc_read(void) {
	return csr_read_simple((CSR_BASE + -0x1000L));
}
static inline void pke_sfr_crfunc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x1000L));
}
#define CSR_PKE_SFR_CRFUNC_SFR_CRFUNC_OFFSET 0
#define CSR_PKE_SFR_CRFUNC_SFR_CRFUNC_SIZE 8
static inline uint32_t pke_sfr_crfunc_sfr_crfunc_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_crfunc_sfr_crfunc_read(void) {
	uint32_t word = pke_sfr_crfunc_read();
	return pke_sfr_crfunc_sfr_crfunc_extract(word);
}
static inline uint32_t pke_sfr_crfunc_sfr_crfunc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_crfunc_sfr_crfunc_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_crfunc_read();
	uint32_t newword = pke_sfr_crfunc_sfr_crfunc_replace(oldword, plain_value);
	pke_sfr_crfunc_write(newword);
}
#define CSR_PKE_SFR_AR_ADDR (CSR_BASE + -0xffcL)
#define CSR_PKE_SFR_AR_SIZE 1
static inline uint32_t pke_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0xffcL));
}
static inline void pke_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xffcL));
}
#define CSR_PKE_SFR_AR_SFR_AR_OFFSET 0
#define CSR_PKE_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t pke_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_ar_sfr_ar_read(void) {
	uint32_t word = pke_sfr_ar_read();
	return pke_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t pke_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_ar_read();
	uint32_t newword = pke_sfr_ar_sfr_ar_replace(oldword, plain_value);
	pke_sfr_ar_write(newword);
}
#define CSR_PKE_SFR_SRMFSM_ADDR (CSR_BASE + -0xff8L)
#define CSR_PKE_SFR_SRMFSM_SIZE 1
static inline uint32_t pke_sfr_srmfsm_read(void) {
	return csr_read_simple((CSR_BASE + -0xff8L));
}
#define CSR_PKE_SFR_SRMFSM_MFSM_OFFSET 0
#define CSR_PKE_SFR_SRMFSM_MFSM_SIZE 8
static inline uint32_t pke_sfr_srmfsm_mfsm_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_srmfsm_mfsm_read(void) {
	uint32_t word = pke_sfr_srmfsm_read();
	return pke_sfr_srmfsm_mfsm_extract(word);
}
#define CSR_PKE_SFR_SRMFSM_MODINVREADY_OFFSET 8
#define CSR_PKE_SFR_SRMFSM_MODINVREADY_SIZE 1
static inline uint32_t pke_sfr_srmfsm_modinvready_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t pke_sfr_srmfsm_modinvready_read(void) {
	uint32_t word = pke_sfr_srmfsm_read();
	return pke_sfr_srmfsm_modinvready_extract(word);
}
#define CSR_PKE_SFR_FR_ADDR (CSR_BASE + -0xff4L)
#define CSR_PKE_SFR_FR_SIZE 1
static inline uint32_t pke_sfr_fr_read(void) {
	return csr_read_simple((CSR_BASE + -0xff4L));
}
#define CSR_PKE_SFR_FR_MFSM_DONE_OFFSET 0
#define CSR_PKE_SFR_FR_MFSM_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_mfsm_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_fr_mfsm_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_mfsm_done_extract(word);
}
#define CSR_PKE_SFR_FR_PCORE_DONE_OFFSET 1
#define CSR_PKE_SFR_FR_PCORE_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_pcore_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t pke_sfr_fr_pcore_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_pcore_done_extract(word);
}
#define CSR_PKE_SFR_FR_CHNLO_DONE_OFFSET 2
#define CSR_PKE_SFR_FR_CHNLO_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnlo_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t pke_sfr_fr_chnlo_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnlo_done_extract(word);
}
#define CSR_PKE_SFR_FR_CHNLI_DONE_OFFSET 3
#define CSR_PKE_SFR_FR_CHNLI_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnli_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t pke_sfr_fr_chnli_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnli_done_extract(word);
}
#define CSR_PKE_SFR_FR_CHNLX_DONE_OFFSET 4
#define CSR_PKE_SFR_FR_CHNLX_DONE_SIZE 1
static inline uint32_t pke_sfr_fr_chnlx_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t pke_sfr_fr_chnlx_done_read(void) {
	uint32_t word = pke_sfr_fr_read();
	return pke_sfr_fr_chnlx_done_extract(word);
}
#define CSR_PKE_SFR_OPTNW_ADDR (CSR_BASE + -0xff0L)
#define CSR_PKE_SFR_OPTNW_SIZE 1
static inline uint32_t pke_sfr_optnw_read(void) {
	return csr_read_simple((CSR_BASE + -0xff0L));
}
static inline void pke_sfr_optnw_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xff0L));
}
#define CSR_PKE_SFR_OPTNW_SFR_OPTNW_OFFSET 0
#define CSR_PKE_SFR_OPTNW_SFR_OPTNW_SIZE 13
static inline uint32_t pke_sfr_optnw_sfr_optnw_extract(uint32_t oldword) {
	uint32_t mask = 0x1fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optnw_sfr_optnw_read(void) {
	uint32_t word = pke_sfr_optnw_read();
	return pke_sfr_optnw_sfr_optnw_extract(word);
}
static inline uint32_t pke_sfr_optnw_sfr_optnw_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optnw_sfr_optnw_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optnw_read();
	uint32_t newword = pke_sfr_optnw_sfr_optnw_replace(oldword, plain_value);
	pke_sfr_optnw_write(newword);
}
#define CSR_PKE_SFR_OPTEW_ADDR (CSR_BASE + -0xfecL)
#define CSR_PKE_SFR_OPTEW_SIZE 1
static inline uint32_t pke_sfr_optew_read(void) {
	return csr_read_simple((CSR_BASE + -0xfecL));
}
static inline void pke_sfr_optew_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfecL));
}
#define CSR_PKE_SFR_OPTEW_SFR_OPTEW_OFFSET 0
#define CSR_PKE_SFR_OPTEW_SFR_OPTEW_SIZE 13
static inline uint32_t pke_sfr_optew_sfr_optew_extract(uint32_t oldword) {
	uint32_t mask = 0x1fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optew_sfr_optew_read(void) {
	uint32_t word = pke_sfr_optew_read();
	return pke_sfr_optew_sfr_optew_extract(word);
}
static inline uint32_t pke_sfr_optew_sfr_optew_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optew_sfr_optew_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optew_read();
	uint32_t newword = pke_sfr_optew_sfr_optew_replace(oldword, plain_value);
	pke_sfr_optew_write(newword);
}
#define CSR_PKE_SFR_OPTMASK_ADDR (CSR_BASE + -0xfe0L)
#define CSR_PKE_SFR_OPTMASK_SIZE 1
static inline uint32_t pke_sfr_optmask_read(void) {
	return csr_read_simple((CSR_BASE + -0xfe0L));
}
static inline void pke_sfr_optmask_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfe0L));
}
#define CSR_PKE_SFR_OPTMASK_SFR_OPTMASK_OFFSET 0
#define CSR_PKE_SFR_OPTMASK_SFR_OPTMASK_SIZE 16
static inline uint32_t pke_sfr_optmask_sfr_optmask_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_optmask_sfr_optmask_read(void) {
	uint32_t word = pke_sfr_optmask_read();
	return pke_sfr_optmask_sfr_optmask_extract(word);
}
static inline uint32_t pke_sfr_optmask_sfr_optmask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_optmask_sfr_optmask_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_optmask_read();
	uint32_t newword = pke_sfr_optmask_sfr_optmask_replace(oldword, plain_value);
	pke_sfr_optmask_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_ADDR (CSR_BASE + -0xfd0L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PCON_read(void) {
	return csr_read_simple((CSR_BASE + -0xfd0L));
}
static inline void pke_sfr_segptr_PTRID_PCON_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfd0L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_PTRID_PCON_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PCON_PTRID_PCON_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pcon_read();
	return pke_sfr_segptr_ptrid_pcon_ptrid_pcon_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pcon_ptrid_pcon_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pcon_ptrid_pcon_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pcon_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pcon_ptrid_pcon_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pcon_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_ADDR (CSR_BASE + -0xfccL)
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PIB0_read(void) {
	return csr_read_simple((CSR_BASE + -0xfccL));
}
static inline void pke_sfr_segptr_PTRID_PIB0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfccL));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pib0_read();
	return pke_sfr_segptr_ptrid_pib0_ptrid_pib0_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pib0_ptrid_pib0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pib0_ptrid_pib0_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pib0_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pib0_ptrid_pib0_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pib0_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_ADDR (CSR_BASE + -0xfc8L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PIB1_read(void) {
	return csr_read_simple((CSR_BASE + -0xfc8L));
}
static inline void pke_sfr_segptr_PTRID_PIB1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfc8L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pib1_read();
	return pke_sfr_segptr_ptrid_pib1_ptrid_pib1_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pib1_ptrid_pib1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pib1_ptrid_pib1_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pib1_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pib1_ptrid_pib1_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pib1_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_ADDR (CSR_BASE + -0xfc4L)
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_PKB_read(void) {
	return csr_read_simple((CSR_BASE + -0xfc4L));
}
static inline void pke_sfr_segptr_PTRID_PKB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfc4L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_PTRID_PKB_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_PKB_PTRID_PKB_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pkb_read();
	return pke_sfr_segptr_ptrid_pkb_ptrid_pkb_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pkb_ptrid_pkb_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pkb_ptrid_pkb_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pkb_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pkb_ptrid_pkb_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pkb_write(newword);
}
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_ADDR (CSR_BASE + -0xfc0L)
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_SIZE 1
static inline uint32_t pke_sfr_segptr_PTRID_POB_read(void) {
	return csr_read_simple((CSR_BASE + -0xfc0L));
}
static inline void pke_sfr_segptr_PTRID_POB_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0xfc0L));
}
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_PTRID_POB_OFFSET 0
#define CSR_PKE_SFR_SEGPTR_PTRID_POB_PTRID_POB_SIZE 12
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_read(void) {
	uint32_t word = pke_sfr_segptr_ptrid_pob_read();
	return pke_sfr_segptr_ptrid_pob_ptrid_pob_extract(word);
}
static inline uint32_t pke_sfr_segptr_ptrid_pob_ptrid_pob_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pke_sfr_segptr_ptrid_pob_ptrid_pob_write(uint32_t plain_value) {
	uint32_t oldword = pke_sfr_segptr_ptrid_pob_read();
	uint32_t newword = pke_sfr_segptr_ptrid_pob_ptrid_pob_replace(oldword, plain_value);
	pke_sfr_segptr_ptrid_pob_write(newword);
}

/* scedma */
#define CSR_SCEDMA_BASE (CSR_BASE + -0x4000L)
#define CSR_SCEDMA_SFR_SCHSTART_AR_ADDR (CSR_BASE + -0x4000L)
#define CSR_SCEDMA_SFR_SCHSTART_AR_SIZE 1
static inline uint32_t scedma_sfr_schstart_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x4000L));
}
static inline void scedma_sfr_schstart_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4000L));
}
#define CSR_SCEDMA_SFR_SCHSTART_AR_SFR_SCHSTART_AR_OFFSET 0
#define CSR_SCEDMA_SFR_SCHSTART_AR_SFR_SCHSTART_AR_SIZE 32
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_read(void) {
	uint32_t word = scedma_sfr_schstart_ar_read();
	return scedma_sfr_schstart_ar_sfr_schstart_ar_extract(word);
}
static inline uint32_t scedma_sfr_schstart_ar_sfr_schstart_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_schstart_ar_sfr_schstart_ar_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_schstart_ar_read();
	uint32_t newword = scedma_sfr_schstart_ar_sfr_schstart_ar_replace(oldword, plain_value);
	scedma_sfr_schstart_ar_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_FUNC_ADDR (CSR_BASE + -0x3ff0L)
#define CSR_SCEDMA_SFR_XCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_xch_func_read(void) {
	return csr_read_simple((CSR_BASE + -0x3ff0L));
}
static inline void scedma_sfr_xch_func_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3ff0L));
}
#define CSR_SCEDMA_SFR_XCH_FUNC_SFR_XCH_FUNC_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_FUNC_SFR_XCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_read(void) {
	uint32_t word = scedma_sfr_xch_func_read();
	return scedma_sfr_xch_func_sfr_xch_func_extract(word);
}
static inline uint32_t scedma_sfr_xch_func_sfr_xch_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_func_sfr_xch_func_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_func_read();
	uint32_t newword = scedma_sfr_xch_func_sfr_xch_func_replace(oldword, plain_value);
	scedma_sfr_xch_func_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_OPT_ADDR (CSR_BASE + -0x3fecL)
#define CSR_SCEDMA_SFR_XCH_OPT_SIZE 1
static inline uint32_t scedma_sfr_xch_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fecL));
}
static inline void scedma_sfr_xch_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fecL));
}
#define CSR_SCEDMA_SFR_XCH_OPT_SFR_XCH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_OPT_SFR_XCH_OPT_SIZE 8
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_read(void) {
	uint32_t word = scedma_sfr_xch_opt_read();
	return scedma_sfr_xch_opt_sfr_xch_opt_extract(word);
}
static inline uint32_t scedma_sfr_xch_opt_sfr_xch_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_opt_sfr_xch_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_opt_read();
	uint32_t newword = scedma_sfr_xch_opt_sfr_xch_opt_replace(oldword, plain_value);
	scedma_sfr_xch_opt_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_AXSTART_ADDR (CSR_BASE + -0x3fe8L)
#define CSR_SCEDMA_SFR_XCH_AXSTART_SIZE 1
static inline uint32_t scedma_sfr_xch_axstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fe8L));
}
static inline void scedma_sfr_xch_axstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fe8L));
}
#define CSR_SCEDMA_SFR_XCH_AXSTART_SFR_XCH_AXSTART_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_AXSTART_SFR_XCH_AXSTART_SIZE 32
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_read(void) {
	uint32_t word = scedma_sfr_xch_axstart_read();
	return scedma_sfr_xch_axstart_sfr_xch_axstart_extract(word);
}
static inline uint32_t scedma_sfr_xch_axstart_sfr_xch_axstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_axstart_sfr_xch_axstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_axstart_read();
	uint32_t newword = scedma_sfr_xch_axstart_sfr_xch_axstart_replace(oldword, plain_value);
	scedma_sfr_xch_axstart_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_SEGID_ADDR (CSR_BASE + -0x3fe4L)
#define CSR_SCEDMA_SFR_XCH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_xch_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fe4L));
}
static inline void scedma_sfr_xch_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fe4L));
}
#define CSR_SCEDMA_SFR_XCH_SEGID_SFR_XCH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_SEGID_SFR_XCH_SEGID_SIZE 8
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_read(void) {
	uint32_t word = scedma_sfr_xch_segid_read();
	return scedma_sfr_xch_segid_sfr_xch_segid_extract(word);
}
static inline uint32_t scedma_sfr_xch_segid_sfr_xch_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_segid_sfr_xch_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_segid_read();
	uint32_t newword = scedma_sfr_xch_segid_sfr_xch_segid_replace(oldword, plain_value);
	scedma_sfr_xch_segid_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_SEGSTART_ADDR (CSR_BASE + -0x3fe0L)
#define CSR_SCEDMA_SFR_XCH_SEGSTART_SIZE 1
static inline uint32_t scedma_sfr_xch_segstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fe0L));
}
static inline void scedma_sfr_xch_segstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fe0L));
}
#define CSR_SCEDMA_SFR_XCH_SEGSTART_XCHCR_SEGSTART_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_SEGSTART_XCHCR_SEGSTART_SIZE 12
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_read(void) {
	uint32_t word = scedma_sfr_xch_segstart_read();
	return scedma_sfr_xch_segstart_xchcr_segstart_extract(word);
}
static inline uint32_t scedma_sfr_xch_segstart_xchcr_segstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_segstart_xchcr_segstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_segstart_read();
	uint32_t newword = scedma_sfr_xch_segstart_xchcr_segstart_replace(oldword, plain_value);
	scedma_sfr_xch_segstart_write(newword);
}
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_ADDR (CSR_BASE + -0x3fdcL)
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_xch_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fdcL));
}
static inline void scedma_sfr_xch_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fdcL));
}
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_XCHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_XCH_TRANSIZE_XCHCR_TRANSIZE_SIZE 30
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0x3fffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_read(void) {
	uint32_t word = scedma_sfr_xch_transize_read();
	return scedma_sfr_xch_transize_xchcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_xch_transize_xchcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3fffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_xch_transize_xchcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_xch_transize_read();
	uint32_t newword = scedma_sfr_xch_transize_xchcr_transize_replace(oldword, plain_value);
	scedma_sfr_xch_transize_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_FUNC_ADDR (CSR_BASE + -0x3fd0L)
#define CSR_SCEDMA_SFR_SCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_sch_func_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fd0L));
}
static inline void scedma_sfr_sch_func_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fd0L));
}
#define CSR_SCEDMA_SFR_SCH_FUNC_SFR_SCH_FUNC_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_FUNC_SFR_SCH_FUNC_SIZE 1
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_read(void) {
	uint32_t word = scedma_sfr_sch_func_read();
	return scedma_sfr_sch_func_sfr_sch_func_extract(word);
}
static inline uint32_t scedma_sfr_sch_func_sfr_sch_func_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_func_sfr_sch_func_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_func_read();
	uint32_t newword = scedma_sfr_sch_func_sfr_sch_func_replace(oldword, plain_value);
	scedma_sfr_sch_func_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_OPT_ADDR (CSR_BASE + -0x3fccL)
#define CSR_SCEDMA_SFR_SCH_OPT_SIZE 1
static inline uint32_t scedma_sfr_sch_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fccL));
}
static inline void scedma_sfr_sch_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fccL));
}
#define CSR_SCEDMA_SFR_SCH_OPT_SFR_SCH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_OPT_SFR_SCH_OPT_SIZE 8
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_read(void) {
	uint32_t word = scedma_sfr_sch_opt_read();
	return scedma_sfr_sch_opt_sfr_sch_opt_extract(word);
}
static inline uint32_t scedma_sfr_sch_opt_sfr_sch_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_opt_sfr_sch_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_opt_read();
	uint32_t newword = scedma_sfr_sch_opt_sfr_sch_opt_replace(oldword, plain_value);
	scedma_sfr_sch_opt_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_AXSTART_ADDR (CSR_BASE + -0x3fc8L)
#define CSR_SCEDMA_SFR_SCH_AXSTART_SIZE 1
static inline uint32_t scedma_sfr_sch_axstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fc8L));
}
static inline void scedma_sfr_sch_axstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fc8L));
}
#define CSR_SCEDMA_SFR_SCH_AXSTART_SFR_SCH_AXSTART_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_AXSTART_SFR_SCH_AXSTART_SIZE 32
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_read(void) {
	uint32_t word = scedma_sfr_sch_axstart_read();
	return scedma_sfr_sch_axstart_sfr_sch_axstart_extract(word);
}
static inline uint32_t scedma_sfr_sch_axstart_sfr_sch_axstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_axstart_sfr_sch_axstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_axstart_read();
	uint32_t newword = scedma_sfr_sch_axstart_sfr_sch_axstart_replace(oldword, plain_value);
	scedma_sfr_sch_axstart_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_SEGID_ADDR (CSR_BASE + -0x3fc4L)
#define CSR_SCEDMA_SFR_SCH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_sch_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fc4L));
}
static inline void scedma_sfr_sch_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fc4L));
}
#define CSR_SCEDMA_SFR_SCH_SEGID_SFR_SCH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_SEGID_SFR_SCH_SEGID_SIZE 8
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_read(void) {
	uint32_t word = scedma_sfr_sch_segid_read();
	return scedma_sfr_sch_segid_sfr_sch_segid_extract(word);
}
static inline uint32_t scedma_sfr_sch_segid_sfr_sch_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_segid_sfr_sch_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_segid_read();
	uint32_t newword = scedma_sfr_sch_segid_sfr_sch_segid_replace(oldword, plain_value);
	scedma_sfr_sch_segid_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_SEGSTART_ADDR (CSR_BASE + -0x3fc0L)
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SIZE 1
static inline uint32_t scedma_sfr_sch_segstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fc0L));
}
static inline void scedma_sfr_sch_segstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fc0L));
}
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SCHCR_SEGSTART_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_SEGSTART_SCHCR_SEGSTART_SIZE 12
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_read(void) {
	uint32_t word = scedma_sfr_sch_segstart_read();
	return scedma_sfr_sch_segstart_schcr_segstart_extract(word);
}
static inline uint32_t scedma_sfr_sch_segstart_schcr_segstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_segstart_schcr_segstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_segstart_read();
	uint32_t newword = scedma_sfr_sch_segstart_schcr_segstart_replace(oldword, plain_value);
	scedma_sfr_sch_segstart_write(newword);
}
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_ADDR (CSR_BASE + -0x3fbcL)
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_sch_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fbcL));
}
static inline void scedma_sfr_sch_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fbcL));
}
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SCHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_SCH_TRANSIZE_SCHCR_TRANSIZE_SIZE 30
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0x3fffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_read(void) {
	uint32_t word = scedma_sfr_sch_transize_read();
	return scedma_sfr_sch_transize_schcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_sch_transize_schcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3fffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_sch_transize_schcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_sch_transize_read();
	uint32_t newword = scedma_sfr_sch_transize_schcr_transize_replace(oldword, plain_value);
	scedma_sfr_sch_transize_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_OPT_ADDR (CSR_BASE + -0x3fb0L)
#define CSR_SCEDMA_SFR_ICH_OPT_SIZE 1
static inline uint32_t scedma_sfr_ich_opt_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fb0L));
}
static inline void scedma_sfr_ich_opt_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fb0L));
}
#define CSR_SCEDMA_SFR_ICH_OPT_SFR_ICH_OPT_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_OPT_SFR_ICH_OPT_SIZE 4
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_read(void) {
	uint32_t word = scedma_sfr_ich_opt_read();
	return scedma_sfr_ich_opt_sfr_ich_opt_extract(word);
}
static inline uint32_t scedma_sfr_ich_opt_sfr_ich_opt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_opt_sfr_ich_opt_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_opt_read();
	uint32_t newword = scedma_sfr_ich_opt_sfr_ich_opt_replace(oldword, plain_value);
	scedma_sfr_ich_opt_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_SEGID_ADDR (CSR_BASE + -0x3facL)
#define CSR_SCEDMA_SFR_ICH_SEGID_SIZE 1
static inline uint32_t scedma_sfr_ich_segid_read(void) {
	return csr_read_simple((CSR_BASE + -0x3facL));
}
static inline void scedma_sfr_ich_segid_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3facL));
}
#define CSR_SCEDMA_SFR_ICH_SEGID_SFR_ICH_SEGID_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_SEGID_SFR_ICH_SEGID_SIZE 16
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_read(void) {
	uint32_t word = scedma_sfr_ich_segid_read();
	return scedma_sfr_ich_segid_sfr_ich_segid_extract(word);
}
static inline uint32_t scedma_sfr_ich_segid_sfr_ich_segid_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_segid_sfr_ich_segid_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_segid_read();
	uint32_t newword = scedma_sfr_ich_segid_sfr_ich_segid_replace(oldword, plain_value);
	scedma_sfr_ich_segid_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_RPSTART_ADDR (CSR_BASE + -0x3fa8L)
#define CSR_SCEDMA_SFR_ICH_RPSTART_SIZE 1
static inline uint32_t scedma_sfr_ich_rpstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fa8L));
}
static inline void scedma_sfr_ich_rpstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fa8L));
}
#define CSR_SCEDMA_SFR_ICH_RPSTART_ICHCR_RPSTART_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_RPSTART_ICHCR_RPSTART_SIZE 12
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_read(void) {
	uint32_t word = scedma_sfr_ich_rpstart_read();
	return scedma_sfr_ich_rpstart_ichcr_rpstart_extract(word);
}
static inline uint32_t scedma_sfr_ich_rpstart_ichcr_rpstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_rpstart_ichcr_rpstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_rpstart_read();
	uint32_t newword = scedma_sfr_ich_rpstart_ichcr_rpstart_replace(oldword, plain_value);
	scedma_sfr_ich_rpstart_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_WPSTART_ADDR (CSR_BASE + -0x3fa4L)
#define CSR_SCEDMA_SFR_ICH_WPSTART_SIZE 1
static inline uint32_t scedma_sfr_ich_wpstart_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fa4L));
}
static inline void scedma_sfr_ich_wpstart_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fa4L));
}
#define CSR_SCEDMA_SFR_ICH_WPSTART_ICHCR_WPSTART_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_WPSTART_ICHCR_WPSTART_SIZE 12
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_read(void) {
	uint32_t word = scedma_sfr_ich_wpstart_read();
	return scedma_sfr_ich_wpstart_ichcr_wpstart_extract(word);
}
static inline uint32_t scedma_sfr_ich_wpstart_ichcr_wpstart_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_wpstart_ichcr_wpstart_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_wpstart_read();
	uint32_t newword = scedma_sfr_ich_wpstart_ichcr_wpstart_replace(oldword, plain_value);
	scedma_sfr_ich_wpstart_write(newword);
}
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ADDR (CSR_BASE + -0x3fa0L)
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_SIZE 1
static inline uint32_t scedma_sfr_ich_transize_read(void) {
	return csr_read_simple((CSR_BASE + -0x3fa0L));
}
static inline void scedma_sfr_ich_transize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x3fa0L));
}
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ICHCR_TRANSIZE_OFFSET 0
#define CSR_SCEDMA_SFR_ICH_TRANSIZE_ICHCR_TRANSIZE_SIZE 12
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_read(void) {
	uint32_t word = scedma_sfr_ich_transize_read();
	return scedma_sfr_ich_transize_ichcr_transize_extract(word);
}
static inline uint32_t scedma_sfr_ich_transize_ichcr_transize_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void scedma_sfr_ich_transize_ichcr_transize_write(uint32_t plain_value) {
	uint32_t oldword = scedma_sfr_ich_transize_read();
	uint32_t newword = scedma_sfr_ich_transize_ichcr_transize_replace(oldword, plain_value);
	scedma_sfr_ich_transize_write(newword);
}

/* sce_glbsfr */
#define CSR_SCE_GLBSFR_BASE (CSR_BASE + -0x5000L)
#define CSR_SCE_GLBSFR_SFR_SCEMODE_ADDR (CSR_BASE + -0x5000L)
#define CSR_SCE_GLBSFR_SFR_SCEMODE_SIZE 1
static inline uint32_t sce_glbsfr_sfr_scemode_read(void) {
	return csr_read_simple((CSR_BASE + -0x5000L));
}
static inline void sce_glbsfr_sfr_scemode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x5000L));
}
#define CSR_SCE_GLBSFR_SFR_SCEMODE_CR_SCEMODE_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SCEMODE_CR_SCEMODE_SIZE 2
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_read(void) {
	uint32_t word = sce_glbsfr_sfr_scemode_read();
	return sce_glbsfr_sfr_scemode_cr_scemode_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_scemode_cr_scemode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_scemode_cr_scemode_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_scemode_read();
	uint32_t newword = sce_glbsfr_sfr_scemode_cr_scemode_replace(oldword, plain_value);
	sce_glbsfr_sfr_scemode_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_SUBEN_ADDR (CSR_BASE + -0x4ffcL)
#define CSR_SCE_GLBSFR_SFR_SUBEN_SIZE 1
static inline uint32_t sce_glbsfr_sfr_suben_read(void) {
	return csr_read_simple((CSR_BASE + -0x4ffcL));
}
static inline void sce_glbsfr_sfr_suben_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4ffcL));
}
#define CSR_SCE_GLBSFR_SFR_SUBEN_CR_SUBEN_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SUBEN_CR_SUBEN_SIZE 16
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_read(void) {
	uint32_t word = sce_glbsfr_sfr_suben_read();
	return sce_glbsfr_sfr_suben_cr_suben_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_suben_cr_suben_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_suben_cr_suben_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_suben_read();
	uint32_t newword = sce_glbsfr_sfr_suben_cr_suben_replace(oldword, plain_value);
	sce_glbsfr_sfr_suben_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_AHBS_ADDR (CSR_BASE + -0x4ff8L)
#define CSR_SCE_GLBSFR_SFR_AHBS_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ahbs_read(void) {
	return csr_read_simple((CSR_BASE + -0x4ff8L));
}
static inline void sce_glbsfr_sfr_ahbs_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4ff8L));
}
#define CSR_SCE_GLBSFR_SFR_AHBS_CR_AHBSOPT_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_AHBS_CR_AHBSOPT_SIZE 5
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_read(void) {
	uint32_t word = sce_glbsfr_sfr_ahbs_read();
	return sce_glbsfr_sfr_ahbs_cr_ahbsopt_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ahbs_cr_ahbsopt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ahbs_cr_ahbsopt_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ahbs_read();
	uint32_t newword = sce_glbsfr_sfr_ahbs_cr_ahbsopt_replace(oldword, plain_value);
	sce_glbsfr_sfr_ahbs_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_SRBUSY_ADDR (CSR_BASE + -0x4ff0L)
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SIZE 1
static inline uint32_t sce_glbsfr_sfr_srbusy_read(void) {
	return csr_read_simple((CSR_BASE + -0x4ff0L));
}
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SR_BUSY_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_SRBUSY_SR_BUSY_SIZE 16
static inline uint32_t sce_glbsfr_sfr_srbusy_sr_busy_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_srbusy_sr_busy_read(void) {
	uint32_t word = sce_glbsfr_sfr_srbusy_read();
	return sce_glbsfr_sfr_srbusy_sr_busy_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FRDONE_ADDR (CSR_BASE + -0x4fecL)
#define CSR_SCE_GLBSFR_SFR_FRDONE_SIZE 1
static inline uint32_t sce_glbsfr_sfr_frdone_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fecL));
}
#define CSR_SCE_GLBSFR_SFR_FRDONE_FR_DONE_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FRDONE_FR_DONE_SIZE 16
static inline uint32_t sce_glbsfr_sfr_frdone_fr_done_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_frdone_fr_done_read(void) {
	uint32_t word = sce_glbsfr_sfr_frdone_read();
	return sce_glbsfr_sfr_frdone_fr_done_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FRERR_ADDR (CSR_BASE + -0x4fe8L)
#define CSR_SCE_GLBSFR_SFR_FRERR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_frerr_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fe8L));
}
#define CSR_SCE_GLBSFR_SFR_FRERR_FR_ERR_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FRERR_FR_ERR_SIZE 16
static inline uint32_t sce_glbsfr_sfr_frerr_fr_err_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_frerr_fr_err_read(void) {
	uint32_t word = sce_glbsfr_sfr_frerr_read();
	return sce_glbsfr_sfr_frerr_fr_err_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_ARCLR_ADDR (CSR_BASE + -0x4fe4L)
#define CSR_SCE_GLBSFR_SFR_ARCLR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_arclr_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fe4L));
}
static inline void sce_glbsfr_sfr_arclr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fe4L));
}
#define CSR_SCE_GLBSFR_SFR_ARCLR_AR_CLRRAM_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_ARCLR_AR_CLRRAM_SIZE 32
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_read(void) {
	uint32_t word = sce_glbsfr_sfr_arclr_read();
	return sce_glbsfr_sfr_arclr_ar_clrram_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_arclr_ar_clrram_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_arclr_ar_clrram_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_arclr_read();
	uint32_t newword = sce_glbsfr_sfr_arclr_ar_clrram_replace(oldword, plain_value);
	sce_glbsfr_sfr_arclr_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_TICKCYC_ADDR (CSR_BASE + -0x4fe0L)
#define CSR_SCE_GLBSFR_SFR_TICKCYC_SIZE 1
static inline uint32_t sce_glbsfr_sfr_tickcyc_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fe0L));
}
static inline void sce_glbsfr_sfr_tickcyc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fe0L));
}
#define CSR_SCE_GLBSFR_SFR_TICKCYC_SFR_TICKCYC_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_TICKCYC_SFR_TICKCYC_SIZE 8
static inline uint32_t sce_glbsfr_sfr_tickcyc_sfr_tickcyc_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_tickcyc_sfr_tickcyc_read(void) {
	uint32_t word = sce_glbsfr_sfr_tickcyc_read();
	return sce_glbsfr_sfr_tickcyc_sfr_tickcyc_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_tickcyc_sfr_tickcyc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_tickcyc_sfr_tickcyc_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_tickcyc_read();
	uint32_t newword = sce_glbsfr_sfr_tickcyc_sfr_tickcyc_replace(oldword, plain_value);
	sce_glbsfr_sfr_tickcyc_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_TICKCNT_ADDR (CSR_BASE + -0x4fdcL)
#define CSR_SCE_GLBSFR_SFR_TICKCNT_SIZE 1
static inline uint32_t sce_glbsfr_sfr_tickcnt_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fdcL));
}
#define CSR_SCE_GLBSFR_SFR_TICKCNT_SFR_TICKCNT_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_TICKCNT_SFR_TICKCNT_SIZE 32
static inline uint32_t sce_glbsfr_sfr_tickcnt_sfr_tickcnt_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_tickcnt_sfr_tickcnt_read(void) {
	uint32_t word = sce_glbsfr_sfr_tickcnt_read();
	return sce_glbsfr_sfr_tickcnt_sfr_tickcnt_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFEN_ADDR (CSR_BASE + -0x4fd0L)
#define CSR_SCE_GLBSFR_SFR_FFEN_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffen_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fd0L));
}
static inline void sce_glbsfr_sfr_ffen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fd0L));
}
#define CSR_SCE_GLBSFR_SFR_FFEN_CR_FFEN_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFEN_CR_FFEN_SIZE 6
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffen_read();
	return sce_glbsfr_sfr_ffen_cr_ffen_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ffen_cr_ffen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ffen_cr_ffen_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ffen_read();
	uint32_t newword = sce_glbsfr_sfr_ffen_cr_ffen_replace(oldword, plain_value);
	sce_glbsfr_sfr_ffen_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_FFCLR_ADDR (CSR_BASE + -0x4fccL)
#define CSR_SCE_GLBSFR_SFR_FFCLR_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffclr_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fccL));
}
static inline void sce_glbsfr_sfr_ffclr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x4fccL));
}
#define CSR_SCE_GLBSFR_SFR_FFCLR_AR_FFCLR_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCLR_AR_FFCLR_SIZE 32
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffclr_read();
	return sce_glbsfr_sfr_ffclr_ar_ffclr_extract(word);
}
static inline uint32_t sce_glbsfr_sfr_ffclr_ar_ffclr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sce_glbsfr_sfr_ffclr_ar_ffclr_write(uint32_t plain_value) {
	uint32_t oldword = sce_glbsfr_sfr_ffclr_read();
	uint32_t newword = sce_glbsfr_sfr_ffclr_ar_ffclr_replace(oldword, plain_value);
	sce_glbsfr_sfr_ffclr_write(newword);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_ADDR (CSR_BASE + -0x4fc0L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fc0L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SR_FF0_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF0_SR_FF0_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff0_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff0_sr_ff0_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_ADDR (CSR_BASE + -0x4fbcL)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fbcL));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SR_FF1_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF1_SR_FF1_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff1_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff1_sr_ff1_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_ADDR (CSR_BASE + -0x4fb8L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fb8L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SR_FF2_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF2_SR_FF2_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff2_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff2_sr_ff2_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_ADDR (CSR_BASE + -0x4fb4L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fb4L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SR_FF3_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF3_SR_FF3_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff3_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff3_sr_ff3_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_ADDR (CSR_BASE + -0x4fb0L)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_read(void) {
	return csr_read_simple((CSR_BASE + -0x4fb0L));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SR_FF4_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF4_SR_FF4_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff4_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff4_sr_ff4_extract(word);
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_ADDR (CSR_BASE + -0x4facL)
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SIZE 1
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_read(void) {
	return csr_read_simple((CSR_BASE + -0x4facL));
}
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SR_FF5_OFFSET 0
#define CSR_SCE_GLBSFR_SFR_FFCNT_SR_FF5_SR_FF5_SIZE 16
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_read(void) {
	uint32_t word = sce_glbsfr_sfr_ffcnt_sr_ff5_read();
	return sce_glbsfr_sfr_ffcnt_sr_ff5_sr_ff5_extract(word);
}

/* trng */
#define CSR_TRNG_BASE (CSR_BASE + 0x1000L)

/* alu */
#define CSR_ALU_BASE (CSR_BASE + 0x2000L)

/* duart */
#define CSR_DUART_BASE (CSR_BASE + 0x15000L)
#define CSR_DUART_SFR_TXD_ADDR (CSR_BASE + 0x15000L)
#define CSR_DUART_SFR_TXD_SIZE 1
static inline uint32_t duart_sfr_txd_read(void) {
	return csr_read_simple((CSR_BASE + 0x15000L));
}
static inline void duart_sfr_txd_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x15000L));
}
#define CSR_DUART_SFR_TXD_SFR_TXD_OFFSET 0
#define CSR_DUART_SFR_TXD_SFR_TXD_SIZE 8
static inline uint32_t duart_sfr_txd_sfr_txd_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t duart_sfr_txd_sfr_txd_read(void) {
	uint32_t word = duart_sfr_txd_read();
	return duart_sfr_txd_sfr_txd_extract(word);
}
static inline uint32_t duart_sfr_txd_sfr_txd_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void duart_sfr_txd_sfr_txd_write(uint32_t plain_value) {
	uint32_t oldword = duart_sfr_txd_read();
	uint32_t newword = duart_sfr_txd_sfr_txd_replace(oldword, plain_value);
	duart_sfr_txd_write(newword);
}
#define CSR_DUART_SFR_CR_ADDR (CSR_BASE + 0x15004L)
#define CSR_DUART_SFR_CR_SIZE 1
static inline uint32_t duart_sfr_cr_read(void) {
	return csr_read_simple((CSR_BASE + 0x15004L));
}
static inline void duart_sfr_cr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x15004L));
}
#define CSR_DUART_SFR_CR_SFR_CR_OFFSET 0
#define CSR_DUART_SFR_CR_SFR_CR_SIZE 1
static inline uint32_t duart_sfr_cr_sfr_cr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t duart_sfr_cr_sfr_cr_read(void) {
	uint32_t word = duart_sfr_cr_read();
	return duart_sfr_cr_sfr_cr_extract(word);
}
static inline uint32_t duart_sfr_cr_sfr_cr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void duart_sfr_cr_sfr_cr_write(uint32_t plain_value) {
	uint32_t oldword = duart_sfr_cr_read();
	uint32_t newword = duart_sfr_cr_sfr_cr_replace(oldword, plain_value);
	duart_sfr_cr_write(newword);
}
#define CSR_DUART_SFR_SR_ADDR (CSR_BASE + 0x15008L)
#define CSR_DUART_SFR_SR_SIZE 1
static inline uint32_t duart_sfr_sr_read(void) {
	return csr_read_simple((CSR_BASE + 0x15008L));
}
#define CSR_DUART_SFR_SR_SFR_SR_OFFSET 0
#define CSR_DUART_SFR_SR_SFR_SR_SIZE 1
static inline uint32_t duart_sfr_sr_sfr_sr_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t duart_sfr_sr_sfr_sr_read(void) {
	uint32_t word = duart_sfr_sr_read();
	return duart_sfr_sr_sfr_sr_extract(word);
}
#define CSR_DUART_SFR_ETUC_ADDR (CSR_BASE + 0x1500cL)
#define CSR_DUART_SFR_ETUC_SIZE 1
static inline uint32_t duart_sfr_etuc_read(void) {
	return csr_read_simple((CSR_BASE + 0x1500cL));
}
static inline void duart_sfr_etuc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1500cL));
}
#define CSR_DUART_SFR_ETUC_SFR_ETUC_OFFSET 0
#define CSR_DUART_SFR_ETUC_SFR_ETUC_SIZE 16
static inline uint32_t duart_sfr_etuc_sfr_etuc_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t duart_sfr_etuc_sfr_etuc_read(void) {
	uint32_t word = duart_sfr_etuc_read();
	return duart_sfr_etuc_sfr_etuc_extract(word);
}
static inline uint32_t duart_sfr_etuc_sfr_etuc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void duart_sfr_etuc_sfr_etuc_write(uint32_t plain_value) {
	uint32_t oldword = duart_sfr_etuc_read();
	uint32_t newword = duart_sfr_etuc_sfr_etuc_replace(oldword, plain_value);
	duart_sfr_etuc_write(newword);
}

/* wdg_intf */
#define CSR_WDG_INTF_BASE (CSR_BASE + 0x14000L)

/* timer_intf */
#define CSR_TIMER_INTF_BASE (CSR_BASE + 0x16000L)

/* evc */
#define CSR_EVC_BASE (CSR_BASE + 0x17000L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL0_ADDR (CSR_BASE + 0x17000L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL0_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x17000L));
}
static inline void evc_sfr_cm7evsel_cm7evsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17000L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel0_read();
	return evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel0_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel0_cm7evsel0_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel0_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL1_ADDR (CSR_BASE + 0x17004L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL1_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x17004L));
}
static inline void evc_sfr_cm7evsel_cm7evsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17004L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel1_read();
	return evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel1_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel1_cm7evsel1_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel1_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL2_ADDR (CSR_BASE + 0x17008L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL2_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel2_read(void) {
	return csr_read_simple((CSR_BASE + 0x17008L));
}
static inline void evc_sfr_cm7evsel_cm7evsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17008L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel2_read();
	return evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel2_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel2_cm7evsel2_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel2_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL3_ADDR (CSR_BASE + 0x1700cL)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL3_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1700cL));
}
static inline void evc_sfr_cm7evsel_cm7evsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1700cL));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel3_read();
	return evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel3_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel3_cm7evsel3_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel3_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL4_ADDR (CSR_BASE + 0x17010L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL4_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel4_read(void) {
	return csr_read_simple((CSR_BASE + 0x17010L));
}
static inline void evc_sfr_cm7evsel_cm7evsel4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17010L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel4_read();
	return evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel4_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel4_cm7evsel4_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel4_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL5_ADDR (CSR_BASE + 0x17014L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL5_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel5_read(void) {
	return csr_read_simple((CSR_BASE + 0x17014L));
}
static inline void evc_sfr_cm7evsel_cm7evsel5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17014L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel5_read();
	return evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel5_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel5_cm7evsel5_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel5_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL6_ADDR (CSR_BASE + 0x17018L)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL6_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel6_read(void) {
	return csr_read_simple((CSR_BASE + 0x17018L));
}
static inline void evc_sfr_cm7evsel_cm7evsel6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17018L));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel6_read();
	return evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel6_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel6_cm7evsel6_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel6_write(newword);
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL7_ADDR (CSR_BASE + 0x1701cL)
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL7_SIZE 1
static inline uint32_t evc_sfr_cm7evsel_cm7evsel7_read(void) {
	return csr_read_simple((CSR_BASE + 0x1701cL));
}
static inline void evc_sfr_cm7evsel_cm7evsel7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1701cL));
}
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7_OFFSET 0
#define CSR_EVC_SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7_SIZE 8
static inline uint32_t evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_read(void) {
	uint32_t word = evc_sfr_cm7evsel_cm7evsel7_read();
	return evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_extract(word);
}
static inline uint32_t evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7evsel_cm7evsel7_read();
	uint32_t newword = evc_sfr_cm7evsel_cm7evsel7_cm7evsel7_replace(oldword, plain_value);
	evc_sfr_cm7evsel_cm7evsel7_write(newword);
}
#define CSR_EVC_SFR_CM7EVEN_ADDR (CSR_BASE + 0x17020L)
#define CSR_EVC_SFR_CM7EVEN_SIZE 1
static inline uint32_t evc_sfr_cm7even_read(void) {
	return csr_read_simple((CSR_BASE + 0x17020L));
}
static inline void evc_sfr_cm7even_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17020L));
}
#define CSR_EVC_SFR_CM7EVEN_CM7EVEN_OFFSET 0
#define CSR_EVC_SFR_CM7EVEN_CM7EVEN_SIZE 8
static inline uint32_t evc_sfr_cm7even_cm7even_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7even_cm7even_read(void) {
	uint32_t word = evc_sfr_cm7even_read();
	return evc_sfr_cm7even_cm7even_extract(word);
}
static inline uint32_t evc_sfr_cm7even_cm7even_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_cm7even_cm7even_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_cm7even_read();
	uint32_t newword = evc_sfr_cm7even_cm7even_replace(oldword, plain_value);
	evc_sfr_cm7even_write(newword);
}
#define CSR_EVC_SFR_CM7EVFR_ADDR (CSR_BASE + 0x17024L)
#define CSR_EVC_SFR_CM7EVFR_SIZE 1
static inline uint32_t evc_sfr_cm7evfr_read(void) {
	return csr_read_simple((CSR_BASE + 0x17024L));
}
#define CSR_EVC_SFR_CM7EVFR_CM7EVS_OFFSET 0
#define CSR_EVC_SFR_CM7EVFR_CM7EVS_SIZE 8
static inline uint32_t evc_sfr_cm7evfr_cm7evs_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7evfr_cm7evs_read(void) {
	uint32_t word = evc_sfr_cm7evfr_read();
	return evc_sfr_cm7evfr_cm7evs_extract(word);
}
#define CSR_EVC_SFR_TMREVSEL_ADDR (CSR_BASE + 0x17030L)
#define CSR_EVC_SFR_TMREVSEL_SIZE 1
static inline uint32_t evc_sfr_tmrevsel_read(void) {
	return csr_read_simple((CSR_BASE + 0x17030L));
}
static inline void evc_sfr_tmrevsel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17030L));
}
#define CSR_EVC_SFR_TMREVSEL_TMR_EVSEL_OFFSET 0
#define CSR_EVC_SFR_TMREVSEL_TMR_EVSEL_SIZE 16
static inline uint32_t evc_sfr_tmrevsel_tmr_evsel_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_tmrevsel_tmr_evsel_read(void) {
	uint32_t word = evc_sfr_tmrevsel_read();
	return evc_sfr_tmrevsel_tmr_evsel_extract(word);
}
static inline uint32_t evc_sfr_tmrevsel_tmr_evsel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_tmrevsel_tmr_evsel_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_tmrevsel_read();
	uint32_t newword = evc_sfr_tmrevsel_tmr_evsel_replace(oldword, plain_value);
	evc_sfr_tmrevsel_write(newword);
}
#define CSR_EVC_SFR_PWMEVSEL_ADDR (CSR_BASE + 0x17034L)
#define CSR_EVC_SFR_PWMEVSEL_SIZE 1
static inline uint32_t evc_sfr_pwmevsel_read(void) {
	return csr_read_simple((CSR_BASE + 0x17034L));
}
static inline void evc_sfr_pwmevsel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17034L));
}
#define CSR_EVC_SFR_PWMEVSEL_PWM_EVSEL_OFFSET 0
#define CSR_EVC_SFR_PWMEVSEL_PWM_EVSEL_SIZE 32
static inline uint32_t evc_sfr_pwmevsel_pwm_evsel_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_pwmevsel_pwm_evsel_read(void) {
	uint32_t word = evc_sfr_pwmevsel_read();
	return evc_sfr_pwmevsel_pwm_evsel_extract(word);
}
static inline uint32_t evc_sfr_pwmevsel_pwm_evsel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_pwmevsel_pwm_evsel_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_pwmevsel_read();
	uint32_t newword = evc_sfr_pwmevsel_pwm_evsel_replace(oldword, plain_value);
	evc_sfr_pwmevsel_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN0_ADDR (CSR_BASE + 0x17040L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN0_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven0_read(void) {
	return csr_read_simple((CSR_BASE + 0x17040L));
}
static inline void evc_sfr_ifeven_ifeven0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17040L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN0_IFEVEN0_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN0_IFEVEN0_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven0_ifeven0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven0_ifeven0_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven0_read();
	return evc_sfr_ifeven_ifeven0_ifeven0_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven0_ifeven0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven0_ifeven0_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven0_read();
	uint32_t newword = evc_sfr_ifeven_ifeven0_ifeven0_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven0_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN1_ADDR (CSR_BASE + 0x17044L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN1_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven1_read(void) {
	return csr_read_simple((CSR_BASE + 0x17044L));
}
static inline void evc_sfr_ifeven_ifeven1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17044L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN1_IFEVEN1_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN1_IFEVEN1_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven1_ifeven1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven1_ifeven1_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven1_read();
	return evc_sfr_ifeven_ifeven1_ifeven1_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven1_ifeven1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven1_ifeven1_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven1_read();
	uint32_t newword = evc_sfr_ifeven_ifeven1_ifeven1_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven1_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN2_ADDR (CSR_BASE + 0x17048L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN2_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven2_read(void) {
	return csr_read_simple((CSR_BASE + 0x17048L));
}
static inline void evc_sfr_ifeven_ifeven2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17048L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN2_IFEVEN2_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN2_IFEVEN2_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven2_ifeven2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven2_ifeven2_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven2_read();
	return evc_sfr_ifeven_ifeven2_ifeven2_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven2_ifeven2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven2_ifeven2_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven2_read();
	uint32_t newword = evc_sfr_ifeven_ifeven2_ifeven2_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven2_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN3_ADDR (CSR_BASE + 0x1704cL)
#define CSR_EVC_SFR_IFEVEN_IFEVEN3_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1704cL));
}
static inline void evc_sfr_ifeven_ifeven3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1704cL));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN3_IFEVEN3_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN3_IFEVEN3_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven3_ifeven3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven3_ifeven3_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven3_read();
	return evc_sfr_ifeven_ifeven3_ifeven3_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven3_ifeven3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven3_ifeven3_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven3_read();
	uint32_t newword = evc_sfr_ifeven_ifeven3_ifeven3_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven3_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN4_ADDR (CSR_BASE + 0x17050L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN4_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven4_read(void) {
	return csr_read_simple((CSR_BASE + 0x17050L));
}
static inline void evc_sfr_ifeven_ifeven4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17050L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN4_IFEVEN4_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN4_IFEVEN4_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven4_ifeven4_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven4_ifeven4_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven4_read();
	return evc_sfr_ifeven_ifeven4_ifeven4_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven4_ifeven4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven4_ifeven4_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven4_read();
	uint32_t newword = evc_sfr_ifeven_ifeven4_ifeven4_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven4_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN5_ADDR (CSR_BASE + 0x17054L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN5_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven5_read(void) {
	return csr_read_simple((CSR_BASE + 0x17054L));
}
static inline void evc_sfr_ifeven_ifeven5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17054L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN5_IFEVEN5_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN5_IFEVEN5_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven5_ifeven5_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven5_ifeven5_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven5_read();
	return evc_sfr_ifeven_ifeven5_ifeven5_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven5_ifeven5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven5_ifeven5_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven5_read();
	uint32_t newword = evc_sfr_ifeven_ifeven5_ifeven5_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven5_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN6_ADDR (CSR_BASE + 0x17058L)
#define CSR_EVC_SFR_IFEVEN_IFEVEN6_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven6_read(void) {
	return csr_read_simple((CSR_BASE + 0x17058L));
}
static inline void evc_sfr_ifeven_ifeven6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x17058L));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN6_IFEVEN6_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN6_IFEVEN6_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven6_ifeven6_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven6_ifeven6_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven6_read();
	return evc_sfr_ifeven_ifeven6_ifeven6_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven6_ifeven6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven6_ifeven6_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven6_read();
	uint32_t newword = evc_sfr_ifeven_ifeven6_ifeven6_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven6_write(newword);
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN7_ADDR (CSR_BASE + 0x1705cL)
#define CSR_EVC_SFR_IFEVEN_IFEVEN7_SIZE 1
static inline uint32_t evc_sfr_ifeven_ifeven7_read(void) {
	return csr_read_simple((CSR_BASE + 0x1705cL));
}
static inline void evc_sfr_ifeven_ifeven7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1705cL));
}
#define CSR_EVC_SFR_IFEVEN_IFEVEN7_IFEVEN7_OFFSET 0
#define CSR_EVC_SFR_IFEVEN_IFEVEN7_IFEVEN7_SIZE 32
static inline uint32_t evc_sfr_ifeven_ifeven7_ifeven7_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeven_ifeven7_ifeven7_read(void) {
	uint32_t word = evc_sfr_ifeven_ifeven7_read();
	return evc_sfr_ifeven_ifeven7_ifeven7_extract(word);
}
static inline uint32_t evc_sfr_ifeven_ifeven7_ifeven7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void evc_sfr_ifeven_ifeven7_ifeven7_write(uint32_t plain_value) {
	uint32_t oldword = evc_sfr_ifeven_ifeven7_read();
	uint32_t newword = evc_sfr_ifeven_ifeven7_ifeven7_replace(oldword, plain_value);
	evc_sfr_ifeven_ifeven7_write(newword);
}
#define CSR_EVC_SFR_IFEVERRFR_ADDR (CSR_BASE + 0x17060L)
#define CSR_EVC_SFR_IFEVERRFR_SIZE 1
static inline uint32_t evc_sfr_ifeverrfr_read(void) {
	return csr_read_simple((CSR_BASE + 0x17060L));
}
#define CSR_EVC_SFR_IFEVERRFR_IFEV_ERRS_OFFSET 0
#define CSR_EVC_SFR_IFEVERRFR_IFEV_ERRS_SIZE 32
static inline uint32_t evc_sfr_ifeverrfr_ifev_errs_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_ifeverrfr_ifev_errs_read(void) {
	uint32_t word = evc_sfr_ifeverrfr_read();
	return evc_sfr_ifeverrfr_ifev_errs_extract(word);
}
#define CSR_EVC_SFR_CM7ERRFR_ADDR (CSR_BASE + 0x17080L)
#define CSR_EVC_SFR_CM7ERRFR_SIZE 1
static inline uint32_t evc_sfr_cm7errfr_read(void) {
	return csr_read_simple((CSR_BASE + 0x17080L));
}
#define CSR_EVC_SFR_CM7ERRFR_ERRIN_OFFSET 0
#define CSR_EVC_SFR_CM7ERRFR_ERRIN_SIZE 32
static inline uint32_t evc_sfr_cm7errfr_errin_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t evc_sfr_cm7errfr_errin_read(void) {
	uint32_t word = evc_sfr_cm7errfr_read();
	return evc_sfr_cm7errfr_errin_extract(word);
}

/* sysctrl */
#define CSR_SYSCTRL_BASE (CSR_BASE + 0x13000L)
#define CSR_SYSCTRL_SFR_CGUSEC_ADDR (CSR_BASE + 0x13000L)
#define CSR_SYSCTRL_SFR_CGUSEC_SIZE 1
static inline uint32_t sysctrl_sfr_cgusec_read(void) {
	return csr_read_simple((CSR_BASE + 0x13000L));
}
static inline void sysctrl_sfr_cgusec_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13000L));
}
#define CSR_SYSCTRL_SFR_CGUSEC_SFR_CGUSEC_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUSEC_SFR_CGUSEC_SIZE 16
static inline uint32_t sysctrl_sfr_cgusec_sfr_cgusec_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgusec_sfr_cgusec_read(void) {
	uint32_t word = sysctrl_sfr_cgusec_read();
	return sysctrl_sfr_cgusec_sfr_cgusec_extract(word);
}
static inline uint32_t sysctrl_sfr_cgusec_sfr_cgusec_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgusec_sfr_cgusec_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgusec_read();
	uint32_t newword = sysctrl_sfr_cgusec_sfr_cgusec_replace(oldword, plain_value);
	sysctrl_sfr_cgusec_write(newword);
}
#define CSR_SYSCTRL_SFR_CGULP_ADDR (CSR_BASE + 0x13004L)
#define CSR_SYSCTRL_SFR_CGULP_SIZE 1
static inline uint32_t sysctrl_sfr_cgulp_read(void) {
	return csr_read_simple((CSR_BASE + 0x13004L));
}
static inline void sysctrl_sfr_cgulp_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13004L));
}
#define CSR_SYSCTRL_SFR_CGULP_SFR_CGULP_OFFSET 0
#define CSR_SYSCTRL_SFR_CGULP_SFR_CGULP_SIZE 16
static inline uint32_t sysctrl_sfr_cgulp_sfr_cgulp_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgulp_sfr_cgulp_read(void) {
	uint32_t word = sysctrl_sfr_cgulp_read();
	return sysctrl_sfr_cgulp_sfr_cgulp_extract(word);
}
static inline uint32_t sysctrl_sfr_cgulp_sfr_cgulp_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgulp_sfr_cgulp_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgulp_read();
	uint32_t newword = sysctrl_sfr_cgulp_sfr_cgulp_replace(oldword, plain_value);
	sysctrl_sfr_cgulp_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUSEL0_ADDR (CSR_BASE + 0x13010L)
#define CSR_SYSCTRL_SFR_CGUSEL0_SIZE 1
static inline uint32_t sysctrl_sfr_cgusel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x13010L));
}
static inline void sysctrl_sfr_cgusel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13010L));
}
#define CSR_SYSCTRL_SFR_CGUSEL0_SFR_CGUSEL0_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUSEL0_SFR_CGUSEL0_SIZE 2
static inline uint32_t sysctrl_sfr_cgusel0_sfr_cgusel0_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgusel0_sfr_cgusel0_read(void) {
	uint32_t word = sysctrl_sfr_cgusel0_read();
	return sysctrl_sfr_cgusel0_sfr_cgusel0_extract(word);
}
static inline uint32_t sysctrl_sfr_cgusel0_sfr_cgusel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgusel0_sfr_cgusel0_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgusel0_read();
	uint32_t newword = sysctrl_sfr_cgusel0_sfr_cgusel0_replace(oldword, plain_value);
	sysctrl_sfr_cgusel0_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR0_ADDR (CSR_BASE + 0x13014L)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR0_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr0_read(void) {
	return csr_read_simple((CSR_BASE + 0x13014L));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13014L));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR0_CFGFDCR0_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR0_CFGFDCR0_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr0_cfgfdcr0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr0_cfgfdcr0_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr0_read();
	return sysctrl_sfr_cgufd_cfgfdcr0_cfgfdcr0_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr0_cfgfdcr0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr0_cfgfdcr0_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr0_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr0_cfgfdcr0_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr0_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR1_ADDR (CSR_BASE + 0x13018L)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR1_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr1_read(void) {
	return csr_read_simple((CSR_BASE + 0x13018L));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13018L));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR1_CFGFDCR1_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR1_CFGFDCR1_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr1_cfgfdcr1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr1_cfgfdcr1_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr1_read();
	return sysctrl_sfr_cgufd_cfgfdcr1_cfgfdcr1_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr1_cfgfdcr1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr1_cfgfdcr1_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr1_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr1_cfgfdcr1_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr1_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR2_ADDR (CSR_BASE + 0x1301cL)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR2_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr2_read(void) {
	return csr_read_simple((CSR_BASE + 0x1301cL));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1301cL));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR2_CFGFDCR2_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR2_CFGFDCR2_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr2_cfgfdcr2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr2_cfgfdcr2_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr2_read();
	return sysctrl_sfr_cgufd_cfgfdcr2_cfgfdcr2_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr2_cfgfdcr2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr2_cfgfdcr2_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr2_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr2_cfgfdcr2_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr2_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR3_ADDR (CSR_BASE + 0x13020L)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR3_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr3_read(void) {
	return csr_read_simple((CSR_BASE + 0x13020L));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13020L));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR3_CFGFDCR3_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR3_CFGFDCR3_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr3_cfgfdcr3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr3_cfgfdcr3_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr3_read();
	return sysctrl_sfr_cgufd_cfgfdcr3_cfgfdcr3_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr3_cfgfdcr3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr3_cfgfdcr3_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr3_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr3_cfgfdcr3_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr3_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR4_ADDR (CSR_BASE + 0x13024L)
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR4_SIZE 1
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr4_read(void) {
	return csr_read_simple((CSR_BASE + 0x13024L));
}
static inline void sysctrl_sfr_cgufd_cfgfdcr4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13024L));
}
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR4_CFGFDCR4_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFD_CFGFDCR4_CFGFDCR4_SIZE 16
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr4_cfgfdcr4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr4_cfgfdcr4_read(void) {
	uint32_t word = sysctrl_sfr_cgufd_cfgfdcr4_read();
	return sysctrl_sfr_cgufd_cfgfdcr4_cfgfdcr4_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufd_cfgfdcr4_cfgfdcr4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufd_cfgfdcr4_cfgfdcr4_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufd_cfgfdcr4_read();
	uint32_t newword = sysctrl_sfr_cgufd_cfgfdcr4_cfgfdcr4_replace(oldword, plain_value);
	sysctrl_sfr_cgufd_cfgfdcr4_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUSET_ADDR (CSR_BASE + 0x1302cL)
#define CSR_SYSCTRL_SFR_CGUSET_SIZE 1
static inline uint32_t sysctrl_sfr_cguset_read(void) {
	return csr_read_simple((CSR_BASE + 0x1302cL));
}
static inline void sysctrl_sfr_cguset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1302cL));
}
#define CSR_SYSCTRL_SFR_CGUSET_SFR_CGUSET_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUSET_SFR_CGUSET_SIZE 32
static inline uint32_t sysctrl_sfr_cguset_sfr_cguset_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cguset_sfr_cguset_read(void) {
	uint32_t word = sysctrl_sfr_cguset_read();
	return sysctrl_sfr_cguset_sfr_cguset_extract(word);
}
static inline uint32_t sysctrl_sfr_cguset_sfr_cguset_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cguset_sfr_cguset_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cguset_read();
	uint32_t newword = sysctrl_sfr_cguset_sfr_cguset_replace(oldword, plain_value);
	sysctrl_sfr_cguset_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUSEL1_ADDR (CSR_BASE + 0x13030L)
#define CSR_SYSCTRL_SFR_CGUSEL1_SIZE 1
static inline uint32_t sysctrl_sfr_cgusel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x13030L));
}
static inline void sysctrl_sfr_cgusel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13030L));
}
#define CSR_SYSCTRL_SFR_CGUSEL1_SFR_CGUSEL1_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUSEL1_SFR_CGUSEL1_SIZE 1
static inline uint32_t sysctrl_sfr_cgusel1_sfr_cgusel1_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgusel1_sfr_cgusel1_read(void) {
	uint32_t word = sysctrl_sfr_cgusel1_read();
	return sysctrl_sfr_cgusel1_sfr_cgusel1_extract(word);
}
static inline uint32_t sysctrl_sfr_cgusel1_sfr_cgusel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgusel1_sfr_cgusel1_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgusel1_read();
	uint32_t newword = sysctrl_sfr_cgusel1_sfr_cgusel1_replace(oldword, plain_value);
	sysctrl_sfr_cgusel1_write(newword);
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ0_ADDR (CSR_BASE + 0x13040L)
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ0_SIZE 1
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq0_read(void) {
	return csr_read_simple((CSR_BASE + 0x13040L));
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ0_FSFREQ0_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ0_FSFREQ0_SIZE 16
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq0_fsfreq0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq0_fsfreq0_read(void) {
	uint32_t word = sysctrl_sfr_cgufssr_fsfreq0_read();
	return sysctrl_sfr_cgufssr_fsfreq0_fsfreq0_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ1_ADDR (CSR_BASE + 0x13044L)
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ1_SIZE 1
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq1_read(void) {
	return csr_read_simple((CSR_BASE + 0x13044L));
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ1_FSFREQ1_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ1_FSFREQ1_SIZE 16
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq1_fsfreq1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq1_fsfreq1_read(void) {
	uint32_t word = sysctrl_sfr_cgufssr_fsfreq1_read();
	return sysctrl_sfr_cgufssr_fsfreq1_fsfreq1_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ2_ADDR (CSR_BASE + 0x13048L)
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ2_SIZE 1
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq2_read(void) {
	return csr_read_simple((CSR_BASE + 0x13048L));
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ2_FSFREQ2_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ2_FSFREQ2_SIZE 16
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq2_fsfreq2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq2_fsfreq2_read(void) {
	uint32_t word = sysctrl_sfr_cgufssr_fsfreq2_read();
	return sysctrl_sfr_cgufssr_fsfreq2_fsfreq2_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ3_ADDR (CSR_BASE + 0x1304cL)
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ3_SIZE 1
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1304cL));
}
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ3_FSFREQ3_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSSR_FSFREQ3_FSFREQ3_SIZE 16
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq3_fsfreq3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufssr_fsfreq3_fsfreq3_read(void) {
	uint32_t word = sysctrl_sfr_cgufssr_fsfreq3_read();
	return sysctrl_sfr_cgufssr_fsfreq3_fsfreq3_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSVLD_ADDR (CSR_BASE + 0x13050L)
#define CSR_SYSCTRL_SFR_CGUFSVLD_SIZE 1
static inline uint32_t sysctrl_sfr_cgufsvld_read(void) {
	return csr_read_simple((CSR_BASE + 0x13050L));
}
#define CSR_SYSCTRL_SFR_CGUFSVLD_SFR_CGUFSVLD_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSVLD_SFR_CGUFSVLD_SIZE 4
static inline uint32_t sysctrl_sfr_cgufsvld_sfr_cgufsvld_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufsvld_sfr_cgufsvld_read(void) {
	uint32_t word = sysctrl_sfr_cgufsvld_read();
	return sysctrl_sfr_cgufsvld_sfr_cgufsvld_extract(word);
}
#define CSR_SYSCTRL_SFR_CGUFSCR_ADDR (CSR_BASE + 0x13054L)
#define CSR_SYSCTRL_SFR_CGUFSCR_SIZE 1
static inline uint32_t sysctrl_sfr_cgufscr_read(void) {
	return csr_read_simple((CSR_BASE + 0x13054L));
}
static inline void sysctrl_sfr_cgufscr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13054L));
}
#define CSR_SYSCTRL_SFR_CGUFSCR_SFR_CGUFSCR_OFFSET 0
#define CSR_SYSCTRL_SFR_CGUFSCR_SFR_CGUFSCR_SIZE 16
static inline uint32_t sysctrl_sfr_cgufscr_sfr_cgufscr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_cgufscr_sfr_cgufscr_read(void) {
	uint32_t word = sysctrl_sfr_cgufscr_read();
	return sysctrl_sfr_cgufscr_sfr_cgufscr_extract(word);
}
static inline uint32_t sysctrl_sfr_cgufscr_sfr_cgufscr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_cgufscr_sfr_cgufscr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_cgufscr_read();
	uint32_t newword = sysctrl_sfr_cgufscr_sfr_cgufscr_replace(oldword, plain_value);
	sysctrl_sfr_cgufscr_write(newword);
}
#define CSR_SYSCTRL_SFR_ACLKGR_ADDR (CSR_BASE + 0x13060L)
#define CSR_SYSCTRL_SFR_ACLKGR_SIZE 1
static inline uint32_t sysctrl_sfr_aclkgr_read(void) {
	return csr_read_simple((CSR_BASE + 0x13060L));
}
static inline void sysctrl_sfr_aclkgr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13060L));
}
#define CSR_SYSCTRL_SFR_ACLKGR_SFR_ACLKGR_OFFSET 0
#define CSR_SYSCTRL_SFR_ACLKGR_SFR_ACLKGR_SIZE 8
static inline uint32_t sysctrl_sfr_aclkgr_sfr_aclkgr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_aclkgr_sfr_aclkgr_read(void) {
	uint32_t word = sysctrl_sfr_aclkgr_read();
	return sysctrl_sfr_aclkgr_sfr_aclkgr_extract(word);
}
static inline uint32_t sysctrl_sfr_aclkgr_sfr_aclkgr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_aclkgr_sfr_aclkgr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_aclkgr_read();
	uint32_t newword = sysctrl_sfr_aclkgr_sfr_aclkgr_replace(oldword, plain_value);
	sysctrl_sfr_aclkgr_write(newword);
}
#define CSR_SYSCTRL_SFR_HCLKGR_ADDR (CSR_BASE + 0x13064L)
#define CSR_SYSCTRL_SFR_HCLKGR_SIZE 1
static inline uint32_t sysctrl_sfr_hclkgr_read(void) {
	return csr_read_simple((CSR_BASE + 0x13064L));
}
static inline void sysctrl_sfr_hclkgr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13064L));
}
#define CSR_SYSCTRL_SFR_HCLKGR_SFR_HCLKGR_OFFSET 0
#define CSR_SYSCTRL_SFR_HCLKGR_SFR_HCLKGR_SIZE 8
static inline uint32_t sysctrl_sfr_hclkgr_sfr_hclkgr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_hclkgr_sfr_hclkgr_read(void) {
	uint32_t word = sysctrl_sfr_hclkgr_read();
	return sysctrl_sfr_hclkgr_sfr_hclkgr_extract(word);
}
static inline uint32_t sysctrl_sfr_hclkgr_sfr_hclkgr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_hclkgr_sfr_hclkgr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_hclkgr_read();
	uint32_t newword = sysctrl_sfr_hclkgr_sfr_hclkgr_replace(oldword, plain_value);
	sysctrl_sfr_hclkgr_write(newword);
}
#define CSR_SYSCTRL_SFR_ICLKGR_ADDR (CSR_BASE + 0x13068L)
#define CSR_SYSCTRL_SFR_ICLKGR_SIZE 1
static inline uint32_t sysctrl_sfr_iclkgr_read(void) {
	return csr_read_simple((CSR_BASE + 0x13068L));
}
static inline void sysctrl_sfr_iclkgr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13068L));
}
#define CSR_SYSCTRL_SFR_ICLKGR_SFR_ICLKGR_OFFSET 0
#define CSR_SYSCTRL_SFR_ICLKGR_SFR_ICLKGR_SIZE 8
static inline uint32_t sysctrl_sfr_iclkgr_sfr_iclkgr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_iclkgr_sfr_iclkgr_read(void) {
	uint32_t word = sysctrl_sfr_iclkgr_read();
	return sysctrl_sfr_iclkgr_sfr_iclkgr_extract(word);
}
static inline uint32_t sysctrl_sfr_iclkgr_sfr_iclkgr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_iclkgr_sfr_iclkgr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_iclkgr_read();
	uint32_t newword = sysctrl_sfr_iclkgr_sfr_iclkgr_replace(oldword, plain_value);
	sysctrl_sfr_iclkgr_write(newword);
}
#define CSR_SYSCTRL_SFR_PCLKGR_ADDR (CSR_BASE + 0x1306cL)
#define CSR_SYSCTRL_SFR_PCLKGR_SIZE 1
static inline uint32_t sysctrl_sfr_pclkgr_read(void) {
	return csr_read_simple((CSR_BASE + 0x1306cL));
}
static inline void sysctrl_sfr_pclkgr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1306cL));
}
#define CSR_SYSCTRL_SFR_PCLKGR_SFR_PCLKGR_OFFSET 0
#define CSR_SYSCTRL_SFR_PCLKGR_SFR_PCLKGR_SIZE 8
static inline uint32_t sysctrl_sfr_pclkgr_sfr_pclkgr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_pclkgr_sfr_pclkgr_read(void) {
	uint32_t word = sysctrl_sfr_pclkgr_read();
	return sysctrl_sfr_pclkgr_sfr_pclkgr_extract(word);
}
static inline uint32_t sysctrl_sfr_pclkgr_sfr_pclkgr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_pclkgr_sfr_pclkgr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_pclkgr_read();
	uint32_t newword = sysctrl_sfr_pclkgr_sfr_pclkgr_replace(oldword, plain_value);
	sysctrl_sfr_pclkgr_write(newword);
}
#define CSR_SYSCTRL_SFR_RCURST0_ADDR (CSR_BASE + 0x13080L)
#define CSR_SYSCTRL_SFR_RCURST0_SIZE 1
static inline uint32_t sysctrl_sfr_rcurst0_read(void) {
	return csr_read_simple((CSR_BASE + 0x13080L));
}
static inline void sysctrl_sfr_rcurst0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13080L));
}
#define CSR_SYSCTRL_SFR_RCURST0_SFR_RCURST0_OFFSET 0
#define CSR_SYSCTRL_SFR_RCURST0_SFR_RCURST0_SIZE 32
static inline uint32_t sysctrl_sfr_rcurst0_sfr_rcurst0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_rcurst0_sfr_rcurst0_read(void) {
	uint32_t word = sysctrl_sfr_rcurst0_read();
	return sysctrl_sfr_rcurst0_sfr_rcurst0_extract(word);
}
static inline uint32_t sysctrl_sfr_rcurst0_sfr_rcurst0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_rcurst0_sfr_rcurst0_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_rcurst0_read();
	uint32_t newword = sysctrl_sfr_rcurst0_sfr_rcurst0_replace(oldword, plain_value);
	sysctrl_sfr_rcurst0_write(newword);
}
#define CSR_SYSCTRL_SFR_RCURST1_ADDR (CSR_BASE + 0x13084L)
#define CSR_SYSCTRL_SFR_RCURST1_SIZE 1
static inline uint32_t sysctrl_sfr_rcurst1_read(void) {
	return csr_read_simple((CSR_BASE + 0x13084L));
}
static inline void sysctrl_sfr_rcurst1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13084L));
}
#define CSR_SYSCTRL_SFR_RCURST1_SFR_RCURST1_OFFSET 0
#define CSR_SYSCTRL_SFR_RCURST1_SFR_RCURST1_SIZE 32
static inline uint32_t sysctrl_sfr_rcurst1_sfr_rcurst1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_rcurst1_sfr_rcurst1_read(void) {
	uint32_t word = sysctrl_sfr_rcurst1_read();
	return sysctrl_sfr_rcurst1_sfr_rcurst1_extract(word);
}
static inline uint32_t sysctrl_sfr_rcurst1_sfr_rcurst1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_rcurst1_sfr_rcurst1_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_rcurst1_read();
	uint32_t newword = sysctrl_sfr_rcurst1_sfr_rcurst1_replace(oldword, plain_value);
	sysctrl_sfr_rcurst1_write(newword);
}
#define CSR_SYSCTRL_SFR_RCUSRCFR_ADDR (CSR_BASE + 0x13088L)
#define CSR_SYSCTRL_SFR_RCUSRCFR_SIZE 1
static inline uint32_t sysctrl_sfr_rcusrcfr_read(void) {
	return csr_read_simple((CSR_BASE + 0x13088L));
}
#define CSR_SYSCTRL_SFR_RCUSRCFR_SFR_RCUSRCFR_OFFSET 0
#define CSR_SYSCTRL_SFR_RCUSRCFR_SFR_RCUSRCFR_SIZE 16
static inline uint32_t sysctrl_sfr_rcusrcfr_sfr_rcusrcfr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_rcusrcfr_sfr_rcusrcfr_read(void) {
	uint32_t word = sysctrl_sfr_rcusrcfr_read();
	return sysctrl_sfr_rcusrcfr_sfr_rcusrcfr_extract(word);
}
#define CSR_SYSCTRL_SFR_IPCARIPFLOW_ADDR (CSR_BASE + 0x13090L)
#define CSR_SYSCTRL_SFR_IPCARIPFLOW_SIZE 1
static inline uint32_t sysctrl_sfr_ipcaripflow_read(void) {
	return csr_read_simple((CSR_BASE + 0x13090L));
}
static inline void sysctrl_sfr_ipcaripflow_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13090L));
}
#define CSR_SYSCTRL_SFR_IPCARIPFLOW_SFR_IPCARIPFLOW_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCARIPFLOW_SFR_IPCARIPFLOW_SIZE 32
static inline uint32_t sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_read(void) {
	uint32_t word = sysctrl_sfr_ipcaripflow_read();
	return sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcaripflow_read();
	uint32_t newword = sysctrl_sfr_ipcaripflow_sfr_ipcaripflow_replace(oldword, plain_value);
	sysctrl_sfr_ipcaripflow_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCEN_ADDR (CSR_BASE + 0x13094L)
#define CSR_SYSCTRL_SFR_IPCEN_SIZE 1
static inline uint32_t sysctrl_sfr_ipcen_read(void) {
	return csr_read_simple((CSR_BASE + 0x13094L));
}
static inline void sysctrl_sfr_ipcen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13094L));
}
#define CSR_SYSCTRL_SFR_IPCEN_SFR_IPCEN_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCEN_SFR_IPCEN_SIZE 16
static inline uint32_t sysctrl_sfr_ipcen_sfr_ipcen_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcen_sfr_ipcen_read(void) {
	uint32_t word = sysctrl_sfr_ipcen_read();
	return sysctrl_sfr_ipcen_sfr_ipcen_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcen_sfr_ipcen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcen_sfr_ipcen_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcen_read();
	uint32_t newword = sysctrl_sfr_ipcen_sfr_ipcen_replace(oldword, plain_value);
	sysctrl_sfr_ipcen_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCLPEN_ADDR (CSR_BASE + 0x13098L)
#define CSR_SYSCTRL_SFR_IPCLPEN_SIZE 1
static inline uint32_t sysctrl_sfr_ipclpen_read(void) {
	return csr_read_simple((CSR_BASE + 0x13098L));
}
static inline void sysctrl_sfr_ipclpen_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x13098L));
}
#define CSR_SYSCTRL_SFR_IPCLPEN_SFR_IPCLPEN_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCLPEN_SFR_IPCLPEN_SIZE 16
static inline uint32_t sysctrl_sfr_ipclpen_sfr_ipclpen_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipclpen_sfr_ipclpen_read(void) {
	uint32_t word = sysctrl_sfr_ipclpen_read();
	return sysctrl_sfr_ipclpen_sfr_ipclpen_extract(word);
}
static inline uint32_t sysctrl_sfr_ipclpen_sfr_ipclpen_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipclpen_sfr_ipclpen_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipclpen_read();
	uint32_t newword = sysctrl_sfr_ipclpen_sfr_ipclpen_replace(oldword, plain_value);
	sysctrl_sfr_ipclpen_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCOSC_ADDR (CSR_BASE + 0x1309cL)
#define CSR_SYSCTRL_SFR_IPCOSC_SIZE 1
static inline uint32_t sysctrl_sfr_ipcosc_read(void) {
	return csr_read_simple((CSR_BASE + 0x1309cL));
}
static inline void sysctrl_sfr_ipcosc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1309cL));
}
#define CSR_SYSCTRL_SFR_IPCOSC_SFR_IPCOSC_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCOSC_SFR_IPCOSC_SIZE 7
static inline uint32_t sysctrl_sfr_ipcosc_sfr_ipcosc_extract(uint32_t oldword) {
	uint32_t mask = 0x7f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcosc_sfr_ipcosc_read(void) {
	uint32_t word = sysctrl_sfr_ipcosc_read();
	return sysctrl_sfr_ipcosc_sfr_ipcosc_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcosc_sfr_ipcosc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcosc_sfr_ipcosc_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcosc_read();
	uint32_t newword = sysctrl_sfr_ipcosc_sfr_ipcosc_replace(oldword, plain_value);
	sysctrl_sfr_ipcosc_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCPLLMN_ADDR (CSR_BASE + 0x130a0L)
#define CSR_SYSCTRL_SFR_IPCPLLMN_SIZE 1
static inline uint32_t sysctrl_sfr_ipcpllmn_read(void) {
	return csr_read_simple((CSR_BASE + 0x130a0L));
}
static inline void sysctrl_sfr_ipcpllmn_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x130a0L));
}
#define CSR_SYSCTRL_SFR_IPCPLLMN_SFR_IPCPLLMN_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCPLLMN_SFR_IPCPLLMN_SIZE 17
static inline uint32_t sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_read(void) {
	uint32_t word = sysctrl_sfr_ipcpllmn_read();
	return sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcpllmn_read();
	uint32_t newword = sysctrl_sfr_ipcpllmn_sfr_ipcpllmn_replace(oldword, plain_value);
	sysctrl_sfr_ipcpllmn_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCPLLF_ADDR (CSR_BASE + 0x130a4L)
#define CSR_SYSCTRL_SFR_IPCPLLF_SIZE 1
static inline uint32_t sysctrl_sfr_ipcpllf_read(void) {
	return csr_read_simple((CSR_BASE + 0x130a4L));
}
static inline void sysctrl_sfr_ipcpllf_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x130a4L));
}
#define CSR_SYSCTRL_SFR_IPCPLLF_SFR_IPCPLLF_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCPLLF_SFR_IPCPLLF_SIZE 25
static inline uint32_t sysctrl_sfr_ipcpllf_sfr_ipcpllf_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcpllf_sfr_ipcpllf_read(void) {
	uint32_t word = sysctrl_sfr_ipcpllf_read();
	return sysctrl_sfr_ipcpllf_sfr_ipcpllf_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcpllf_sfr_ipcpllf_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcpllf_sfr_ipcpllf_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcpllf_read();
	uint32_t newword = sysctrl_sfr_ipcpllf_sfr_ipcpllf_replace(oldword, plain_value);
	sysctrl_sfr_ipcpllf_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCPLLQ_ADDR (CSR_BASE + 0x130a8L)
#define CSR_SYSCTRL_SFR_IPCPLLQ_SIZE 1
static inline uint32_t sysctrl_sfr_ipcpllq_read(void) {
	return csr_read_simple((CSR_BASE + 0x130a8L));
}
static inline void sysctrl_sfr_ipcpllq_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x130a8L));
}
#define CSR_SYSCTRL_SFR_IPCPLLQ_SFR_IPCPLLQ_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCPLLQ_SFR_IPCPLLQ_SIZE 15
static inline uint32_t sysctrl_sfr_ipcpllq_sfr_ipcpllq_extract(uint32_t oldword) {
	uint32_t mask = 0x7fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipcpllq_sfr_ipcpllq_read(void) {
	uint32_t word = sysctrl_sfr_ipcpllq_read();
	return sysctrl_sfr_ipcpllq_sfr_ipcpllq_extract(word);
}
static inline uint32_t sysctrl_sfr_ipcpllq_sfr_ipcpllq_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipcpllq_sfr_ipcpllq_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipcpllq_read();
	uint32_t newword = sysctrl_sfr_ipcpllq_sfr_ipcpllq_replace(oldword, plain_value);
	sysctrl_sfr_ipcpllq_write(newword);
}
#define CSR_SYSCTRL_SFR_IPCCR_ADDR (CSR_BASE + 0x130acL)
#define CSR_SYSCTRL_SFR_IPCCR_SIZE 1
static inline uint32_t sysctrl_sfr_ipccr_read(void) {
	return csr_read_simple((CSR_BASE + 0x130acL));
}
static inline void sysctrl_sfr_ipccr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x130acL));
}
#define CSR_SYSCTRL_SFR_IPCCR_SFR_IPCCR_OFFSET 0
#define CSR_SYSCTRL_SFR_IPCCR_SFR_IPCCR_SIZE 16
static inline uint32_t sysctrl_sfr_ipccr_sfr_ipccr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sysctrl_sfr_ipccr_sfr_ipccr_read(void) {
	uint32_t word = sysctrl_sfr_ipccr_read();
	return sysctrl_sfr_ipccr_sfr_ipccr_extract(word);
}
static inline uint32_t sysctrl_sfr_ipccr_sfr_ipccr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sysctrl_sfr_ipccr_sfr_ipccr_write(uint32_t plain_value) {
	uint32_t oldword = sysctrl_sfr_ipccr_read();
	uint32_t newword = sysctrl_sfr_ipccr_sfr_ipccr_replace(oldword, plain_value);
	sysctrl_sfr_ipccr_write(newword);
}

/* apb_thru */
#define CSR_APB_THRU_BASE (CSR_BASE + 0x100f5000L)

/* iox */
#define CSR_IOX_BASE (CSR_BASE + 0x10102000L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL0_ADDR (CSR_BASE + 0x10102000L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL0_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102000L));
}
static inline void iox_sfr_afsel_crafsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102000L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL0_CRAFSEL0_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL0_CRAFSEL0_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel0_crafsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel0_crafsel0_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel0_read();
	return iox_sfr_afsel_crafsel0_crafsel0_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel0_crafsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel0_crafsel0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel0_read();
	uint32_t newword = iox_sfr_afsel_crafsel0_crafsel0_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel0_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL1_ADDR (CSR_BASE + 0x10102004L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL1_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102004L));
}
static inline void iox_sfr_afsel_crafsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102004L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL1_CRAFSEL1_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL1_CRAFSEL1_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel1_crafsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel1_crafsel1_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel1_read();
	return iox_sfr_afsel_crafsel1_crafsel1_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel1_crafsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel1_crafsel1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel1_read();
	uint32_t newword = iox_sfr_afsel_crafsel1_crafsel1_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel1_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL2_ADDR (CSR_BASE + 0x10102008L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL2_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102008L));
}
static inline void iox_sfr_afsel_crafsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102008L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL2_CRAFSEL2_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL2_CRAFSEL2_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel2_crafsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel2_crafsel2_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel2_read();
	return iox_sfr_afsel_crafsel2_crafsel2_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel2_crafsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel2_crafsel2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel2_read();
	uint32_t newword = iox_sfr_afsel_crafsel2_crafsel2_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel2_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL3_ADDR (CSR_BASE + 0x1010200cL)
#define CSR_IOX_SFR_AFSEL_CRAFSEL3_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010200cL));
}
static inline void iox_sfr_afsel_crafsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010200cL));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL3_CRAFSEL3_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL3_CRAFSEL3_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel3_crafsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel3_crafsel3_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel3_read();
	return iox_sfr_afsel_crafsel3_crafsel3_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel3_crafsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel3_crafsel3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel3_read();
	uint32_t newword = iox_sfr_afsel_crafsel3_crafsel3_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel3_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL4_ADDR (CSR_BASE + 0x10102010L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL4_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel4_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102010L));
}
static inline void iox_sfr_afsel_crafsel4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102010L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL4_CRAFSEL4_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL4_CRAFSEL4_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel4_crafsel4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel4_crafsel4_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel4_read();
	return iox_sfr_afsel_crafsel4_crafsel4_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel4_crafsel4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel4_crafsel4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel4_read();
	uint32_t newword = iox_sfr_afsel_crafsel4_crafsel4_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel4_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL5_ADDR (CSR_BASE + 0x10102014L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL5_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel5_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102014L));
}
static inline void iox_sfr_afsel_crafsel5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102014L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL5_CRAFSEL5_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL5_CRAFSEL5_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel5_crafsel5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel5_crafsel5_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel5_read();
	return iox_sfr_afsel_crafsel5_crafsel5_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel5_crafsel5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel5_crafsel5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel5_read();
	uint32_t newword = iox_sfr_afsel_crafsel5_crafsel5_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel5_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL6_ADDR (CSR_BASE + 0x10102018L)
#define CSR_IOX_SFR_AFSEL_CRAFSEL6_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel6_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102018L));
}
static inline void iox_sfr_afsel_crafsel6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102018L));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL6_CRAFSEL6_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL6_CRAFSEL6_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel6_crafsel6_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel6_crafsel6_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel6_read();
	return iox_sfr_afsel_crafsel6_crafsel6_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel6_crafsel6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel6_crafsel6_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel6_read();
	uint32_t newword = iox_sfr_afsel_crafsel6_crafsel6_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel6_write(newword);
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL7_ADDR (CSR_BASE + 0x1010201cL)
#define CSR_IOX_SFR_AFSEL_CRAFSEL7_SIZE 1
static inline uint32_t iox_sfr_afsel_crafsel7_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010201cL));
}
static inline void iox_sfr_afsel_crafsel7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010201cL));
}
#define CSR_IOX_SFR_AFSEL_CRAFSEL7_CRAFSEL7_OFFSET 0
#define CSR_IOX_SFR_AFSEL_CRAFSEL7_CRAFSEL7_SIZE 16
static inline uint32_t iox_sfr_afsel_crafsel7_crafsel7_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_afsel_crafsel7_crafsel7_read(void) {
	uint32_t word = iox_sfr_afsel_crafsel7_read();
	return iox_sfr_afsel_crafsel7_crafsel7_extract(word);
}
static inline uint32_t iox_sfr_afsel_crafsel7_crafsel7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_afsel_crafsel7_crafsel7_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_afsel_crafsel7_read();
	uint32_t newword = iox_sfr_afsel_crafsel7_crafsel7_replace(oldword, plain_value);
	iox_sfr_afsel_crafsel7_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT0_ADDR (CSR_BASE + 0x10102100L)
#define CSR_IOX_SFR_INTCR_CRINT0_SIZE 1
static inline uint32_t iox_sfr_intcr_crint0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102100L));
}
static inline void iox_sfr_intcr_crint0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102100L));
}
#define CSR_IOX_SFR_INTCR_CRINT0_CRINT0_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT0_CRINT0_SIZE 10
static inline uint32_t iox_sfr_intcr_crint0_crint0_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint0_crint0_read(void) {
	uint32_t word = iox_sfr_intcr_crint0_read();
	return iox_sfr_intcr_crint0_crint0_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint0_crint0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint0_crint0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint0_read();
	uint32_t newword = iox_sfr_intcr_crint0_crint0_replace(oldword, plain_value);
	iox_sfr_intcr_crint0_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT1_ADDR (CSR_BASE + 0x10102104L)
#define CSR_IOX_SFR_INTCR_CRINT1_SIZE 1
static inline uint32_t iox_sfr_intcr_crint1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102104L));
}
static inline void iox_sfr_intcr_crint1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102104L));
}
#define CSR_IOX_SFR_INTCR_CRINT1_CRINT1_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT1_CRINT1_SIZE 10
static inline uint32_t iox_sfr_intcr_crint1_crint1_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint1_crint1_read(void) {
	uint32_t word = iox_sfr_intcr_crint1_read();
	return iox_sfr_intcr_crint1_crint1_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint1_crint1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint1_crint1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint1_read();
	uint32_t newword = iox_sfr_intcr_crint1_crint1_replace(oldword, plain_value);
	iox_sfr_intcr_crint1_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT2_ADDR (CSR_BASE + 0x10102108L)
#define CSR_IOX_SFR_INTCR_CRINT2_SIZE 1
static inline uint32_t iox_sfr_intcr_crint2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102108L));
}
static inline void iox_sfr_intcr_crint2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102108L));
}
#define CSR_IOX_SFR_INTCR_CRINT2_CRINT2_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT2_CRINT2_SIZE 10
static inline uint32_t iox_sfr_intcr_crint2_crint2_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint2_crint2_read(void) {
	uint32_t word = iox_sfr_intcr_crint2_read();
	return iox_sfr_intcr_crint2_crint2_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint2_crint2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint2_crint2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint2_read();
	uint32_t newword = iox_sfr_intcr_crint2_crint2_replace(oldword, plain_value);
	iox_sfr_intcr_crint2_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT3_ADDR (CSR_BASE + 0x1010210cL)
#define CSR_IOX_SFR_INTCR_CRINT3_SIZE 1
static inline uint32_t iox_sfr_intcr_crint3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010210cL));
}
static inline void iox_sfr_intcr_crint3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010210cL));
}
#define CSR_IOX_SFR_INTCR_CRINT3_CRINT3_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT3_CRINT3_SIZE 10
static inline uint32_t iox_sfr_intcr_crint3_crint3_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint3_crint3_read(void) {
	uint32_t word = iox_sfr_intcr_crint3_read();
	return iox_sfr_intcr_crint3_crint3_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint3_crint3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint3_crint3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint3_read();
	uint32_t newword = iox_sfr_intcr_crint3_crint3_replace(oldword, plain_value);
	iox_sfr_intcr_crint3_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT4_ADDR (CSR_BASE + 0x10102110L)
#define CSR_IOX_SFR_INTCR_CRINT4_SIZE 1
static inline uint32_t iox_sfr_intcr_crint4_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102110L));
}
static inline void iox_sfr_intcr_crint4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102110L));
}
#define CSR_IOX_SFR_INTCR_CRINT4_CRINT4_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT4_CRINT4_SIZE 10
static inline uint32_t iox_sfr_intcr_crint4_crint4_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint4_crint4_read(void) {
	uint32_t word = iox_sfr_intcr_crint4_read();
	return iox_sfr_intcr_crint4_crint4_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint4_crint4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint4_crint4_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint4_read();
	uint32_t newword = iox_sfr_intcr_crint4_crint4_replace(oldword, plain_value);
	iox_sfr_intcr_crint4_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT5_ADDR (CSR_BASE + 0x10102114L)
#define CSR_IOX_SFR_INTCR_CRINT5_SIZE 1
static inline uint32_t iox_sfr_intcr_crint5_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102114L));
}
static inline void iox_sfr_intcr_crint5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102114L));
}
#define CSR_IOX_SFR_INTCR_CRINT5_CRINT5_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT5_CRINT5_SIZE 10
static inline uint32_t iox_sfr_intcr_crint5_crint5_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint5_crint5_read(void) {
	uint32_t word = iox_sfr_intcr_crint5_read();
	return iox_sfr_intcr_crint5_crint5_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint5_crint5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint5_crint5_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint5_read();
	uint32_t newword = iox_sfr_intcr_crint5_crint5_replace(oldword, plain_value);
	iox_sfr_intcr_crint5_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT6_ADDR (CSR_BASE + 0x10102118L)
#define CSR_IOX_SFR_INTCR_CRINT6_SIZE 1
static inline uint32_t iox_sfr_intcr_crint6_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102118L));
}
static inline void iox_sfr_intcr_crint6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102118L));
}
#define CSR_IOX_SFR_INTCR_CRINT6_CRINT6_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT6_CRINT6_SIZE 10
static inline uint32_t iox_sfr_intcr_crint6_crint6_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint6_crint6_read(void) {
	uint32_t word = iox_sfr_intcr_crint6_read();
	return iox_sfr_intcr_crint6_crint6_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint6_crint6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint6_crint6_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint6_read();
	uint32_t newword = iox_sfr_intcr_crint6_crint6_replace(oldword, plain_value);
	iox_sfr_intcr_crint6_write(newword);
}
#define CSR_IOX_SFR_INTCR_CRINT7_ADDR (CSR_BASE + 0x1010211cL)
#define CSR_IOX_SFR_INTCR_CRINT7_SIZE 1
static inline uint32_t iox_sfr_intcr_crint7_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010211cL));
}
static inline void iox_sfr_intcr_crint7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010211cL));
}
#define CSR_IOX_SFR_INTCR_CRINT7_CRINT7_OFFSET 0
#define CSR_IOX_SFR_INTCR_CRINT7_CRINT7_SIZE 10
static inline uint32_t iox_sfr_intcr_crint7_crint7_extract(uint32_t oldword) {
	uint32_t mask = 0x3ff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intcr_crint7_crint7_read(void) {
	uint32_t word = iox_sfr_intcr_crint7_read();
	return iox_sfr_intcr_crint7_crint7_extract(word);
}
static inline uint32_t iox_sfr_intcr_crint7_crint7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_intcr_crint7_crint7_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_intcr_crint7_read();
	uint32_t newword = iox_sfr_intcr_crint7_crint7_replace(oldword, plain_value);
	iox_sfr_intcr_crint7_write(newword);
}
#define CSR_IOX_SFR_INTFR_ADDR (CSR_BASE + 0x10102120L)
#define CSR_IOX_SFR_INTFR_SIZE 1
static inline uint32_t iox_sfr_intfr_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102120L));
}
#define CSR_IOX_SFR_INTFR_FRINT_OFFSET 0
#define CSR_IOX_SFR_INTFR_FRINT_SIZE 8
static inline uint32_t iox_sfr_intfr_frint_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_intfr_frint_read(void) {
	uint32_t word = iox_sfr_intfr_read();
	return iox_sfr_intfr_frint_extract(word);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO0_ADDR (CSR_BASE + 0x10102130L)
#define CSR_IOX_SFR_GPIOOUT_CRGO0_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102130L));
}
static inline void iox_sfr_gpioout_crgo0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102130L));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO0_CRGO0_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO0_CRGO0_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo0_crgo0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo0_crgo0_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo0_read();
	return iox_sfr_gpioout_crgo0_crgo0_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo0_crgo0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo0_crgo0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo0_read();
	uint32_t newword = iox_sfr_gpioout_crgo0_crgo0_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo0_write(newword);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO1_ADDR (CSR_BASE + 0x10102134L)
#define CSR_IOX_SFR_GPIOOUT_CRGO1_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102134L));
}
static inline void iox_sfr_gpioout_crgo1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102134L));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO1_CRGO1_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO1_CRGO1_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo1_crgo1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo1_crgo1_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo1_read();
	return iox_sfr_gpioout_crgo1_crgo1_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo1_crgo1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo1_crgo1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo1_read();
	uint32_t newword = iox_sfr_gpioout_crgo1_crgo1_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo1_write(newword);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO2_ADDR (CSR_BASE + 0x10102138L)
#define CSR_IOX_SFR_GPIOOUT_CRGO2_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102138L));
}
static inline void iox_sfr_gpioout_crgo2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102138L));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO2_CRGO2_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO2_CRGO2_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo2_crgo2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo2_crgo2_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo2_read();
	return iox_sfr_gpioout_crgo2_crgo2_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo2_crgo2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo2_crgo2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo2_read();
	uint32_t newword = iox_sfr_gpioout_crgo2_crgo2_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo2_write(newword);
}
#define CSR_IOX_SFR_GPIOOUT_CRGO3_ADDR (CSR_BASE + 0x1010213cL)
#define CSR_IOX_SFR_GPIOOUT_CRGO3_SIZE 1
static inline uint32_t iox_sfr_gpioout_crgo3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010213cL));
}
static inline void iox_sfr_gpioout_crgo3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010213cL));
}
#define CSR_IOX_SFR_GPIOOUT_CRGO3_CRGO3_OFFSET 0
#define CSR_IOX_SFR_GPIOOUT_CRGO3_CRGO3_SIZE 16
static inline uint32_t iox_sfr_gpioout_crgo3_crgo3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioout_crgo3_crgo3_read(void) {
	uint32_t word = iox_sfr_gpioout_crgo3_read();
	return iox_sfr_gpioout_crgo3_crgo3_extract(word);
}
static inline uint32_t iox_sfr_gpioout_crgo3_crgo3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpioout_crgo3_crgo3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpioout_crgo3_read();
	uint32_t newword = iox_sfr_gpioout_crgo3_crgo3_replace(oldword, plain_value);
	iox_sfr_gpioout_crgo3_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE0_ADDR (CSR_BASE + 0x10102140L)
#define CSR_IOX_SFR_GPIOOE_CRGOE0_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102140L));
}
static inline void iox_sfr_gpiooe_crgoe0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102140L));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE0_CRGOE0_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE0_CRGOE0_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe0_crgoe0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe0_crgoe0_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe0_read();
	return iox_sfr_gpiooe_crgoe0_crgoe0_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe0_crgoe0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe0_crgoe0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe0_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe0_crgoe0_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe0_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE1_ADDR (CSR_BASE + 0x10102144L)
#define CSR_IOX_SFR_GPIOOE_CRGOE1_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102144L));
}
static inline void iox_sfr_gpiooe_crgoe1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102144L));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE1_CRGOE1_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE1_CRGOE1_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe1_crgoe1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe1_crgoe1_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe1_read();
	return iox_sfr_gpiooe_crgoe1_crgoe1_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe1_crgoe1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe1_crgoe1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe1_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe1_crgoe1_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe1_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE2_ADDR (CSR_BASE + 0x10102148L)
#define CSR_IOX_SFR_GPIOOE_CRGOE2_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102148L));
}
static inline void iox_sfr_gpiooe_crgoe2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102148L));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE2_CRGOE2_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE2_CRGOE2_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe2_crgoe2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe2_crgoe2_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe2_read();
	return iox_sfr_gpiooe_crgoe2_crgoe2_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe2_crgoe2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe2_crgoe2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe2_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe2_crgoe2_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe2_write(newword);
}
#define CSR_IOX_SFR_GPIOOE_CRGOE3_ADDR (CSR_BASE + 0x1010214cL)
#define CSR_IOX_SFR_GPIOOE_CRGOE3_SIZE 1
static inline uint32_t iox_sfr_gpiooe_crgoe3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010214cL));
}
static inline void iox_sfr_gpiooe_crgoe3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010214cL));
}
#define CSR_IOX_SFR_GPIOOE_CRGOE3_CRGOE3_OFFSET 0
#define CSR_IOX_SFR_GPIOOE_CRGOE3_CRGOE3_SIZE 16
static inline uint32_t iox_sfr_gpiooe_crgoe3_crgoe3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiooe_crgoe3_crgoe3_read(void) {
	uint32_t word = iox_sfr_gpiooe_crgoe3_read();
	return iox_sfr_gpiooe_crgoe3_crgoe3_extract(word);
}
static inline uint32_t iox_sfr_gpiooe_crgoe3_crgoe3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiooe_crgoe3_crgoe3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiooe_crgoe3_read();
	uint32_t newword = iox_sfr_gpiooe_crgoe3_crgoe3_replace(oldword, plain_value);
	iox_sfr_gpiooe_crgoe3_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU0_ADDR (CSR_BASE + 0x10102150L)
#define CSR_IOX_SFR_GPIOPU_CRGPU0_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102150L));
}
static inline void iox_sfr_gpiopu_crgpu0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102150L));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU0_CRGPU0_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU0_CRGPU0_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu0_crgpu0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu0_crgpu0_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu0_read();
	return iox_sfr_gpiopu_crgpu0_crgpu0_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu0_crgpu0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu0_crgpu0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu0_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu0_crgpu0_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu0_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU1_ADDR (CSR_BASE + 0x10102154L)
#define CSR_IOX_SFR_GPIOPU_CRGPU1_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102154L));
}
static inline void iox_sfr_gpiopu_crgpu1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102154L));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU1_CRGPU1_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU1_CRGPU1_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu1_crgpu1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu1_crgpu1_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu1_read();
	return iox_sfr_gpiopu_crgpu1_crgpu1_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu1_crgpu1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu1_crgpu1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu1_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu1_crgpu1_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu1_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU2_ADDR (CSR_BASE + 0x10102158L)
#define CSR_IOX_SFR_GPIOPU_CRGPU2_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102158L));
}
static inline void iox_sfr_gpiopu_crgpu2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102158L));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU2_CRGPU2_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU2_CRGPU2_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu2_crgpu2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu2_crgpu2_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu2_read();
	return iox_sfr_gpiopu_crgpu2_crgpu2_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu2_crgpu2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu2_crgpu2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu2_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu2_crgpu2_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu2_write(newword);
}
#define CSR_IOX_SFR_GPIOPU_CRGPU3_ADDR (CSR_BASE + 0x1010215cL)
#define CSR_IOX_SFR_GPIOPU_CRGPU3_SIZE 1
static inline uint32_t iox_sfr_gpiopu_crgpu3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010215cL));
}
static inline void iox_sfr_gpiopu_crgpu3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010215cL));
}
#define CSR_IOX_SFR_GPIOPU_CRGPU3_CRGPU3_OFFSET 0
#define CSR_IOX_SFR_GPIOPU_CRGPU3_CRGPU3_SIZE 16
static inline uint32_t iox_sfr_gpiopu_crgpu3_crgpu3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpiopu_crgpu3_crgpu3_read(void) {
	uint32_t word = iox_sfr_gpiopu_crgpu3_read();
	return iox_sfr_gpiopu_crgpu3_crgpu3_extract(word);
}
static inline uint32_t iox_sfr_gpiopu_crgpu3_crgpu3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_gpiopu_crgpu3_crgpu3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_gpiopu_crgpu3_read();
	uint32_t newword = iox_sfr_gpiopu_crgpu3_crgpu3_replace(oldword, plain_value);
	iox_sfr_gpiopu_crgpu3_write(newword);
}
#define CSR_IOX_SFR_GPIOIN_SRGI0_ADDR (CSR_BASE + 0x10102160L)
#define CSR_IOX_SFR_GPIOIN_SRGI0_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102160L));
}
#define CSR_IOX_SFR_GPIOIN_SRGI0_SRGI0_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI0_SRGI0_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi0_srgi0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi0_srgi0_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi0_read();
	return iox_sfr_gpioin_srgi0_srgi0_extract(word);
}
#define CSR_IOX_SFR_GPIOIN_SRGI1_ADDR (CSR_BASE + 0x10102164L)
#define CSR_IOX_SFR_GPIOIN_SRGI1_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102164L));
}
#define CSR_IOX_SFR_GPIOIN_SRGI1_SRGI1_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI1_SRGI1_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi1_srgi1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi1_srgi1_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi1_read();
	return iox_sfr_gpioin_srgi1_srgi1_extract(word);
}
#define CSR_IOX_SFR_GPIOIN_SRGI2_ADDR (CSR_BASE + 0x10102168L)
#define CSR_IOX_SFR_GPIOIN_SRGI2_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102168L));
}
#define CSR_IOX_SFR_GPIOIN_SRGI2_SRGI2_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI2_SRGI2_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi2_srgi2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi2_srgi2_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi2_read();
	return iox_sfr_gpioin_srgi2_srgi2_extract(word);
}
#define CSR_IOX_SFR_GPIOIN_SRGI3_ADDR (CSR_BASE + 0x1010216cL)
#define CSR_IOX_SFR_GPIOIN_SRGI3_SIZE 1
static inline uint32_t iox_sfr_gpioin_srgi3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010216cL));
}
#define CSR_IOX_SFR_GPIOIN_SRGI3_SRGI3_OFFSET 0
#define CSR_IOX_SFR_GPIOIN_SRGI3_SRGI3_SIZE 16
static inline uint32_t iox_sfr_gpioin_srgi3_srgi3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_gpioin_srgi3_srgi3_read(void) {
	uint32_t word = iox_sfr_gpioin_srgi3_read();
	return iox_sfr_gpioin_srgi3_srgi3_extract(word);
}
#define CSR_IOX_SFR_PIOSEL_ADDR (CSR_BASE + 0x10102200L)
#define CSR_IOX_SFR_PIOSEL_SIZE 1
static inline uint32_t iox_sfr_piosel_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102200L));
}
static inline void iox_sfr_piosel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102200L));
}
#define CSR_IOX_SFR_PIOSEL_PIOSEL_OFFSET 0
#define CSR_IOX_SFR_PIOSEL_PIOSEL_SIZE 32
static inline uint32_t iox_sfr_piosel_piosel_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_piosel_piosel_read(void) {
	uint32_t word = iox_sfr_piosel_read();
	return iox_sfr_piosel_piosel_extract(word);
}
static inline uint32_t iox_sfr_piosel_piosel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_piosel_piosel_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_piosel_read();
	uint32_t newword = iox_sfr_piosel_piosel_replace(oldword, plain_value);
	iox_sfr_piosel_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0_ADDR (CSR_BASE + 0x10102230L)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102230L));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102230L));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel0_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel0_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel0_cr_cfg_schmsel0_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel0_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1_ADDR (CSR_BASE + 0x10102234L)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102234L));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102234L));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel1_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel1_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel1_cr_cfg_schmsel1_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel1_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2_ADDR (CSR_BASE + 0x10102238L)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102238L));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102238L));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel2_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel2_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel2_cr_cfg_schmsel2_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel2_write(newword);
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3_ADDR (CSR_BASE + 0x1010223cL)
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3_SIZE 1
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010223cL));
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010223cL));
}
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3_OFFSET 0
#define CSR_IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3_SIZE 16
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_read(void) {
	uint32_t word = iox_sfr_cfg_schm_cr_cfg_schmsel3_read();
	return iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_extract(word);
}
static inline uint32_t iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_schm_cr_cfg_schmsel3_read();
	uint32_t newword = iox_sfr_cfg_schm_cr_cfg_schmsel3_cr_cfg_schmsel3_replace(oldword, plain_value);
	iox_sfr_cfg_schm_cr_cfg_schmsel3_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_ADDR (CSR_BASE + 0x10102240L)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102240L));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102240L));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow0_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow0_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow0_cr_cfg_slewslow0_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow0_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_ADDR (CSR_BASE + 0x10102244L)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102244L));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102244L));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow1_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow1_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow1_cr_cfg_slewslow1_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow1_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_ADDR (CSR_BASE + 0x10102248L)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102248L));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102248L));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow2_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow2_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow2_cr_cfg_slewslow2_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow2_write(newword);
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_ADDR (CSR_BASE + 0x1010224cL)
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_SIZE 1
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010224cL));
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010224cL));
}
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3_OFFSET 0
#define CSR_IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3_SIZE 16
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_read(void) {
	uint32_t word = iox_sfr_cfg_slew_cr_cfg_slewslow3_read();
	return iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_extract(word);
}
static inline uint32_t iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_slew_cr_cfg_slewslow3_read();
	uint32_t newword = iox_sfr_cfg_slew_cr_cfg_slewslow3_cr_cfg_slewslow3_replace(oldword, plain_value);
	iox_sfr_cfg_slew_cr_cfg_slewslow3_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_ADDR (CSR_BASE + 0x10102250L)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel0_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102250L));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102250L));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel0_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel0_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel0_cr_cfg_drvsel0_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel0_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_ADDR (CSR_BASE + 0x10102254L)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102254L));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102254L));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel1_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel1_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel1_cr_cfg_drvsel1_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel1_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_ADDR (CSR_BASE + 0x10102258L)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel2_read(void) {
	return csr_read_simple((CSR_BASE + 0x10102258L));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10102258L));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel2_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel2_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel2_cr_cfg_drvsel2_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel2_write(newword);
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_ADDR (CSR_BASE + 0x1010225cL)
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_SIZE 1
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel3_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010225cL));
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010225cL));
}
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3_OFFSET 0
#define CSR_IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3_SIZE 32
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_read(void) {
	uint32_t word = iox_sfr_cfg_drvsel_cr_cfg_drvsel3_read();
	return iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_extract(word);
}
static inline uint32_t iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_write(uint32_t plain_value) {
	uint32_t oldword = iox_sfr_cfg_drvsel_cr_cfg_drvsel3_read();
	uint32_t newword = iox_sfr_cfg_drvsel_cr_cfg_drvsel3_cr_cfg_drvsel3_replace(oldword, plain_value);
	iox_sfr_cfg_drvsel_cr_cfg_drvsel3_write(newword);
}

/* pwm */
#define CSR_PWM_BASE (CSR_BASE + 0x100f3000L)

/* sddc */
#define CSR_SDDC_BASE (CSR_BASE + 0x100f4000L)
#define CSR_SDDC_SFR_IO_ADDR (CSR_BASE + 0x100f4000L)
#define CSR_SDDC_SFR_IO_SIZE 1
static inline uint32_t sddc_sfr_io_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4000L));
}
static inline void sddc_sfr_io_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4000L));
}
#define CSR_SDDC_SFR_IO_SFR_IO_OFFSET 0
#define CSR_SDDC_SFR_IO_SFR_IO_SIZE 2
static inline uint32_t sddc_sfr_io_sfr_io_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_sfr_io_sfr_io_read(void) {
	uint32_t word = sddc_sfr_io_read();
	return sddc_sfr_io_sfr_io_extract(word);
}
static inline uint32_t sddc_sfr_io_sfr_io_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_sfr_io_sfr_io_write(uint32_t plain_value) {
	uint32_t oldword = sddc_sfr_io_read();
	uint32_t newword = sddc_sfr_io_sfr_io_replace(oldword, plain_value);
	sddc_sfr_io_write(newword);
}
#define CSR_SDDC_SFR_AR_ADDR (CSR_BASE + 0x100f4004L)
#define CSR_SDDC_SFR_AR_SIZE 1
static inline uint32_t sddc_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4004L));
}
static inline void sddc_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4004L));
}
#define CSR_SDDC_SFR_AR_SFR_AR_OFFSET 0
#define CSR_SDDC_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t sddc_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_sfr_ar_sfr_ar_read(void) {
	uint32_t word = sddc_sfr_ar_read();
	return sddc_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t sddc_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = sddc_sfr_ar_read();
	uint32_t newword = sddc_sfr_ar_sfr_ar_replace(oldword, plain_value);
	sddc_sfr_ar_write(newword);
}
#define CSR_SDDC_CR_OCR_ADDR (CSR_BASE + 0x100f4010L)
#define CSR_SDDC_CR_OCR_SIZE 1
static inline uint32_t sddc_cr_ocr_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4010L));
}
static inline void sddc_cr_ocr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4010L));
}
#define CSR_SDDC_CR_OCR_CR_OCR_OFFSET 0
#define CSR_SDDC_CR_OCR_CR_OCR_SIZE 24
static inline uint32_t sddc_cr_ocr_cr_ocr_extract(uint32_t oldword) {
	uint32_t mask = 0xffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_ocr_cr_ocr_read(void) {
	uint32_t word = sddc_cr_ocr_read();
	return sddc_cr_ocr_cr_ocr_extract(word);
}
static inline uint32_t sddc_cr_ocr_cr_ocr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_ocr_cr_ocr_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_ocr_read();
	uint32_t newword = sddc_cr_ocr_cr_ocr_replace(oldword, plain_value);
	sddc_cr_ocr_write(newword);
}
#define CSR_SDDC_CR_RDFFTHRES_ADDR (CSR_BASE + 0x100f4014L)
#define CSR_SDDC_CR_RDFFTHRES_SIZE 1
static inline uint32_t sddc_cr_rdffthres_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4014L));
}
static inline void sddc_cr_rdffthres_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4014L));
}
#define CSR_SDDC_CR_RDFFTHRES_CR_RDFFTHRES_OFFSET 0
#define CSR_SDDC_CR_RDFFTHRES_CR_RDFFTHRES_SIZE 8
static inline uint32_t sddc_cr_rdffthres_cr_rdffthres_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_rdffthres_cr_rdffthres_read(void) {
	uint32_t word = sddc_cr_rdffthres_read();
	return sddc_cr_rdffthres_cr_rdffthres_extract(word);
}
static inline uint32_t sddc_cr_rdffthres_cr_rdffthres_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_rdffthres_cr_rdffthres_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_rdffthres_read();
	uint32_t newword = sddc_cr_rdffthres_cr_rdffthres_replace(oldword, plain_value);
	sddc_cr_rdffthres_write(newword);
}
#define CSR_SDDC_CR_REV_ADDR (CSR_BASE + 0x100f4018L)
#define CSR_SDDC_CR_REV_SIZE 1
static inline uint32_t sddc_cr_rev_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4018L));
}
static inline void sddc_cr_rev_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4018L));
}
#define CSR_SDDC_CR_REV_CFG_REG_SD_SPEC_REVISION_OFFSET 0
#define CSR_SDDC_CR_REV_CFG_REG_SD_SPEC_REVISION_SIZE 8
static inline uint32_t sddc_cr_rev_cfg_reg_sd_spec_revision_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_rev_cfg_reg_sd_spec_revision_read(void) {
	uint32_t word = sddc_cr_rev_read();
	return sddc_cr_rev_cfg_reg_sd_spec_revision_extract(word);
}
static inline uint32_t sddc_cr_rev_cfg_reg_sd_spec_revision_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_rev_cfg_reg_sd_spec_revision_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_rev_read();
	uint32_t newword = sddc_cr_rev_cfg_reg_sd_spec_revision_replace(oldword, plain_value);
	sddc_cr_rev_write(newword);
}
#define CSR_SDDC_CR_REV_CFG_REG_CCCR_SDIO_REVISION_OFFSET 8
#define CSR_SDDC_CR_REV_CFG_REG_CCCR_SDIO_REVISION_SIZE 8
static inline uint32_t sddc_cr_rev_cfg_reg_cccr_sdio_revision_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t sddc_cr_rev_cfg_reg_cccr_sdio_revision_read(void) {
	uint32_t word = sddc_cr_rev_read();
	return sddc_cr_rev_cfg_reg_cccr_sdio_revision_extract(word);
}
static inline uint32_t sddc_cr_rev_cfg_reg_cccr_sdio_revision_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void sddc_cr_rev_cfg_reg_cccr_sdio_revision_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_rev_read();
	uint32_t newword = sddc_cr_rev_cfg_reg_cccr_sdio_revision_replace(oldword, plain_value);
	sddc_cr_rev_write(newword);
}
#define CSR_SDDC_CR_BACSA_ADDR (CSR_BASE + 0x100f401cL)
#define CSR_SDDC_CR_BACSA_SIZE 1
static inline uint32_t sddc_cr_bacsa_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f401cL));
}
static inline void sddc_cr_bacsa_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f401cL));
}
#define CSR_SDDC_CR_BACSA_CFG_BASE_ADDR_CSA_OFFSET 0
#define CSR_SDDC_CR_BACSA_CFG_BASE_ADDR_CSA_SIZE 18
static inline uint32_t sddc_cr_bacsa_cfg_base_addr_csa_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_bacsa_cfg_base_addr_csa_read(void) {
	uint32_t word = sddc_cr_bacsa_read();
	return sddc_cr_bacsa_cfg_base_addr_csa_extract(word);
}
static inline uint32_t sddc_cr_bacsa_cfg_base_addr_csa_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_bacsa_cfg_base_addr_csa_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_bacsa_read();
	uint32_t newword = sddc_cr_bacsa_cfg_base_addr_csa_replace(oldword, plain_value);
	sddc_cr_bacsa_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_ADDR (CSR_BASE + 0x100f4020L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4020L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4020L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func0_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func0_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func0_cfg_base_addr_io_func0_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func0_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_ADDR (CSR_BASE + 0x100f4024L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4024L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4024L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func1_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func1_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func1_cfg_base_addr_io_func1_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func1_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_ADDR (CSR_BASE + 0x100f4028L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4028L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4028L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func2_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func2_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func2_cfg_base_addr_io_func2_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func2_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_ADDR (CSR_BASE + 0x100f402cL)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f402cL));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f402cL));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func3_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func3_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func3_cfg_base_addr_io_func3_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func3_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_ADDR (CSR_BASE + 0x100f4030L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4030L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4030L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func4_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func4_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func4_cfg_base_addr_io_func4_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func4_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_ADDR (CSR_BASE + 0x100f4034L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4034L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4034L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func5_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func5_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func5_cfg_base_addr_io_func5_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func5_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_ADDR (CSR_BASE + 0x100f4038L)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4038L));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4038L));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func6_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func6_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func6_cfg_base_addr_io_func6_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func6_write(newword);
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_ADDR (CSR_BASE + 0x100f403cL)
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_SIZE 1
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func7_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f403cL));
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f403cL));
}
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7_OFFSET 0
#define CSR_SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7_SIZE 18
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_read(void) {
	uint32_t word = sddc_cr_baiofn_cfg_base_addr_io_func7_read();
	return sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_extract(word);
}
static inline uint32_t sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_baiofn_cfg_base_addr_io_func7_read();
	uint32_t newword = sddc_cr_baiofn_cfg_base_addr_io_func7_cfg_base_addr_io_func7_replace(oldword, plain_value);
	sddc_cr_baiofn_cfg_base_addr_io_func7_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_ADDR (CSR_BASE + 0x100f4040L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4040L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4040L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_cfg_reg_func_cis_ptr0_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr0_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_ADDR (CSR_BASE + 0x100f4044L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4044L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4044L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_cfg_reg_func_cis_ptr1_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr1_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_ADDR (CSR_BASE + 0x100f4048L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4048L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4048L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_cfg_reg_func_cis_ptr2_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr2_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_ADDR (CSR_BASE + 0x100f404cL)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f404cL));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f404cL));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_cfg_reg_func_cis_ptr3_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr3_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_ADDR (CSR_BASE + 0x100f4050L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4050L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4050L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_cfg_reg_func_cis_ptr4_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr4_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_ADDR (CSR_BASE + 0x100f4054L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4054L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4054L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_cfg_reg_func_cis_ptr5_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr5_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_ADDR (CSR_BASE + 0x100f4058L)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4058L));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4058L));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_cfg_reg_func_cis_ptr6_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr6_write(newword);
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_ADDR (CSR_BASE + 0x100f405cL)
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_SIZE 1
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f405cL));
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f405cL));
}
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7_OFFSET 0
#define CSR_SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7_SIZE 17
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_extract(uint32_t oldword) {
	uint32_t mask = 0x1ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_read(void) {
	uint32_t word = sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_read();
	return sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_extract(word);
}
static inline uint32_t sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_read();
	uint32_t newword = sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_cfg_reg_func_cis_ptr7_replace(oldword, plain_value);
	sddc_cr_fncisptr_cfg_reg_func_cis_ptr7_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_ADDR (CSR_BASE + 0x100f4060L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4060L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4060L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_cfg_reg_func_ext_std_code0_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code0_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_ADDR (CSR_BASE + 0x100f4064L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4064L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4064L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_cfg_reg_func_ext_std_code1_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code1_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_ADDR (CSR_BASE + 0x100f4068L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4068L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4068L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_cfg_reg_func_ext_std_code2_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code2_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_ADDR (CSR_BASE + 0x100f406cL)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f406cL));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f406cL));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_cfg_reg_func_ext_std_code3_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code3_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_ADDR (CSR_BASE + 0x100f4070L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4070L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4070L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_cfg_reg_func_ext_std_code4_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code4_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_ADDR (CSR_BASE + 0x100f4074L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4074L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4074L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_cfg_reg_func_ext_std_code5_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code5_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_ADDR (CSR_BASE + 0x100f4078L)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4078L));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4078L));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_cfg_reg_func_ext_std_code6_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code6_write(newword);
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_ADDR (CSR_BASE + 0x100f407cL)
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_SIZE 1
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f407cL));
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f407cL));
}
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7_OFFSET 0
#define CSR_SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7_SIZE 8
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_read(void) {
	uint32_t word = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_read();
	return sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_extract(word);
}
static inline uint32_t sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_read();
	uint32_t newword = sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_cfg_reg_func_ext_std_code7_replace(oldword, plain_value);
	sddc_cr_fnextstdcode_cfg_reg_func_ext_std_code7_write(newword);
}
#define CSR_SDDC_CR_WRITE_PROTECT_ADDR (CSR_BASE + 0x100f4080L)
#define CSR_SDDC_CR_WRITE_PROTECT_SIZE 1
static inline uint32_t sddc_cr_write_protect_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4080L));
}
static inline void sddc_cr_write_protect_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4080L));
}
#define CSR_SDDC_CR_WRITE_PROTECT_CR_WRITE_PROTECT_OFFSET 0
#define CSR_SDDC_CR_WRITE_PROTECT_CR_WRITE_PROTECT_SIZE 1
static inline uint32_t sddc_cr_write_protect_cr_write_protect_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_write_protect_cr_write_protect_read(void) {
	uint32_t word = sddc_cr_write_protect_read();
	return sddc_cr_write_protect_cr_write_protect_extract(word);
}
static inline uint32_t sddc_cr_write_protect_cr_write_protect_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_write_protect_cr_write_protect_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_write_protect_read();
	uint32_t newword = sddc_cr_write_protect_cr_write_protect_replace(oldword, plain_value);
	sddc_cr_write_protect_write(newword);
}
#define CSR_SDDC_CR_REG_DSR_ADDR (CSR_BASE + 0x100f4084L)
#define CSR_SDDC_CR_REG_DSR_SIZE 1
static inline uint32_t sddc_cr_reg_dsr_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4084L));
}
static inline void sddc_cr_reg_dsr_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4084L));
}
#define CSR_SDDC_CR_REG_DSR_CR_REG_DSR_OFFSET 0
#define CSR_SDDC_CR_REG_DSR_CR_REG_DSR_SIZE 16
static inline uint32_t sddc_cr_reg_dsr_cr_reg_dsr_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_dsr_cr_reg_dsr_read(void) {
	uint32_t word = sddc_cr_reg_dsr_read();
	return sddc_cr_reg_dsr_cr_reg_dsr_extract(word);
}
static inline uint32_t sddc_cr_reg_dsr_cr_reg_dsr_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_dsr_cr_reg_dsr_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_dsr_read();
	uint32_t newword = sddc_cr_reg_dsr_cr_reg_dsr_replace(oldword, plain_value);
	sddc_cr_reg_dsr_write(newword);
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID0_ADDR (CSR_BASE + 0x100f4088L)
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID0_SIZE 1
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4088L));
}
static inline void sddc_cr_reg_cid_cfg_reg_cid0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4088L));
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0_OFFSET 0
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0_SIZE 32
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_read(void) {
	uint32_t word = sddc_cr_reg_cid_cfg_reg_cid0_read();
	return sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_extract(word);
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_cid_cfg_reg_cid0_read();
	uint32_t newword = sddc_cr_reg_cid_cfg_reg_cid0_cfg_reg_cid0_replace(oldword, plain_value);
	sddc_cr_reg_cid_cfg_reg_cid0_write(newword);
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID1_ADDR (CSR_BASE + 0x100f408cL)
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID1_SIZE 1
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f408cL));
}
static inline void sddc_cr_reg_cid_cfg_reg_cid1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f408cL));
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1_OFFSET 0
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1_SIZE 32
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_read(void) {
	uint32_t word = sddc_cr_reg_cid_cfg_reg_cid1_read();
	return sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_extract(word);
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_cid_cfg_reg_cid1_read();
	uint32_t newword = sddc_cr_reg_cid_cfg_reg_cid1_cfg_reg_cid1_replace(oldword, plain_value);
	sddc_cr_reg_cid_cfg_reg_cid1_write(newword);
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID2_ADDR (CSR_BASE + 0x100f4090L)
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID2_SIZE 1
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4090L));
}
static inline void sddc_cr_reg_cid_cfg_reg_cid2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4090L));
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2_OFFSET 0
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2_SIZE 32
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_read(void) {
	uint32_t word = sddc_cr_reg_cid_cfg_reg_cid2_read();
	return sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_extract(word);
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_cid_cfg_reg_cid2_read();
	uint32_t newword = sddc_cr_reg_cid_cfg_reg_cid2_cfg_reg_cid2_replace(oldword, plain_value);
	sddc_cr_reg_cid_cfg_reg_cid2_write(newword);
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID3_ADDR (CSR_BASE + 0x100f4094L)
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID3_SIZE 1
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4094L));
}
static inline void sddc_cr_reg_cid_cfg_reg_cid3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4094L));
}
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3_OFFSET 0
#define CSR_SDDC_CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3_SIZE 32
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_read(void) {
	uint32_t word = sddc_cr_reg_cid_cfg_reg_cid3_read();
	return sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_extract(word);
}
static inline uint32_t sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_cid_cfg_reg_cid3_read();
	uint32_t newword = sddc_cr_reg_cid_cfg_reg_cid3_cfg_reg_cid3_replace(oldword, plain_value);
	sddc_cr_reg_cid_cfg_reg_cid3_write(newword);
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD0_ADDR (CSR_BASE + 0x100f4098L)
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD0_SIZE 1
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4098L));
}
static inline void sddc_cr_reg_csd_cfg_reg_csd0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4098L));
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0_OFFSET 0
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0_SIZE 32
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_read(void) {
	uint32_t word = sddc_cr_reg_csd_cfg_reg_csd0_read();
	return sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_extract(word);
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_csd_cfg_reg_csd0_read();
	uint32_t newword = sddc_cr_reg_csd_cfg_reg_csd0_cfg_reg_csd0_replace(oldword, plain_value);
	sddc_cr_reg_csd_cfg_reg_csd0_write(newword);
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD1_ADDR (CSR_BASE + 0x100f409cL)
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD1_SIZE 1
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f409cL));
}
static inline void sddc_cr_reg_csd_cfg_reg_csd1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f409cL));
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1_OFFSET 0
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1_SIZE 32
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_read(void) {
	uint32_t word = sddc_cr_reg_csd_cfg_reg_csd1_read();
	return sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_extract(word);
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_csd_cfg_reg_csd1_read();
	uint32_t newword = sddc_cr_reg_csd_cfg_reg_csd1_cfg_reg_csd1_replace(oldword, plain_value);
	sddc_cr_reg_csd_cfg_reg_csd1_write(newword);
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD2_ADDR (CSR_BASE + 0x100f40a0L)
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD2_SIZE 1
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40a0L));
}
static inline void sddc_cr_reg_csd_cfg_reg_csd2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40a0L));
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2_OFFSET 0
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2_SIZE 32
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_read(void) {
	uint32_t word = sddc_cr_reg_csd_cfg_reg_csd2_read();
	return sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_extract(word);
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_csd_cfg_reg_csd2_read();
	uint32_t newword = sddc_cr_reg_csd_cfg_reg_csd2_cfg_reg_csd2_replace(oldword, plain_value);
	sddc_cr_reg_csd_cfg_reg_csd2_write(newword);
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD3_ADDR (CSR_BASE + 0x100f40a4L)
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD3_SIZE 1
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40a4L));
}
static inline void sddc_cr_reg_csd_cfg_reg_csd3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40a4L));
}
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3_OFFSET 0
#define CSR_SDDC_CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3_SIZE 32
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_read(void) {
	uint32_t word = sddc_cr_reg_csd_cfg_reg_csd3_read();
	return sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_extract(word);
}
static inline uint32_t sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_csd_cfg_reg_csd3_read();
	uint32_t newword = sddc_cr_reg_csd_cfg_reg_csd3_cfg_reg_csd3_replace(oldword, plain_value);
	sddc_cr_reg_csd_cfg_reg_csd3_write(newword);
}
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR0_ADDR (CSR_BASE + 0x100f40a8L)
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR0_SIZE 1
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40a8L));
}
static inline void sddc_cr_reg_scr_cfg_reg_scr0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40a8L));
}
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0_OFFSET 0
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0_SIZE 32
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_read(void) {
	uint32_t word = sddc_cr_reg_scr_cfg_reg_scr0_read();
	return sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_extract(word);
}
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_scr_cfg_reg_scr0_read();
	uint32_t newword = sddc_cr_reg_scr_cfg_reg_scr0_cfg_reg_scr0_replace(oldword, plain_value);
	sddc_cr_reg_scr_cfg_reg_scr0_write(newword);
}
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR1_ADDR (CSR_BASE + 0x100f40acL)
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR1_SIZE 1
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40acL));
}
static inline void sddc_cr_reg_scr_cfg_reg_scr1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40acL));
}
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1_OFFSET 0
#define CSR_SDDC_CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1_SIZE 32
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_read(void) {
	uint32_t word = sddc_cr_reg_scr_cfg_reg_scr1_read();
	return sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_extract(word);
}
static inline uint32_t sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_scr_cfg_reg_scr1_read();
	uint32_t newword = sddc_cr_reg_scr_cfg_reg_scr1_cfg_reg_scr1_replace(oldword, plain_value);
	sddc_cr_reg_scr_cfg_reg_scr1_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_ADDR (CSR_BASE + 0x100f40b0L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40b0L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40b0L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status0_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status0_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status0_cfg_reg_sd_status0_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status0_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_ADDR (CSR_BASE + 0x100f40b4L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40b4L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40b4L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status1_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status1_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status1_cfg_reg_sd_status1_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status1_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_ADDR (CSR_BASE + 0x100f40b8L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40b8L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40b8L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status2_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status2_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status2_cfg_reg_sd_status2_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status2_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_ADDR (CSR_BASE + 0x100f40bcL)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40bcL));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40bcL));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status3_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status3_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status3_cfg_reg_sd_status3_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status3_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_ADDR (CSR_BASE + 0x100f40c0L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40c0L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40c0L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status4_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status4_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status4_cfg_reg_sd_status4_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status4_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_ADDR (CSR_BASE + 0x100f40c4L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40c4L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40c4L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status5_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status5_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status5_cfg_reg_sd_status5_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status5_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_ADDR (CSR_BASE + 0x100f40c8L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40c8L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40c8L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status6_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status6_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status6_cfg_reg_sd_status6_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status6_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_ADDR (CSR_BASE + 0x100f40ccL)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status7_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40ccL));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40ccL));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status7_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status7_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status7_cfg_reg_sd_status7_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status7_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_ADDR (CSR_BASE + 0x100f40d0L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status8_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40d0L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40d0L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status8_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status8_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status8_cfg_reg_sd_status8_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status8_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_ADDR (CSR_BASE + 0x100f40d4L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status9_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40d4L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40d4L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status9_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status9_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status9_cfg_reg_sd_status9_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status9_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_ADDR (CSR_BASE + 0x100f40d8L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status10_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40d8L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40d8L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status10_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status10_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status10_cfg_reg_sd_status10_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status10_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_ADDR (CSR_BASE + 0x100f40dcL)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status11_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40dcL));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40dcL));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status11_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status11_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status11_cfg_reg_sd_status11_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status11_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_ADDR (CSR_BASE + 0x100f40e0L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status12_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40e0L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status12_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40e0L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status12_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status12_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status12_cfg_reg_sd_status12_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status12_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_ADDR (CSR_BASE + 0x100f40e4L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status13_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40e4L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status13_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40e4L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status13_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status13_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status13_cfg_reg_sd_status13_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status13_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_ADDR (CSR_BASE + 0x100f40e8L)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status14_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40e8L));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status14_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40e8L));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status14_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status14_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status14_cfg_reg_sd_status14_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status14_write(newword);
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_ADDR (CSR_BASE + 0x100f40ecL)
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_SIZE 1
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status15_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f40ecL));
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status15_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f40ecL));
}
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15_OFFSET 0
#define CSR_SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15_SIZE 32
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_read(void) {
	uint32_t word = sddc_cr_reg_sd_status_cfg_reg_sd_status15_read();
	return sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_extract(word);
}
static inline uint32_t sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_sd_status_cfg_reg_sd_status15_read();
	uint32_t newword = sddc_cr_reg_sd_status_cfg_reg_sd_status15_cfg_reg_sd_status15_replace(oldword, plain_value);
	sddc_cr_reg_sd_status_cfg_reg_sd_status15_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_ADDR (CSR_BASE + 0x100f4100L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4100L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4100L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_cfg_base_addr_mem_func0_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func0_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_ADDR (CSR_BASE + 0x100f4104L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4104L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4104L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_cfg_base_addr_mem_func1_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func1_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_ADDR (CSR_BASE + 0x100f4108L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4108L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4108L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_cfg_base_addr_mem_func2_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func2_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_ADDR (CSR_BASE + 0x100f410cL)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f410cL));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f410cL));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_cfg_base_addr_mem_func3_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func3_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_ADDR (CSR_BASE + 0x100f4110L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4110L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4110L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_cfg_base_addr_mem_func4_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func4_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_ADDR (CSR_BASE + 0x100f4114L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4114L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4114L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_cfg_base_addr_mem_func5_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func5_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_ADDR (CSR_BASE + 0x100f4118L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4118L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4118L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_cfg_base_addr_mem_func6_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func6_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_ADDR (CSR_BASE + 0x100f411cL)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f411cL));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f411cL));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_cfg_base_addr_mem_func7_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func7_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_ADDR (CSR_BASE + 0x100f4120L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4120L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4120L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_cfg_base_addr_mem_func8_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func8_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_ADDR (CSR_BASE + 0x100f4124L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4124L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4124L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_cfg_base_addr_mem_func9_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func9_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_ADDR (CSR_BASE + 0x100f4128L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4128L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4128L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_cfg_base_addr_mem_func10_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func10_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_ADDR (CSR_BASE + 0x100f412cL)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f412cL));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f412cL));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_cfg_base_addr_mem_func11_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func11_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_ADDR (CSR_BASE + 0x100f4130L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4130L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4130L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_cfg_base_addr_mem_func12_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func12_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_ADDR (CSR_BASE + 0x100f4134L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4134L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4134L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_cfg_base_addr_mem_func13_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func13_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_ADDR (CSR_BASE + 0x100f4138L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4138L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4138L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_cfg_base_addr_mem_func14_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func14_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_ADDR (CSR_BASE + 0x100f413cL)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f413cL));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f413cL));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_cfg_base_addr_mem_func15_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func15_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_ADDR (CSR_BASE + 0x100f4140L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4140L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4140L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_cfg_base_addr_mem_func16_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func16_write(newword);
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_ADDR (CSR_BASE + 0x100f4144L)
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_SIZE 1
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4144L));
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4144L));
}
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17_OFFSET 0
#define CSR_SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17_SIZE 18
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_extract(uint32_t oldword) {
	uint32_t mask = 0x3ffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_read(void) {
	uint32_t word = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_read();
	return sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_extract(word);
}
static inline uint32_t sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3ffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_read();
	uint32_t newword = sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_cfg_base_addr_mem_func17_replace(oldword, plain_value);
	sddc_cr_base_addr_mem_func_cfg_base_addr_mem_func17_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_ADDR (CSR_BASE + 0x100f4148L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4148L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4148L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_cfg_reg_func_isdio_interface_code0_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_ADDR (CSR_BASE + 0x100f414cL)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f414cL));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f414cL));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_cfg_reg_func_isdio_interface_code1_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_ADDR (CSR_BASE + 0x100f4150L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4150L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4150L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_cfg_reg_func_isdio_interface_code2_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_ADDR (CSR_BASE + 0x100f4154L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4154L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4154L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_cfg_reg_func_isdio_interface_code3_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_ADDR (CSR_BASE + 0x100f4158L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4158L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4158L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_cfg_reg_func_isdio_interface_code4_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_ADDR (CSR_BASE + 0x100f415cL)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f415cL));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f415cL));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_cfg_reg_func_isdio_interface_code5_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_ADDR (CSR_BASE + 0x100f4160L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4160L));
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4160L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_read();
	return sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_read();
	uint32_t newword = sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_cfg_reg_func_isdio_interface_code6_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_interface_code_cfg_reg_func_isdio_interface_code6_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_ADDR (CSR_BASE + 0x100f4168L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4168L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4168L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_cfg_reg_func_manufact_code0_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_ADDR (CSR_BASE + 0x100f416cL)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f416cL));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f416cL));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_cfg_reg_func_manufact_code1_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_ADDR (CSR_BASE + 0x100f4170L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4170L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4170L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_cfg_reg_func_manufact_code2_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_ADDR (CSR_BASE + 0x100f4174L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4174L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4174L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_cfg_reg_func_manufact_code3_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_ADDR (CSR_BASE + 0x100f4178L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4178L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4178L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_cfg_reg_func_manufact_code4_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_ADDR (CSR_BASE + 0x100f417cL)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f417cL));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f417cL));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_cfg_reg_func_manufact_code5_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_ADDR (CSR_BASE + 0x100f4180L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4180L));
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4180L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_read();
	return sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_read();
	uint32_t newword = sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_cfg_reg_func_manufact_code6_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_code_cfg_reg_func_manufact_code6_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_ADDR (CSR_BASE + 0x100f4188L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4188L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4188L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_cfg_reg_func_manufact_info0_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_ADDR (CSR_BASE + 0x100f418cL)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f418cL));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f418cL));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_cfg_reg_func_manufact_info1_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_ADDR (CSR_BASE + 0x100f4190L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4190L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4190L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_cfg_reg_func_manufact_info2_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_ADDR (CSR_BASE + 0x100f4194L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4194L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4194L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_cfg_reg_func_manufact_info3_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_ADDR (CSR_BASE + 0x100f4198L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f4198L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f4198L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_cfg_reg_func_manufact_info4_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_ADDR (CSR_BASE + 0x100f419cL)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f419cL));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f419cL));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_cfg_reg_func_manufact_info5_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_ADDR (CSR_BASE + 0x100f41a0L)
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_SIZE 1
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41a0L));
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41a0L));
}
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6_SIZE 16
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_read(void) {
	uint32_t word = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_read();
	return sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_read();
	uint32_t newword = sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_cfg_reg_func_manufact_info6_replace(oldword, plain_value);
	sddc_cr_reg_func_manufact_info_cfg_reg_func_manufact_info6_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_ADDR (CSR_BASE + 0x100f41a8L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41a8L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41a8L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_cfg_reg_func_isdio_type_sup_code0_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_ADDR (CSR_BASE + 0x100f41acL)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41acL));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41acL));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_cfg_reg_func_isdio_type_sup_code1_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_ADDR (CSR_BASE + 0x100f41b0L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41b0L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41b0L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_cfg_reg_func_isdio_type_sup_code2_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_ADDR (CSR_BASE + 0x100f41b4L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41b4L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41b4L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_cfg_reg_func_isdio_type_sup_code3_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_ADDR (CSR_BASE + 0x100f41b8L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41b8L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41b8L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_cfg_reg_func_isdio_type_sup_code4_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_ADDR (CSR_BASE + 0x100f41bcL)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41bcL));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41bcL));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_cfg_reg_func_isdio_type_sup_code5_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_ADDR (CSR_BASE + 0x100f41c0L)
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_SIZE 1
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41c0L));
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41c0L));
}
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_SIZE 8
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_read(void) {
	uint32_t word = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_read();
	return sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_read();
	uint32_t newword = sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_cfg_reg_func_isdio_type_sup_code6_replace(oldword, plain_value);
	sddc_cr_reg_func_isdio_type_sup_code_cfg_reg_func_isdio_type_sup_code6_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_ADDR (CSR_BASE + 0x100f41c8L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info0_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41c8L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41c8L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info0_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info0_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info0_cfg_reg_func_info0_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info0_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_ADDR (CSR_BASE + 0x100f41ccL)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info1_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41ccL));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41ccL));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info1_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info1_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info1_cfg_reg_func_info1_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info1_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_ADDR (CSR_BASE + 0x100f41d0L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info2_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41d0L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41d0L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info2_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info2_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info2_cfg_reg_func_info2_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info2_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_ADDR (CSR_BASE + 0x100f41d4L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info3_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41d4L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41d4L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info3_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info3_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info3_cfg_reg_func_info3_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info3_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_ADDR (CSR_BASE + 0x100f41d8L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info4_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41d8L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41d8L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info4_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info4_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info4_cfg_reg_func_info4_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info4_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_ADDR (CSR_BASE + 0x100f41dcL)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info5_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41dcL));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41dcL));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info5_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info5_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info5_cfg_reg_func_info5_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info5_write(newword);
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_ADDR (CSR_BASE + 0x100f41e0L)
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_SIZE 1
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info6_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41e0L));
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41e0L));
}
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6_OFFSET 0
#define CSR_SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6_SIZE 16
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_read(void) {
	uint32_t word = sddc_cr_reg_func_info_cfg_reg_func_info6_read();
	return sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_extract(word);
}
static inline uint32_t sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_func_info_cfg_reg_func_info6_read();
	uint32_t newword = sddc_cr_reg_func_info_cfg_reg_func_info6_cfg_reg_func_info6_replace(oldword, plain_value);
	sddc_cr_reg_func_info_cfg_reg_func_info6_write(newword);
}
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_ADDR (CSR_BASE + 0x100f41f0L)
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_SIZE 1
static inline uint32_t sddc_cr_reg_uhs_1_support_read(void) {
	return csr_read_simple((CSR_BASE + 0x100f41f0L));
}
static inline void sddc_cr_reg_uhs_1_support_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100f41f0L));
}
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT_OFFSET 0
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT_SIZE 16
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_max_current_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_max_current_read(void) {
	uint32_t word = sddc_cr_reg_uhs_1_support_read();
	return sddc_cr_reg_uhs_1_support_cfg_reg_max_current_extract(word);
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_max_current_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sddc_cr_reg_uhs_1_support_cfg_reg_max_current_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_uhs_1_support_read();
	uint32_t newword = sddc_cr_reg_uhs_1_support_cfg_reg_max_current_replace(oldword, plain_value);
	sddc_cr_reg_uhs_1_support_write(newword);
}
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION_OFFSET 16
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION_SIZE 8
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_read(void) {
	uint32_t word = sddc_cr_reg_uhs_1_support_read();
	return sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_extract(word);
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 16))) | (mask & plain_value)<< 16 ;
}
static inline void sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_uhs_1_support_read();
	uint32_t newword = sddc_cr_reg_uhs_1_support_cfg_reg_data_strc_version_replace(oldword, plain_value);
	sddc_cr_reg_uhs_1_support_write(newword);
}
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT_OFFSET 24
#define CSR_SDDC_CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT_SIZE 8
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_read(void) {
	uint32_t word = sddc_cr_reg_uhs_1_support_read();
	return sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_extract(word);
}
static inline uint32_t sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_write(uint32_t plain_value) {
	uint32_t oldword = sddc_cr_reg_uhs_1_support_read();
	uint32_t newword = sddc_cr_reg_uhs_1_support_cfg_reg_uhs_1_support_replace(oldword, plain_value);
	sddc_cr_reg_uhs_1_support_write(newword);
}

/* mdma */
#define CSR_MDMA_BASE (CSR_BASE + -0x2b000L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL0_ADDR (CSR_BASE + -0x2b000L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL0_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel0_read(void) {
	return csr_read_simple((CSR_BASE + -0x2b000L));
}
static inline void mdma_sfr_evsel_cr_evsel0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2b000L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL0_CR_EVSEL0_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL0_CR_EVSEL0_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel0_cr_evsel0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel0_cr_evsel0_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel0_read();
	return mdma_sfr_evsel_cr_evsel0_cr_evsel0_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel0_cr_evsel0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel0_cr_evsel0_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel0_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel0_cr_evsel0_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel0_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL1_ADDR (CSR_BASE + -0x2affcL)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL1_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel1_read(void) {
	return csr_read_simple((CSR_BASE + -0x2affcL));
}
static inline void mdma_sfr_evsel_cr_evsel1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2affcL));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL1_CR_EVSEL1_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL1_CR_EVSEL1_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel1_cr_evsel1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel1_cr_evsel1_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel1_read();
	return mdma_sfr_evsel_cr_evsel1_cr_evsel1_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel1_cr_evsel1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel1_cr_evsel1_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel1_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel1_cr_evsel1_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel1_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL2_ADDR (CSR_BASE + -0x2aff8L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL2_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel2_read(void) {
	return csr_read_simple((CSR_BASE + -0x2aff8L));
}
static inline void mdma_sfr_evsel_cr_evsel2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2aff8L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL2_CR_EVSEL2_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL2_CR_EVSEL2_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel2_cr_evsel2_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel2_cr_evsel2_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel2_read();
	return mdma_sfr_evsel_cr_evsel2_cr_evsel2_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel2_cr_evsel2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel2_cr_evsel2_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel2_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel2_cr_evsel2_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel2_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL3_ADDR (CSR_BASE + -0x2aff4L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL3_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel3_read(void) {
	return csr_read_simple((CSR_BASE + -0x2aff4L));
}
static inline void mdma_sfr_evsel_cr_evsel3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2aff4L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL3_CR_EVSEL3_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL3_CR_EVSEL3_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel3_cr_evsel3_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel3_cr_evsel3_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel3_read();
	return mdma_sfr_evsel_cr_evsel3_cr_evsel3_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel3_cr_evsel3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel3_cr_evsel3_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel3_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel3_cr_evsel3_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel3_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL4_ADDR (CSR_BASE + -0x2aff0L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL4_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel4_read(void) {
	return csr_read_simple((CSR_BASE + -0x2aff0L));
}
static inline void mdma_sfr_evsel_cr_evsel4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2aff0L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL4_CR_EVSEL4_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL4_CR_EVSEL4_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel4_cr_evsel4_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel4_cr_evsel4_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel4_read();
	return mdma_sfr_evsel_cr_evsel4_cr_evsel4_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel4_cr_evsel4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel4_cr_evsel4_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel4_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel4_cr_evsel4_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel4_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL5_ADDR (CSR_BASE + -0x2afecL)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL5_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel5_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afecL));
}
static inline void mdma_sfr_evsel_cr_evsel5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afecL));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL5_CR_EVSEL5_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL5_CR_EVSEL5_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel5_cr_evsel5_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel5_cr_evsel5_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel5_read();
	return mdma_sfr_evsel_cr_evsel5_cr_evsel5_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel5_cr_evsel5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel5_cr_evsel5_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel5_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel5_cr_evsel5_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel5_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL6_ADDR (CSR_BASE + -0x2afe8L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL6_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel6_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afe8L));
}
static inline void mdma_sfr_evsel_cr_evsel6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afe8L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL6_CR_EVSEL6_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL6_CR_EVSEL6_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel6_cr_evsel6_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel6_cr_evsel6_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel6_read();
	return mdma_sfr_evsel_cr_evsel6_cr_evsel6_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel6_cr_evsel6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel6_cr_evsel6_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel6_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel6_cr_evsel6_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel6_write(newword);
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL7_ADDR (CSR_BASE + -0x2afe4L)
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL7_SIZE 1
static inline uint32_t mdma_sfr_evsel_cr_evsel7_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afe4L));
}
static inline void mdma_sfr_evsel_cr_evsel7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afe4L));
}
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL7_CR_EVSEL7_OFFSET 0
#define CSR_MDMA_SFR_EVSEL_CR_EVSEL7_CR_EVSEL7_SIZE 8
static inline uint32_t mdma_sfr_evsel_cr_evsel7_cr_evsel7_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_evsel_cr_evsel7_cr_evsel7_read(void) {
	uint32_t word = mdma_sfr_evsel_cr_evsel7_read();
	return mdma_sfr_evsel_cr_evsel7_cr_evsel7_extract(word);
}
static inline uint32_t mdma_sfr_evsel_cr_evsel7_cr_evsel7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_evsel_cr_evsel7_cr_evsel7_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_evsel_cr_evsel7_read();
	uint32_t newword = mdma_sfr_evsel_cr_evsel7_cr_evsel7_replace(oldword, plain_value);
	mdma_sfr_evsel_cr_evsel7_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ0_ADDR (CSR_BASE + -0x2afe0L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ0_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq0_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afe0L));
}
static inline void mdma_sfr_cr_cr_mdmareq0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afe0L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq0_read();
	return mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq0_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq0_cr_mdmareq0_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq0_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ1_ADDR (CSR_BASE + -0x2afdcL)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ1_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq1_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afdcL));
}
static inline void mdma_sfr_cr_cr_mdmareq1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afdcL));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq1_read();
	return mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq1_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq1_cr_mdmareq1_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq1_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ2_ADDR (CSR_BASE + -0x2afd8L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ2_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq2_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afd8L));
}
static inline void mdma_sfr_cr_cr_mdmareq2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afd8L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq2_read();
	return mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq2_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq2_cr_mdmareq2_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq2_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ3_ADDR (CSR_BASE + -0x2afd4L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ3_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq3_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afd4L));
}
static inline void mdma_sfr_cr_cr_mdmareq3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afd4L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq3_read();
	return mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq3_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq3_cr_mdmareq3_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq3_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ4_ADDR (CSR_BASE + -0x2afd0L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ4_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq4_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afd0L));
}
static inline void mdma_sfr_cr_cr_mdmareq4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afd0L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq4_read();
	return mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq4_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq4_cr_mdmareq4_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq4_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ5_ADDR (CSR_BASE + -0x2afccL)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ5_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq5_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afccL));
}
static inline void mdma_sfr_cr_cr_mdmareq5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afccL));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq5_read();
	return mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq5_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq5_cr_mdmareq5_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq5_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ6_ADDR (CSR_BASE + -0x2afc8L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ6_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq6_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afc8L));
}
static inline void mdma_sfr_cr_cr_mdmareq6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afc8L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq6_read();
	return mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq6_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq6_cr_mdmareq6_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq6_write(newword);
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ7_ADDR (CSR_BASE + -0x2afc4L)
#define CSR_MDMA_SFR_CR_CR_MDMAREQ7_SIZE 1
static inline uint32_t mdma_sfr_cr_cr_mdmareq7_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afc4L));
}
static inline void mdma_sfr_cr_cr_mdmareq7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2afc4L));
}
#define CSR_MDMA_SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7_OFFSET 0
#define CSR_MDMA_SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7_SIZE 5
static inline uint32_t mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_read(void) {
	uint32_t word = mdma_sfr_cr_cr_mdmareq7_read();
	return mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_extract(word);
}
static inline uint32_t mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_write(uint32_t plain_value) {
	uint32_t oldword = mdma_sfr_cr_cr_mdmareq7_read();
	uint32_t newword = mdma_sfr_cr_cr_mdmareq7_cr_mdmareq7_replace(oldword, plain_value);
	mdma_sfr_cr_cr_mdmareq7_write(newword);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ0_ADDR (CSR_BASE + -0x2afc0L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ0_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq0_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afc0L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq0_sr_mdmareq0_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq0_sr_mdmareq0_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq0_read();
	return mdma_sfr_sr_sr_mdmareq0_sr_mdmareq0_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ1_ADDR (CSR_BASE + -0x2afbcL)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ1_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq1_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afbcL));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq1_sr_mdmareq1_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq1_sr_mdmareq1_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq1_read();
	return mdma_sfr_sr_sr_mdmareq1_sr_mdmareq1_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ2_ADDR (CSR_BASE + -0x2afb8L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ2_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq2_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afb8L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq2_sr_mdmareq2_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq2_sr_mdmareq2_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq2_read();
	return mdma_sfr_sr_sr_mdmareq2_sr_mdmareq2_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ3_ADDR (CSR_BASE + -0x2afb4L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ3_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq3_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afb4L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq3_sr_mdmareq3_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq3_sr_mdmareq3_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq3_read();
	return mdma_sfr_sr_sr_mdmareq3_sr_mdmareq3_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ4_ADDR (CSR_BASE + -0x2afb0L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ4_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq4_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afb0L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq4_sr_mdmareq4_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq4_sr_mdmareq4_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq4_read();
	return mdma_sfr_sr_sr_mdmareq4_sr_mdmareq4_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ5_ADDR (CSR_BASE + -0x2afacL)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ5_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq5_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afacL));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq5_sr_mdmareq5_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq5_sr_mdmareq5_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq5_read();
	return mdma_sfr_sr_sr_mdmareq5_sr_mdmareq5_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ6_ADDR (CSR_BASE + -0x2afa8L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ6_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq6_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afa8L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq6_sr_mdmareq6_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq6_sr_mdmareq6_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq6_read();
	return mdma_sfr_sr_sr_mdmareq6_sr_mdmareq6_extract(word);
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ7_ADDR (CSR_BASE + -0x2afa4L)
#define CSR_MDMA_SFR_SR_SR_MDMAREQ7_SIZE 1
static inline uint32_t mdma_sfr_sr_sr_mdmareq7_read(void) {
	return csr_read_simple((CSR_BASE + -0x2afa4L));
}
#define CSR_MDMA_SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7_OFFSET 0
#define CSR_MDMA_SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7_SIZE 5
static inline uint32_t mdma_sfr_sr_sr_mdmareq7_sr_mdmareq7_extract(uint32_t oldword) {
	uint32_t mask = 0x1f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mdma_sfr_sr_sr_mdmareq7_sr_mdmareq7_read(void) {
	uint32_t word = mdma_sfr_sr_sr_mdmareq7_read();
	return mdma_sfr_sr_sr_mdmareq7_sr_mdmareq7_extract(word);
}

/* qfc */
#define CSR_QFC_BASE (CSR_BASE + -0x2d000L)
#define CSR_QFC_SFR_IO_ADDR (CSR_BASE + -0x2d000L)
#define CSR_QFC_SFR_IO_SIZE 1
static inline uint32_t qfc_sfr_io_read(void) {
	return csr_read_simple((CSR_BASE + -0x2d000L));
}
static inline void qfc_sfr_io_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2d000L));
}
#define CSR_QFC_SFR_IO_SFR_IO_OFFSET 0
#define CSR_QFC_SFR_IO_SFR_IO_SIZE 8
static inline uint32_t qfc_sfr_io_sfr_io_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_sfr_io_sfr_io_read(void) {
	uint32_t word = qfc_sfr_io_read();
	return qfc_sfr_io_sfr_io_extract(word);
}
static inline uint32_t qfc_sfr_io_sfr_io_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_sfr_io_sfr_io_write(uint32_t plain_value) {
	uint32_t oldword = qfc_sfr_io_read();
	uint32_t newword = qfc_sfr_io_sfr_io_replace(oldword, plain_value);
	qfc_sfr_io_write(newword);
}
#define CSR_QFC_SFR_AR_ADDR (CSR_BASE + -0x2cffcL)
#define CSR_QFC_SFR_AR_SIZE 1
static inline uint32_t qfc_sfr_ar_read(void) {
	return csr_read_simple((CSR_BASE + -0x2cffcL));
}
static inline void qfc_sfr_ar_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2cffcL));
}
#define CSR_QFC_SFR_AR_SFR_AR_OFFSET 0
#define CSR_QFC_SFR_AR_SFR_AR_SIZE 32
static inline uint32_t qfc_sfr_ar_sfr_ar_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_sfr_ar_sfr_ar_read(void) {
	uint32_t word = qfc_sfr_ar_read();
	return qfc_sfr_ar_sfr_ar_extract(word);
}
static inline uint32_t qfc_sfr_ar_sfr_ar_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_sfr_ar_sfr_ar_write(uint32_t plain_value) {
	uint32_t oldword = qfc_sfr_ar_read();
	uint32_t newword = qfc_sfr_ar_sfr_ar_replace(oldword, plain_value);
	qfc_sfr_ar_write(newword);
}
#define CSR_QFC_SFR_IODRV_ADDR (CSR_BASE + -0x2cff8L)
#define CSR_QFC_SFR_IODRV_SIZE 1
static inline uint32_t qfc_sfr_iodrv_read(void) {
	return csr_read_simple((CSR_BASE + -0x2cff8L));
}
static inline void qfc_sfr_iodrv_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2cff8L));
}
#define CSR_QFC_SFR_IODRV_PADDRVSEL_OFFSET 0
#define CSR_QFC_SFR_IODRV_PADDRVSEL_SIZE 12
static inline uint32_t qfc_sfr_iodrv_paddrvsel_extract(uint32_t oldword) {
	uint32_t mask = 0xfff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_sfr_iodrv_paddrvsel_read(void) {
	uint32_t word = qfc_sfr_iodrv_read();
	return qfc_sfr_iodrv_paddrvsel_extract(word);
}
static inline uint32_t qfc_sfr_iodrv_paddrvsel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xfff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_sfr_iodrv_paddrvsel_write(uint32_t plain_value) {
	uint32_t oldword = qfc_sfr_iodrv_read();
	uint32_t newword = qfc_sfr_iodrv_paddrvsel_replace(oldword, plain_value);
	qfc_sfr_iodrv_write(newword);
}
#define CSR_QFC_CR_XIP_ADDRMODE_ADDR (CSR_BASE + -0x2cff0L)
#define CSR_QFC_CR_XIP_ADDRMODE_SIZE 1
static inline uint32_t qfc_cr_xip_addrmode_read(void) {
	return csr_read_simple((CSR_BASE + -0x2cff0L));
}
static inline void qfc_cr_xip_addrmode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2cff0L));
}
#define CSR_QFC_CR_XIP_ADDRMODE_CR_XIP_ADDRMODE_OFFSET 0
#define CSR_QFC_CR_XIP_ADDRMODE_CR_XIP_ADDRMODE_SIZE 2
static inline uint32_t qfc_cr_xip_addrmode_cr_xip_addrmode_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_addrmode_cr_xip_addrmode_read(void) {
	uint32_t word = qfc_cr_xip_addrmode_read();
	return qfc_cr_xip_addrmode_cr_xip_addrmode_extract(word);
}
static inline uint32_t qfc_cr_xip_addrmode_cr_xip_addrmode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_addrmode_cr_xip_addrmode_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_addrmode_read();
	uint32_t newword = qfc_cr_xip_addrmode_cr_xip_addrmode_replace(oldword, plain_value);
	qfc_cr_xip_addrmode_write(newword);
}
#define CSR_QFC_CR_XIP_OPCODE_ADDR (CSR_BASE + -0x2cfecL)
#define CSR_QFC_CR_XIP_OPCODE_SIZE 1
static inline uint32_t qfc_cr_xip_opcode_read(void) {
	return csr_read_simple((CSR_BASE + -0x2cfecL));
}
static inline void qfc_cr_xip_opcode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2cfecL));
}
#define CSR_QFC_CR_XIP_OPCODE_CR_XIP_OPCODE_OFFSET 0
#define CSR_QFC_CR_XIP_OPCODE_CR_XIP_OPCODE_SIZE 32
static inline uint32_t qfc_cr_xip_opcode_cr_xip_opcode_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_opcode_cr_xip_opcode_read(void) {
	uint32_t word = qfc_cr_xip_opcode_read();
	return qfc_cr_xip_opcode_cr_xip_opcode_extract(word);
}
static inline uint32_t qfc_cr_xip_opcode_cr_xip_opcode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_opcode_cr_xip_opcode_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_opcode_read();
	uint32_t newword = qfc_cr_xip_opcode_cr_xip_opcode_replace(oldword, plain_value);
	qfc_cr_xip_opcode_write(newword);
}
#define CSR_QFC_CR_XIP_WIDTH_ADDR (CSR_BASE + -0x2cfe8L)
#define CSR_QFC_CR_XIP_WIDTH_SIZE 1
static inline uint32_t qfc_cr_xip_width_read(void) {
	return csr_read_simple((CSR_BASE + -0x2cfe8L));
}
static inline void qfc_cr_xip_width_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2cfe8L));
}
#define CSR_QFC_CR_XIP_WIDTH_CR_XIP_WIDTH_OFFSET 0
#define CSR_QFC_CR_XIP_WIDTH_CR_XIP_WIDTH_SIZE 6
static inline uint32_t qfc_cr_xip_width_cr_xip_width_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_width_cr_xip_width_read(void) {
	uint32_t word = qfc_cr_xip_width_read();
	return qfc_cr_xip_width_cr_xip_width_extract(word);
}
static inline uint32_t qfc_cr_xip_width_cr_xip_width_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_width_cr_xip_width_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_width_read();
	uint32_t newword = qfc_cr_xip_width_cr_xip_width_replace(oldword, plain_value);
	qfc_cr_xip_width_write(newword);
}
#define CSR_QFC_CR_XIP_SSEL_ADDR (CSR_BASE + -0x2cfe4L)
#define CSR_QFC_CR_XIP_SSEL_SIZE 1
static inline uint32_t qfc_cr_xip_ssel_read(void) {
	return csr_read_simple((CSR_BASE + -0x2cfe4L));
}
static inline void qfc_cr_xip_ssel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2cfe4L));
}
#define CSR_QFC_CR_XIP_SSEL_CR_XIP_SSEL_OFFSET 0
#define CSR_QFC_CR_XIP_SSEL_CR_XIP_SSEL_SIZE 7
static inline uint32_t qfc_cr_xip_ssel_cr_xip_ssel_extract(uint32_t oldword) {
	uint32_t mask = 0x7f;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_ssel_cr_xip_ssel_read(void) {
	uint32_t word = qfc_cr_xip_ssel_read();
	return qfc_cr_xip_ssel_cr_xip_ssel_extract(word);
}
static inline uint32_t qfc_cr_xip_ssel_cr_xip_ssel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x7f;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_ssel_cr_xip_ssel_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_ssel_read();
	uint32_t newword = qfc_cr_xip_ssel_cr_xip_ssel_replace(oldword, plain_value);
	qfc_cr_xip_ssel_write(newword);
}
#define CSR_QFC_CR_XIP_DUMCYC_ADDR (CSR_BASE + -0x2cfe0L)
#define CSR_QFC_CR_XIP_DUMCYC_SIZE 1
static inline uint32_t qfc_cr_xip_dumcyc_read(void) {
	return csr_read_simple((CSR_BASE + -0x2cfe0L));
}
static inline void qfc_cr_xip_dumcyc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2cfe0L));
}
#define CSR_QFC_CR_XIP_DUMCYC_CR_XIP_DUMCYC_OFFSET 0
#define CSR_QFC_CR_XIP_DUMCYC_CR_XIP_DUMCYC_SIZE 16
static inline uint32_t qfc_cr_xip_dumcyc_cr_xip_dumcyc_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_dumcyc_cr_xip_dumcyc_read(void) {
	uint32_t word = qfc_cr_xip_dumcyc_read();
	return qfc_cr_xip_dumcyc_cr_xip_dumcyc_extract(word);
}
static inline uint32_t qfc_cr_xip_dumcyc_cr_xip_dumcyc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_dumcyc_cr_xip_dumcyc_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_dumcyc_read();
	uint32_t newword = qfc_cr_xip_dumcyc_cr_xip_dumcyc_replace(oldword, plain_value);
	qfc_cr_xip_dumcyc_write(newword);
}
#define CSR_QFC_CR_XIP_CFG_ADDR (CSR_BASE + -0x2cfdcL)
#define CSR_QFC_CR_XIP_CFG_SIZE 1
static inline uint32_t qfc_cr_xip_cfg_read(void) {
	return csr_read_simple((CSR_BASE + -0x2cfdcL));
}
static inline void qfc_cr_xip_cfg_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2cfdcL));
}
#define CSR_QFC_CR_XIP_CFG_CR_XIP_CFG_OFFSET 0
#define CSR_QFC_CR_XIP_CFG_CR_XIP_CFG_SIZE 14
static inline uint32_t qfc_cr_xip_cfg_cr_xip_cfg_extract(uint32_t oldword) {
	uint32_t mask = 0x3fff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t qfc_cr_xip_cfg_cr_xip_cfg_read(void) {
	uint32_t word = qfc_cr_xip_cfg_read();
	return qfc_cr_xip_cfg_cr_xip_cfg_extract(word);
}
static inline uint32_t qfc_cr_xip_cfg_cr_xip_cfg_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3fff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void qfc_cr_xip_cfg_cr_xip_cfg_write(uint32_t plain_value) {
	uint32_t oldword = qfc_cr_xip_cfg_read();
	uint32_t newword = qfc_cr_xip_cfg_cr_xip_cfg_replace(oldword, plain_value);
	qfc_cr_xip_cfg_write(newword);
}

/* pl230 */
#define CSR_PL230_BASE (CSR_BASE + -0x2c000L)
#define CSR_PL230_PL230_ADDR (CSR_BASE + -0x2c000L)
#define CSR_PL230_PL230_SIZE 1
static inline uint32_t pl230_pl230_read(void) {
	return csr_read_simple((CSR_BASE + -0x2c000L));
}
static inline void pl230_pl230_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + -0x2c000L));
}
#define CSR_PL230_PL230_PLACEHOLDER_OFFSET 0
#define CSR_PL230_PL230_PLACEHOLDER_SIZE 32
static inline uint32_t pl230_pl230_placeholder_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pl230_pl230_placeholder_read(void) {
	uint32_t word = pl230_pl230_read();
	return pl230_pl230_placeholder_extract(word);
}
static inline uint32_t pl230_pl230_placeholder_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pl230_pl230_placeholder_write(uint32_t plain_value) {
	uint32_t oldword = pl230_pl230_read();
	uint32_t newword = pl230_pl230_placeholder_replace(oldword, plain_value);
	pl230_pl230_write(newword);
}

/* gluechain */
#define CSR_GLUECHAIN_BASE (CSR_BASE + 0x27000L)
#define CSR_GLUECHAIN_SFR_GCMASK_ADDR (CSR_BASE + 0x27000L)
#define CSR_GLUECHAIN_SFR_GCMASK_SIZE 1
static inline uint32_t gluechain_sfr_gcmask_read(void) {
	return csr_read_simple((CSR_BASE + 0x27000L));
}
static inline void gluechain_sfr_gcmask_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x27000L));
}
#define CSR_GLUECHAIN_SFR_GCMASK_CR_GCMASK_OFFSET 0
#define CSR_GLUECHAIN_SFR_GCMASK_CR_GCMASK_SIZE 32
static inline uint32_t gluechain_sfr_gcmask_cr_gcmask_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gluechain_sfr_gcmask_cr_gcmask_read(void) {
	uint32_t word = gluechain_sfr_gcmask_read();
	return gluechain_sfr_gcmask_cr_gcmask_extract(word);
}
static inline uint32_t gluechain_sfr_gcmask_cr_gcmask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void gluechain_sfr_gcmask_cr_gcmask_write(uint32_t plain_value) {
	uint32_t oldword = gluechain_sfr_gcmask_read();
	uint32_t newword = gluechain_sfr_gcmask_cr_gcmask_replace(oldword, plain_value);
	gluechain_sfr_gcmask_write(newword);
}
#define CSR_GLUECHAIN_SFR_GCSR_ADDR (CSR_BASE + 0x27004L)
#define CSR_GLUECHAIN_SFR_GCSR_SIZE 1
static inline uint32_t gluechain_sfr_gcsr_read(void) {
	return csr_read_simple((CSR_BASE + 0x27004L));
}
#define CSR_GLUECHAIN_SFR_GCSR_GLUEREG_OFFSET 0
#define CSR_GLUECHAIN_SFR_GCSR_GLUEREG_SIZE 32
static inline uint32_t gluechain_sfr_gcsr_gluereg_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gluechain_sfr_gcsr_gluereg_read(void) {
	uint32_t word = gluechain_sfr_gcsr_read();
	return gluechain_sfr_gcsr_gluereg_extract(word);
}
#define CSR_GLUECHAIN_SFR_GCRST_ADDR (CSR_BASE + 0x27008L)
#define CSR_GLUECHAIN_SFR_GCRST_SIZE 1
static inline uint32_t gluechain_sfr_gcrst_read(void) {
	return csr_read_simple((CSR_BASE + 0x27008L));
}
static inline void gluechain_sfr_gcrst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x27008L));
}
#define CSR_GLUECHAIN_SFR_GCRST_GLUERST_OFFSET 0
#define CSR_GLUECHAIN_SFR_GCRST_GLUERST_SIZE 32
static inline uint32_t gluechain_sfr_gcrst_gluerst_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gluechain_sfr_gcrst_gluerst_read(void) {
	uint32_t word = gluechain_sfr_gcrst_read();
	return gluechain_sfr_gcrst_gluerst_extract(word);
}
static inline uint32_t gluechain_sfr_gcrst_gluerst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void gluechain_sfr_gcrst_gluerst_write(uint32_t plain_value) {
	uint32_t oldword = gluechain_sfr_gcrst_read();
	uint32_t newword = gluechain_sfr_gcrst_gluerst_replace(oldword, plain_value);
	gluechain_sfr_gcrst_write(newword);
}
#define CSR_GLUECHAIN_SFR_GCTEST_ADDR (CSR_BASE + 0x2700cL)
#define CSR_GLUECHAIN_SFR_GCTEST_SIZE 1
static inline uint32_t gluechain_sfr_gctest_read(void) {
	return csr_read_simple((CSR_BASE + 0x2700cL));
}
static inline void gluechain_sfr_gctest_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2700cL));
}
#define CSR_GLUECHAIN_SFR_GCTEST_GLUETEST_OFFSET 0
#define CSR_GLUECHAIN_SFR_GCTEST_GLUETEST_SIZE 32
static inline uint32_t gluechain_sfr_gctest_gluetest_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gluechain_sfr_gctest_gluetest_read(void) {
	uint32_t word = gluechain_sfr_gctest_read();
	return gluechain_sfr_gctest_gluetest_extract(word);
}
static inline uint32_t gluechain_sfr_gctest_gluetest_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void gluechain_sfr_gctest_gluetest_write(uint32_t plain_value) {
	uint32_t oldword = gluechain_sfr_gctest_read();
	uint32_t newword = gluechain_sfr_gctest_gluetest_replace(oldword, plain_value);
	gluechain_sfr_gctest_write(newword);
}

/* mesh */
#define CSR_MESH_BASE (CSR_BASE + 0x25000L)
#define CSR_MESH_SFR_MLDRV_CR_MLDRV0_ADDR (CSR_BASE + 0x25000L)
#define CSR_MESH_SFR_MLDRV_CR_MLDRV0_SIZE 1
static inline uint32_t mesh_sfr_mldrv_cr_mldrv0_read(void) {
	return csr_read_simple((CSR_BASE + 0x25000L));
}
static inline void mesh_sfr_mldrv_cr_mldrv0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x25000L));
}
#define CSR_MESH_SFR_MLDRV_CR_MLDRV0_CR_MLDRV0_OFFSET 0
#define CSR_MESH_SFR_MLDRV_CR_MLDRV0_CR_MLDRV0_SIZE 32
static inline uint32_t mesh_sfr_mldrv_cr_mldrv0_cr_mldrv0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mldrv_cr_mldrv0_cr_mldrv0_read(void) {
	uint32_t word = mesh_sfr_mldrv_cr_mldrv0_read();
	return mesh_sfr_mldrv_cr_mldrv0_cr_mldrv0_extract(word);
}
static inline uint32_t mesh_sfr_mldrv_cr_mldrv0_cr_mldrv0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mesh_sfr_mldrv_cr_mldrv0_cr_mldrv0_write(uint32_t plain_value) {
	uint32_t oldword = mesh_sfr_mldrv_cr_mldrv0_read();
	uint32_t newword = mesh_sfr_mldrv_cr_mldrv0_cr_mldrv0_replace(oldword, plain_value);
	mesh_sfr_mldrv_cr_mldrv0_write(newword);
}
#define CSR_MESH_SFR_MLIE_CR_MLIE0_ADDR (CSR_BASE + 0x25004L)
#define CSR_MESH_SFR_MLIE_CR_MLIE0_SIZE 1
static inline uint32_t mesh_sfr_mlie_cr_mlie0_read(void) {
	return csr_read_simple((CSR_BASE + 0x25004L));
}
static inline void mesh_sfr_mlie_cr_mlie0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x25004L));
}
#define CSR_MESH_SFR_MLIE_CR_MLIE0_CR_MLIE0_OFFSET 0
#define CSR_MESH_SFR_MLIE_CR_MLIE0_CR_MLIE0_SIZE 32
static inline uint32_t mesh_sfr_mlie_cr_mlie0_cr_mlie0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlie_cr_mlie0_cr_mlie0_read(void) {
	uint32_t word = mesh_sfr_mlie_cr_mlie0_read();
	return mesh_sfr_mlie_cr_mlie0_cr_mlie0_extract(word);
}
static inline uint32_t mesh_sfr_mlie_cr_mlie0_cr_mlie0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void mesh_sfr_mlie_cr_mlie0_cr_mlie0_write(uint32_t plain_value) {
	uint32_t oldword = mesh_sfr_mlie_cr_mlie0_read();
	uint32_t newword = mesh_sfr_mlie_cr_mlie0_cr_mlie0_replace(oldword, plain_value);
	mesh_sfr_mlie_cr_mlie0_write(newword);
}
#define CSR_MESH_SFR_MLSR_SR_MLSR0_ADDR (CSR_BASE + 0x25008L)
#define CSR_MESH_SFR_MLSR_SR_MLSR0_SIZE 1
static inline uint32_t mesh_sfr_mlsr_sr_mlsr0_read(void) {
	return csr_read_simple((CSR_BASE + 0x25008L));
}
#define CSR_MESH_SFR_MLSR_SR_MLSR0_SR_MLSR0_OFFSET 0
#define CSR_MESH_SFR_MLSR_SR_MLSR0_SR_MLSR0_SIZE 32
static inline uint32_t mesh_sfr_mlsr_sr_mlsr0_sr_mlsr0_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlsr_sr_mlsr0_sr_mlsr0_read(void) {
	uint32_t word = mesh_sfr_mlsr_sr_mlsr0_read();
	return mesh_sfr_mlsr_sr_mlsr0_sr_mlsr0_extract(word);
}
#define CSR_MESH_SFR_MLSR_SR_MLSR1_ADDR (CSR_BASE + 0x2500cL)
#define CSR_MESH_SFR_MLSR_SR_MLSR1_SIZE 1
static inline uint32_t mesh_sfr_mlsr_sr_mlsr1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2500cL));
}
#define CSR_MESH_SFR_MLSR_SR_MLSR1_SR_MLSR1_OFFSET 0
#define CSR_MESH_SFR_MLSR_SR_MLSR1_SR_MLSR1_SIZE 32
static inline uint32_t mesh_sfr_mlsr_sr_mlsr1_sr_mlsr1_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlsr_sr_mlsr1_sr_mlsr1_read(void) {
	uint32_t word = mesh_sfr_mlsr_sr_mlsr1_read();
	return mesh_sfr_mlsr_sr_mlsr1_sr_mlsr1_extract(word);
}
#define CSR_MESH_SFR_MLSR_SR_MLSR2_ADDR (CSR_BASE + 0x25010L)
#define CSR_MESH_SFR_MLSR_SR_MLSR2_SIZE 1
static inline uint32_t mesh_sfr_mlsr_sr_mlsr2_read(void) {
	return csr_read_simple((CSR_BASE + 0x25010L));
}
#define CSR_MESH_SFR_MLSR_SR_MLSR2_SR_MLSR2_OFFSET 0
#define CSR_MESH_SFR_MLSR_SR_MLSR2_SR_MLSR2_SIZE 32
static inline uint32_t mesh_sfr_mlsr_sr_mlsr2_sr_mlsr2_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlsr_sr_mlsr2_sr_mlsr2_read(void) {
	uint32_t word = mesh_sfr_mlsr_sr_mlsr2_read();
	return mesh_sfr_mlsr_sr_mlsr2_sr_mlsr2_extract(word);
}
#define CSR_MESH_SFR_MLSR_SR_MLSR3_ADDR (CSR_BASE + 0x25014L)
#define CSR_MESH_SFR_MLSR_SR_MLSR3_SIZE 1
static inline uint32_t mesh_sfr_mlsr_sr_mlsr3_read(void) {
	return csr_read_simple((CSR_BASE + 0x25014L));
}
#define CSR_MESH_SFR_MLSR_SR_MLSR3_SR_MLSR3_OFFSET 0
#define CSR_MESH_SFR_MLSR_SR_MLSR3_SR_MLSR3_SIZE 32
static inline uint32_t mesh_sfr_mlsr_sr_mlsr3_sr_mlsr3_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlsr_sr_mlsr3_sr_mlsr3_read(void) {
	uint32_t word = mesh_sfr_mlsr_sr_mlsr3_read();
	return mesh_sfr_mlsr_sr_mlsr3_sr_mlsr3_extract(word);
}
#define CSR_MESH_SFR_MLSR_SR_MLSR4_ADDR (CSR_BASE + 0x25018L)
#define CSR_MESH_SFR_MLSR_SR_MLSR4_SIZE 1
static inline uint32_t mesh_sfr_mlsr_sr_mlsr4_read(void) {
	return csr_read_simple((CSR_BASE + 0x25018L));
}
#define CSR_MESH_SFR_MLSR_SR_MLSR4_SR_MLSR4_OFFSET 0
#define CSR_MESH_SFR_MLSR_SR_MLSR4_SR_MLSR4_SIZE 32
static inline uint32_t mesh_sfr_mlsr_sr_mlsr4_sr_mlsr4_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlsr_sr_mlsr4_sr_mlsr4_read(void) {
	uint32_t word = mesh_sfr_mlsr_sr_mlsr4_read();
	return mesh_sfr_mlsr_sr_mlsr4_sr_mlsr4_extract(word);
}
#define CSR_MESH_SFR_MLSR_SR_MLSR5_ADDR (CSR_BASE + 0x2501cL)
#define CSR_MESH_SFR_MLSR_SR_MLSR5_SIZE 1
static inline uint32_t mesh_sfr_mlsr_sr_mlsr5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2501cL));
}
#define CSR_MESH_SFR_MLSR_SR_MLSR5_SR_MLSR5_OFFSET 0
#define CSR_MESH_SFR_MLSR_SR_MLSR5_SR_MLSR5_SIZE 32
static inline uint32_t mesh_sfr_mlsr_sr_mlsr5_sr_mlsr5_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlsr_sr_mlsr5_sr_mlsr5_read(void) {
	uint32_t word = mesh_sfr_mlsr_sr_mlsr5_read();
	return mesh_sfr_mlsr_sr_mlsr5_sr_mlsr5_extract(word);
}
#define CSR_MESH_SFR_MLSR_SR_MLSR6_ADDR (CSR_BASE + 0x25020L)
#define CSR_MESH_SFR_MLSR_SR_MLSR6_SIZE 1
static inline uint32_t mesh_sfr_mlsr_sr_mlsr6_read(void) {
	return csr_read_simple((CSR_BASE + 0x25020L));
}
#define CSR_MESH_SFR_MLSR_SR_MLSR6_SR_MLSR6_OFFSET 0
#define CSR_MESH_SFR_MLSR_SR_MLSR6_SR_MLSR6_SIZE 32
static inline uint32_t mesh_sfr_mlsr_sr_mlsr6_sr_mlsr6_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlsr_sr_mlsr6_sr_mlsr6_read(void) {
	uint32_t word = mesh_sfr_mlsr_sr_mlsr6_read();
	return mesh_sfr_mlsr_sr_mlsr6_sr_mlsr6_extract(word);
}
#define CSR_MESH_SFR_MLSR_SR_MLSR7_ADDR (CSR_BASE + 0x25024L)
#define CSR_MESH_SFR_MLSR_SR_MLSR7_SIZE 1
static inline uint32_t mesh_sfr_mlsr_sr_mlsr7_read(void) {
	return csr_read_simple((CSR_BASE + 0x25024L));
}
#define CSR_MESH_SFR_MLSR_SR_MLSR7_SR_MLSR7_OFFSET 0
#define CSR_MESH_SFR_MLSR_SR_MLSR7_SR_MLSR7_SIZE 32
static inline uint32_t mesh_sfr_mlsr_sr_mlsr7_sr_mlsr7_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t mesh_sfr_mlsr_sr_mlsr7_sr_mlsr7_read(void) {
	uint32_t word = mesh_sfr_mlsr_sr_mlsr7_read();
	return mesh_sfr_mlsr_sr_mlsr7_sr_mlsr7_extract(word);
}

/* sensorc */
#define CSR_SENSORC_BASE (CSR_BASE + 0x26000L)
#define CSR_SENSORC_SFR_VDMASK0_ADDR (CSR_BASE + 0x26000L)
#define CSR_SENSORC_SFR_VDMASK0_SIZE 1
static inline uint32_t sensorc_sfr_vdmask0_read(void) {
	return csr_read_simple((CSR_BASE + 0x26000L));
}
static inline void sensorc_sfr_vdmask0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26000L));
}
#define CSR_SENSORC_SFR_VDMASK0_CR_VDMASK0_OFFSET 0
#define CSR_SENSORC_SFR_VDMASK0_CR_VDMASK0_SIZE 8
static inline uint32_t sensorc_sfr_vdmask0_cr_vdmask0_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdmask0_cr_vdmask0_read(void) {
	uint32_t word = sensorc_sfr_vdmask0_read();
	return sensorc_sfr_vdmask0_cr_vdmask0_extract(word);
}
static inline uint32_t sensorc_sfr_vdmask0_cr_vdmask0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdmask0_cr_vdmask0_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdmask0_read();
	uint32_t newword = sensorc_sfr_vdmask0_cr_vdmask0_replace(oldword, plain_value);
	sensorc_sfr_vdmask0_write(newword);
}
#define CSR_SENSORC_SFR_VDMASK1_ADDR (CSR_BASE + 0x26004L)
#define CSR_SENSORC_SFR_VDMASK1_SIZE 1
static inline uint32_t sensorc_sfr_vdmask1_read(void) {
	return csr_read_simple((CSR_BASE + 0x26004L));
}
static inline void sensorc_sfr_vdmask1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26004L));
}
#define CSR_SENSORC_SFR_VDMASK1_CR_VDMASK1_OFFSET 0
#define CSR_SENSORC_SFR_VDMASK1_CR_VDMASK1_SIZE 8
static inline uint32_t sensorc_sfr_vdmask1_cr_vdmask1_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdmask1_cr_vdmask1_read(void) {
	uint32_t word = sensorc_sfr_vdmask1_read();
	return sensorc_sfr_vdmask1_cr_vdmask1_extract(word);
}
static inline uint32_t sensorc_sfr_vdmask1_cr_vdmask1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdmask1_cr_vdmask1_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdmask1_read();
	uint32_t newword = sensorc_sfr_vdmask1_cr_vdmask1_replace(oldword, plain_value);
	sensorc_sfr_vdmask1_write(newword);
}
#define CSR_SENSORC_SFR_VDSR_ADDR (CSR_BASE + 0x26008L)
#define CSR_SENSORC_SFR_VDSR_SIZE 1
static inline uint32_t sensorc_sfr_vdsr_read(void) {
	return csr_read_simple((CSR_BASE + 0x26008L));
}
#define CSR_SENSORC_SFR_VDSR_SR_VDSR_OFFSET 0
#define CSR_SENSORC_SFR_VDSR_SR_VDSR_SIZE 8
static inline uint32_t sensorc_sfr_vdsr_sr_vdsr_extract(uint32_t oldword) {
	uint32_t mask = 0xff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdsr_sr_vdsr_read(void) {
	uint32_t word = sensorc_sfr_vdsr_read();
	return sensorc_sfr_vdsr_sr_vdsr_extract(word);
}
#define CSR_SENSORC_SFR_LDMASK_ADDR (CSR_BASE + 0x26010L)
#define CSR_SENSORC_SFR_LDMASK_SIZE 1
static inline uint32_t sensorc_sfr_ldmask_read(void) {
	return csr_read_simple((CSR_BASE + 0x26010L));
}
static inline void sensorc_sfr_ldmask_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26010L));
}
#define CSR_SENSORC_SFR_LDMASK_CR_LDMASK_OFFSET 0
#define CSR_SENSORC_SFR_LDMASK_CR_LDMASK_SIZE 4
static inline uint32_t sensorc_sfr_ldmask_cr_ldmask_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_ldmask_cr_ldmask_read(void) {
	uint32_t word = sensorc_sfr_ldmask_read();
	return sensorc_sfr_ldmask_cr_ldmask_extract(word);
}
static inline uint32_t sensorc_sfr_ldmask_cr_ldmask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_ldmask_cr_ldmask_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_ldmask_read();
	uint32_t newword = sensorc_sfr_ldmask_cr_ldmask_replace(oldword, plain_value);
	sensorc_sfr_ldmask_write(newword);
}
#define CSR_SENSORC_SFR_LDSR_ADDR (CSR_BASE + 0x26014L)
#define CSR_SENSORC_SFR_LDSR_SIZE 1
static inline uint32_t sensorc_sfr_ldsr_read(void) {
	return csr_read_simple((CSR_BASE + 0x26014L));
}
#define CSR_SENSORC_SFR_LDSR_SR_LDSR_OFFSET 0
#define CSR_SENSORC_SFR_LDSR_SR_LDSR_SIZE 4
static inline uint32_t sensorc_sfr_ldsr_sr_ldsr_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_ldsr_sr_ldsr_read(void) {
	uint32_t word = sensorc_sfr_ldsr_read();
	return sensorc_sfr_ldsr_sr_ldsr_extract(word);
}
#define CSR_SENSORC_SFR_LDCFG_ADDR (CSR_BASE + 0x26018L)
#define CSR_SENSORC_SFR_LDCFG_SIZE 1
static inline uint32_t sensorc_sfr_ldcfg_read(void) {
	return csr_read_simple((CSR_BASE + 0x26018L));
}
static inline void sensorc_sfr_ldcfg_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26018L));
}
#define CSR_SENSORC_SFR_LDCFG_SFR_LDCFG_OFFSET 0
#define CSR_SENSORC_SFR_LDCFG_SFR_LDCFG_SIZE 4
static inline uint32_t sensorc_sfr_ldcfg_sfr_ldcfg_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_ldcfg_sfr_ldcfg_read(void) {
	uint32_t word = sensorc_sfr_ldcfg_read();
	return sensorc_sfr_ldcfg_sfr_ldcfg_extract(word);
}
static inline uint32_t sensorc_sfr_ldcfg_sfr_ldcfg_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_ldcfg_sfr_ldcfg_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_ldcfg_read();
	uint32_t newword = sensorc_sfr_ldcfg_sfr_ldcfg_replace(oldword, plain_value);
	sensorc_sfr_ldcfg_write(newword);
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG0_ADDR (CSR_BASE + 0x26020L)
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG0_SIZE 1
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg0_read(void) {
	return csr_read_simple((CSR_BASE + 0x26020L));
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26020L));
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG0_CR_VDCFG0_OFFSET 0
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG0_CR_VDCFG0_SIZE 4
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg0_cr_vdcfg0_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg0_cr_vdcfg0_read(void) {
	uint32_t word = sensorc_sfr_vdcfg_cr_vdcfg0_read();
	return sensorc_sfr_vdcfg_cr_vdcfg0_cr_vdcfg0_extract(word);
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg0_cr_vdcfg0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg0_cr_vdcfg0_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdcfg_cr_vdcfg0_read();
	uint32_t newword = sensorc_sfr_vdcfg_cr_vdcfg0_cr_vdcfg0_replace(oldword, plain_value);
	sensorc_sfr_vdcfg_cr_vdcfg0_write(newword);
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG1_ADDR (CSR_BASE + 0x26024L)
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG1_SIZE 1
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg1_read(void) {
	return csr_read_simple((CSR_BASE + 0x26024L));
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26024L));
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG1_CR_VDCFG1_OFFSET 0
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG1_CR_VDCFG1_SIZE 4
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg1_cr_vdcfg1_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg1_cr_vdcfg1_read(void) {
	uint32_t word = sensorc_sfr_vdcfg_cr_vdcfg1_read();
	return sensorc_sfr_vdcfg_cr_vdcfg1_cr_vdcfg1_extract(word);
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg1_cr_vdcfg1_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg1_cr_vdcfg1_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdcfg_cr_vdcfg1_read();
	uint32_t newword = sensorc_sfr_vdcfg_cr_vdcfg1_cr_vdcfg1_replace(oldword, plain_value);
	sensorc_sfr_vdcfg_cr_vdcfg1_write(newword);
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG2_ADDR (CSR_BASE + 0x26028L)
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG2_SIZE 1
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg2_read(void) {
	return csr_read_simple((CSR_BASE + 0x26028L));
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26028L));
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG2_CR_VDCFG2_OFFSET 0
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG2_CR_VDCFG2_SIZE 4
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg2_cr_vdcfg2_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg2_cr_vdcfg2_read(void) {
	uint32_t word = sensorc_sfr_vdcfg_cr_vdcfg2_read();
	return sensorc_sfr_vdcfg_cr_vdcfg2_cr_vdcfg2_extract(word);
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg2_cr_vdcfg2_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg2_cr_vdcfg2_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdcfg_cr_vdcfg2_read();
	uint32_t newword = sensorc_sfr_vdcfg_cr_vdcfg2_cr_vdcfg2_replace(oldword, plain_value);
	sensorc_sfr_vdcfg_cr_vdcfg2_write(newword);
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG3_ADDR (CSR_BASE + 0x2602cL)
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG3_SIZE 1
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2602cL));
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2602cL));
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG3_CR_VDCFG3_OFFSET 0
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG3_CR_VDCFG3_SIZE 4
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg3_cr_vdcfg3_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg3_cr_vdcfg3_read(void) {
	uint32_t word = sensorc_sfr_vdcfg_cr_vdcfg3_read();
	return sensorc_sfr_vdcfg_cr_vdcfg3_cr_vdcfg3_extract(word);
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg3_cr_vdcfg3_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg3_cr_vdcfg3_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdcfg_cr_vdcfg3_read();
	uint32_t newword = sensorc_sfr_vdcfg_cr_vdcfg3_cr_vdcfg3_replace(oldword, plain_value);
	sensorc_sfr_vdcfg_cr_vdcfg3_write(newword);
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG4_ADDR (CSR_BASE + 0x26030L)
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG4_SIZE 1
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg4_read(void) {
	return csr_read_simple((CSR_BASE + 0x26030L));
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26030L));
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG4_CR_VDCFG4_OFFSET 0
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG4_CR_VDCFG4_SIZE 4
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg4_cr_vdcfg4_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg4_cr_vdcfg4_read(void) {
	uint32_t word = sensorc_sfr_vdcfg_cr_vdcfg4_read();
	return sensorc_sfr_vdcfg_cr_vdcfg4_cr_vdcfg4_extract(word);
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg4_cr_vdcfg4_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg4_cr_vdcfg4_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdcfg_cr_vdcfg4_read();
	uint32_t newword = sensorc_sfr_vdcfg_cr_vdcfg4_cr_vdcfg4_replace(oldword, plain_value);
	sensorc_sfr_vdcfg_cr_vdcfg4_write(newword);
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG5_ADDR (CSR_BASE + 0x26034L)
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG5_SIZE 1
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg5_read(void) {
	return csr_read_simple((CSR_BASE + 0x26034L));
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26034L));
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG5_CR_VDCFG5_OFFSET 0
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG5_CR_VDCFG5_SIZE 4
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg5_cr_vdcfg5_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg5_cr_vdcfg5_read(void) {
	uint32_t word = sensorc_sfr_vdcfg_cr_vdcfg5_read();
	return sensorc_sfr_vdcfg_cr_vdcfg5_cr_vdcfg5_extract(word);
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg5_cr_vdcfg5_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg5_cr_vdcfg5_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdcfg_cr_vdcfg5_read();
	uint32_t newword = sensorc_sfr_vdcfg_cr_vdcfg5_cr_vdcfg5_replace(oldword, plain_value);
	sensorc_sfr_vdcfg_cr_vdcfg5_write(newword);
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG6_ADDR (CSR_BASE + 0x26038L)
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG6_SIZE 1
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg6_read(void) {
	return csr_read_simple((CSR_BASE + 0x26038L));
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x26038L));
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG6_CR_VDCFG6_OFFSET 0
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG6_CR_VDCFG6_SIZE 4
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg6_cr_vdcfg6_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg6_cr_vdcfg6_read(void) {
	uint32_t word = sensorc_sfr_vdcfg_cr_vdcfg6_read();
	return sensorc_sfr_vdcfg_cr_vdcfg6_cr_vdcfg6_extract(word);
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg6_cr_vdcfg6_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg6_cr_vdcfg6_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdcfg_cr_vdcfg6_read();
	uint32_t newword = sensorc_sfr_vdcfg_cr_vdcfg6_cr_vdcfg6_replace(oldword, plain_value);
	sensorc_sfr_vdcfg_cr_vdcfg6_write(newword);
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG7_ADDR (CSR_BASE + 0x2603cL)
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG7_SIZE 1
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg7_read(void) {
	return csr_read_simple((CSR_BASE + 0x2603cL));
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2603cL));
}
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG7_CR_VDCFG7_OFFSET 0
#define CSR_SENSORC_SFR_VDCFG_CR_VDCFG7_CR_VDCFG7_SIZE 4
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg7_cr_vdcfg7_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg7_cr_vdcfg7_read(void) {
	uint32_t word = sensorc_sfr_vdcfg_cr_vdcfg7_read();
	return sensorc_sfr_vdcfg_cr_vdcfg7_cr_vdcfg7_extract(word);
}
static inline uint32_t sensorc_sfr_vdcfg_cr_vdcfg7_cr_vdcfg7_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sensorc_sfr_vdcfg_cr_vdcfg7_cr_vdcfg7_write(uint32_t plain_value) {
	uint32_t oldword = sensorc_sfr_vdcfg_cr_vdcfg7_read();
	uint32_t newword = sensorc_sfr_vdcfg_cr_vdcfg7_cr_vdcfg7_replace(oldword, plain_value);
	sensorc_sfr_vdcfg_cr_vdcfg7_write(newword);
}

#endif
//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (e08384a2) on 2023-07-03 14:27:43
//--------------------------------------------------------------------------------
#ifndef __GENERATED_MEM_H
#define __GENERATED_MEM_H

#ifndef SCE_BASE
#define SCE_BASE 0x40028000L
#define SCE_SIZE 0x00008000
#endif

#ifndef SYSCTRL_BASE
#define SYSCTRL_BASE 0x40040000L
#define SYSCTRL_SIZE 0x00010000
#endif

#ifndef IFSUB_BASE
#define IFSUB_BASE 0x50120000L
#define IFSUB_SIZE 0x00010000
#endif

#ifndef CORESUB_BASE
#define CORESUB_BASE 0x40000000L
#define CORESUB_SIZE 0x00010000
#endif

#ifndef SECSUB_BASE
#define SECSUB_BASE 0x40050000L
#define SECSUB_SIZE 0x00010000
#endif

#ifndef SEG_LKEY_BASE
#define SEG_LKEY_BASE 0x40020000L
#define SEG_LKEY_SIZE 0x00000100
#endif

#ifndef SEG_KEY_BASE
#define SEG_KEY_BASE 0x40020100L
#define SEG_KEY_SIZE 0x00000100
#endif

#ifndef SEG_SKEY_BASE
#define SEG_SKEY_BASE 0x40020200L
#define SEG_SKEY_SIZE 0x00000100
#endif

#ifndef SEG_SCRT_BASE
#define SEG_SCRT_BASE 0x40020300L
#define SEG_SCRT_SIZE 0x00000100
#endif

#ifndef SEG_MSG_BASE
#define SEG_MSG_BASE 0x40020400L
#define SEG_MSG_SIZE 0x00000200
#endif

#ifndef SEG_HOUT_BASE
#define SEG_HOUT_BASE 0x40020600L
#define SEG_HOUT_SIZE 0x00000100
#endif

#ifndef SEG_SOB_BASE
#define SEG_SOB_BASE 0x40020700L
#define SEG_SOB_SIZE 0x00000100
#endif

#ifndef SEG_PCON_BASE
#define SEG_PCON_BASE 0x40020800L
#define SEG_PCON_SIZE 0x00000100
#endif

#ifndef SEG_PKB_BASE
#define SEG_PKB_BASE 0x40020900L
#define SEG_PKB_SIZE 0x00000100
#endif

#ifndef SEG_PIB_BASE
#define SEG_PIB_BASE 0x40020a00L
#define SEG_PIB_SIZE 0x00000400
#endif

#ifndef SEG_PSIB_BASE
#define SEG_PSIB_BASE 0x40020e00L
#define SEG_PSIB_SIZE 0x00000400
#endif

#ifndef SEG_POB_BASE
#define SEG_POB_BASE 0x40021200L
#define SEG_POB_SIZE 0x00000400
#endif

#ifndef SEG_PSOB_BASE
#define SEG_PSOB_BASE 0x40021600L
#define SEG_PSOB_SIZE 0x00000400
#endif

#ifndef SEG_AKEY_BASE
#define SEG_AKEY_BASE 0x40021a00L
#define SEG_AKEY_SIZE 0x00000100
#endif

#ifndef SEG_AIB_BASE
#define SEG_AIB_BASE 0x40021b00L
#define SEG_AIB_SIZE 0x00000100
#endif

#ifndef SEG_AOB_BASE
#define SEG_AOB_BASE 0x40021c00L
#define SEG_AOB_SIZE 0x00000100
#endif

#ifndef SEG_RNGA_BASE
#define SEG_RNGA_BASE 0x40021d00L
#define SEG_RNGA_SIZE 0x00000400
#endif

#ifndef SEG_RNGB_BASE
#define SEG_RNGB_BASE 0x40022100L
#define SEG_RNGB_SIZE 0x00000400
#endif

#ifndef IFRAM0_BASE
#define IFRAM0_BASE 0x50000000L
#define IFRAM0_SIZE 0x00020000
#endif

#ifndef IFRAM1_BASE
#define IFRAM1_BASE 0x50020000L
#define IFRAM1_SIZE 0x00020000
#endif

#ifndef NULL_BASE
#define NULL_BASE 0x50040000L
#define NULL_SIZE 0x00010000
#endif

#ifndef UDMA_BASE
#define UDMA_BASE 0x50100000L
#define UDMA_SIZE 0x00020000
#endif

#ifndef UDP_BASE
#define UDP_BASE 0x50122000L
#define UDP_SIZE 0x00001000
#endif

#ifndef PIO_BASE
#define PIO_BASE 0x50123000L
#define PIO_SIZE 0x00001000
#endif

#ifndef SDDC_DAT_BASE
#define SDDC_DAT_BASE 0x50140000L
#define SDDC_DAT_SIZE 0x00010000
#endif

#ifndef UDC_BASE
#define UDC_BASE 0x50200000L
#define UDC_SIZE 0x00010000
#endif

#ifndef MEM_REGIONS
#define MEM_REGIONS "SCE       0x40028000 0x8000 \nSYSCTRL   0x40040000 0x10000 \nIFSUB     0x50120000 0x10000 \nCORESUB   0x40000000 0x10000 \nSECSUB    0x40050000 0x10000 \nSEG_LKEY  0x40020000 0x100 \nSEG_KEY   0x40020100 0x100 \nSEG_SKEY  0x40020200 0x100 \nSEG_SCRT  0x40020300 0x100 \nSEG_MSG   0x40020400 0x200 \nSEG_HOUT  0x40020600 0x100 \nSEG_SOB   0x40020700 0x100 \nSEG_PCON  0x40020800 0x100 \nSEG_PKB   0x40020900 0x100 \nSEG_PIB   0x40020a00 0x400 \nSEG_PSIB  0x40020e00 0x400 \nSEG_POB   0x40021200 0x400 \nSEG_PSOB  0x40021600 0x400 \nSEG_AKEY  0x40021a00 0x100 \nSEG_AIB   0x40021b00 0x100 \nSEG_AOB   0x40021c00 0x100 \nSEG_RNGA  0x40021d00 0x400 \nSEG_RNGB  0x40022100 0x400 \nIFRAM0    0x50000000 0x20000 \nIFRAM1    0x50020000 0x20000 \nNULL      0x50040000 0x10000 \nUDMA      0x50100000 0x20000 \nUDP       0x50122000 0x1000 \nPIO       0x50123000 0x1000 \nSDDC_DAT  0x50140000 0x10000 \nUDC       0x50200000 0x10000 "
#endif
#endif
//--------------------------------------------------------------------------------
// Auto-generated by sce_to_svd (derived from LiteX) (e08384a2) on 2023-07-03 14:27:43
//--------------------------------------------------------------------------------
#ifndef __GENERATED_SOC_H
#define __GENERATED_SOC_H

#ifndef __ASSEMBLER__
#endif // !__ASSEMBLER__

#endif
