
// use crate::daric_generated::*;

pub fn singlecheck(title: &str, addr: *mut u32, data: u32) {
    let mut uart = crate::debug::Uart {};

    uart.tiny_write_str(title);
    uart.tiny_write_str("::  [");
    uart.print_hex_word(addr as u32);
    uart.tiny_write_str("] wr:");
    uart.print_hex_word(data as u32);
    uart.tiny_write_str(" | rd:");

    unsafe{addr.write_volatile(data)};
    let r = unsafe{addr.read_volatile()};

    uart.print_hex_word(r);
    uart.tiny_write_str(" ");
    if r != data {
        uart.tiny_write_str("----[x!]");
        if r == 0 {
            uart.tiny_write_str("[0!]");
        }
    }
    uart.tiny_write_str("\n")
}

pub fn singlecheckread(title: &str, addr: *const u32) {
    let mut uart = crate::debug::Uart {};
    uart.tiny_write_str(title);
    uart.tiny_write_str("::  [");
    uart.print_hex_word(addr as u32);
    uart.tiny_write_str("] wr:-------- | rd:");
    let r = unsafe{addr.read_volatile()};
    uart.print_hex_word(r);
    uart.tiny_write_str(" \n");
}

pub fn apb_test() {
    let mut uart = crate::debug::Uart {};
    crate::snap_ticks("scan bus:: ");

    crate::snap_ticks("sensorc:: ");
    singlecheck("SENSORC_SFR_VDMASK0        ", 0x40053000 as *mut u32, 0x924770d3);
    singlecheck("SENSORC_SFR_VDMASK1        ", 0x40053004 as *mut u32, 0x6dcbac50);
    singlecheck("SENSORC_SFR_VDSR           ", 0x40053008 as *mut u32, 0x93fdcab8);
    singlecheck("SENSORC_SFR_LDMASK         ", 0x40053010 as *mut u32, 0x34c2da80);
    singlecheck("SENSORC_SFR_LDSR           ", 0x40053014 as *mut u32, 0xd035d259);
    singlecheck("SENSORC_SFR_LDCFG          ", 0x40053018 as *mut u32, 0xd2d6b877);
    singlecheck("SENSORC_SFR_VDCFG_CR_VDCFG0", 0x40053020 as *mut u32, 0x2904cdef);
    singlecheck("SENSORC_SFR_VDCFG_CR_VDCFG1", 0x40053024 as *mut u32, 0x854a9657);
    singlecheck("SENSORC_SFR_VDCFG_CR_VDCFG2", 0x40053028 as *mut u32, 0x53e8eb43);
    singlecheck("SENSORC_SFR_VDCFG_CR_VDCFG3", 0x4005302c as *mut u32, 0xff1e5bef);
    singlecheck("SENSORC_SFR_VDCFG_CR_VDCFG4", 0x40053030 as *mut u32, 0x0b680c1c);
    singlecheck("SENSORC_SFR_VDCFG_CR_VDCFG5", 0x40053034 as *mut u32, 0xdc338383);
    singlecheck("SENSORC_SFR_VDCFG_CR_VDCFG6", 0x40053038 as *mut u32, 0x9a6ab329);
    singlecheck("SENSORC_SFR_VDCFG_CR_VDCFG7", 0x4005303c as *mut u32, 0x61b0ee09);
    crate::snap_ticks("mesh:: ");
    singlecheck("MESH_SFR_MLDRV_CR_MLDRV0", 0x40052000 as *mut u32, 0xacca7f0d);
    singlecheck("MESH_SFR_MLIE_CR_MLIE0  ", 0x40052004 as *mut u32, 0x74f2e2ed);
    singlecheck("MESH_SFR_MLSR_SR_MLSR0  ", 0x40052008 as *mut u32, 0xaf949e5e);
    singlecheck("MESH_SFR_MLSR_SR_MLSR1  ", 0x4005200c as *mut u32, 0xa96ec2b3);
    singlecheck("MESH_SFR_MLSR_SR_MLSR2  ", 0x40052010 as *mut u32, 0x220adb0a);
    singlecheck("MESH_SFR_MLSR_SR_MLSR3  ", 0x40052014 as *mut u32, 0xfb7f6f5d);
    singlecheck("MESH_SFR_MLSR_SR_MLSR4  ", 0x40052018 as *mut u32, 0xf829d29f);
    singlecheck("MESH_SFR_MLSR_SR_MLSR5  ", 0x4005201c as *mut u32, 0x9d02fc90);
    singlecheck("MESH_SFR_MLSR_SR_MLSR6  ", 0x40052020 as *mut u32, 0x0109c207);
    singlecheck("MESH_SFR_MLSR_SR_MLSR7  ", 0x40052024 as *mut u32, 0x224c0601);
    crate::snap_ticks("gluechain:: ");
    singlecheck("GLUECHAIN_SFR_GCMASK", 0x40054000 as *mut u32, 0xe5f0307e);
    singlecheck("GLUECHAIN_SFR_GCSR  ", 0x40054004 as *mut u32, 0x8c8a18b2);
    singlecheck("GLUECHAIN_SFR_GCRST ", 0x40054008 as *mut u32, 0x6f9fb997);
    singlecheck("GLUECHAIN_SFR_GCTEST", 0x4005400c as *mut u32, 0x95a4d257);
    crate::snap_ticks("pl230:: ");
    singlecheck("PL230_PL230", 0x40001000 as *mut u32, 0x69b1dcbf);
    crate::snap_ticks("qfc:: ");
    singlecheck("QFC_SFR_IO         ", 0x40000000 as *mut u32, 0x0973e89c);
    singlecheck("QFC_SFR_AR         ", 0x40000004 as *mut u32, 0x7f216822);
    singlecheck("QFC_SFR_IODRV      ", 0x40000008 as *mut u32, 0xa86b8a6e);
    singlecheck("QFC_CR_XIP_ADDRMODE", 0x40000010 as *mut u32, 0xdae98554);
    singlecheck("QFC_CR_XIP_OPCODE  ", 0x40000014 as *mut u32, 0x2651f637);
    singlecheck("QFC_CR_XIP_WIDTH   ", 0x40000018 as *mut u32, 0x99ef1857);
    singlecheck("QFC_CR_XIP_SSEL    ", 0x4000001c as *mut u32, 0x18bb28e9);
    singlecheck("QFC_CR_XIP_DUMCYC  ", 0x40000020 as *mut u32, 0xceb506f6);
    singlecheck("QFC_CR_XIP_CFG     ", 0x40000024 as *mut u32, 0xf29c11ad);
    crate::snap_ticks("mdma:: ");
    singlecheck("MDMA_SFR_EVSEL_CR_EVSEL0", 0x40002000 as *mut u32, 0x6a013380);
    singlecheck("MDMA_SFR_EVSEL_CR_EVSEL1", 0x40002004 as *mut u32, 0x4652f62d);
    singlecheck("MDMA_SFR_EVSEL_CR_EVSEL2", 0x40002008 as *mut u32, 0x1e9667c2);
    singlecheck("MDMA_SFR_EVSEL_CR_EVSEL3", 0x4000200c as *mut u32, 0x74ab0a38);
    singlecheck("MDMA_SFR_EVSEL_CR_EVSEL4", 0x40002010 as *mut u32, 0xd230b46c);
    singlecheck("MDMA_SFR_EVSEL_CR_EVSEL5", 0x40002014 as *mut u32, 0xc70afc92);
    singlecheck("MDMA_SFR_EVSEL_CR_EVSEL6", 0x40002018 as *mut u32, 0x58fa6e1c);
    singlecheck("MDMA_SFR_EVSEL_CR_EVSEL7", 0x4000201c as *mut u32, 0x6f4930c8);
    singlecheck("MDMA_SFR_CR_CR_MDMAREQ0 ", 0x40002020 as *mut u32, 0xb66b3284);
    singlecheck("MDMA_SFR_CR_CR_MDMAREQ1 ", 0x40002024 as *mut u32, 0x51c5b8b2);
    singlecheck("MDMA_SFR_CR_CR_MDMAREQ2 ", 0x40002028 as *mut u32, 0x1475f78d);
    singlecheck("MDMA_SFR_CR_CR_MDMAREQ3 ", 0x4000202c as *mut u32, 0x72b3cb0b);
    singlecheck("MDMA_SFR_CR_CR_MDMAREQ4 ", 0x40002030 as *mut u32, 0x9535971c);
    singlecheck("MDMA_SFR_CR_CR_MDMAREQ5 ", 0x40002034 as *mut u32, 0xde9a896f);
    singlecheck("MDMA_SFR_CR_CR_MDMAREQ6 ", 0x40002038 as *mut u32, 0xe918be9f);
    singlecheck("MDMA_SFR_CR_CR_MDMAREQ7 ", 0x4000203c as *mut u32, 0x8525e8a8);
    singlecheck("MDMA_SFR_SR_SR_MDMAREQ0 ", 0x40002040 as *mut u32, 0x9a238b6a);
    singlecheck("MDMA_SFR_SR_SR_MDMAREQ1 ", 0x40002044 as *mut u32, 0x1011eeb4);
    singlecheck("MDMA_SFR_SR_SR_MDMAREQ2 ", 0x40002048 as *mut u32, 0x66b072b9);
    singlecheck("MDMA_SFR_SR_SR_MDMAREQ3 ", 0x4000204c as *mut u32, 0x95be4da0);
    singlecheck("MDMA_SFR_SR_SR_MDMAREQ4 ", 0x40002050 as *mut u32, 0x89e6156b);
    singlecheck("MDMA_SFR_SR_SR_MDMAREQ5 ", 0x40002054 as *mut u32, 0x70fc1afc);
    singlecheck("MDMA_SFR_SR_SR_MDMAREQ6 ", 0x40002058 as *mut u32, 0x00b97ea6);
    singlecheck("MDMA_SFR_SR_SR_MDMAREQ7 ", 0x4000205c as *mut u32, 0x89112f0a);
    crate::snap_ticks("rp_pio:: ");
    singlecheck("RP_PIO_SFR_CTRL         ", 0x50123000 as *mut u32, 0x0cf25923);
    singlecheck("RP_PIO_SFR_FSTAT        ", 0x50123004 as *mut u32, 0x17be082f);
    singlecheck("RP_PIO_SFR_FDEBUG       ", 0x50123008 as *mut u32, 0x7c2c966d);
    singlecheck("RP_PIO_SFR_FLEVEL       ", 0x5012300c as *mut u32, 0x72745307);
    singlecheck("RP_PIO_SFR_TXF0         ", 0x50123010 as *mut u32, 0xb9e93d52);
    singlecheck("RP_PIO_SFR_TXF1         ", 0x50123014 as *mut u32, 0xb2a7a18a);
    singlecheck("RP_PIO_SFR_TXF2         ", 0x50123018 as *mut u32, 0x6c5e1578);
    singlecheck("RP_PIO_SFR_TXF3         ", 0x5012301c as *mut u32, 0x3cc279b3);
    singlecheck("RP_PIO_SFR_RXF0         ", 0x50123020 as *mut u32, 0x9e7e1fc3);
    singlecheck("RP_PIO_SFR_RXF1         ", 0x50123024 as *mut u32, 0xafe08a13);
    singlecheck("RP_PIO_SFR_RXF2         ", 0x50123028 as *mut u32, 0x7a9c0163);
    singlecheck("RP_PIO_SFR_RXF3         ", 0x5012302c as *mut u32, 0xcebe24d9);
    singlecheck("RP_PIO_SFR_IRQ          ", 0x50123030 as *mut u32, 0xf65cf3f3);
    singlecheck("RP_PIO_SFR_IRQ_FORCE    ", 0x50123034 as *mut u32, 0xdbdd4dd9);
    singlecheck("RP_PIO_SFR_SYNC_BYPASS  ", 0x50123038 as *mut u32, 0xb7debb9b);
    singlecheck("RP_PIO_SFR_DBG_PADOUT   ", 0x5012303c as *mut u32, 0xe380a176);
    singlecheck("RP_PIO_SFR_DBG_PADOE    ", 0x50123040 as *mut u32, 0xf65e7737);
    singlecheck("RP_PIO_SFR_DBG_CFGINFO  ", 0x50123044 as *mut u32, 0x491597ca);
    singlecheck("RP_PIO_SFR_INSTR_MEM0   ", 0x50123048 as *mut u32, 0xab8534c1);
    singlecheck("RP_PIO_SFR_INSTR_MEM1   ", 0x5012304c as *mut u32, 0x242a809b);
    singlecheck("RP_PIO_SFR_INSTR_MEM2   ", 0x50123050 as *mut u32, 0x985a9ef0);
    singlecheck("RP_PIO_SFR_INSTR_MEM3   ", 0x50123054 as *mut u32, 0x5990fe96);
    singlecheck("RP_PIO_SFR_INSTR_MEM4   ", 0x50123058 as *mut u32, 0x31d4ff08);
    singlecheck("RP_PIO_SFR_INSTR_MEM5   ", 0x5012305c as *mut u32, 0xffec35fe);
    singlecheck("RP_PIO_SFR_INSTR_MEM6   ", 0x50123060 as *mut u32, 0x6c69a172);
    singlecheck("RP_PIO_SFR_INSTR_MEM7   ", 0x50123064 as *mut u32, 0x8e368ce0);
    singlecheck("RP_PIO_SFR_INSTR_MEM8   ", 0x50123068 as *mut u32, 0x5d447060);
    singlecheck("RP_PIO_SFR_INSTR_MEM9   ", 0x5012306c as *mut u32, 0xa08b84f3);
    singlecheck("RP_PIO_SFR_INSTR_MEM10  ", 0x50123070 as *mut u32, 0x35a7efc0);
    singlecheck("RP_PIO_SFR_INSTR_MEM11  ", 0x50123074 as *mut u32, 0x9c1a1528);
    singlecheck("RP_PIO_SFR_INSTR_MEM12  ", 0x50123078 as *mut u32, 0xdffb54ce);
    singlecheck("RP_PIO_SFR_INSTR_MEM13  ", 0x5012307c as *mut u32, 0xa6faba7b);
    singlecheck("RP_PIO_SFR_INSTR_MEM14  ", 0x50123080 as *mut u32, 0x0e24d9cc);
    singlecheck("RP_PIO_SFR_INSTR_MEM15  ", 0x50123084 as *mut u32, 0x4133e4d7);
    singlecheck("RP_PIO_SFR_INSTR_MEM16  ", 0x50123088 as *mut u32, 0x74f5add5);
    singlecheck("RP_PIO_SFR_INSTR_MEM17  ", 0x5012308c as *mut u32, 0xc2680192);
    singlecheck("RP_PIO_SFR_INSTR_MEM18  ", 0x50123090 as *mut u32, 0x4850e927);
    singlecheck("RP_PIO_SFR_INSTR_MEM19  ", 0x50123094 as *mut u32, 0xb1f00bca);
    singlecheck("RP_PIO_SFR_INSTR_MEM20  ", 0x50123098 as *mut u32, 0x81aa70ac);
    singlecheck("RP_PIO_SFR_INSTR_MEM21  ", 0x5012309c as *mut u32, 0x437cbc41);
    singlecheck("RP_PIO_SFR_INSTR_MEM22  ", 0x501230a0 as *mut u32, 0x576e3d4f);
    singlecheck("RP_PIO_SFR_INSTR_MEM23  ", 0x501230a4 as *mut u32, 0xb9fef1d6);
    singlecheck("RP_PIO_SFR_INSTR_MEM24  ", 0x501230a8 as *mut u32, 0x7adb78cc);
    singlecheck("RP_PIO_SFR_INSTR_MEM25  ", 0x501230ac as *mut u32, 0xb847f03e);
    singlecheck("RP_PIO_SFR_INSTR_MEM26  ", 0x501230b0 as *mut u32, 0xcb256db7);
    singlecheck("RP_PIO_SFR_INSTR_MEM27  ", 0x501230b4 as *mut u32, 0xfe0a9c6c);
    singlecheck("RP_PIO_SFR_INSTR_MEM28  ", 0x501230b8 as *mut u32, 0xd6220b4f);
    singlecheck("RP_PIO_SFR_INSTR_MEM29  ", 0x501230bc as *mut u32, 0x5274f6a0);
    singlecheck("RP_PIO_SFR_INSTR_MEM30  ", 0x501230c0 as *mut u32, 0xbd8d9d60);
    singlecheck("RP_PIO_SFR_INSTR_MEM31  ", 0x501230c4 as *mut u32, 0x9c3d087c);
    singlecheck("RP_PIO_SFR_SM0_CLKDIV   ", 0x501230c8 as *mut u32, 0x2fb5a758);
    singlecheck("RP_PIO_SFR_SM0_EXECCTRL ", 0x501230cc as *mut u32, 0x2b24ced4);
    singlecheck("RP_PIO_SFR_SM0_SHIFTCTRL", 0x501230d0 as *mut u32, 0xef8c60c0);
    singlecheck("RP_PIO_SFR_SM0_ADDR     ", 0x501230d4 as *mut u32, 0xbeb2993a);
    singlecheck("RP_PIO_SFR_SM0_INSTR    ", 0x501230d8 as *mut u32, 0xf37e27a3);
    singlecheck("RP_PIO_SFR_SM0_PINCTRL  ", 0x501230dc as *mut u32, 0x041bbaab);
    singlecheck("RP_PIO_SFR_SM1_CLKDIV   ", 0x501230e0 as *mut u32, 0x338a2f39);
    singlecheck("RP_PIO_SFR_SM1_EXECCTRL ", 0x501230e4 as *mut u32, 0x93017690);
    singlecheck("RP_PIO_SFR_SM1_SHIFTCTRL", 0x501230e8 as *mut u32, 0x0cd5d8e2);
    singlecheck("RP_PIO_SFR_SM1_ADDR     ", 0x501230ec as *mut u32, 0x90af95fe);
    singlecheck("RP_PIO_SFR_SM1_INSTR    ", 0x501230f0 as *mut u32, 0x65a3a495);
    singlecheck("RP_PIO_SFR_SM1_PINCTRL  ", 0x501230f4 as *mut u32, 0x28615e14);
    singlecheck("RP_PIO_SFR_SM2_CLKDIV   ", 0x501230f8 as *mut u32, 0xdd4ec4d8);
    singlecheck("RP_PIO_SFR_SM2_EXECCTRL ", 0x501230fc as *mut u32, 0xfff5618b);
    singlecheck("RP_PIO_SFR_SM2_SHIFTCTRL", 0x50123100 as *mut u32, 0x596f5f89);
    singlecheck("RP_PIO_SFR_SM2_ADDR     ", 0x50123104 as *mut u32, 0x65bcf7b6);
    singlecheck("RP_PIO_SFR_SM2_INSTR    ", 0x50123108 as *mut u32, 0x5902a9db);
    singlecheck("RP_PIO_SFR_SM2_PINCTRL  ", 0x5012310c as *mut u32, 0xdd959036);
    singlecheck("RP_PIO_SFR_SM3_CLKDIV   ", 0x50123110 as *mut u32, 0xb4dc7dee);
    singlecheck("RP_PIO_SFR_SM3_EXECCTRL ", 0x50123114 as *mut u32, 0x9c1f741f);
    singlecheck("RP_PIO_SFR_SM3_SHIFTCTRL", 0x50123118 as *mut u32, 0xb8f9a0fe);
    singlecheck("RP_PIO_SFR_SM3_ADDR     ", 0x5012311c as *mut u32, 0x2cd2e360);
    singlecheck("RP_PIO_SFR_SM3_INSTR    ", 0x50123120 as *mut u32, 0xd2fcb96e);
    singlecheck("RP_PIO_SFR_SM3_PINCTRL  ", 0x50123124 as *mut u32, 0x755961a9);
    singlecheck("RP_PIO_SFR_INTR         ", 0x50123128 as *mut u32, 0x31c00570);
    singlecheck("RP_PIO_SFR_IRQ0_INTE    ", 0x5012312c as *mut u32, 0x270e1922);
    singlecheck("RP_PIO_SFR_IRQ0_INTF    ", 0x50123130 as *mut u32, 0xa2460e15);
    singlecheck("RP_PIO_SFR_IRQ0_INTS    ", 0x50123134 as *mut u32, 0x91ec56e8);
    singlecheck("RP_PIO_SFR_IRQ1_INTE    ", 0x50123138 as *mut u32, 0x0d453cdf);
    singlecheck("RP_PIO_SFR_IRQ1_INTF    ", 0x5012313c as *mut u32, 0xf3281b8e);
    singlecheck("RP_PIO_SFR_IRQ1_INTS    ", 0x50123140 as *mut u32, 0x2d3f0b91);
    singlecheck("RP_PIO_SFR_IO_OE_INV    ", 0x50123180 as *mut u32, 0x2f81f9e8);
    singlecheck("RP_PIO_SFR_IO_O_INV     ", 0x50123184 as *mut u32, 0x0af2ee97);
    singlecheck("RP_PIO_SFR_IO_I_INV     ", 0x50123188 as *mut u32, 0x6dc3ccee);
    singlecheck("RP_PIO_SFR_FIFO_MARGIN  ", 0x5012318c as *mut u32, 0x31e6ff39);
    singlecheck("RP_PIO_SFR_ZERO0        ", 0x50123190 as *mut u32, 0x29ade05f);
    singlecheck("RP_PIO_SFR_ZERO1        ", 0x50123194 as *mut u32, 0xc6fe30a5);
    singlecheck("RP_PIO_SFR_ZERO2        ", 0x50123198 as *mut u32, 0xe0f003e9);
    singlecheck("RP_PIO_SFR_ZERO3        ", 0x5012319c as *mut u32, 0xe130db7c);
    crate::snap_ticks("sddc:: ");
    singlecheck("SDDC_SFR_IO                                                             ", 0x50121000 as *mut u32, 0x6baeea37);
    singlecheck("SDDC_SFR_AR                                                             ", 0x50121004 as *mut u32, 0x18239760);
    singlecheck("SDDC_CR_OCR                                                             ", 0x50121010 as *mut u32, 0x1e4e0fad);
    singlecheck("SDDC_CR_RDFFTHRES                                                       ", 0x50121014 as *mut u32, 0x1b5908f8);
    singlecheck("SDDC_CR_REV                                                             ", 0x50121018 as *mut u32, 0xe4367cca);
    singlecheck("SDDC_CR_BACSA                                                           ", 0x5012101c as *mut u32, 0x9ea76f08);
    singlecheck("SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0                                   ", 0x50121020 as *mut u32, 0x9b9aaad1);
    singlecheck("SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1                                   ", 0x50121024 as *mut u32, 0x8853ae61);
    singlecheck("SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2                                   ", 0x50121028 as *mut u32, 0xad544735);
    singlecheck("SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3                                   ", 0x5012102c as *mut u32, 0xb1834066);
    singlecheck("SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4                                   ", 0x50121030 as *mut u32, 0x796c1d88);
    singlecheck("SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5                                   ", 0x50121034 as *mut u32, 0x37c4c6b9);
    singlecheck("SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6                                   ", 0x50121038 as *mut u32, 0x5affe1ce);
    singlecheck("SDDC_CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7                                   ", 0x5012103c as *mut u32, 0x87ffadf0);
    singlecheck("SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0                                  ", 0x50121040 as *mut u32, 0x132a7176);
    singlecheck("SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1                                  ", 0x50121044 as *mut u32, 0xcfac3216);
    singlecheck("SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2                                  ", 0x50121048 as *mut u32, 0xd65358aa);
    singlecheck("SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3                                  ", 0x5012104c as *mut u32, 0xeb2a9dff);
    singlecheck("SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4                                  ", 0x50121050 as *mut u32, 0xba1c4b6b);
    singlecheck("SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5                                  ", 0x50121054 as *mut u32, 0x5bc1c366);
    singlecheck("SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6                                  ", 0x50121058 as *mut u32, 0xa015b0f6);
    singlecheck("SDDC_CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7                                  ", 0x5012105c as *mut u32, 0x2bccd6b6);
    singlecheck("SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0                         ", 0x50121060 as *mut u32, 0x34a02a65);
    singlecheck("SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1                         ", 0x50121064 as *mut u32, 0xd216eea8);
    singlecheck("SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2                         ", 0x50121068 as *mut u32, 0x3f13091d);
    singlecheck("SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3                         ", 0x5012106c as *mut u32, 0x07f5e51d);
    singlecheck("SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4                         ", 0x50121070 as *mut u32, 0x0165f0f0);
    singlecheck("SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5                         ", 0x50121074 as *mut u32, 0xfaa97965);
    singlecheck("SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6                         ", 0x50121078 as *mut u32, 0x62a12347);
    singlecheck("SDDC_CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7                         ", 0x5012107c as *mut u32, 0xa9632e3d);
    singlecheck("SDDC_CR_WRITE_PROTECT                                                   ", 0x50121080 as *mut u32, 0x9fc745d0);
    singlecheck("SDDC_CR_REG_DSR                                                         ", 0x50121084 as *mut u32, 0xe6cc5bda);
    singlecheck("SDDC_CR_REG_CID_CFG_REG_CID0                                            ", 0x50121088 as *mut u32, 0x8d3ba755);
    singlecheck("SDDC_CR_REG_CID_CFG_REG_CID1                                            ", 0x5012108c as *mut u32, 0x7587e119);
    singlecheck("SDDC_CR_REG_CID_CFG_REG_CID2                                            ", 0x50121090 as *mut u32, 0x55f7f60a);
    singlecheck("SDDC_CR_REG_CID_CFG_REG_CID3                                            ", 0x50121094 as *mut u32, 0x08d6920b);
    singlecheck("SDDC_CR_REG_CSD_CFG_REG_CSD0                                            ", 0x50121098 as *mut u32, 0xa0a1c6ef);
    singlecheck("SDDC_CR_REG_CSD_CFG_REG_CSD1                                            ", 0x5012109c as *mut u32, 0x120ff957);
    singlecheck("SDDC_CR_REG_CSD_CFG_REG_CSD2                                            ", 0x501210a0 as *mut u32, 0x43eb96f3);
    singlecheck("SDDC_CR_REG_CSD_CFG_REG_CSD3                                            ", 0x501210a4 as *mut u32, 0x2d13320e);
    singlecheck("SDDC_CR_REG_SCR_CFG_REG_SCR0                                            ", 0x501210a8 as *mut u32, 0x75f32b50);
    singlecheck("SDDC_CR_REG_SCR_CFG_REG_SCR1                                            ", 0x501210ac as *mut u32, 0x2752aa63);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS0                                ", 0x501210b0 as *mut u32, 0x865fc874);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS1                                ", 0x501210b4 as *mut u32, 0x1ed188dc);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS2                                ", 0x501210b8 as *mut u32, 0xce80f7b1);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS3                                ", 0x501210bc as *mut u32, 0xcf4c7d08);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS4                                ", 0x501210c0 as *mut u32, 0x93672832);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS5                                ", 0x501210c4 as *mut u32, 0x827f9414);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS6                                ", 0x501210c8 as *mut u32, 0xb68a272a);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS7                                ", 0x501210cc as *mut u32, 0xa2465d29);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS8                                ", 0x501210d0 as *mut u32, 0x9bdb8549);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS9                                ", 0x501210d4 as *mut u32, 0xa5748bd1);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS10                               ", 0x501210d8 as *mut u32, 0x891b8273);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS11                               ", 0x501210dc as *mut u32, 0x36c35dc5);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS12                               ", 0x501210e0 as *mut u32, 0x6b3d9c59);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS13                               ", 0x501210e4 as *mut u32, 0xdbc1f2b0);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS14                               ", 0x501210e8 as *mut u32, 0x1d95cdb0);
    singlecheck("SDDC_CR_REG_SD_STATUS_CFG_REG_SD_STATUS15                               ", 0x501210ec as *mut u32, 0x4cae8b6b);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0                      ", 0x50121100 as *mut u32, 0xd9e0e7fe);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1                      ", 0x50121104 as *mut u32, 0xa03bdb07);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2                      ", 0x50121108 as *mut u32, 0x071c80a0);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3                      ", 0x5012110c as *mut u32, 0x9bfa3292);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4                      ", 0x50121110 as *mut u32, 0xc5f0a710);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5                      ", 0x50121114 as *mut u32, 0xab4677e9);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6                      ", 0x50121118 as *mut u32, 0x279ee973);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7                      ", 0x5012111c as *mut u32, 0x63adcdbb);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8                      ", 0x50121120 as *mut u32, 0x36334245);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9                      ", 0x50121124 as *mut u32, 0x8514f49c);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10                     ", 0x50121128 as *mut u32, 0x8e73758e);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11                     ", 0x5012112c as *mut u32, 0xf044106f);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12                     ", 0x50121130 as *mut u32, 0x21412442);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13                     ", 0x50121134 as *mut u32, 0x7528ffc4);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14                     ", 0x50121138 as *mut u32, 0xac79fc27);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15                     ", 0x5012113c as *mut u32, 0x859b4c3f);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16                     ", 0x50121140 as *mut u32, 0xc9763989);
    singlecheck("SDDC_CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17                     ", 0x50121144 as *mut u32, 0xb8b00cb6);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0", 0x50121148 as *mut u32, 0x20aa8c99);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1", 0x5012114c as *mut u32, 0xfdcf4d10);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2", 0x50121150 as *mut u32, 0xee412da7);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3", 0x50121154 as *mut u32, 0x6f6da855);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4", 0x50121158 as *mut u32, 0xa8c7b926);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5", 0x5012115c as *mut u32, 0x1731222b);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6", 0x50121160 as *mut u32, 0x74bc1570);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0              ", 0x50121168 as *mut u32, 0x4fb358cf);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1              ", 0x5012116c as *mut u32, 0xbfde6f8e);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2              ", 0x50121170 as *mut u32, 0x61d4c262);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3              ", 0x50121174 as *mut u32, 0x9925fe10);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4              ", 0x50121178 as *mut u32, 0xf5a31c96);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5              ", 0x5012117c as *mut u32, 0xfcc1650f);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6              ", 0x50121180 as *mut u32, 0xbfd67c42);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0              ", 0x50121188 as *mut u32, 0x21546acf);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1              ", 0x5012118c as *mut u32, 0xa8245fe4);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2              ", 0x50121190 as *mut u32, 0x74a8eaec);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3              ", 0x50121194 as *mut u32, 0x0303cd03);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4              ", 0x50121198 as *mut u32, 0x2bb9daa6);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5              ", 0x5012119c as *mut u32, 0x35322c61);
    singlecheck("SDDC_CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6              ", 0x501211a0 as *mut u32, 0x557e8b56);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0  ", 0x501211a8 as *mut u32, 0x96cd38a3);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1  ", 0x501211ac as *mut u32, 0x27aacf24);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2  ", 0x501211b0 as *mut u32, 0x7c0dc237);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3  ", 0x501211b4 as *mut u32, 0x5b066f19);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4  ", 0x501211b8 as *mut u32, 0x0141c505);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5  ", 0x501211bc as *mut u32, 0xac981167);
    singlecheck("SDDC_CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6  ", 0x501211c0 as *mut u32, 0x0c4c3bc9);
    singlecheck("SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0                                ", 0x501211c8 as *mut u32, 0xb6cfad9e);
    singlecheck("SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1                                ", 0x501211cc as *mut u32, 0x7593f011);
    singlecheck("SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2                                ", 0x501211d0 as *mut u32, 0xd6ba26ea);
    singlecheck("SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3                                ", 0x501211d4 as *mut u32, 0x17bb0d12);
    singlecheck("SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4                                ", 0x501211d8 as *mut u32, 0x764f924c);
    singlecheck("SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5                                ", 0x501211dc as *mut u32, 0x8cfd7d07);
    singlecheck("SDDC_CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6                                ", 0x501211e0 as *mut u32, 0x9218bb1c);
    singlecheck("SDDC_CR_REG_UHS_1_SUPPORT                                               ", 0x501211f0 as *mut u32, 0x15c19a7a);
    crate::snap_ticks("pwm:: ");
    crate::snap_ticks("iox:: ");
    singlecheck("IOX_SFR_AFSEL_CRAFSEL0           ", 0x5012f000 as *mut u32, 0xf1c04236);
    singlecheck("IOX_SFR_AFSEL_CRAFSEL1           ", 0x5012f004 as *mut u32, 0xc0ca8d26);
    singlecheck("IOX_SFR_AFSEL_CRAFSEL2           ", 0x5012f008 as *mut u32, 0xd9d42713);
    singlecheck("IOX_SFR_AFSEL_CRAFSEL3           ", 0x5012f00c as *mut u32, 0xd0b1d953);
    singlecheck("IOX_SFR_AFSEL_CRAFSEL4           ", 0x5012f010 as *mut u32, 0x05efdd1d);
    singlecheck("IOX_SFR_AFSEL_CRAFSEL5           ", 0x5012f014 as *mut u32, 0xff5e6c3b);
    singlecheck("IOX_SFR_AFSEL_CRAFSEL6           ", 0x5012f018 as *mut u32, 0xb6307ed0);
    singlecheck("IOX_SFR_AFSEL_CRAFSEL7           ", 0x5012f01c as *mut u32, 0xb21564b9);
    singlecheck("IOX_SFR_INTCR_CRINT0             ", 0x5012f100 as *mut u32, 0xa82aed54);
    singlecheck("IOX_SFR_INTCR_CRINT1             ", 0x5012f104 as *mut u32, 0x73650b75);
    singlecheck("IOX_SFR_INTCR_CRINT2             ", 0x5012f108 as *mut u32, 0x3a0e8f7d);
    singlecheck("IOX_SFR_INTCR_CRINT3             ", 0x5012f10c as *mut u32, 0x77bea723);
    singlecheck("IOX_SFR_INTCR_CRINT4             ", 0x5012f110 as *mut u32, 0xe8ad5157);
    singlecheck("IOX_SFR_INTCR_CRINT5             ", 0x5012f114 as *mut u32, 0x8b60b627);
    singlecheck("IOX_SFR_INTCR_CRINT6             ", 0x5012f118 as *mut u32, 0xd0c42bcf);
    singlecheck("IOX_SFR_INTCR_CRINT7             ", 0x5012f11c as *mut u32, 0x4dad91a9);
    singlecheck("IOX_SFR_INTFR                    ", 0x5012f120 as *mut u32, 0x3c01a871);
    singlecheck("IOX_SFR_GPIOOUT_CRGO0            ", 0x5012f130 as *mut u32, 0x084b4fbc);
    singlecheck("IOX_SFR_GPIOOUT_CRGO1            ", 0x5012f134 as *mut u32, 0x2a1a82c6);
    singlecheck("IOX_SFR_GPIOOUT_CRGO2            ", 0x5012f138 as *mut u32, 0x4ebba1e3);
    singlecheck("IOX_SFR_GPIOOUT_CRGO3            ", 0x5012f13c as *mut u32, 0xc493daeb);
    singlecheck("IOX_SFR_GPIOOE_CRGOE0            ", 0x5012f140 as *mut u32, 0x07462357);
    singlecheck("IOX_SFR_GPIOOE_CRGOE1            ", 0x5012f144 as *mut u32, 0x778abe27);
    singlecheck("IOX_SFR_GPIOOE_CRGOE2            ", 0x5012f148 as *mut u32, 0x3ed664db);
    singlecheck("IOX_SFR_GPIOOE_CRGOE3            ", 0x5012f14c as *mut u32, 0x046cbf22);
    singlecheck("IOX_SFR_GPIOPU_CRGPU0            ", 0x5012f150 as *mut u32, 0xadeb2fa9);
    singlecheck("IOX_SFR_GPIOPU_CRGPU1            ", 0x5012f154 as *mut u32, 0x5a1cdbaa);
    singlecheck("IOX_SFR_GPIOPU_CRGPU2            ", 0x5012f158 as *mut u32, 0xae22e854);
    singlecheck("IOX_SFR_GPIOPU_CRGPU3            ", 0x5012f15c as *mut u32, 0x4245e01a);
    singlecheck("IOX_SFR_GPIOIN_SRGI0             ", 0x5012f160 as *mut u32, 0x279388b0);
    singlecheck("IOX_SFR_GPIOIN_SRGI1             ", 0x5012f164 as *mut u32, 0x0ab84c77);
    singlecheck("IOX_SFR_GPIOIN_SRGI2             ", 0x5012f168 as *mut u32, 0x3d3ed919);
    singlecheck("IOX_SFR_GPIOIN_SRGI3             ", 0x5012f16c as *mut u32, 0xc4210beb);
    singlecheck("IOX_SFR_PIOSEL                   ", 0x5012f200 as *mut u32, 0x59bc0dd6);
    singlecheck("IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL0 ", 0x5012f230 as *mut u32, 0x8d54bf68);
    singlecheck("IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL1 ", 0x5012f234 as *mut u32, 0xb2ab5d29);
    singlecheck("IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL2 ", 0x5012f238 as *mut u32, 0x4b6f4f2d);
    singlecheck("IOX_SFR_CFG_SCHM_CR_CFG_SCHMSEL3 ", 0x5012f23c as *mut u32, 0x0e73cca3);
    singlecheck("IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW0", 0x5012f240 as *mut u32, 0x5c15ba7e);
    singlecheck("IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW1", 0x5012f244 as *mut u32, 0xb9fd8716);
    singlecheck("IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW2", 0x5012f248 as *mut u32, 0x78916c18);
    singlecheck("IOX_SFR_CFG_SLEW_CR_CFG_SLEWSLOW3", 0x5012f24c as *mut u32, 0x11e22e00);
    singlecheck("IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL0", 0x5012f250 as *mut u32, 0x94b7c27d);
    singlecheck("IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL1", 0x5012f254 as *mut u32, 0x525ce443);
    singlecheck("IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL2", 0x5012f258 as *mut u32, 0x32f86bf3);
    singlecheck("IOX_SFR_CFG_DRVSEL_CR_CFG_DRVSEL3", 0x5012f25c as *mut u32, 0x95ec24b6);
    crate::snap_ticks("apb_thru:: ");
    crate::snap_ticks("evc:: ");
    singlecheck("EVC_SFR_CM7EVSEL_CM7EVSEL0", 0x40044000 as *mut u32, 0xbbb989d4);
    singlecheck("EVC_SFR_CM7EVSEL_CM7EVSEL1", 0x40044004 as *mut u32, 0x7bad0e15);
    singlecheck("EVC_SFR_CM7EVSEL_CM7EVSEL2", 0x40044008 as *mut u32, 0x64ca7e0a);
    singlecheck("EVC_SFR_CM7EVSEL_CM7EVSEL3", 0x4004400c as *mut u32, 0x638fe1f6);
    singlecheck("EVC_SFR_CM7EVSEL_CM7EVSEL4", 0x40044010 as *mut u32, 0xd996625d);
    singlecheck("EVC_SFR_CM7EVSEL_CM7EVSEL5", 0x40044014 as *mut u32, 0xe0517bdb);
    singlecheck("EVC_SFR_CM7EVSEL_CM7EVSEL6", 0x40044018 as *mut u32, 0xeb17c9f7);
    singlecheck("EVC_SFR_CM7EVSEL_CM7EVSEL7", 0x4004401c as *mut u32, 0x7d0e94f9);
    singlecheck("EVC_SFR_CM7EVEN           ", 0x40044020 as *mut u32, 0xb20c167a);
    singlecheck("EVC_SFR_CM7EVFR           ", 0x40044024 as *mut u32, 0xa5b59758);
    singlecheck("EVC_SFR_TMREVSEL          ", 0x40044030 as *mut u32, 0x2b72aee0);
    singlecheck("EVC_SFR_PWMEVSEL          ", 0x40044034 as *mut u32, 0x3ab7ff43);
    singlecheck("EVC_SFR_IFEVEN_IFEVEN0    ", 0x40044040 as *mut u32, 0x69ef80fb);
    singlecheck("EVC_SFR_IFEVEN_IFEVEN1    ", 0x40044044 as *mut u32, 0xd5aaec80);
    singlecheck("EVC_SFR_IFEVEN_IFEVEN2    ", 0x40044048 as *mut u32, 0xb6592d2f);
    singlecheck("EVC_SFR_IFEVEN_IFEVEN3    ", 0x4004404c as *mut u32, 0xcec638c1);
    singlecheck("EVC_SFR_IFEVEN_IFEVEN4    ", 0x40044050 as *mut u32, 0xbd1b7b4d);
    singlecheck("EVC_SFR_IFEVEN_IFEVEN5    ", 0x40044054 as *mut u32, 0xcbc95127);
    singlecheck("EVC_SFR_IFEVEN_IFEVEN6    ", 0x40044058 as *mut u32, 0x30703107);
    singlecheck("EVC_SFR_IFEVEN_IFEVEN7    ", 0x4004405c as *mut u32, 0xb84af08d);
    singlecheck("EVC_SFR_IFEVERRFR         ", 0x40044060 as *mut u32, 0x8a6c8e1d);
    singlecheck("EVC_SFR_CM7ERRFR          ", 0x40044080 as *mut u32, 0xeb15a15c);
    crate::snap_ticks("timer_intf:: ");
    crate::snap_ticks("wdg_intf:: ");
    crate::snap_ticks("duart:: ");
    singlecheck("DUART_SFR_TXD ", 0x40042000 as *mut u32, 0x53dea12e);
    singlecheck("DUART_SFR_CR  ", 0x40042004 as *mut u32, 0xdc59f0df);
    singlecheck("DUART_SFR_SR  ", 0x40042008 as *mut u32, 0xcd515d43);
    singlecheck("DUART_SFR_ETUC", 0x4004200c as *mut u32, 0x3e1d6011);
    crate::snap_ticks("sce_glbsfr:: ");
    singlecheck("SCE_GLBSFR_SFR_SCEMODE     ", 0x40028000 as *mut u32, 0x66515cf5);
    singlecheck("SCE_GLBSFR_SFR_SUBEN       ", 0x40028004 as *mut u32, 0x820b8d93);
    singlecheck("SCE_GLBSFR_SFR_AHBS        ", 0x40028008 as *mut u32, 0x17b9f3ce);
    singlecheck("SCE_GLBSFR_SFR_SRBUSY      ", 0x40028010 as *mut u32, 0x0f1a7156);
    singlecheck("SCE_GLBSFR_SFR_FRDONE      ", 0x40028014 as *mut u32, 0xb96ccff1);
    singlecheck("SCE_GLBSFR_SFR_FRERR       ", 0x40028018 as *mut u32, 0x4536886d);
    singlecheck("SCE_GLBSFR_SFR_ARCLR       ", 0x4002801c as *mut u32, 0xb34469da);
    singlecheck("SCE_GLBSFR_SFR_TICKCYC     ", 0x40028020 as *mut u32, 0xc1b3305c);
    singlecheck("SCE_GLBSFR_SFR_TICKCNT     ", 0x40028024 as *mut u32, 0x88f41a0b);
    singlecheck("SCE_GLBSFR_SFR_FFEN        ", 0x40028030 as *mut u32, 0xd15740a1);
    singlecheck("SCE_GLBSFR_SFR_FFCLR       ", 0x40028034 as *mut u32, 0xd05c1cff);
    singlecheck("SCE_GLBSFR_SFR_FFCNT_SR_FF0", 0x40028040 as *mut u32, 0xb3719b13);
    singlecheck("SCE_GLBSFR_SFR_FFCNT_SR_FF1", 0x40028044 as *mut u32, 0xec957ad2);
    singlecheck("SCE_GLBSFR_SFR_FFCNT_SR_FF2", 0x40028048 as *mut u32, 0x05e0a076);
    singlecheck("SCE_GLBSFR_SFR_FFCNT_SR_FF3", 0x4002804c as *mut u32, 0x98b43e02);
    singlecheck("SCE_GLBSFR_SFR_FFCNT_SR_FF4", 0x40028050 as *mut u32, 0x686f3b6f);
    singlecheck("SCE_GLBSFR_SFR_FFCNT_SR_FF5", 0x40028054 as *mut u32, 0x79c0f09b);
    crate::snap_ticks("scedma:: ");
    singlecheck("SCEDMA_SFR_SCHSTART_AR ", 0x40029000 as *mut u32, 0x10f497a0);
    singlecheck("SCEDMA_SFR_XCH_FUNC    ", 0x40029010 as *mut u32, 0x14074c28);
    singlecheck("SCEDMA_SFR_XCH_OPT     ", 0x40029014 as *mut u32, 0x0ea10477);
    singlecheck("SCEDMA_SFR_XCH_AXSTART ", 0x40029018 as *mut u32, 0xe5837aec);
    singlecheck("SCEDMA_SFR_XCH_SEGID   ", 0x4002901c as *mut u32, 0x0dbaff4f);
    singlecheck("SCEDMA_SFR_XCH_SEGSTART", 0x40029020 as *mut u32, 0x890cf72d);
    singlecheck("SCEDMA_SFR_XCH_TRANSIZE", 0x40029024 as *mut u32, 0x5c4f178f);
    singlecheck("SCEDMA_SFR_SCH_FUNC    ", 0x40029030 as *mut u32, 0x979a65d0);
    singlecheck("SCEDMA_SFR_SCH_OPT     ", 0x40029034 as *mut u32, 0x552d8ad9);
    singlecheck("SCEDMA_SFR_SCH_AXSTART ", 0x40029038 as *mut u32, 0x606ab72e);
    singlecheck("SCEDMA_SFR_SCH_SEGID   ", 0x4002903c as *mut u32, 0x76ce8f4d);
    singlecheck("SCEDMA_SFR_SCH_SEGSTART", 0x40029040 as *mut u32, 0x67aabc95);
    singlecheck("SCEDMA_SFR_SCH_TRANSIZE", 0x40029044 as *mut u32, 0x4646f736);
    singlecheck("SCEDMA_SFR_ICH_OPT     ", 0x40029050 as *mut u32, 0x00ef288b);
    singlecheck("SCEDMA_SFR_ICH_SEGID   ", 0x40029054 as *mut u32, 0x5c75d8c9);
    singlecheck("SCEDMA_SFR_ICH_RPSTART ", 0x40029058 as *mut u32, 0xe1c4524a);
    singlecheck("SCEDMA_SFR_ICH_WPSTART ", 0x4002905c as *mut u32, 0x28c72655);
    singlecheck("SCEDMA_SFR_ICH_TRANSIZE", 0x40029060 as *mut u32, 0xe6a639ed);
    crate::snap_ticks("pke:: ");
    singlecheck("PKE_SFR_CRFUNC           ", 0x4002c000 as *mut u32, 0xab94b274);
    singlecheck("PKE_SFR_AR               ", 0x4002c004 as *mut u32, 0x0ccee22b);
    singlecheck("PKE_SFR_SRMFSM           ", 0x4002c008 as *mut u32, 0x8cdbb24b);
    singlecheck("PKE_SFR_FR               ", 0x4002c00c as *mut u32, 0x4b973246);
    singlecheck("PKE_SFR_OPTNW            ", 0x4002c010 as *mut u32, 0xeb62ca60);
    singlecheck("PKE_SFR_OPTEW            ", 0x4002c014 as *mut u32, 0xc2465d93);
    singlecheck("PKE_SFR_OPTMASK          ", 0x4002c020 as *mut u32, 0xfa269d59);
    singlecheck("PKE_SFR_SEGPTR_PTRID_PCON", 0x4002c030 as *mut u32, 0x12722219);
    singlecheck("PKE_SFR_SEGPTR_PTRID_PIB0", 0x4002c034 as *mut u32, 0xcdb866c3);
    singlecheck("PKE_SFR_SEGPTR_PTRID_PIB1", 0x4002c038 as *mut u32, 0xd8fddbc1);
    singlecheck("PKE_SFR_SEGPTR_PTRID_PKB ", 0x4002c03c as *mut u32, 0xa5974868);
    singlecheck("PKE_SFR_SEGPTR_PTRID_POB ", 0x4002c040 as *mut u32, 0x3f0e4c1a);
    crate::snap_ticks("combohash:: ");
    singlecheck("COMBOHASH_SFR_CRFUNC           ", 0x4002b000 as *mut u32, 0xae3d4aec);
    singlecheck("COMBOHASH_SFR_AR               ", 0x4002b004 as *mut u32, 0xac0e9f1c);
    singlecheck("COMBOHASH_SFR_SRMFSM           ", 0x4002b008 as *mut u32, 0x8091f046);
    singlecheck("COMBOHASH_SFR_FR               ", 0x4002b00c as *mut u32, 0x56a84a9a);
    singlecheck("COMBOHASH_SFR_OPT1             ", 0x4002b010 as *mut u32, 0x0e4fdc43);
    singlecheck("COMBOHASH_SFR_OPT2             ", 0x4002b014 as *mut u32, 0x55a2ffa2);
    singlecheck("COMBOHASH_SFR_SEGPTR_SEGID_LKEY", 0x4002b020 as *mut u32, 0x7dac7733);
    singlecheck("COMBOHASH_SFR_SEGPTR_SEGID_KEY ", 0x4002b024 as *mut u32, 0x896147e5);
    singlecheck("COMBOHASH_SFR_SEGPTR_SEGID_SCRT", 0x4002b02c as *mut u32, 0xee095a7c);
    singlecheck("COMBOHASH_SFR_SEGPTR_SEGID_MSG ", 0x4002b030 as *mut u32, 0x5f8c6e0e);
    singlecheck("COMBOHASH_SFR_SEGPTR_SEGID_HOUT", 0x4002b034 as *mut u32, 0xcb94fa18);
    singlecheck("COMBOHASH_SFR_SEGPTR_SEGID_SOB ", 0x4002b038 as *mut u32, 0x63317e84);
    crate::snap_ticks("aes:: ");
    singlecheck("AES_SFR_CRFUNC           ", 0x4002d000 as *mut u32, 0x461d66f6);
    singlecheck("AES_SFR_AR               ", 0x4002d004 as *mut u32, 0x57149339);
    singlecheck("AES_SFR_SRMFSM           ", 0x4002d008 as *mut u32, 0x174b0a3b);
    singlecheck("AES_SFR_FR               ", 0x4002d00c as *mut u32, 0xdac5e35c);
    singlecheck("AES_SFR_OPT              ", 0x4002d010 as *mut u32, 0x6fadbb30);
    singlecheck("AES_SFR_OPT1             ", 0x4002d014 as *mut u32, 0x8da014ae);
    singlecheck("AES_SFR_SEGPTR_PTRID_IV  ", 0x4002d030 as *mut u32, 0xa3f961e5);
    singlecheck("AES_SFR_SEGPTR_PTRID_AKEY", 0x4002d034 as *mut u32, 0xb1fd44b7);
    singlecheck("AES_SFR_SEGPTR_PTRID_AIB ", 0x4002d038 as *mut u32, 0x2a83265f);
    singlecheck("AES_SFR_SEGPTR_PTRID_AOB ", 0x4002d03c as *mut u32, 0x02739e6d);
    singlecheckread("udc            ", 0x50202000 as *const u32);
    singlecheckread("udc            ", 0x50202004 as *const u32);
    singlecheckread("udc            ", 0x502020fc as *const u32);
    singlecheckread("udc            ", 0x50202084 as *const u32);
    singlecheckread("udc            ", 0x50202400 as *const u32);
    singlecheckread("udc            ", 0x50202410 as *const u32);
    singlecheckread("udc            ", 0x50202414 as *const u32);
    singlecheckread("udc            ", 0x502024fc as *const u32);
    singlecheckread("udc            ", 0x50202484 as *const u32);

    loop {
        uart.tiny_write_str("scan done\n");
    }
}
