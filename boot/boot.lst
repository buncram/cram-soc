
target/riscv32imac-unknown-none-elf/release/betrusted-boot:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text.dummy   00000000  60000000  60000000  00000134  2**0
                  ALLOC, READONLY
  1 .text         00002e08  60000000  60000000  00001000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009dc  60002e08  60002e08  00003e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000000  61000000  61000000  000047e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000000  61000000  61000000  00005000  2**0
                  ALLOC
  5 .stack        00004000  61000000  61000000  00005000  2**0
                  ALLOC
  6 .heap         00000000  61004000  61004000  00005000  2**0
                  ALLOC
  7 .debug_loc    00006154  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000893  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000156e0  00000000  00000000  0000b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000002b0  00000000  00000000  000210c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000025d8  00000000  00000000  00021377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    0000fa2c  00000000  00000000  0002394f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_pubnames 000049b2  00000000  00000000  0003337b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_pubtypes 000033e6  00000000  00000000  00037d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .riscv.attributes 0000002b  00000000  00000000  0003b113  2**0
                  CONTENTS, READONLY
 16 .debug_line   00005b28  00000000  00000000  0003b13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000013  00000000  00000000  00040c66  2**0
                  CONTENTS, READONLY
60001416 00001040 T rust_entry
60002854 000003c8 t core::fmt::Formatter::pad
60002516 000002f4 t core::fmt::num::imp::fmt_u32
6000005c 000002d0 t pio::Assembler<_>::assemble_program
60000d9e 00000284 t betrusted_boot::Gfx::msg
600007de 00000228 t betrusted_boot::satp::satp_setup
60000554 000001a4 t betrusted_boot::pio::spi_test_core
60000b12 00000158 T _start_trap_rust
6000041e 000000ee t betrusted_boot::pio::LoadedProg::load
60000ce2 000000bc t betrusted_boot::Gfx::hex_word
600012b2 000000bc t betrusted_boot::ramtest_fast
60002cfe 000000ae t compiler_builtins::mem::memcpy
6000136e 000000a8 t betrusted_boot::ramtest_lfsr
60000726 00000098 t betrusted_boot::debug::Uart::print_hex_word
6000033e 00000092 t <arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt
6000110e 0000008e t betrusted_boot::ramtest_fast
6000119c 0000008c t betrusted_boot::ramtest_fast
60001228 0000008a t betrusted_boot::ramtest_fast
60001086 00000088 t betrusted_boot::ramtest_fast_specialcase1
60000c6e 00000074 t rust_begin_unwind
60001022 00000064 t betrusted_boot::ramtest_all
60000a10 00000062 T _start_trap
60002dac 0000005c t compiler_builtins::mem::memset
60000a72 0000005a T _start_trap_aligned
60002c60 00000058 t core::result::unwrap_failed
600003d0 0000004e t arrayvec::arrayvec::ArrayVec<T,_>::push
6000280a 0000004a t core::fmt::Formatter::pad_integral::write_prefix
6000050c 00000048 t betrusted_boot::pio::PioSm::find_offset_for_program
60000acc 00000046 T _resume_context
600024cc 00000040 t core::panicking::panic_bounds_check
60000000 00000034 T _start
600006f8 0000002e t betrusted_boot::debug::Uart::newline
60002c1c 0000002c t core::panicking::panic
60002456 00000026 t <betrusted_boot::pio::PioError as core::fmt::Debug>::fmt
600007be 00000020 t betrusted_boot::debug::Uart::tiny_write_str
6000247c 0000001e t arrayvec::arrayvec::extend_panic
6000249a 0000001e t core::panicking::panic_fmt
600024ba 00000012 t <T as core::any::Any>::type_id
6000032c 00000010 t <&T as core::fmt::Display>::fmt
60002c48 00000010 t <&T as core::fmt::Display>::fmt
60002cb8 0000000c t core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
60000038 0000000c t xous_riscv::register::sie::set_sext
6000250c 0000000a t core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt
60000a06 0000000a t betrusted_boot::satp::to_user_mode
60002cee 00000008 t memset
60002cf6 00000008 t memcpy
60002c58 00000008 t <&T as core::fmt::Debug>::fmt
60000054 00000008 t xous_riscv::register::vexriscv::sim::read
6000004c 00000008 t xous_riscv::register::stval::read
60000044 00000008 t xous_riscv::register::sepc::read
60000c6a 00000004 T start_loader
60000034 00000004 T abort
6000033c 00000002 t core::ptr::drop_in_place<betrusted_boot::pio::PioError>
600024b8 00000002 t core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>

target/riscv32imac-unknown-none-elf/release/betrusted-boot:     file format elf32-littleriscv


Disassembly of section .text:

60000000 <_start>:
// Assembly stubs for entering into the loader, and exiting it.

// Note: inline constants are not yet stable in Rust: https://github.com/rust-lang/rust/pull/104087
#[link_section = ".text.init"]
#[export_name = "_start"]
pub extern "C" fn _start() {
60000000:	6100e537          	lui	a0,0x6100e
60000004:	0571                	addi	a0,a0,28 # 6100e01c <_estack+0xa01c>
60000006:	610105b7          	lui	a1,0x61010
    unsafe {
        asm! (
6000000a:	deadc337          	lui	t1,0xdeadc
6000000e:	0de30313          	addi	t1,t1,222 # deadc0de <_lcdfb+0x2eadc0de>
60000012:	82aa                	mv	t0,a0
60000014:	83ae                	mv	t2,a1
60000016:	0062a023          	sw	t1,0(t0)
6000001a:	0291                	addi	t0,t0,4
6000001c:	fe72ede3          	bltu	t0,t2,60000016 <_start+0x16>
60000020:	812e                	mv	sp,a1

60000022 <.Lpcrel_hi0>:
60000022:	00000297          	auipc	t0,0x0
60000026:	fde28293          	addi	t0,t0,-34 # 60000000 <_start>
6000002a:	30529073          	csrw	mtvec,t0
6000002e:	3e80106f          	j	60001416 <rust_entry>
	...

60000034 <abort>:
#[link_section = ".text.init"]
#[export_name = "abort"]
/// This is only used in debug mode
pub extern "C" fn abort() {
    unsafe {
        asm! (
60000034:	a001                	j	60000034 <abort>
	...

60000038 <xous_riscv::register::sie::set_sext>:
                () => {
                    extern "C" {
                        fn $asm_fn(bits: usize);
                    }

                    $asm_fn(bits);
60000038:	20000513          	li	a0,512
6000003c:	00003317          	auipc	t1,0x3
60000040:	c8830067          	jr	-888(t1) # 60002cc4 <__set_sie>

60000044 <xous_riscv::register::sepc::read>:
                    $asm_fn()
60000044:	00003317          	auipc	t1,0x3
60000048:	c8630067          	jr	-890(t1) # 60002cca <__read_sepc>

6000004c <xous_riscv::register::stval::read>:
6000004c:	00003317          	auipc	t1,0x3
60000050:	c8a30067          	jr	-886(t1) # 60002cd6 <__read_stval>

60000054 <xous_riscv::register::vexriscv::sim::read>:
60000054:	00003317          	auipc	t1,0x3
60000058:	c8830067          	jr	-888(t1) # 60002cdc <__read_vsim>

6000005c <pio::Assembler<_>::assemble_program>:
    /// Assemble the program into [`Program`].
    ///
    /// The program contains the instructions and side-set info set. You can directly compile into a program with
    /// correct wrapping with [`Self::assemble_with_wrap`], or you can set the wrapping after the compilation with
    /// [`Program::set_wrap`].
    pub fn assemble_program(self) -> Program<PROGRAM_SIZE> {
6000005c:	7175                	addi	sp,sp,-144
    /// let mut array = ArrayVec::from([1, 2, 3]);
    /// array.pop();
    /// assert_eq!(array.len(), 2);
    /// ```
    #[inline(always)]
    pub const fn len(&self) -> usize { self.len as usize }
6000005e:	c706                	sw	ra,140(sp)
60000060:	c522                	sw	s0,136(sp)
60000062:	c326                	sw	s1,132(sp)
60000064:	c14a                	sw	s2,128(sp)
60000066:	dece                	sw	s3,124(sp)
60000068:	1005a703          	lw	a4,256(a1) # 61010100 <_estack+0xc100>
        let side_set = self.side_set;
6000006c:	1045a983          	lw	s3,260(a1)
60000070:	892a                	mv	s2,a0
60000072:	cb25                	beqz	a4,600000e2 <pio::Assembler<_>::assemble_program+0x86>
60000074:	4e81                	li	t4,0
60000076:	10058813          	addi	a6,a1,256
6000007a:	0ff9f513          	zext.b	a0,s3
6000007e:	4615                	li	a2,5
60000080:	41360633          	sub	a2,a2,s3
60000084:	00767693          	andi	a3,a2,7
60000088:	57fd                	li	a5,-1
6000008a:	00d796b3          	sll	a3,a5,a3
6000008e:	fff6c693          	not	a3,a3
60000092:	0089d293          	srli	t0,s3,0x8
60000096:	00f67313          	andi	t1,a2,15
6000009a:	00ff0637          	lui	a2,0xff0
6000009e:	00c9f3b3          	and	t2,s3,a2
600000a2:	0013b613          	seqz	a2,t2
600000a6:	00a03533          	snez	a0,a0
600000aa:	00c578b3          	and	a7,a0,a2
        match self {
600000ae:	059d                	addi	a1,a1,7
600000b0:	ffc5c503          	lbu	a0,-4(a1)
600000b4:	00371413          	slli	s0,a4,0x3
600000b8:	60003637          	lui	a2,0x60003
600000bc:	7d060613          	addi	a2,a2,2000 # 600037d0 <.Lswitch.table.pio::Assembler<_>::assemble_program>
600000c0:	00151713          	slli	a4,a0,0x1
600000c4:	963a                	add	a2,a2,a4
600000c6:	050a                	slli	a0,a0,0x2
600000c8:	60003737          	lui	a4,0x60003
600000cc:	e0870713          	addi	a4,a4,-504 # 60002e08 <.LJTI4_0>
600000d0:	953a                	add	a0,a0,a4
600000d2:	4108                	lw	a0,0(a0)
600000d4:	00065e03          	lhu	t3,0(a2)
600000d8:	8f0a                	mv	t5,sp
600000da:	c4ce                	sw	s3,72(sp)
        let delay_max = (1 << (5 - side_set.bits)) - 1;
600000dc:	04d107a3          	sb	a3,79(sp)
600000e0:	8502                	jr	a0
            ArrayVec { xs: MaybeUninit::uninit().assume_init(), len: 0 }
600000e2:	04010813          	addi	a6,sp,64
600000e6:	aa81                	j	60000236 <.LBB4_24+0xe>

600000e8 <.LBB4_3>:
                ((*if_full as u8) << 1 | (*block as u8), 0)
600000e8:	ffd58603          	lb	a2,-3(a1)
600000ec:	ffe58783          	lb	a5,-2(a1)
600000f0:	4501                	li	a0,0
600000f2:	0606                	slli	a2,a2,0x1
600000f4:	00f664b3          	or	s1,a2,a5
600000f8:	a065                	j	600001a0 <.LBB4_12+0x32>

600000fa <.LBB4_4>:
                (1 << 2 | (*if_empty as u8) << 1 | (*block as u8), 0)
600000fa:	ffd58603          	lb	a2,-3(a1)
600000fe:	ffe58783          	lb	a5,-2(a1)
60000102:	4501                	li	a0,0
60000104:	0606                	slli	a2,a2,0x1
60000106:	8e5d                	or	a2,a2,a5
60000108:	00466493          	ori	s1,a2,4
6000010c:	a851                	j	600001a0 <.LBB4_12+0x32>

6000010e <.LBB4_5>:
            } => (*destination as u8, (*op as u8) << 3 | (*source as u8)),
6000010e:	fff58503          	lb	a0,-1(a1)
60000112:	ffe58603          	lb	a2,-2(a1)
60000116:	ffd5c483          	lbu	s1,-3(a1)
6000011a:	050e                	slli	a0,a0,0x3
6000011c:	8d51                	or	a0,a0,a2
6000011e:	a049                	j	600001a0 <.LBB4_12+0x32>

60000120 <.LBB4_6>:
60000120:	ffe5c483          	lbu	s1,-2(a1)
60000124:	ffd5c503          	lbu	a0,-3(a1)
60000128:	a8a5                	j	600001a0 <.LBB4_12+0x32>

6000012a <.LBB4_7>:
                if *index > 7 {
6000012a:	ffd5c503          	lbu	a0,-3(a1)
6000012e:	461d                	li	a2,7
60000130:	00a66d63          	bltu	a2,a0,6000014a <.LBB4_7+0x20>
                    (*clear as u8) << 1 | (*wait as u8),
60000134:	ffe58603          	lb	a2,-2(a1)
60000138:	fff58783          	lb	a5,-1(a1)
                    *index | (if *relative { 0b10000 } else { 0 }),
6000013c:	0005c703          	lbu	a4,0(a1)
                    (*clear as u8) << 1 | (*wait as u8),
60000140:	0606                	slli	a2,a2,0x1
60000142:	00f664b3          	or	s1,a2,a5
                    *index | (if *relative { 0b10000 } else { 0 }),
60000146:	cf29                	beqz	a4,600001a0 <.LBB4_12+0x32>
60000148:	a819                	j	6000015e <.LBB4_7+0x34>
                    panic!("invalid interrupt flags");
6000014a:	60003537          	lui	a0,0x60003
6000014e:	62450513          	addi	a0,a0,1572 # 60003624 <.Lanon.5512643252fccb46d23d1b099a6fce8b.8>
60000152:	600035b7          	lui	a1,0x60003
60000156:	68c58613          	addi	a2,a1,1676 # 6000368c <.Lanon.5512643252fccb46d23d1b099a6fce8b.10>
6000015a:	45dd                	li	a1,23
6000015c:	a021                	j	60000164 <.LBB4_7+0x3a>
6000015e:	01056513          	ori	a0,a0,16
60000162:	a83d                	j	600001a0 <.LBB4_12+0x32>
60000164:	00003097          	auipc	ra,0x3
60000168:	ab8080e7          	jalr	-1352(ra) # 60002c1c <core::panicking::panic>
	...

6000016e <.LBB4_12>:
                if *relative && !matches!(*source, WaitSource::IRQ) {
6000016e:	0005c783          	lbu	a5,0(a1)
60000172:	fff5c483          	lbu	s1,-1(a1)
60000176:	0017b513          	seqz	a0,a5
6000017a:	ffe48613          	addi	a2,s1,-2
6000017e:	00163613          	seqz	a2,a2
60000182:	8d51                	or	a0,a0,a2
60000184:	c575                	beqz	a0,60000270 <.LBB4_24+0x48>
                if matches!(*source, WaitSource::IRQ) && *index > 7 {
60000186:	ffe5c503          	lbu	a0,-2(a1)
6000018a:	00853713          	sltiu	a4,a0,8
6000018e:	00174713          	xori	a4,a4,1
60000192:	8e79                	and	a2,a2,a4
60000194:	ea6d                	bnez	a2,60000286 <.LBB4_24+0x5e>
                    (*polarity) << 2 | (*source as u8),
60000196:	ffd58603          	lb	a2,-3(a1)
6000019a:	060a                	slli	a2,a2,0x2
6000019c:	8cd1                	or	s1,s1,a2
                    *index | (if *relative { 0b10000 } else { 0 }),
6000019e:	f3e1                	bnez	a5,6000015e <.LBB4_7+0x34>
        if self.delay > delay_max {
600001a0:	ffb5c783          	lbu	a5,-5(a1)
600001a4:	0ef6ec63          	bltu	a3,a5,6000029c <.LBB4_24+0x74>
600001a8:	0ff4f613          	zext.b	a2,s1
        let side_set = if let Some(s) = self.side_set {
600001ac:	ff95c703          	lbu	a4,-7(a1)
600001b0:	0616                	slli	a2,a2,0x5
600001b2:	01c66633          	or	a2,a2,t3
600001b6:	0ff57513          	zext.b	a0,a0
600001ba:	8d51                	or	a0,a0,a2
600001bc:	cf11                	beqz	a4,600001d8 <.LBB4_12+0x6a>
600001be:	ffa5c603          	lbu	a2,-6(a1)
600001c2:	0ff2f713          	zext.b	a4,t0
            if s > side_set.max {
600001c6:	10c76c63          	bltu	a4,a2,600002de <.LBB4_24+0xb6>
            let s = (s as u16) << (5 - side_set.bits);
600001ca:	006614b3          	sll	s1,a2,t1
600001ce:	00038863          	beqz	t2,600001de <.LBB4_12+0x70>
600001d2:	0104e493          	ori	s1,s1,16
600001d6:	a021                	j	600001de <.LBB4_12+0x70>
600001d8:	4481                	li	s1,0
        } else if side_set.bits > 0 && !side_set.opt {
600001da:	12089f63          	bnez	a7,60000318 <.LBB4_24+0xf0>
600001de:	02000613          	li	a2,32
600001e2:	0ece8963          	beq	t4,a2,600002d4 <.LBB4_24+0xac>
        data |= ((self.delay as u16) | side_set) << 8;
600001e6:	00f4e633          	or	a2,s1,a5
600001ea:	0622                	slli	a2,a2,0x8
600001ec:	8d51                	or	a0,a0,a2
600001ee:	00af1023          	sh	a0,0(t5)
600001f2:	1461                	addi	s0,s0,-8
600001f4:	0e85                	addi	t4,t4,1
600001f6:	cc1d                	beqz	s0,60000234 <.LBB4_24+0xc>
600001f8:	05a1                	addi	a1,a1,8
        match self {
600001fa:	ffc5c503          	lbu	a0,-4(a1)
600001fe:	60003637          	lui	a2,0x60003
60000202:	7d060613          	addi	a2,a2,2000 # 600037d0 <.Lswitch.table.pio::Assembler<_>::assemble_program>
60000206:	00151793          	slli	a5,a0,0x1
6000020a:	963e                	add	a2,a2,a5
6000020c:	050a                	slli	a0,a0,0x2
6000020e:	600037b7          	lui	a5,0x60003
60000212:	e0878793          	addi	a5,a5,-504 # 60002e08 <.LJTI4_0>
60000216:	953e                	add	a0,a0,a5
60000218:	4108                	lw	a0,0(a0)
6000021a:	00065e03          	lhu	t3,0(a2)
6000021e:	0f09                	addi	t5,t5,2
60000220:	c4ce                	sw	s3,72(sp)
        let delay_max = (1 << (5 - side_set.bits)) - 1;
60000222:	04d107a3          	sb	a3,79(sp)
60000226:	8502                	jr	a0

60000228 <.LBB4_24>:
            } => (*destination as u8, *bit_count & 0b11111),
60000228:	ffd5c503          	lbu	a0,-3(a1)
6000022c:	ffe5c483          	lbu	s1,-2(a1)
60000230:	897d                	andi	a0,a0,31
60000232:	b7bd                	j	600001a0 <.LBB4_12+0x32>
        // user's iterator, without dropping any elements on the floor.
        let mut guard = ScopeExitGuard {
            value: &mut self.len,
            data: len,
            f: move |&len, self_len| {
                **self_len = len as LenUint;
60000234:	c0f6                	sw	t4,64(sp)
60000236:	00082023          	sw	zero,0(a6)
    pub const fn len(&self) -> usize { self.len as usize }
6000023a:	04010503          	lb	a0,64(sp)
    }
6000023e:	fff50413          	addi	s0,a0,-1
            source: (code.len() - 1) as u8,
            target: 0,
        };

        Program {
            code,
60000242:	858a                	mv	a1,sp
60000244:	04400613          	li	a2,68
60000248:	854a                	mv	a0,s2
6000024a:	00003097          	auipc	ra,0x3
6000024e:	aac080e7          	jalr	-1364(ra) # 60002cf6 <memcpy>
        Program {
60000252:	04090523          	sb	zero,74(s2)
60000256:	04890423          	sb	s0,72(s2)
6000025a:	040904a3          	sb	zero,73(s2)
6000025e:	05392223          	sw	s3,68(s2)
            origin: None,
            side_set,
            wrap,
        }
    }
60000262:	40ba                	lw	ra,140(sp)
60000264:	442a                	lw	s0,136(sp)
60000266:	449a                	lw	s1,132(sp)
60000268:	490a                	lw	s2,128(sp)
6000026a:	59f6                	lw	s3,124(sp)
6000026c:	6149                	addi	sp,sp,144
6000026e:	8082                	ret
                    panic!("relative flag should only be used with WaitSource::IRQ");
60000270:	60003537          	lui	a0,0x60003
60000274:	69c50513          	addi	a0,a0,1692 # 6000369c <.Lanon.5512643252fccb46d23d1b099a6fce8b.11>
60000278:	600035b7          	lui	a1,0x60003
6000027c:	6d458613          	addi	a2,a1,1748 # 600036d4 <.Lanon.5512643252fccb46d23d1b099a6fce8b.12>
60000280:	03600593          	li	a1,54
60000284:	b5c5                	j	60000164 <.LBB4_7+0x3a>
                    panic!("Index for WaitSource::IRQ should be in range 0..=7");
60000286:	60003537          	lui	a0,0x60003
6000028a:	6e450513          	addi	a0,a0,1764 # 600036e4 <.Lanon.5512643252fccb46d23d1b099a6fce8b.13>
6000028e:	600035b7          	lui	a1,0x60003
60000292:	71858613          	addi	a2,a1,1816 # 60003718 <.Lanon.5512643252fccb46d23d1b099a6fce8b.14>
60000296:	03200593          	li	a1,50
6000029a:	b5e9                	j	60000164 <.LBB4_7+0x3a>
            panic!(
6000029c:	ffb58513          	addi	a0,a1,-5
600002a0:	c8aa                	sw	a0,80(sp)
600002a2:	60003537          	lui	a0,0x60003
600002a6:	cb850513          	addi	a0,a0,-840 # 60002cb8 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
600002aa:	caaa                	sw	a0,84(sp)
600002ac:	04f10593          	addi	a1,sp,79
600002b0:	ccae                	sw	a1,88(sp)
600002b2:	ceaa                	sw	a0,92(sp)
600002b4:	60003537          	lui	a0,0x60003
600002b8:	74850513          	addi	a0,a0,1864 # 60003748 <.Lanon.5512643252fccb46d23d1b099a6fce8b.17>
600002bc:	d4aa                	sw	a0,104(sp)
600002be:	4509                	li	a0,2
600002c0:	d6aa                	sw	a0,108(sp)
600002c2:	d082                	sw	zero,96(sp)
600002c4:	088c                	addi	a1,sp,80
600002c6:	d8ae                	sw	a1,112(sp)
600002c8:	daaa                	sw	a0,116(sp)
600002ca:	60003537          	lui	a0,0x60003
600002ce:	75850593          	addi	a1,a0,1880 # 60003758 <.Lanon.5512643252fccb46d23d1b099a6fce8b.18>
600002d2:	a82d                	j	6000030c <.LBB4_24+0xe4>
            }
        };
        let mut iter = iterable.into_iter();
        loop {
            if let Some(elt) = iter.next() {
                if ptr == end_ptr && CHECK { extend_panic(); }
600002d4:	00002097          	auipc	ra,0x2
600002d8:	1a8080e7          	jalr	424(ra) # 6000247c <arrayvec::arrayvec::extend_panic>
600002dc:	0000                	unimp
            if s > side_set.max {
600002de:	04910513          	addi	a0,sp,73
                panic!("'side' set must be >=0 and <={}", side_set.max);
600002e2:	c8aa                	sw	a0,80(sp)
600002e4:	60003537          	lui	a0,0x60003
600002e8:	cb850513          	addi	a0,a0,-840 # 60002cb8 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
600002ec:	caaa                	sw	a0,84(sp)
600002ee:	60003537          	lui	a0,0x60003
600002f2:	7b850513          	addi	a0,a0,1976 # 600037b8 <.Lanon.5512643252fccb46d23d1b099a6fce8b.22>
600002f6:	d4aa                	sw	a0,104(sp)
600002f8:	4505                	li	a0,1
600002fa:	d6aa                	sw	a0,108(sp)
600002fc:	d082                	sw	zero,96(sp)
600002fe:	088c                	addi	a1,sp,80
60000300:	d8ae                	sw	a1,112(sp)
60000302:	daaa                	sw	a0,116(sp)
60000304:	60003537          	lui	a0,0x60003
60000308:	7c050593          	addi	a1,a0,1984 # 600037c0 <.Lanon.5512643252fccb46d23d1b099a6fce8b.23>
6000030c:	1088                	addi	a0,sp,96
6000030e:	00002097          	auipc	ra,0x2
60000312:	18c080e7          	jalr	396(ra) # 6000249a <core::panicking::panic_fmt>
60000316:	0000                	unimp
            panic!("instruction requires 'side' set");
60000318:	60003537          	lui	a0,0x60003
6000031c:	76850513          	addi	a0,a0,1896 # 60003768 <.Lanon.5512643252fccb46d23d1b099a6fce8b.19>
60000320:	600035b7          	lui	a1,0x60003
60000324:	78858613          	addi	a2,a1,1928 # 60003788 <.Lanon.5512643252fccb46d23d1b099a6fce8b.20>
60000328:	45fd                	li	a1,31
6000032a:	bd2d                	j	60000164 <.LBB4_7+0x3a>

6000032c <<&T as core::fmt::Display>::fmt>:
6000032c:	4114                	lw	a3,0(a0)
6000032e:	4150                	lw	a2,4(a0)
60000330:	852e                	mv	a0,a1
60000332:	85b6                	mv	a1,a3
60000334:	00002317          	auipc	t1,0x2
60000338:	52030067          	jr	1312(t1) # 60002854 <core::fmt::Formatter::pad>

6000033c <core::ptr::drop_in_place<betrusted_boot::pio::PioError>>:
6000033c:	8082                	ret

6000033e <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt>:
        write!(f, "{}", CAPERROR)
    }
}

impl<T> fmt::Debug for CapacityError<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
6000033e:	715d                	addi	sp,sp,-80
60000340:	c686                	sw	ra,76(sp)
60000342:	c4a2                	sw	s0,72(sp)
60000344:	c2a6                	sw	s1,68(sp)
60000346:	c0ca                	sw	s2,64(sp)
60000348:	de4e                	sw	s3,60(sp)
6000034a:	4401                	li	s0,0
        write!(f, "{}: {}", "CapacityError", CAPERROR)
6000034c:	60003537          	lui	a0,0x60003
60000350:	e8850513          	addi	a0,a0,-376 # 60002e88 <.Lanon.01042f9e07bac0588b13af07786e0e0c.7>
60000354:	c42a                	sw	a0,8(sp)
60000356:	60000537          	lui	a0,0x60000
6000035a:	32c50513          	addi	a0,a0,812 # 6000032c <<&T as core::fmt::Display>::fmt>
6000035e:	c62a                	sw	a0,12(sp)
60000360:	60003637          	lui	a2,0x60003
60000364:	ea860613          	addi	a2,a2,-344 # 60002ea8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.9>
60000368:	c832                	sw	a2,16(sp)
6000036a:	ca2a                	sw	a0,20(sp)
6000036c:	4188                	lw	a0,0(a1)
6000036e:	41cc                	lw	a1,4(a1)
60000370:	d802                	sw	zero,48(sp)
60000372:	02000613          	li	a2,32
60000376:	da32                	sw	a2,52(sp)
60000378:	460d                	li	a2,3
6000037a:	02c10c23          	sb	a2,56(sp)
6000037e:	d002                	sw	zero,32(sp)
60000380:	d402                	sw	zero,40(sp)
60000382:	cc2a                	sw	a0,24(sp)
60000384:	ce2e                	sw	a1,28(sp)
60000386:	00810913          	addi	s2,sp,8
6000038a:	60003537          	lui	a0,0x60003
6000038e:	54c50493          	addi	s1,a0,1356 # 6000354c <.Lanon.2158d0578dda08147993e5787a6dfcb6.288>
60000392:	49c1                	li	s3,16
60000394:	008485b3          	add	a1,s1,s0
60000398:	41d0                	lw	a2,4(a1)
6000039a:	c619                	beqz	a2,600003a8 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x6a>
6000039c:	46f2                	lw	a3,28(sp)
6000039e:	4562                	lw	a0,24(sp)
600003a0:	418c                	lw	a1,0(a1)
600003a2:	46d4                	lw	a3,12(a3)
600003a4:	9682                	jalr	a3
600003a6:	ed09                	bnez	a0,600003c0 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x82>
600003a8:	00890533          	add	a0,s2,s0
600003ac:	4150                	lw	a2,4(a0)
600003ae:	4108                	lw	a0,0(a0)
600003b0:	082c                	addi	a1,sp,24
600003b2:	9602                	jalr	a2
600003b4:	e511                	bnez	a0,600003c0 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x82>
600003b6:	0421                	addi	s0,s0,8
600003b8:	fd341ee3          	bne	s0,s3,60000394 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x56>
600003bc:	4501                	li	a0,0
600003be:	a011                	j	600003c2 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x84>
600003c0:	4505                	li	a0,1
    }
600003c2:	40b6                	lw	ra,76(sp)
600003c4:	4426                	lw	s0,72(sp)
600003c6:	4496                	lw	s1,68(sp)
600003c8:	4906                	lw	s2,64(sp)
600003ca:	59f2                	lw	s3,60(sp)
600003cc:	6161                	addi	sp,sp,80
600003ce:	8082                	ret

600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>:
    pub fn push(&mut self, element: T) {
600003d0:	1141                	addi	sp,sp,-16
    pub const fn len(&self) -> usize { self.len as usize }
600003d2:	10052683          	lw	a3,256(a0)
600003d6:	477d                	li	a4,31
    fn push(&mut self, element: Self::Item) {
        self.try_push(element).unwrap()
    }

    fn try_push(&mut self, element: Self::Item) -> Result<(), CapacityError<Self::Item>> {
        if self.len() < Self::CAPACITY {
600003d8:	00d76c63          	bltu	a4,a3,600003f0 <arrayvec::arrayvec::ArrayVec<T,_>::push+0x20>
600003dc:	00369713          	slli	a4,a3,0x3
600003e0:	972a                	add	a4,a4,a0
600003e2:	c350                	sw	a2,4(a4)
600003e4:	c30c                	sw	a1,0(a4)

    unsafe fn push_unchecked(&mut self, element: Self::Item) {
        let len = self.len();
        debug_assert!(len < Self::CAPACITY);
        ptr::write(self.as_mut_ptr().add(len), element);
        self.set_len(len + 1);
600003e6:	00168593          	addi	a1,a3,1
        self.len = length as LenUint;
600003ea:	10b52023          	sw	a1,256(a0)
600003ee:	a031                	j	600003fa <arrayvec::arrayvec::ArrayVec<T,_>::push+0x2a>
            Err(CapacityError::new(element))
600003f0:	0ff5f513          	zext.b	a0,a1
600003f4:	4689                	li	a3,2
600003f6:	00d51463          	bne	a0,a3,600003fe <arrayvec::arrayvec::ArrayVec<T,_>::push+0x2e>
    }
600003fa:	0141                	addi	sp,sp,16
600003fc:	8082                	ret
600003fe:	c42e                	sw	a1,8(sp)
60000400:	c632                	sw	a2,12(sp)
60000402:	60003537          	lui	a0,0x60003
60000406:	e5850593          	addi	a1,a0,-424 # 60002e58 <.Lanon.01042f9e07bac0588b13af07786e0e0c.2>
6000040a:	60003537          	lui	a0,0x60003
6000040e:	f1050613          	addi	a2,a0,-240 # 60002f10 <.Lanon.01042f9e07bac0588b13af07786e0e0c.11>
60000412:	0028                	addi	a0,sp,8
60000414:	00003097          	auipc	ra,0x3
60000418:	84c080e7          	jalr	-1972(ra) # 60002c60 <core::result::unwrap_failed>
	...

6000041e <betrusted_boot::pio::LoadedProg::load>:
pub struct LoadedProg {
    program: Program::<RP2040_MAX_PROGRAM_SIZE>,
    offset: usize,
}
impl LoadedProg {
    pub fn load(program: Program::<RP2040_MAX_PROGRAM_SIZE>, pio_sm: &mut PioSm) -> Result<Self, PioError> {
6000041e:	1101                	addi	sp,sp,-32
60000420:	ce06                	sw	ra,28(sp)
60000422:	cc22                	sw	s0,24(sp)
60000424:	ca26                	sw	s1,20(sp)
60000426:	c84a                	sw	s2,16(sp)
60000428:	c64e                	sw	s3,12(sp)
6000042a:	c452                	sw	s4,8(sp)
6000042c:	8a32                	mv	s4,a2
            }
            None
        }
    }
    pub fn can_add_program(&self, program: &Program<RP2040_MAX_PROGRAM_SIZE>) -> bool {
        self.find_offset_for_program(program).is_some()
6000042e:	01462983          	lw	s3,20(a2)
60000432:	842e                	mv	s0,a1
60000434:	892a                	mv	s2,a0
60000436:	854e                	mv	a0,s3
60000438:	00000097          	auipc	ra,0x0
6000043c:	0d4080e7          	jalr	212(ra) # 6000050c <betrusted_boot::pio::PioSm::find_offset_for_program>
60000440:	4605                	li	a2,1
    /// returns the offset of the program once loaded
    pub fn add_program(
        &mut self,
        program: &Program<RP2040_MAX_PROGRAM_SIZE>,
    ) -> Result<usize, PioError> {
        if self.can_add_program(&program) {
60000442:	04c51863          	bne	a0,a2,60000492 <betrusted_boot::pio::LoadedProg::load+0x74>
    pub const fn len(&self) -> usize { self.len as usize }
60000446:	4030                	lw	a2,64(s0)
60000448:	c635                	beqz	a2,600004b4 <betrusted_boot::pio::LoadedProg::load+0x96>
6000044a:	010a2503          	lw	a0,16(s4)
6000044e:	00259693          	slli	a3,a1,0x2
60000452:	02000793          	li	a5,32
60000456:	9536                	add	a0,a0,a3
60000458:	872e                	mv	a4,a1
6000045a:	00f5e463          	bltu	a1,a5,60000462 <betrusted_boot::pio::LoadedProg::load+0x44>
6000045e:	02000713          	li	a4,32
60000462:	04850693          	addi	a3,a0,72
60000466:	fdf70513          	addi	a0,a4,-33
6000046a:	0606                	slli	a2,a2,0x1
6000046c:	8722                	mv	a4,s0
        assert!(offset < 32);
6000046e:	0505                	addi	a0,a0,1
60000470:	c141                	beqz	a0,600004f0 <betrusted_boot::pio::LoadedProg::load+0xd2>
            if let Some(origin) = self.find_offset_for_program(&program) {
                for (i, &instr) in program.code.iter().enumerate() {
60000472:	00075783          	lhu	a5,0(a4)
                    // I feel like if I were somehow more clever I could find somewhere in one of these
                    // libraries a macro that defines the jump instruction coding. But I can't. So,
                    // this function literally just masks off the opcode (top 3 bits) and checks if
                    // it's a jump instrution (3b000).
                    let located_instr = if instr & 0xE000 != 0x0000 {
60000476:	00d7d493          	srli	s1,a5,0xd
6000047a:	e091                	bnez	s1,6000047e <betrusted_boot::pio::LoadedProg::load+0x60>
6000047c:	97ae                	add	a5,a5,a1
            self.pio.base.add(offset + rp_pio::SFR_INSTR_MEM0.offset()).write_volatile(data as _);
6000047e:	07c2                	slli	a5,a5,0x10
60000480:	83c1                	srli	a5,a5,0x10
60000482:	c29c                	sw	a5,0(a3)
60000484:	0691                	addi	a3,a3,4
60000486:	1679                	addi	a2,a2,-2
60000488:	0709                	addi	a4,a4,2
6000048a:	f275                	bnez	a2,6000046e <betrusted_boot::pio::LoadedProg::load+0x50>
6000048c:	4028                	lw	a0,64(s0)
6000048e:	897d                	andi	a0,a0,31
60000490:	a01d                	j	600004b6 <betrusted_boot::pio::LoadedProg::load+0x98>
60000492:	4028                	lw	a0,64(s0)
60000494:	00c90023          	sb	a2,0(s2)
60000498:	4589                	li	a1,2
6000049a:	04b90523          	sb	a1,74(s2)
    }

    fn truncate(&mut self, new_len: usize) {
        unsafe {
            let len = self.len();
            if new_len < len {
6000049e:	c119                	beqz	a0,600004a4 <betrusted_boot::pio::LoadedProg::load+0x86>
        self.len = length as LenUint;
600004a0:	04042023          	sw	zero,64(s0)
    }
600004a4:	40f2                	lw	ra,28(sp)
600004a6:	4462                	lw	s0,24(sp)
600004a8:	44d2                	lw	s1,20(sp)
600004aa:	4942                	lw	s2,16(sp)
600004ac:	49b2                	lw	s3,12(sp)
600004ae:	4a22                	lw	s4,8(sp)
600004b0:	6105                	addi	sp,sp,32
600004b2:	8082                	ret
600004b4:	4501                	li	a0,0
600004b6:	567d                	li	a2,-1
                        // assembled to address 0. Gross, but that's how the API is defined.
                        instr + origin as u16
                    };
                    self.write_progmem(origin + i, located_instr);
                }
                let prog_mask = (1 << program.code.len()) - 1;
600004b8:	00a61533          	sll	a0,a2,a0
600004bc:	fff54513          	not	a0,a0
                self.used_mask |= prog_mask << origin as u32;
600004c0:	00b51533          	sll	a0,a0,a1
600004c4:	01356533          	or	a0,a0,s3
600004c8:	00aa2a23          	sw	a0,20(s4)
        Ok({
600004cc:	00490513          	addi	a0,s2,4
600004d0:	04c00613          	li	a2,76
600004d4:	00b92023          	sw	a1,0(s2)
600004d8:	85a2                	mv	a1,s0
600004da:	40f2                	lw	ra,28(sp)
600004dc:	4462                	lw	s0,24(sp)
600004de:	44d2                	lw	s1,20(sp)
600004e0:	4942                	lw	s2,16(sp)
600004e2:	49b2                	lw	s3,12(sp)
600004e4:	4a22                	lw	s4,8(sp)
600004e6:	6105                	addi	sp,sp,32
600004e8:	00003317          	auipc	t1,0x3
600004ec:	80e30067          	jr	-2034(t1) # 60002cf6 <memcpy>
        assert!(offset < 32);
600004f0:	60003537          	lui	a0,0x60003
600004f4:	f3950513          	addi	a0,a0,-199 # 60002f39 <.Lanon.01042f9e07bac0588b13af07786e0e0c.13>
600004f8:	600035b7          	lui	a1,0x60003
600004fc:	f5858613          	addi	a2,a1,-168 # 60002f58 <.Lanon.01042f9e07bac0588b13af07786e0e0c.14>
60000500:	45f5                	li	a1,29
60000502:	00002097          	auipc	ra,0x2
60000506:	71a080e7          	jalr	1818(ra) # 60002c1c <core::panicking::panic>
	...

6000050c <betrusted_boot::pio::PioSm::find_offset_for_program>:
    pub const fn len(&self) -> usize { self.len as usize }
6000050c:	41b4                	lw	a3,64(a1)
        if let Some(origin) = program.origin {
6000050e:	04a5c703          	lbu	a4,74(a1)
60000512:	567d                	li	a2,-1
        let prog_mask = (1 << program.code.len() as u32) - 1;
60000514:	00d61633          	sll	a2,a2,a3
60000518:	fff64613          	not	a2,a2
        if let Some(origin) = program.origin {
6000051c:	cb19                	beqz	a4,60000532 <betrusted_boot::pio::PioSm::find_offset_for_program+0x26>
6000051e:	04b5c583          	lbu	a1,75(a1)
60000522:	02000713          	li	a4,32
            if origin as usize > RP2040_MAX_PROGRAM_SIZE - program.code.len() {
60000526:	40d706b3          	sub	a3,a4,a3
6000052a:	00b6ff63          	bgeu	a3,a1,60000548 <betrusted_boot::pio::PioSm::find_offset_for_program+0x3c>
6000052e:	4501                	li	a0,0
    }
60000530:	8082                	ret
60000532:	02000593          	li	a1,32
            for i in (0..(32 - program.code.len())).rev() {
60000536:	8d95                	sub	a1,a1,a3
60000538:	d9fd                	beqz	a1,6000052e <betrusted_boot::pio::PioSm::find_offset_for_program+0x22>
6000053a:	15fd                	addi	a1,a1,-1
                if (self.used_mask & (prog_mask << i)) == 0 {
6000053c:	00b616b3          	sll	a3,a2,a1
60000540:	8ee9                	and	a3,a3,a0
60000542:	fafd                	bnez	a3,60000538 <betrusted_boot::pio::PioSm::find_offset_for_program+0x2c>
60000544:	4505                	li	a0,1
    }
60000546:	8082                	ret
                if (self.used_mask & (prog_mask << origin as u32)) != 0 {
60000548:	00b61633          	sll	a2,a2,a1
6000054c:	8d71                	and	a0,a0,a2
6000054e:	00153513          	seqz	a0,a0
    }
60000552:	8082                	ret

60000554 <betrusted_boot::pio::spi_test_core>:
            break
        }
    }
}

pub fn spi_test_core(pio_sm: &mut PioSm) -> bool {
60000554:	7139                	addi	sp,sp,-64
60000556:	de06                	sw	ra,60(sp)
60000558:	dc22                	sw	s0,56(sp)
6000055a:	da26                	sw	s1,52(sp)
6000055c:	d84a                	sw	s2,48(sp)
6000055e:	d64e                	sw	s3,44(sp)
60000560:	d452                	sw	s4,40(sp)
60000562:	8a2a                	mv	s4,a0
60000564:	0d100537          	lui	a0,0xd100
60000568:	5d150513          	addi	a0,a0,1489 # d1005d1 <.Lline_table_start0+0xd0fb65b>
6000056c:	40108937          	lui	s2,0x40108
60000570:	00a92023          	sw	a0,0(s2) # 40108000 <.Lline_table_start0+0x4010308a>
60000574:	0330000f          	fence	rw,rw
60000578:	898a                	mv	s3,sp
    let mut report = CSR::new(utra::main::HW_MAIN_BASE as *mut u32);
    report.wfo(utra::main::REPORT_REPORT, 0x0D10_05D1);

    const BUF_SIZE: usize = 20;
    let mut state: u16 = 0xAA;
    let mut tx_buf = [0u8; BUF_SIZE];
6000057a:	850a                	mv	a0,sp
6000057c:	4651                	li	a2,20
6000057e:	44d1                	li	s1,20
60000580:	4581                	li	a1,0
60000582:	00002097          	auipc	ra,0x2
60000586:	76c080e7          	jalr	1900(ra) # 60002cee <memset>
    let mut rx_buf = [0u8; BUF_SIZE];
6000058a:	0848                	addi	a0,sp,20
6000058c:	4651                	li	a2,20
6000058e:	4581                	li	a1,0
60000590:	00002097          	auipc	ra,0x2
60000594:	75e080e7          	jalr	1886(ra) # 60002cee <memset>
60000598:	4501                	li	a0,0
6000059a:	0aa00593          	li	a1,170
6000059e:	00a98633          	add	a2,s3,a0
600005a2:	0505                	addi	a0,a0,1

*/
#[cfg(feature="sim")]
/// our desired test length is 512 entries, so pick an LFSR with a period of 2^9-1...
pub fn lfsr_next(state: u16) -> u16 {
    let bit = ((state >> 8) ^
600005a4:	01059693          	slli	a3,a1,0x10
600005a8:	82c1                	srli	a3,a3,0x10
600005aa:	0086d713          	srli	a4,a3,0x8
               (state >>  4)) & 1;
600005ae:	8291                	srli	a3,a3,0x4
    let bit = ((state >> 8) ^
600005b0:	8eb9                	xor	a3,a3,a4
600005b2:	8a85                	andi	a3,a3,1

    ((state << 1) + bit) & 0x1_FF
600005b4:	05e2                	slli	a1,a1,0x18
600005b6:	81dd                	srli	a1,a1,0x17
600005b8:	8dd5                	or	a1,a1,a3
    // init the TX buf
    for d in tx_buf.iter_mut() {
        state = crate::lfsr_next(state);
        *d = state as u8;
600005ba:	00b60023          	sb	a1,0(a2)
        report.wfo(utra::main::REPORT_REPORT, *d as u32);
600005be:	0ff5f613          	zext.b	a2,a1
600005c2:	00c92023          	sw	a2,0(s2)
600005c6:	0330000f          	fence	rw,rw
600005ca:	fc951ae3          	bne	a0,s1,6000059e <betrusted_boot::pio::spi_test_core+0x4a>
600005ce:	4301                	li	t1,0
600005d0:	4e01                	li	t3,0
600005d2:	4501                	li	a0,0
600005d4:	4481                	li	s1,0
600005d6:	4685                	li	a3,1
600005d8:	01410893          	addi	a7,sp,20
600005dc:	880a                	mv	a6,sp
600005de:	600035b7          	lui	a1,0x60003
600005e2:	45858293          	addi	t0,a1,1112 # 60003458 <.Lanon.01042f9e07bac0588b13af07786e0e0c.42+0x4c>
600005e6:	0330000f          	fence	rw,rw
    /// Read a field from this CSR
    pub fn rf(&self, field: Field) -> T {
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);

        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
600005ea:	010a2703          	lw	a4,16(s4)
600005ee:	4350                	lw	a2,4(a4)
        (self.pio.rf(rp_pio::SFR_FSTAT_TX_FULL) & (self.sm as u32)) != 0
600005f0:	018a2583          	lw	a1,24(s4)
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
600005f4:	8241                	srli	a2,a2,0x10
600005f6:	00b67433          	and	s0,a2,a1
600005fa:	8626                	mv	a2,s1
600005fc:	87f2                	mv	a5,t3
        if !pio_sm.txfifo_is_full() {
600005fe:	c019                	beqz	s0,60000604 <betrusted_boot::pio::spi_test_core+0xb0>
60000600:	8e3e                	mv	t3,a5
60000602:	a035                	j	6000062e <betrusted_boot::pio::spi_test_core+0xda>
60000604:	4e51                	li	t3,20
60000606:	4485                	li	s1,1
60000608:	03c78463          	beq	a5,t3,60000630 <betrusted_boot::pio::spi_test_core+0xdc>
6000060c:	00f804b3          	add	s1,a6,a5
        match self.sm {
60000610:	058a                	slli	a1,a1,0x2
60000612:	9596                	add	a1,a1,t0
60000614:	00048483          	lb	s1,0(s1)
60000618:	ffc5a583          	lw	a1,-4(a1)
6000061c:	00178e13          	addi	t3,a5,1
60000620:	01849793          	slli	a5,s1,0x18
60000624:	058a                	slli	a1,a1,0x2
60000626:	95ba                	add	a1,a1,a4
60000628:	c19c                	sw	a5,0(a1)
6000062a:	0330000f          	fence	rw,rw
6000062e:	84b2                	mv	s1,a2
60000630:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60000634:	010a2583          	lw	a1,16(s4)
60000638:	41cc                	lw	a1,4(a1)
        (self.pio.rf(rp_pio::SFR_FSTAT_RX_EMPTY) & (self.sm as u32)) != 0
6000063a:	018a2603          	lw	a2,24(s4)
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
6000063e:	81a1                	srli	a1,a1,0x8
60000640:	8df1                	and	a1,a1,a2
        if !pio_sm.rxfifo_is_empty() {
60000642:	c589                	beqz	a1,6000064c <betrusted_boot::pio::spi_test_core+0xf8>
60000644:	0016f593          	andi	a1,a3,1
60000648:	e58d                	bnez	a1,60000672 <betrusted_boot::pio::spi_test_core+0x11e>
6000064a:	a82d                	j	60000684 <betrusted_boot::pio::spi_test_core+0x130>
6000064c:	0016f593          	andi	a1,a3,1
60000650:	c981                	beqz	a1,60000660 <betrusted_boot::pio::spi_test_core+0x10c>
60000652:	45d1                	li	a1,20
60000654:	02b30263          	beq	t1,a1,60000678 <betrusted_boot::pio::spi_test_core+0x124>
60000658:	006883b3          	add	t2,a7,t1
6000065c:	0305                	addi	t1,t1,1
6000065e:	a019                	j	60000664 <betrusted_boot::pio::spi_test_core+0x110>
            if let Some(d) = dst_iter_mut.next() {
60000660:	00038963          	beqz	t2,60000672 <betrusted_boot::pio::spi_test_core+0x11e>
60000664:	0330000f          	fence	rw,rw
60000668:	010a2583          	lw	a1,16(s4)
6000066c:	518c                	lw	a1,32(a1)
                *d = pio_sm.rxfifo_pull_u8_lsb();
6000066e:	00b38023          	sb	a1,0(t2)
60000672:	45d1                	li	a1,20
60000674:	00b31563          	bne	t1,a1,6000067e <betrusted_boot::pio::spi_test_core+0x12a>
60000678:	4381                	li	t2,0
6000067a:	4351                	li	t1,20
6000067c:	a021                	j	60000684 <betrusted_boot::pio::spi_test_core+0x130>
6000067e:	006883b3          	add	t2,a7,t1
60000682:	0305                	addi	t1,t1,1
60000684:	0013b593          	seqz	a1,t2
        if dst_iter_mut.peek().is_none() {
60000688:	8d4d                	or	a0,a0,a1
        if tx_done && rx_done {
6000068a:	00a4f5b3          	and	a1,s1,a0
6000068e:	8985                	andi	a1,a1,1
60000690:	4681                	li	a3,0
60000692:	d9b1                	beqz	a1,600005e6 <betrusted_boot::pio::spi_test_core+0x92>
60000694:	4501                	li	a0,0
60000696:	4785                	li	a5,1
60000698:	858a                	mv	a1,sp
6000069a:	0850                	addi	a2,sp,20
6000069c:	46d1                	li	a3,20
6000069e:	dead0837          	lui	a6,0xdead0
600006a2:	401088b7          	lui	a7,0x40108
600006a6:	00a58733          	add	a4,a1,a0
600006aa:	00a604b3          	add	s1,a2,a0
    }
    pio_spi_write8_read8_blocking(pio_sm, &tx_buf, &mut rx_buf);
    let mut pass = true;
    for (&s, &d) in tx_buf.iter().zip(rx_buf.iter()) {
600006ae:	00074403          	lbu	s0,0(a4)
600006b2:	0004c703          	lbu	a4,0(s1)
600006b6:	00e40b63          	beq	s0,a4,600006cc <betrusted_boot::pio::spi_test_core+0x178>
600006ba:	4781                	li	a5,0
        if s != d {
            report.wfo(utra::main::REPORT_REPORT, 0xDEAD_0000 | s as u32 | ((d as u32) << 8));
600006bc:	0722                	slli	a4,a4,0x8
600006be:	8f41                	or	a4,a4,s0
600006c0:	01076733          	or	a4,a4,a6
600006c4:	00e8a023          	sw	a4,0(a7) # 40108000 <.Lline_table_start0+0x4010308a>
600006c8:	0330000f          	fence	rw,rw
600006cc:	0505                	addi	a0,a0,1
600006ce:	fcd51ce3          	bne	a0,a3,600006a6 <betrusted_boot::pio::spi_test_core+0x152>
600006d2:	600d0537          	lui	a0,0x600d0
600006d6:	5d150513          	addi	a0,a0,1489 # 600d05d1 <_etext+0xccded>
600006da:	401085b7          	lui	a1,0x40108
600006de:	c188                	sw	a0,0(a1)
            pass = false;
        }
    }
    report.wfo(utra::main::REPORT_REPORT, 0x600D_05D1);
    pass
}
600006e0:	0017f513          	andi	a0,a5,1
600006e4:	0330000f          	fence	rw,rw
600006e8:	50f2                	lw	ra,60(sp)
600006ea:	5462                	lw	s0,56(sp)
600006ec:	54d2                	lw	s1,52(sp)
600006ee:	5942                	lw	s2,48(sp)
600006f0:	59b2                	lw	s3,44(sp)
600006f2:	5a22                	lw	s4,40(sp)
600006f4:	6121                	addi	sp,sp,64
600006f6:	8082                	ret

600006f8 <betrusted_boot::debug::Uart::newline>:
    }
    pub fn put_hex(&mut self, c: u8) {
        self.put_digit(c >> 4);
        self.put_digit(c & 0xF);
    }
    pub fn newline(&mut self) {
600006f8:	40102537          	lui	a0,0x40102
600006fc:	0330000f          	fence	rw,rw
60000700:	414c                	lw	a1,4(a0)

    pub fn putc(&self, c: u8) {
        let base = utra::uart::HW_UART_BASE as *mut u32;
        let mut uart = CSR::new(base);
        // Wait until TXFULL is `0`
        while uart.r(utra::uart::TXFULL) != 0 {}
60000702:	fded                	bnez	a1,600006fc <betrusted_boot::debug::Uart::newline+0x4>
60000704:	40102537          	lui	a0,0x40102
60000708:	45a9                	li	a1,10
6000070a:	c10c                	sw	a1,0(a0)
6000070c:	0330000f          	fence	rw,rw
60000710:	0330000f          	fence	rw,rw
60000714:	414c                	lw	a1,4(a0)
60000716:	fded                	bnez	a1,60000710 <betrusted_boot::debug::Uart::newline+0x18>
60000718:	40102537          	lui	a0,0x40102
6000071c:	45b5                	li	a1,13
6000071e:	c10c                	sw	a1,0(a0)
60000720:	0330000f          	fence	rw,rw
    }
60000724:	8082                	ret

60000726 <betrusted_boot::debug::Uart::print_hex_word>:
    pub fn print_hex_word(&mut self, word: u32) {
60000726:	1141                	addi	sp,sp,-16
60000728:	4581                	li	a1,0
6000072a:	00855613          	srli	a2,a0,0x8
6000072e:	66c1                	lui	a3,0x10
60000730:	f0068693          	addi	a3,a3,-256 # ff00 <.Lline_table_start0+0xaf8a>
60000734:	8e75                	and	a2,a2,a3
60000736:	01855693          	srli	a3,a0,0x18
6000073a:	8e55                	or	a2,a2,a3
6000073c:	00851693          	slli	a3,a0,0x8
60000740:	00ff0737          	lui	a4,0xff0
60000744:	8ef9                	and	a3,a3,a4
60000746:	0562                	slli	a0,a0,0x18
60000748:	8d55                	or	a0,a0,a3
6000074a:	8d51                	or	a0,a0,a2
        for &byte in word.to_be_bytes().iter() {
6000074c:	c62a                	sw	a0,12(sp)
6000074e:	00c10813          	addi	a6,sp,12
60000752:	0a000893          	li	a7,160
60000756:	401026b7          	lui	a3,0x40102
6000075a:	42a9                	li	t0,10
6000075c:	4791                	li	a5,4
6000075e:	00b80533          	add	a0,a6,a1
60000762:	00054503          	lbu	a0,0(a0) # 40102000 <.Lline_table_start0+0x400fd08a>
        self.put_digit(c >> 4);
60000766:	00455613          	srli	a2,a0,0x4
        if nyb < 10 {
6000076a:	01157963          	bgeu	a0,a7,6000077c <betrusted_boot::debug::Uart::print_hex_word+0x56>
6000076e:	0330000f          	fence	rw,rw
60000772:	42d8                	lw	a4,4(a3)
        while uart.r(utra::uart::TXFULL) != 0 {}
60000774:	ff6d                	bnez	a4,6000076e <betrusted_boot::debug::Uart::print_hex_word+0x48>
            self.putc(nyb + 0x30);
60000776:	03066613          	ori	a2,a2,48
6000077a:	a039                	j	60000788 <betrusted_boot::debug::Uart::print_hex_word+0x62>
6000077c:	0330000f          	fence	rw,rw
60000780:	42d8                	lw	a4,4(a3)
        while uart.r(utra::uart::TXFULL) != 0 {}
60000782:	ff6d                	bnez	a4,6000077c <betrusted_boot::debug::Uart::print_hex_word+0x56>
            self.putc(nyb + 0x61 - 10);
60000784:	05760613          	addi	a2,a2,87
60000788:	c290                	sw	a2,0(a3)
        self.put_digit(c & 0xF);
6000078a:	893d                	andi	a0,a0,15
6000078c:	0330000f          	fence	rw,rw
        if nyb < 10 {
60000790:	00557963          	bgeu	a0,t0,600007a2 <betrusted_boot::debug::Uart::print_hex_word+0x7c>
60000794:	0330000f          	fence	rw,rw
60000798:	42d0                	lw	a2,4(a3)
        while uart.r(utra::uart::TXFULL) != 0 {}
6000079a:	fe6d                	bnez	a2,60000794 <betrusted_boot::debug::Uart::print_hex_word+0x6e>
            self.putc(nyb + 0x30);
6000079c:	03056513          	ori	a0,a0,48
600007a0:	a039                	j	600007ae <betrusted_boot::debug::Uart::print_hex_word+0x88>
600007a2:	0330000f          	fence	rw,rw
600007a6:	42d0                	lw	a2,4(a3)
        while uart.r(utra::uart::TXFULL) != 0 {}
600007a8:	fe6d                	bnez	a2,600007a2 <betrusted_boot::debug::Uart::print_hex_word+0x7c>
            self.putc(nyb + 0x61 - 10);
600007aa:	05750513          	addi	a0,a0,87
600007ae:	0585                	addi	a1,a1,1 # 40108001 <.Lline_table_start0+0x4010308b>
600007b0:	c288                	sw	a0,0(a3)
600007b2:	0330000f          	fence	rw,rw
600007b6:	faf594e3          	bne	a1,a5,6000075e <betrusted_boot::debug::Uart::print_hex_word+0x38>
    }
600007ba:	0141                	addi	sp,sp,16
600007bc:	8082                	ret

600007be <betrusted_boot::debug::Uart::tiny_write_str>:
600007be:	95aa                	add	a1,a1,a0
600007c0:	40102637          	lui	a2,0x40102
600007c4:	00054683          	lbu	a3,0(a0)
600007c8:	0330000f          	fence	rw,rw
600007cc:	4258                	lw	a4,4(a2)
        while uart.r(utra::uart::TXFULL) != 0 {}
600007ce:	ff6d                	bnez	a4,600007c8 <betrusted_boot::debug::Uart::tiny_write_str+0xa>
600007d0:	0505                	addi	a0,a0,1
600007d2:	c214                	sw	a3,0(a2)
600007d4:	0330000f          	fence	rw,rw
600007d8:	feb516e3          	bne	a0,a1,600007c4 <betrusted_boot::debug::Uart::tiny_write_str+0x6>

    pub fn tiny_write_str(&mut self, s: &str) {
        for c in s.bytes() {
            self.putc(c);
        }
    }
600007dc:	8082                	ret

600007de <betrusted_boot::satp::satp_setup>:
}

/// Very simple Sv32 setup that drops into supervisor (kernel) mode, with most
/// mappings being 1:1 between VA->PA, except for code which is remapped to address 0x0 in VA space.
#[inline(never)] // correct behavior depends on RA being set.
pub fn satp_setup() {
600007de:	4701                	li	a4,0
600007e0:	4601                	li	a2,0
600007e2:	40000537          	lui	a0,0x40000
600007e6:	f0050513          	addi	a0,a0,-256 # 3fffff00 <.Lline_table_start0+0x3fffaf8a>
600007ea:	184015b7          	lui	a1,0x18401
600007ee:	80158693          	addi	a3,a1,-2047 # 18400801 <.Lline_table_start0+0x183fb88b>
600007f2:	610007b7          	lui	a5,0x61000
    root_pt.entries[index] =
600007f6:	c394                	sw	a3,0(a5)
600007f8:	c0158693          	addi	a3,a1,-1023
600007fc:	c3d4                	sw	a3,4(a5)
600007fe:	00158693          	addi	a3,a1,1
60000802:	58d7a023          	sw	a3,1408(a5) # 61000580 <_ebss+0x580>
60000806:	40158593          	addi	a1,a1,1025
6000080a:	40b7a023          	sw	a1,1024(a5)
6000080e:	184005b7          	lui	a1,0x18400
60000812:	40158593          	addi	a1,a1,1025 # 18400401 <.Lline_table_start0+0x183fb48b>
60000816:	60b7a823          	sw	a1,1552(a5)
6000081a:	6585                	lui	a1,0x1
6000081c:	15fd                	addi	a1,a1,-1 # fff <_hart_stack_size+0x7ff>
6000081e:	000656b7          	lui	a3,0x65
60000822:	53668693          	addi	a3,a3,1334 # 65536 <.Lline_table_start0+0x605c0>
60000826:	60000837          	lui	a6,0x60000
6000082a:	610028b7          	lui	a7,0x61002
6000082e:	8b05                	andi	a4,a4,1
60000830:	cf09                	beqz	a4,6000084a <betrusted_boot::satp::satp_setup+0x6c>
60000832:	00b60733          	add	a4,a2,a1
60000836:	00c73633          	sltu	a2,a4,a2
6000083a:	fff64613          	not	a2,a2
6000083e:	00d737b3          	sltu	a5,a4,a3
    set_l1_pte(PERI_VA, PERI_PT_PA, &mut root_pt);
    set_l1_pte(SRAM_VA, SRAM_PT_PA, &mut root_pt); // L1 covers 16MiB, so SP_VA will cover all of SRAM

    // map code space. This is the only one that has a difference on VA->PA
    const CODE_LEN: usize = 0x65536;
    for offset in (0..CODE_LEN).step_by(PAGE_SIZE) {
60000842:	8ff1                	and	a5,a5,a2
60000844:	863a                	mv	a2,a4
60000846:	e781                	bnez	a5,6000084e <betrusted_boot::satp::satp_setup+0x70>
60000848:	a00d                	j	6000086a <betrusted_boot::satp::satp_setup+0x8c>
6000084a:	02d67063          	bgeu	a2,a3,6000086a <betrusted_boot::satp::satp_setup+0x8c>
        set_l2_pte(CODE_VA + offset, RERAM_PA + offset, &mut code_pt, FLG_X | FLG_R | FLG_U);
6000084e:	01060733          	add	a4,a2,a6
    l2_pt.entries[index] =
60000852:	00a65793          	srli	a5,a2,0xa
60000856:	0605                	addi	a2,a2,1 # 40102001 <.Lline_table_start0+0x400fd08b>
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
60000858:	8309                	srli	a4,a4,0x2
6000085a:	8f69                	and	a4,a4,a0
    l2_pt.entries[index] =
6000085c:	9bf1                	andi	a5,a5,-4
6000085e:	97c6                	add	a5,a5,a7
60000860:	01b76713          	ori	a4,a4,27
60000864:	c398                	sw	a4,0(a5)
60000866:	4705                	li	a4,1
60000868:	b7d9                	j	6000082e <betrusted_boot::satp::satp_setup+0x50>
6000086a:	4781                	li	a5,0
6000086c:	005006b7          	lui	a3,0x500
60000870:	6705                	lui	a4,0x1
60000872:	fff70293          	addi	t0,a4,-1 # fff <_hart_stack_size+0x7ff>
60000876:	00565637          	lui	a2,0x565
6000087a:	53660613          	addi	a2,a2,1334 # 565536 <.Lline_table_start0+0x5605c0>
6000087e:	60000837          	lui	a6,0x60000
60000882:	1771                	addi	a4,a4,-4
60000884:	610038b7          	lui	a7,0x61003
60000888:	8b85                	andi	a5,a5,1
6000088a:	cf89                	beqz	a5,600008a4 <betrusted_boot::satp::satp_setup+0xc6>
6000088c:	005687b3          	add	a5,a3,t0
60000890:	00d7b6b3          	sltu	a3,a5,a3
60000894:	fff6c693          	not	a3,a3
60000898:	00c7b5b3          	sltu	a1,a5,a2
    }
    const SPI_OFFSET: usize = 0x50_0000;
    for offset in (SPI_OFFSET..SPI_OFFSET + CODE_LEN).step_by(PAGE_SIZE) {
6000089c:	8df5                	and	a1,a1,a3
6000089e:	86be                	mv	a3,a5
600008a0:	e581                	bnez	a1,600008a8 <betrusted_boot::satp::satp_setup+0xca>
600008a2:	a015                	j	600008c6 <betrusted_boot::satp::satp_setup+0xe8>
600008a4:	02c6f163          	bgeu	a3,a2,600008c6 <betrusted_boot::satp::satp_setup+0xe8>
        set_l2_pte(CODE_VA + offset, RERAM_PA + offset, &mut code2_pt, FLG_X | FLG_R | FLG_U);
600008a8:	010685b3          	add	a1,a3,a6
    l2_pt.entries[index] =
600008ac:	00a6d793          	srli	a5,a3,0xa
600008b0:	0685                	addi	a3,a3,1 # 500001 <.Lline_table_start0+0x4fb08b>
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
600008b2:	8189                	srli	a1,a1,0x2
600008b4:	8de9                	and	a1,a1,a0
    l2_pt.entries[index] =
600008b6:	8ff9                	and	a5,a5,a4
600008b8:	0117e7b3          	or	a5,a5,a7
600008bc:	01b5e593          	ori	a1,a1,27
600008c0:	c38c                	sw	a1,0(a5)
600008c2:	4785                	li	a5,1
600008c4:	b7d1                	j	60000888 <betrusted_boot::satp::satp_setup+0xaa>
600008c6:	4781                	li	a5,0
600008c8:	4601                	li	a2,0
600008ca:	6685                	lui	a3,0x1
600008cc:	fff68593          	addi	a1,a3,-1 # fff <_hart_stack_size+0x7ff>
600008d0:	61000837          	lui	a6,0x61000
600008d4:	16f1                	addi	a3,a3,-4
600008d6:	610018b7          	lui	a7,0x61001
600008da:	8a05                	andi	a2,a2,1
600008dc:	ce19                	beqz	a2,600008fa <betrusted_boot::satp::satp_setup+0x11c>
600008de:	00b78633          	add	a2,a5,a1
600008e2:	00f637b3          	sltu	a5,a2,a5
600008e6:	fff7c793          	not	a5,a5
600008ea:	01065713          	srli	a4,a2,0x10
600008ee:	00173713          	seqz	a4,a4
    }

    // map sram. Mapping is 1:1, so we use _VA and _PA targets for both args
    const SRAM_LEN: usize = 65536;
    for offset in (0..SRAM_LEN).step_by(PAGE_SIZE) {
600008f2:	8f7d                	and	a4,a4,a5
600008f4:	87b2                	mv	a5,a2
600008f6:	e709                	bnez	a4,60000900 <betrusted_boot::satp::satp_setup+0x122>
600008f8:	a01d                	j	6000091e <betrusted_boot::satp::satp_setup+0x140>
600008fa:	0107d613          	srli	a2,a5,0x10
600008fe:	e205                	bnez	a2,6000091e <betrusted_boot::satp::satp_setup+0x140>
        set_l2_pte(SRAM_VA + offset, SRAM_VA + offset, &mut sram_pt, FLG_W | FLG_R | FLG_U);
60000900:	01078633          	add	a2,a5,a6
60000904:	0785                	addi	a5,a5,1
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
60000906:	00265713          	srli	a4,a2,0x2
6000090a:	8f69                	and	a4,a4,a0
    l2_pt.entries[index] =
6000090c:	8229                	srli	a2,a2,0xa
6000090e:	8e75                	and	a2,a2,a3
60000910:	01166633          	or	a2,a2,a7
60000914:	01776713          	ori	a4,a4,23
60000918:	c218                	sw	a4,0(a2)
6000091a:	4605                	li	a2,1
6000091c:	bf7d                	j	600008da <betrusted_boot::satp::satp_setup+0xfc>
6000091e:	4781                	li	a5,0
60000920:	4601                	li	a2,0
60000922:	6685                	lui	a3,0x1
60000924:	fff68593          	addi	a1,a3,-1 # fff <_hart_stack_size+0x7ff>
60000928:	58000837          	lui	a6,0x58000
6000092c:	16f1                	addi	a3,a3,-4
6000092e:	610048b7          	lui	a7,0x61004
60000932:	8a05                	andi	a2,a2,1
60000934:	ce19                	beqz	a2,60000952 <betrusted_boot::satp::satp_setup+0x174>
60000936:	00b78633          	add	a2,a5,a1
6000093a:	00f637b3          	sltu	a5,a2,a5
6000093e:	fff7c793          	not	a5,a5
60000942:	01165713          	srli	a4,a2,0x11
60000946:	00173713          	seqz	a4,a4
    }
    // map peripherals
    const CSR_LEN: usize = 0x2_0000;
    const PERI_LEN: usize = 0xA000;
    for offset in (0..CSR_LEN).step_by(PAGE_SIZE) {
6000094a:	8f7d                	and	a4,a4,a5
6000094c:	87b2                	mv	a5,a2
6000094e:	e709                	bnez	a4,60000958 <betrusted_boot::satp::satp_setup+0x17a>
60000950:	a01d                	j	60000976 <betrusted_boot::satp::satp_setup+0x198>
60000952:	0117d613          	srli	a2,a5,0x11
60000956:	e205                	bnez	a2,60000976 <betrusted_boot::satp::satp_setup+0x198>
        set_l2_pte(CSR_VA + offset, CSR_VA + offset, &mut csr_pt, FLG_W | FLG_R | FLG_U);
60000958:	01078633          	add	a2,a5,a6
6000095c:	0785                	addi	a5,a5,1
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
6000095e:	00265713          	srli	a4,a2,0x2
60000962:	8f69                	and	a4,a4,a0
    l2_pt.entries[index] =
60000964:	8229                	srli	a2,a2,0xa
60000966:	8e75                	and	a2,a2,a3
60000968:	01166633          	or	a2,a2,a7
6000096c:	01776713          	ori	a4,a4,23
60000970:	c218                	sw	a4,0(a2)
60000972:	4605                	li	a2,1
60000974:	bf7d                	j	60000932 <betrusted_boot::satp::satp_setup+0x154>
60000976:	4781                	li	a5,0
60000978:	4601                	li	a2,0
6000097a:	6685                	lui	a3,0x1
6000097c:	fff68593          	addi	a1,a3,-1 # fff <_hart_stack_size+0x7ff>
60000980:	401008b7          	lui	a7,0x40100
60000984:	16f1                	addi	a3,a3,-4
60000986:	610052b7          	lui	t0,0x61005
6000098a:	4815                	li	a6,5
6000098c:	8a05                	andi	a2,a2,1
6000098e:	ce19                	beqz	a2,600009ac <betrusted_boot::satp::satp_setup+0x1ce>
60000990:	00b78633          	add	a2,a5,a1
60000994:	00f637b3          	sltu	a5,a2,a5
60000998:	fff7c793          	not	a5,a5
6000099c:	00d65713          	srli	a4,a2,0xd
600009a0:	00573713          	sltiu	a4,a4,5
    }
    for offset in (0..PERI_LEN).step_by(PAGE_SIZE) {
600009a4:	8f7d                	and	a4,a4,a5
600009a6:	87b2                	mv	a5,a2
600009a8:	e711                	bnez	a4,600009b4 <betrusted_boot::satp::satp_setup+0x1d6>
600009aa:	a025                	j	600009d2 <betrusted_boot::satp::satp_setup+0x1f4>
600009ac:	00d7d613          	srli	a2,a5,0xd
600009b0:	03067163          	bgeu	a2,a6,600009d2 <betrusted_boot::satp::satp_setup+0x1f4>
        set_l2_pte(PERI_VA + offset, PERI_VA + offset, &mut peri_pt, FLG_W | FLG_R | FLG_U);
600009b4:	01178633          	add	a2,a5,a7
600009b8:	0785                	addi	a5,a5,1
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
600009ba:	00265713          	srli	a4,a2,0x2
600009be:	8f69                	and	a4,a4,a0
    l2_pt.entries[index] =
600009c0:	8229                	srli	a2,a2,0xa
600009c2:	8e75                	and	a2,a2,a3
600009c4:	00566633          	or	a2,a2,t0
600009c8:	01776713          	ori	a4,a4,23
600009cc:	c218                	sw	a4,0(a2)
600009ce:	4605                	li	a2,1
600009d0:	bf75                	j	6000098c <betrusted_boot::satp::satp_setup+0x1ae>
600009d2:	80461537          	lui	a0,0x80461
        0x8000_0000
        | asid << 22
        | (ROOT_PT_PA as u32 >> 12);

    unsafe {
        core::arch::asm!(
600009d6:	52fd                	li	t0,-1
600009d8:	30329073          	csrw	mideleg,t0
600009dc:	30229073          	csrw	medeleg,t0
600009e0:	000412b7          	lui	t0,0x41
600009e4:	80028293          	addi	t0,t0,-2048 # 40800 <.Lline_table_start0+0x3b88a>
600009e8:	30029073          	csrw	mstatus,t0
600009ec:	18051073          	csrw	satp,a0
600009f0:	12000073          	sfence.vma
600009f4:	600002b7          	lui	t0,0x60000
600009f8:	40508733          	sub	a4,ra,t0
600009fc:	34171073          	csrw	mepc,a4
60000a00:	30200073          	mret
            // Issue the return, which will jump to $mepc in Supervisor mode
            "mret",
            satp_val = in(reg) satp,
        );
    }
}
60000a04:	8082                	ret

60000a06 <betrusted_boot::satp::to_user_mode>:

#[inline(never)] // correct behavior depends on RA being set.
pub fn to_user_mode() {
    unsafe {
        core::arch::asm!(
60000a06:	14109073          	csrw	sepc,ra
60000a0a:	10200073          	sret
            "csrw   sepc, ra",
            "sret",
        );
    }
}
60000a0e:	8082                	ret

60000a10 <_start_trap>:
// #[repr(align(4))] // can't do this yet.
#[inline(never)]
pub unsafe extern "C" fn _start_trap() -> ! {
    loop {
        // install a NOP sled before _start_trap() until https://github.com/rust-lang/rust/issues/82232 is stable
        core::arch::asm!(
60000a10:	0001                	nop
60000a12:	0001                	nop
            "nop",
            "nop",
        );
        #[export_name = "_start_trap_aligned"]
        pub unsafe extern "C" fn _start_trap_aligned() {
            core::arch::asm!(
60000a14:	14011073          	csrw	sscratch,sp
60000a18:	61006137          	lui	sp,0x61006
60000a1c:	c006                	sw	ra,0(sp)
60000a1e:	c40e                	sw	gp,8(sp)
60000a20:	c612                	sw	tp,12(sp)
60000a22:	c816                	sw	t0,16(sp)
60000a24:	ca1a                	sw	t1,20(sp)
60000a26:	cc1e                	sw	t2,24(sp)
60000a28:	ce22                	sw	s0,28(sp)
60000a2a:	d026                	sw	s1,32(sp)
60000a2c:	d22a                	sw	a0,36(sp)
60000a2e:	d42e                	sw	a1,40(sp)
60000a30:	d632                	sw	a2,44(sp)
60000a32:	d836                	sw	a3,48(sp)
60000a34:	da3a                	sw	a4,52(sp)
60000a36:	dc3e                	sw	a5,56(sp)
60000a38:	de42                	sw	a6,60(sp)
60000a3a:	c0c6                	sw	a7,64(sp)
60000a3c:	c2ca                	sw	s2,68(sp)
60000a3e:	c4ce                	sw	s3,72(sp)
60000a40:	c6d2                	sw	s4,76(sp)
60000a42:	c8d6                	sw	s5,80(sp)
60000a44:	cada                	sw	s6,84(sp)
60000a46:	ccde                	sw	s7,88(sp)
60000a48:	cee2                	sw	s8,92(sp)
60000a4a:	d0e6                	sw	s9,96(sp)
60000a4c:	d2ea                	sw	s10,100(sp)
60000a4e:	d4ee                	sw	s11,104(sp)
60000a50:	d6f2                	sw	t3,108(sp)
60000a52:	d8f6                	sw	t4,112(sp)
60000a54:	dafa                	sw	t5,116(sp)
60000a56:	dcfe                	sw	t6,120(sp)
60000a58:	141022f3          	csrr	t0,sepc
60000a5c:	de96                	sw	t0,124(sp)
60000a5e:	140022f3          	csrr	t0,sscratch
60000a62:	c216                	sw	t0,4(sp)
60000a64:	61008137          	lui	sp,0x61008
60000a68:	0aa0006f          	j	60000b12 <_start_trap_rust>
                // Note that registers $a0-$a7 still contain the arguments
                "j           _start_trap_rust",
            );
        }
        _start_trap_aligned();
        core::arch::asm!(
60000a6c:	0001                	nop
60000a6e:	0001                	nop
60000a70:	b745                	j	60000a10 <_start_trap>

60000a72 <_start_trap_aligned>:
            core::arch::asm!(
60000a72:	14011073          	csrw	sscratch,sp
60000a76:	61006137          	lui	sp,0x61006
60000a7a:	c006                	sw	ra,0(sp)
60000a7c:	c40e                	sw	gp,8(sp)
60000a7e:	c612                	sw	tp,12(sp)
60000a80:	c816                	sw	t0,16(sp)
60000a82:	ca1a                	sw	t1,20(sp)
60000a84:	cc1e                	sw	t2,24(sp)
60000a86:	ce22                	sw	s0,28(sp)
60000a88:	d026                	sw	s1,32(sp)
60000a8a:	d22a                	sw	a0,36(sp)
60000a8c:	d42e                	sw	a1,40(sp)
60000a8e:	d632                	sw	a2,44(sp)
60000a90:	d836                	sw	a3,48(sp)
60000a92:	da3a                	sw	a4,52(sp)
60000a94:	dc3e                	sw	a5,56(sp)
60000a96:	de42                	sw	a6,60(sp)
60000a98:	c0c6                	sw	a7,64(sp)
60000a9a:	c2ca                	sw	s2,68(sp)
60000a9c:	c4ce                	sw	s3,72(sp)
60000a9e:	c6d2                	sw	s4,76(sp)
60000aa0:	c8d6                	sw	s5,80(sp)
60000aa2:	cada                	sw	s6,84(sp)
60000aa4:	ccde                	sw	s7,88(sp)
60000aa6:	cee2                	sw	s8,92(sp)
60000aa8:	d0e6                	sw	s9,96(sp)
60000aaa:	d2ea                	sw	s10,100(sp)
60000aac:	d4ee                	sw	s11,104(sp)
60000aae:	d6f2                	sw	t3,108(sp)
60000ab0:	d8f6                	sw	t4,112(sp)
60000ab2:	dafa                	sw	t5,116(sp)
60000ab4:	dcfe                	sw	t6,120(sp)
60000ab6:	141022f3          	csrr	t0,sepc
60000aba:	de96                	sw	t0,124(sp)
60000abc:	140022f3          	csrr	t0,sscratch
60000ac0:	c216                	sw	t0,4(sp)
60000ac2:	61008137          	lui	sp,0x61008
60000ac6:	04c0006f          	j	60000b12 <_start_trap_rust>
        }
60000aca:	8082                	ret

60000acc <_resume_context>:
}

#[export_name = "_resume_context"]
#[inline(never)]
pub unsafe extern "C" fn _resume_context(registers: u32) -> ! {
    core::arch::asm!(
60000acc:	812a                	mv	sp,a0
60000ace:	4082                	lw	ra,0(sp)
60000ad0:	41a2                	lw	gp,8(sp)
60000ad2:	4232                	lw	tp,12(sp)
60000ad4:	42c2                	lw	t0,16(sp)
60000ad6:	4352                	lw	t1,20(sp)
60000ad8:	43e2                	lw	t2,24(sp)
60000ada:	4472                	lw	s0,28(sp)
60000adc:	5482                	lw	s1,32(sp)
60000ade:	5512                	lw	a0,36(sp)
60000ae0:	55a2                	lw	a1,40(sp)
60000ae2:	5632                	lw	a2,44(sp)
60000ae4:	56c2                	lw	a3,48(sp)
60000ae6:	5752                	lw	a4,52(sp)
60000ae8:	57e2                	lw	a5,56(sp)
60000aea:	5872                	lw	a6,60(sp)
60000aec:	4886                	lw	a7,64(sp)
60000aee:	4916                	lw	s2,68(sp)
60000af0:	49a6                	lw	s3,72(sp)
60000af2:	4a36                	lw	s4,76(sp)
60000af4:	4ac6                	lw	s5,80(sp)
60000af6:	4b56                	lw	s6,84(sp)
60000af8:	4be6                	lw	s7,88(sp)
60000afa:	4c76                	lw	s8,92(sp)
60000afc:	5c86                	lw	s9,96(sp)
60000afe:	5d16                	lw	s10,100(sp)
60000b00:	5da6                	lw	s11,104(sp)
60000b02:	5e36                	lw	t3,108(sp)
60000b04:	5ec6                	lw	t4,112(sp)
60000b06:	5f56                	lw	t5,116(sp)
60000b08:	5fe6                	lw	t6,120(sp)
60000b0a:	4112                	lw	sp,4(sp)
60000b0c:	10200073          	sret
        // Restore SP
        "lw        x2, 1*4(sp)",
        "sret",
        registers = in(reg) registers,
    );
    loop {}
60000b10:	a001                	j	60000b10 <_resume_context+0x44>

60000b12 <_start_trap_rust>:
}

/// Just handles specific traps for testing CPU interactions. Doesn't do anything useful with the traps.
#[export_name = "_start_trap_rust"]
pub extern "C" fn trap_handler(
60000b12:	1141                	addi	sp,sp,-16 # 61007ff0 <_estack+0x3ff0>
60000b14:	c606                	sw	ra,12(sp)
60000b16:	c422                	sw	s0,8(sp)
60000b18:	c226                	sw	s1,4(sp)
60000b1a:	40108437          	lui	s0,0x40108
60000b1e:	2dcd0537          	lui	a0,0x2dcd0
60000b22:	c008                	sw	a0,0(s0)
60000b24:	0330000f          	fence	rw,rw
60000b28:	00002097          	auipc	ra,0x2
60000b2c:	1a8080e7          	jalr	424(ra) # 60002cd0 <__read_scause>
60000b30:	c008                	sw	a0,0(s0)
60000b32:	800005b7          	lui	a1,0x80000
60000b36:	05a5                	addi	a1,a1,9 # 80000009 <_lcdfb+0xd0000009>
60000b38:	0330000f          	fence	rw,rw
    report.wfo(utra::main::REPORT_REPORT, 0x2dcd_0000);

    let sc = scause::read();
    report.wfo(utra::main::REPORT_REPORT, sc.bits() as u32);
    // 2 is illegal instruction
    if sc.bits() == 2 {
60000b3c:	00b50b63          	beq	a0,a1,60000b52 <_start_trap_rust+0x40>
60000b40:	4589                	li	a1,2
60000b42:	0cb51163          	bne	a0,a1,60000c04 <_start_trap_rust+0xf2>
        // skip past the illegal instruction, since we are just testing that they trigger exceptions.
        unsafe {
            core::arch::asm!(
60000b46:	141022f3          	csrr	t0,sepc
60000b4a:	0291                	addi	t0,t0,4 # 60000004 <_start+0x4>
60000b4c:	14129073          	csrw	sepc,t0
60000b50:	a855                	j	60000c04 <_start_trap_rust+0xf2>
60000b52:	00002097          	auipc	ra,0x2
60000b56:	196080e7          	jalr	406(ra) # 60002ce8 <__read_vsip>
60000b5a:	c008                	sw	a0,0(s0)
        }
    } else if sc.bits() == 0x8000_0009 {
        // external interrupt. find out which ones triggered it, and clear the source.
        let irqs_pending = sip::read();
        report.wfo(utra::main::REPORT_REPORT, irqs_pending as u32);
        if (irqs_pending & 0x1) != 0 {
60000b5c:	00157593          	andi	a1,a0,1
60000b60:	0330000f          	fence	rw,rw
60000b64:	c195                	beqz	a1,60000b88 <_start_trap_rust+0x76>
60000b66:	401085b7          	lui	a1,0x40108
60000b6a:	0005ac23          	sw	zero,24(a1) # 40108018 <.Lline_table_start0+0x401030a2>
60000b6e:	0330000f          	fence	rw,rw
60000b72:	58004637          	lui	a2,0x58004
60000b76:	4614                	lw	a3,8(a2)
            // handle irq0 hw test
            main.wfo(utra::main::IRQTEST0_TRIGGER, 0);
            let mut irqarray0 = CSR::new(utra::irqarray0::HW_IRQARRAY0_BASE as *mut u32);
            let pending = irqarray0.r(utra::irqarray0::EV_PENDING);
            report.wfo(utra::main::REPORT_REPORT, pending << 16 | 0); // encode the irq bank number and bit number as [bit | bank]
60000b78:	01069713          	slli	a4,a3,0x10
60000b7c:	c198                	sw	a4,0(a1)
60000b7e:	0330000f          	fence	rw,rw
60000b82:	c614                	sw	a3,8(a2)
60000b84:	0330000f          	fence	rw,rw
            irqarray0.wo(utra::irqarray0::EV_PENDING, pending);
        }
        if (irqs_pending & 0x2) != 0 {
60000b88:	00257593          	andi	a1,a0,2
60000b8c:	c585                	beqz	a1,60000bb4 <_start_trap_rust+0xa2>
60000b8e:	401085b7          	lui	a1,0x40108
60000b92:	0005ae23          	sw	zero,28(a1) # 4010801c <.Lline_table_start0+0x401030a6>
60000b96:	0330000f          	fence	rw,rw
60000b9a:	58005637          	lui	a2,0x58005
60000b9e:	4614                	lw	a3,8(a2)
            // handle irq1 hw test
            main.wfo(utra::main::IRQTEST1_TRIGGER, 0);
            let mut irqarray1 = CSR::new(utra::irqarray1::HW_IRQARRAY1_BASE as *mut u32);
            let pending = irqarray1.r(utra::irqarray1::EV_PENDING);
            report.wfo(utra::main::REPORT_REPORT, pending << 16 | 1); // encode the irq bank number and bit number as [bit | bank]
60000ba0:	01069713          	slli	a4,a3,0x10
60000ba4:	00176713          	ori	a4,a4,1
60000ba8:	c198                	sw	a4,0(a1)
60000baa:	0330000f          	fence	rw,rw
60000bae:	c614                	sw	a3,8(a2)
60000bb0:	0330000f          	fence	rw,rw
            irqarray1.wo(utra::irqarray1::EV_PENDING, pending);
        }
        if (irqs_pending & 4) != 0 {
60000bb4:	00457593          	andi	a1,a0,4
60000bb8:	c195                	beqz	a1,60000bdc <_start_trap_rust+0xca>
60000bba:	0330000f          	fence	rw,rw
60000bbe:	580105b7          	lui	a1,0x58010
60000bc2:	4590                	lw	a2,8(a1)
            // handle irq2 sw trigger test
            let mut irqarray2 = CSR::new(utra::irqarray2::HW_IRQARRAY2_BASE as *mut u32);
            let pending = irqarray2.r(utra::irqarray2::EV_PENDING);
            report.wfo(utra::main::REPORT_REPORT, pending << 16 | 2); // encode the irq bank number and bit number as [bit | bank]
60000bc4:	01061693          	slli	a3,a2,0x10
60000bc8:	0026e693          	ori	a3,a3,2
60000bcc:	40108737          	lui	a4,0x40108
60000bd0:	c314                	sw	a3,0(a4)
60000bd2:	0330000f          	fence	rw,rw
60000bd6:	c590                	sw	a2,8(a1)
60000bd8:	0330000f          	fence	rw,rw
            irqarray2.wo(utra::irqarray2::EV_PENDING, pending);
            // software interrupt should not require a 0-write to reset it
        }
        if (irqs_pending & (1 << 19)) != 0 {
60000bdc:	0532                	slli	a0,a0,0xc
60000bde:	02055363          	bgez	a0,60000c04 <_start_trap_rust+0xf2>
60000be2:	0330000f          	fence	rw,rw
60000be6:	5800f537          	lui	a0,0x5800f
60000bea:	450c                	lw	a1,8(a0)
            // handle wfi wakeup signal
            let mut irqarray19 = CSR::new(utra::irqarray19::HW_IRQARRAY19_BASE as *mut u32);
            let pending = irqarray19.r(utra::irqarray19::EV_PENDING);
            report.wfo(utra::main::REPORT_REPORT, pending << 16 | 19); // encode the irq bank number and bit number as [bit | bank]
60000bec:	01059613          	slli	a2,a1,0x10
60000bf0:	01366613          	ori	a2,a2,19
60000bf4:	401086b7          	lui	a3,0x40108
60000bf8:	c290                	sw	a2,0(a3)
60000bfa:	0330000f          	fence	rw,rw
60000bfe:	c50c                	sw	a1,8(a0)
60000c00:	0330000f          	fence	rw,rw
            irqarray19.wo(utra::irqarray19::EV_PENDING, pending);
        }
    }

    // report interrupt status
    report.wfo(utra::main::REPORT_REPORT, sepc::read() as u32);
60000c04:	fffff097          	auipc	ra,0xfffff
60000c08:	440080e7          	jalr	1088(ra) # 60000044 <xous_riscv::register::sepc::read>
60000c0c:	40108437          	lui	s0,0x40108
60000c10:	c008                	sw	a0,0(s0)
60000c12:	0330000f          	fence	rw,rw
    report.wfo(utra::main::REPORT_REPORT, stval::read() as u32);
60000c16:	fffff097          	auipc	ra,0xfffff
60000c1a:	436080e7          	jalr	1078(ra) # 6000004c <xous_riscv::register::stval::read>
60000c1e:	c008                	sw	a0,0(s0)
60000c20:	0330000f          	fence	rw,rw
    report.wfo(utra::main::REPORT_REPORT, sim::read() as u32);
60000c24:	fffff097          	auipc	ra,0xfffff
60000c28:	430080e7          	jalr	1072(ra) # 60000054 <xous_riscv::register::vexriscv::sim::read>
60000c2c:	c008                	sw	a0,0(s0)
60000c2e:	0330000f          	fence	rw,rw

    // re-enable interrupts
    let status: u32;
    unsafe {
        core::arch::asm!(
60000c32:	100022f3          	csrr	t0,sstatus
60000c36:	0032e293          	ori	t0,t0,3
60000c3a:	10029073          	csrw	sstatus,t0
60000c3e:	100024f3          	csrr	s1,sstatus
            "csrw        sstatus, t0",
            "csrr        {status}, sstatus",
            status = out(reg) status,
        )
    }
    unsafe{sie::set_sext()};
60000c42:	fffff097          	auipc	ra,0xfffff
60000c46:	3f6080e7          	jalr	1014(ra) # 60000038 <xous_riscv::register::sie::set_sext>
60000c4a:	c004                	sw	s1,0(s0)
60000c4c:	0330000f          	fence	rw,rw
60000c50:	2dcd6537          	lui	a0,0x2dcd6
60000c54:	0535                	addi	a0,a0,13 # 2dcd600d <.Lline_table_start0+0x2dcd1097>
60000c56:	c008                	sw	a0,0(s0)
60000c58:	0330000f          	fence	rw,rw
    report.wfo(utra::main::REPORT_REPORT, status);

    // drop us back to user mode
    report.wfo(utra::main::REPORT_REPORT, 0x2dcd_600d);
    unsafe {_resume_context(0x61006000)};
60000c5c:	61006537          	lui	a0,0x61006
60000c60:	00000097          	auipc	ra,0x0
60000c64:	e6c080e7          	jalr	-404(ra) # 60000acc <_resume_context>
	...

60000c6a <start_loader>:
    _arg_buffer: usize,
    _signature: usize,
    _loader_addr: usize,
) -> ! {
    unsafe {
        asm! (
60000c6a:	8602                	jr	a2
	...

60000c6e <rust_begin_unwind>:
    fn handle_panic(arg: &PanicInfo) -> ! {
60000c6e:	1141                	addi	sp,sp,-16
60000c70:	c606                	sw	ra,12(sp)
60000c72:	c422                	sw	s0,8(sp)
60000c74:	45cc                	lw	a1,12(a1)
60000c76:	842a                	mv	s0,a0
60000c78:	9582                	jalr	a1
60000c7a:	89a77637          	lui	a2,0x89a77
60000c7e:	c3460613          	addi	a2,a2,-972 # 89a76c34 <_lcdfb+0xd9a76c34>
60000c82:	8db1                	xor	a1,a1,a2
60000c84:	a9f82637          	lui	a2,0xa9f82
60000c88:	ac860613          	addi	a2,a2,-1336 # a9f81ac8 <_lcdfb+0xf9f81ac8>
60000c8c:	8d31                	xor	a0,a0,a2
60000c8e:	8d4d                	or	a0,a0,a1
        if let Some(s) = arg.payload().downcast_ref::<&str>() {
60000c90:	e505                	bnez	a0,60000cb8 <rust_begin_unwind+0x4a>
            uart.tiny_write_str(s);
60000c92:	404c                	lw	a1,4(s0)
60000c94:	c5b1                	beqz	a1,60000ce0 <rust_begin_unwind+0x72>
60000c96:	4008                	lw	a0,0(s0)
60000c98:	95aa                	add	a1,a1,a0
60000c9a:	40102637          	lui	a2,0x40102
60000c9e:	00054683          	lbu	a3,0(a0) # 61006000 <_estack+0x2000>
60000ca2:	0330000f          	fence	rw,rw
60000ca6:	4258                	lw	a4,4(a2)
        while uart.r(utra::uart::TXFULL) != 0 {}
60000ca8:	ff6d                	bnez	a4,60000ca2 <rust_begin_unwind+0x34>
60000caa:	0505                	addi	a0,a0,1
60000cac:	c214                	sw	a3,0(a2)
60000cae:	0330000f          	fence	rw,rw
60000cb2:	feb516e3          	bne	a0,a1,60000c9e <rust_begin_unwind+0x30>
60000cb6:	a02d                	j	60000ce0 <rust_begin_unwind+0x72>
60000cb8:	60003537          	lui	a0,0x60003
60000cbc:	fe850513          	addi	a0,a0,-24 # 60002fe8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.30>
60000cc0:	401025b7          	lui	a1,0x40102
60000cc4:	01450613          	addi	a2,a0,20
60000cc8:	00054683          	lbu	a3,0(a0)
60000ccc:	0330000f          	fence	rw,rw
60000cd0:	41d8                	lw	a4,4(a1)
60000cd2:	ff6d                	bnez	a4,60000ccc <rust_begin_unwind+0x5e>
60000cd4:	0505                	addi	a0,a0,1
60000cd6:	c194                	sw	a3,0(a1)
60000cd8:	0330000f          	fence	rw,rw
60000cdc:	fec516e3          	bne	a0,a2,60000cc8 <rust_begin_unwind+0x5a>
        loop {}
60000ce0:	a001                	j	60000ce0 <rust_begin_unwind+0x72>

60000ce2 <betrusted_boot::Gfx::hex_word>:
    pub fn hex_word(&mut self, word: u32, pos: &mut Point) {
60000ce2:	7179                	addi	sp,sp,-48
60000ce4:	d606                	sw	ra,44(sp)
60000ce6:	d422                	sw	s0,40(sp)
60000ce8:	d226                	sw	s1,36(sp)
60000cea:	d04a                	sw	s2,32(sp)
60000cec:	ce4e                	sw	s3,28(sp)
60000cee:	cc52                	sw	s4,24(sp)
60000cf0:	ca56                	sw	s5,20(sp)
60000cf2:	c85a                	sw	s6,16(sp)
60000cf4:	c65e                	sw	s7,12(sp)
60000cf6:	8932                	mv	s2,a2
60000cf8:	8baa                	mv	s7,a0
60000cfa:	4401                	li	s0,0
60000cfc:	0085d513          	srli	a0,a1,0x8
60000d00:	6641                	lui	a2,0x10
60000d02:	f0060613          	addi	a2,a2,-256 # ff00 <.Lline_table_start0+0xaf8a>
60000d06:	8d71                	and	a0,a0,a2
60000d08:	0185d613          	srli	a2,a1,0x18
60000d0c:	8d51                	or	a0,a0,a2
60000d0e:	00859613          	slli	a2,a1,0x8
60000d12:	00ff06b7          	lui	a3,0xff0
60000d16:	8e75                	and	a2,a2,a3
60000d18:	05e2                	slli	a1,a1,0x18
60000d1a:	8dd1                	or	a1,a1,a2
60000d1c:	8d4d                	or	a0,a0,a1
        for &byte in word.to_be_bytes().iter() {
60000d1e:	c02a                	sw	a0,0(sp)
60000d20:	898a                	mv	s3,sp
60000d22:	0a000a13          	li	s4,160
60000d26:	4aa9                	li	s5,10
60000d28:	4b11                	li	s6,4
60000d2a:	00898533          	add	a0,s3,s0
60000d2e:	00054483          	lbu	s1,0(a0)
        self.put_digit(c >> 4, pos);
60000d32:	0044d513          	srli	a0,s1,0x4
        let mut buf: [u8; 4] = [0; 4]; // stack buffer for the character encoding
60000d36:	c202                	sw	zero,4(sp)
        if nyb < 10 {
60000d38:	0144e563          	bltu	s1,s4,60000d42 <betrusted_boot::Gfx::hex_word+0x60>
60000d3c:	05750513          	addi	a0,a0,87
60000d40:	a019                	j	60000d46 <betrusted_boot::Gfx::hex_word+0x64>
60000d42:	03056513          	ori	a0,a0,48
60000d46:	00a10223          	sb	a0,4(sp)
60000d4a:	004c                	addi	a1,sp,4
60000d4c:	4605                	li	a2,1
60000d4e:	855e                	mv	a0,s7
60000d50:	86ca                	mv	a3,s2
60000d52:	00000097          	auipc	ra,0x0
60000d56:	04c080e7          	jalr	76(ra) # 60000d9e <betrusted_boot::Gfx::msg>
        self.put_digit(c & 0xF, pos);
60000d5a:	00f4f513          	andi	a0,s1,15
        let mut buf: [u8; 4] = [0; 4]; // stack buffer for the character encoding
60000d5e:	c402                	sw	zero,8(sp)
        if nyb < 10 {
60000d60:	01556563          	bltu	a0,s5,60000d6a <betrusted_boot::Gfx::hex_word+0x88>
60000d64:	05750513          	addi	a0,a0,87
60000d68:	a019                	j	60000d6e <betrusted_boot::Gfx::hex_word+0x8c>
60000d6a:	03056513          	ori	a0,a0,48
60000d6e:	0405                	addi	s0,s0,1 # 40108001 <.Lline_table_start0+0x4010308b>
60000d70:	00a10423          	sb	a0,8(sp)
60000d74:	002c                	addi	a1,sp,8
60000d76:	4605                	li	a2,1
60000d78:	855e                	mv	a0,s7
60000d7a:	86ca                	mv	a3,s2
60000d7c:	00000097          	auipc	ra,0x0
60000d80:	022080e7          	jalr	34(ra) # 60000d9e <betrusted_boot::Gfx::msg>
60000d84:	fb6413e3          	bne	s0,s6,60000d2a <betrusted_boot::Gfx::hex_word+0x48>
    }
60000d88:	50b2                	lw	ra,44(sp)
60000d8a:	5422                	lw	s0,40(sp)
60000d8c:	5492                	lw	s1,36(sp)
60000d8e:	5902                	lw	s2,32(sp)
60000d90:	49f2                	lw	s3,28(sp)
60000d92:	4a62                	lw	s4,24(sp)
60000d94:	4ad2                	lw	s5,20(sp)
60000d96:	4b42                	lw	s6,16(sp)
60000d98:	4bb2                	lw	s7,12(sp)
60000d9a:	6145                	addi	sp,sp,48
60000d9c:	8082                	ret

60000d9e <betrusted_boot::Gfx::msg>:
    pub fn msg(&mut self, text: &'a str, pos: &mut Point) {
60000d9e:	715d                	addi	sp,sp,-80
60000da0:	c686                	sw	ra,76(sp)
60000da2:	c4a2                	sw	s0,72(sp)
60000da4:	c2a6                	sw	s1,68(sp)
60000da6:	c0ca                	sw	s2,64(sp)
60000da8:	de4e                	sw	s3,60(sp)
60000daa:	dc52                	sw	s4,56(sp)
60000dac:	da56                	sw	s5,52(sp)
60000dae:	d85a                	sw	s6,48(sp)
60000db0:	d65e                	sw	s7,44(sp)
60000db2:	d462                	sw	s8,40(sp)
60000db4:	d266                	sw	s9,36(sp)
60000db6:	d06a                	sw	s10,32(sp)
60000db8:	ce6e                	sw	s11,28(sp)
60000dba:	cc36                	sw	a3,24(sp)
60000dbc:	ca02                	sw	zero,20(sp)
60000dbe:	c802                	sw	zero,16(sp)
60000dc0:	962e                	add	a2,a2,a1
60000dc2:	c632                	sw	a2,12(sp)
60000dc4:	415c                	lw	a5,4(a0)
60000dc6:	c42a                	sw	a0,8(sp)
60000dc8:	4110                	lw	a2,0(a0)
60000dca:	4319                	li	t1,6
60000dcc:	4f29                	li	t5,10
60000dce:	4f95                	li	t6,5
60000dd0:	49b5                	li	s3,13
60000dd2:	06000a93          	li	s5,96
60000dd6:	44ed                	li	s1,27
60000dd8:	6a41                	lui	s4,0x10
60000dda:	fffa0413          	addi	s0,s4,-1 # ffff <.Lline_table_start0+0xb089>
60000dde:	60003537          	lui	a0,0x60003
60000de2:	ffc50b13          	addi	s6,a0,-4 # 60002ffc <.Lanon.01042f9e07bac0588b13af07786e0e0c.31>
60000de6:	16000b93          	li	s7,352
60000dea:	4c05                	li	s8,1
60000dec:	4cad                	li	s9,11
60000dee:	00058503          	lb	a0,0(a1) # 40102000 <.Lline_table_start0+0x400fd08a>
60000df2:	0ff57093          	zext.b	ra,a0
60000df6:	00054463          	bltz	a0,60000dfe <betrusted_boot::Gfx::msg+0x60>
60000dfa:	0585                	addi	a1,a1,1
60000dfc:	a08d                	j	60000e5e <betrusted_boot::Gfx::msg+0xc0>
60000dfe:	0015c703          	lbu	a4,1(a1)
60000e02:	01f0f513          	andi	a0,ra,31
60000e06:	03f77713          	andi	a4,a4,63
60000e0a:	0df00693          	li	a3,223
60000e0e:	0216ff63          	bgeu	a3,ra,60000e4c <betrusted_boot::Gfx::msg+0xae>
60000e12:	0025c803          	lbu	a6,2(a1)
60000e16:	00671893          	slli	a7,a4,0x6
60000e1a:	03f87713          	andi	a4,a6,63
60000e1e:	00e8e733          	or	a4,a7,a4
60000e22:	0f000693          	li	a3,240
60000e26:	02d0e863          	bltu	ra,a3,60000e56 <betrusted_boot::Gfx::msg+0xb8>
60000e2a:	0035c803          	lbu	a6,3(a1)
60000e2e:	0576                	slli	a0,a0,0x1d
60000e30:	00b55893          	srli	a7,a0,0xb
60000e34:	071a                	slli	a4,a4,0x6
60000e36:	03f87513          	andi	a0,a6,63
60000e3a:	8d59                	or	a0,a0,a4
60000e3c:	011560b3          	or	ra,a0,a7
        for current_char in text.chars() {
60000e40:	00110537          	lui	a0,0x110
60000e44:	1ca08b63          	beq	ra,a0,6000101a <betrusted_boot::Gfx::msg+0x27c>
60000e48:	0591                	addi	a1,a1,4
60000e4a:	a811                	j	60000e5e <betrusted_boot::Gfx::msg+0xc0>
60000e4c:	0589                	addi	a1,a1,2
60000e4e:	051a                	slli	a0,a0,0x6
60000e50:	00e560b3          	or	ra,a0,a4
60000e54:	a029                	j	60000e5e <betrusted_boot::Gfx::msg+0xc0>
60000e56:	058d                	addi	a1,a1,3
60000e58:	0532                	slli	a0,a0,0xc
60000e5a:	00a760b3          	or	ra,a4,a0
60000e5e:	fe008513          	addi	a0,ra,-32
60000e62:	05f00693          	li	a3,95
60000e66:	00d56363          	bltu	a0,a3,60000e6c <betrusted_boot::Gfx::msg+0xce>
60000e6a:	4501                	li	a0,0
60000e6c:	00455713          	srli	a4,a0,0x4
60000e70:	893d                	andi	a0,a0,15
60000e72:	02650533          	mul	a0,a0,t1
60000e76:	48000693          	li	a3,1152
60000e7a:	02d70733          	mul	a4,a4,a3
60000e7e:	00e563b3          	or	t2,a0,a4
                let color = if FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
60000e82:	0083d513          	srli	a0,t2,0x8
                let bitmap_byte = bitmap_bit_index / 8;
60000e86:	0033d713          	srli	a4,t2,0x3
                let color = if FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
60000e8a:	46e9                	li	a3,26
60000e8c:	14a6ea63          	bltu	a3,a0,60000fe0 <betrusted_boot::Gfx::msg+0x242>
60000e90:	4562                	lw	a0,24(sp)
60000e92:	00255d03          	lhu	s10,2(a0) # 110002 <.Lline_table_start0+0x10b08c>
60000e96:	00055d83          	lhu	s11,0(a0)
60000e9a:	4281                	li	t0,0
60000e9c:	4e01                	li	t3,0
60000e9e:	4552                	lw	a0,20(sp)
60000ea0:	02650eb3          	mul	t4,a0,t1
60000ea4:	831e                	mv	t1,t2
60000ea6:	0ff0f813          	zext.b	a6,ra
60000eaa:	09e80c63          	beq	a6,t5,60000f42 <betrusted_boot::Gfx::msg+0x1a4>
                if (current_char as u8 != 0xd) && (current_char as u8 != 0xa) { // don't draw CRLF specials
60000eae:	09380a63          	beq	a6,s3,60000f42 <betrusted_boot::Gfx::msg+0x1a4>
                let y = pos.y + char_walk_y as i16;
60000eb2:	01cd0533          	add	a0,s10,t3
60000eb6:	008578b3          	and	a7,a0,s0
60000eba:	21700513          	li	a0,535
        if clip_y >= FB_LINES {
60000ebe:	00a8e463          	bltu	a7,a0,60000ec6 <betrusted_boot::Gfx::msg+0x128>
60000ec2:	21700893          	li	a7,535
60000ec6:	005e8533          	add	a0,t4,t0
60000eca:	956e                	add	a0,a0,s11
60000ecc:	008576b3          	and	a3,a0,s0
60000ed0:	14f00913          	li	s2,335
        if clip_x >= FB_WIDTH_PIXELS {
60000ed4:	00d96363          	bltu	s2,a3,60000eda <betrusted_boot::Gfx::msg+0x13c>
60000ed8:	8946                	mv	s2,a7
60000eda:	00eb06b3          	add	a3,s6,a4
60000ede:	0006c683          	lbu	a3,0(a3) # ff0000 <.Lline_table_start0+0xfeb08a>
60000ee2:	fff34713          	not	a4,t1
60000ee6:	8b1d                	andi	a4,a4,7
60000ee8:	00e6d6b3          	srl	a3,a3,a4
60000eec:	8a85                	andi	a3,a3,1
60000eee:	0542                	slli	a0,a0,0x10
60000ef0:	8541                	srai	a0,a0,0x10
60000ef2:	03790733          	mul	a4,s2,s7
60000ef6:	972a                	add	a4,a4,a0
60000ef8:	8315                	srli	a4,a4,0x5
        if color == Color::Light {
60000efa:	ca99                	beqz	a3,60000f10 <betrusted_boot::Gfx::msg+0x172>
            self.fb[(clip_x + clip_y * FB_WIDTH_WORDS * 32) / 32] |= 1 << (clip_x % 32)
60000efc:	0ef77f63          	bgeu	a4,a5,60000ffa <betrusted_boot::Gfx::msg+0x25c>
60000f00:	00271693          	slli	a3,a4,0x2
60000f04:	96b2                	add	a3,a3,a2
60000f06:	4298                	lw	a4,0(a3)
60000f08:	00ac1533          	sll	a0,s8,a0
60000f0c:	8d59                	or	a0,a0,a4
60000f0e:	a821                	j	60000f26 <betrusted_boot::Gfx::msg+0x188>
            self.fb[(clip_x + clip_y * FB_WIDTH_WORDS * 32) / 32] &= !(1 << (clip_x % 32))
60000f10:	0ef77a63          	bgeu	a4,a5,60001004 <betrusted_boot::Gfx::msg+0x266>
60000f14:	00271693          	slli	a3,a4,0x2
60000f18:	96b2                	add	a3,a3,a2
60000f1a:	4298                	lw	a4,0(a3)
60000f1c:	00ac1533          	sll	a0,s8,a0
60000f20:	fff54513          	not	a0,a0
60000f24:	8d79                	and	a0,a0,a4
60000f26:	c288                	sw	a0,0(a3)
        self.fb[clip_y * FB_WIDTH_WORDS + (FB_WIDTH_WORDS - 1)] |= 0x1_0000;
60000f28:	03990533          	mul	a0,s2,s9
60000f2c:	00a50713          	addi	a4,a0,10
60000f30:	0cf77063          	bgeu	a4,a5,60000ff0 <betrusted_boot::Gfx::msg+0x252>
60000f34:	00271513          	slli	a0,a4,0x2
60000f38:	9532                	add	a0,a0,a2
60000f3a:	4114                	lw	a3,0(a0)
60000f3c:	0146e6b3          	or	a3,a3,s4
60000f40:	c114                	sw	a3,0(a0)
                char_walk_x += 1;
60000f42:	0285                	addi	t0,t0,1
60000f44:	005ff763          	bgeu	t6,t0,60000f52 <betrusted_boot::Gfx::msg+0x1b4>
                    char_walk_y += 1;
60000f48:	0e05                	addi	t3,t3,1
                    if char_walk_y >= CHAR_HEIGHT {
60000f4a:	4531                	li	a0,12
60000f4c:	02ae7063          	bgeu	t3,a0,60000f6c <betrusted_boot::Gfx::msg+0x1ce>
60000f50:	4281                	li	t0,0
                let bitmap_bit_index = char_x
60000f52:	00538533          	add	a0,t2,t0
                    + (char_walk_y * FONT_IMAGE_WIDTH);
60000f56:	035e06b3          	mul	a3,t3,s5
                let bitmap_bit_index = char_x
60000f5a:	00d50333          	add	t1,a0,a3
                let color = if FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
60000f5e:	00835513          	srli	a0,t1,0x8
                let bitmap_byte = bitmap_bit_index / 8;
60000f62:	00335713          	srli	a4,t1,0x3
60000f66:	f49560e3          	bltu	a0,s1,60000ea6 <betrusted_boot::Gfx::msg+0x108>
60000f6a:	a89d                	j	60000fe0 <betrusted_boot::Gfx::msg+0x242>
                        if current_char as u8 == 0xd { // '\n'
60000f6c:	01e80a63          	beq	a6,t5,60000f80 <betrusted_boot::Gfx::msg+0x1e2>
60000f70:	01381e63          	bne	a6,s3,60000f8c <betrusted_boot::Gfx::msg+0x1ee>
                            pos.y += CHAR_HEIGHT as i16;
60000f74:	00cd0513          	addi	a0,s10,12
60000f78:	46e2                	lw	a3,24(sp)
60000f7a:	00a69123          	sh	a0,2(a3)
60000f7e:	a829                	j	60000f98 <betrusted_boot::Gfx::msg+0x1fa>
60000f80:	c802                	sw	zero,16(sp)
60000f82:	4da9                	li	s11,10
                            pos.x = LEFT_MARGIN as i16;
60000f84:	4562                	lw	a0,24(sp)
60000f86:	01b51023          	sh	s11,0(a0)
60000f8a:	a039                	j	60000f98 <betrusted_boot::Gfx::msg+0x1fa>
                            idx += 1;
60000f8c:	4552                	lw	a0,20(sp)
60000f8e:	0505                	addi	a0,a0,1
                            x_update += CHAR_WIDTH as i16;
60000f90:	ca2a                	sw	a0,20(sp)
60000f92:	4542                	lw	a0,16(sp)
60000f94:	0519                	addi	a0,a0,6
60000f96:	c82a                	sw	a0,16(sp)
60000f98:	4319                	li	t1,6
60000f9a:	4532                	lw	a0,12(sp)
60000f9c:	e4a599e3          	bne	a1,a0,60000dee <betrusted_boot::Gfx::msg+0x50>
60000fa0:	4622                	lw	a2,8(sp)
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);
    }
    /// Write a given field without reading it first
    pub fn wfo(&mut self, field: Field, value: T) {
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60000fa2:	4608                	lw	a0,8(a2)
        pos.x += x_update;
60000fa4:	45c2                	lw	a1,16(sp)
60000fa6:	95ee                	add	a1,a1,s11
60000fa8:	46e2                	lw	a3,24(sp)
60000faa:	00b69023          	sh	a1,0(a3)
60000fae:	4585                	li	a1,1
60000fb0:	c10c                	sw	a1,0(a0)
60000fb2:	0330000f          	fence	rw,rw
60000fb6:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60000fba:	4608                	lw	a0,8(a2)
60000fbc:	4148                	lw	a0,4(a0)
        if self.csr.rf(utra::memlcd::BUSY_BUSY) == 1 {
60000fbe:	8905                	andi	a0,a0,1
60000fc0:	f97d                	bnez	a0,60000fb6 <betrusted_boot::Gfx::msg+0x218>
    }
60000fc2:	40b6                	lw	ra,76(sp)
60000fc4:	4426                	lw	s0,72(sp)
60000fc6:	4496                	lw	s1,68(sp)
60000fc8:	4906                	lw	s2,64(sp)
60000fca:	59f2                	lw	s3,60(sp)
60000fcc:	5a62                	lw	s4,56(sp)
60000fce:	5ad2                	lw	s5,52(sp)
60000fd0:	5b42                	lw	s6,48(sp)
60000fd2:	5bb2                	lw	s7,44(sp)
60000fd4:	5c22                	lw	s8,40(sp)
60000fd6:	5c92                	lw	s9,36(sp)
60000fd8:	5d02                	lw	s10,32(sp)
60000fda:	4df2                	lw	s11,28(sp)
60000fdc:	6161                	addi	sp,sp,80
60000fde:	8082                	ret
                let color = if FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
60000fe0:	60003537          	lui	a0,0x60003
60000fe4:	37850613          	addi	a2,a0,888 # 60003378 <.Lanon.01042f9e07bac0588b13af07786e0e0c.33>
60000fe8:	36000593          	li	a1,864
60000fec:	853a                	mv	a0,a4
60000fee:	a00d                	j	60001010 <betrusted_boot::Gfx::msg+0x272>
        self.fb[clip_y * FB_WIDTH_WORDS + (FB_WIDTH_WORDS - 1)] |= 0x1_0000;
60000ff0:	60003537          	lui	a0,0x60003
60000ff4:	3a850613          	addi	a2,a0,936 # 600033a8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.36>
60000ff8:	a811                	j	6000100c <betrusted_boot::Gfx::msg+0x26e>
            self.fb[(clip_x + clip_y * FB_WIDTH_WORDS * 32) / 32] |= 1 << (clip_x % 32)
60000ffa:	60003537          	lui	a0,0x60003
60000ffe:	38850613          	addi	a2,a0,904 # 60003388 <.Lanon.01042f9e07bac0588b13af07786e0e0c.34>
60001002:	a029                	j	6000100c <betrusted_boot::Gfx::msg+0x26e>
            self.fb[(clip_x + clip_y * FB_WIDTH_WORDS * 32) / 32] &= !(1 << (clip_x % 32))
60001004:	60003537          	lui	a0,0x60003
60001008:	39850613          	addi	a2,a0,920 # 60003398 <.Lanon.01042f9e07bac0588b13af07786e0e0c.35>
6000100c:	853a                	mv	a0,a4
6000100e:	85be                	mv	a1,a5
60001010:	00001097          	auipc	ra,0x1
60001014:	4bc080e7          	jalr	1212(ra) # 600024cc <core::panicking::panic_bounds_check>
60001018:	0000                	unimp
        pos.x += x_update;
6000101a:	4562                	lw	a0,24(sp)
6000101c:	00055d83          	lhu	s11,0(a0)
60001020:	b741                	j	60000fa0 <betrusted_boot::Gfx::msg+0x202>

60001022 <betrusted_boot::ramtest_all>:
unsafe fn ramtest_all<T>(test_slice: &mut [T], test_index: u32)
60001022:	4501                	li	a0,0
60001024:	4601                	li	a2,0
60001026:	610086b7          	lui	a3,0x61008
6000102a:	40068593          	addi	a1,a3,1024 # 61008400 <_estack+0x4400>
6000102e:	00468713          	addi	a4,a3,4
60001032:	c290                	sw	a2,0(a3)
60001034:	00160693          	addi	a3,a2,1
        sum += TryInto::<u32>::try_into(index).unwrap();
60001038:	9532                	add	a0,a0,a2
6000103a:	8636                	mv	a2,a3
6000103c:	86ba                	mv	a3,a4
6000103e:	feb718e3          	bne	a4,a1,6000102e <betrusted_boot::ramtest_all+0xc>
60001042:	4581                	li	a1,0
60001044:	610086b7          	lui	a3,0x61008
60001048:	40068613          	addi	a2,a3,1024 # 61008400 <_estack+0x4400>
6000104c:	4298                	lw	a4,0(a3)
6000104e:	00468793          	addi	a5,a3,4
        checksum += a;
60001052:	95ba                	add	a1,a1,a4
60001054:	86be                	mv	a3,a5
60001056:	fec79be3          	bne	a5,a2,6000104c <betrusted_boot::ramtest_all+0x2a>
    if sum == checksum {
6000105a:	00b51563          	bne	a0,a1,60001064 <betrusted_boot::ramtest_all+0x42>
6000105e:	600d05b7          	lui	a1,0x600d0
60001062:	a801                	j	60001072 <betrusted_boot::ramtest_all+0x50>
60001064:	40108637          	lui	a2,0x40108
60001068:	c20c                	sw	a1,0(a2)
6000106a:	0330000f          	fence	rw,rw
6000106e:	0bad05b7          	lui	a1,0xbad0
60001072:	0591                	addi	a1,a1,4 # bad0004 <.Lline_table_start0+0xbacb08e>
60001074:	40108637          	lui	a2,0x40108
60001078:	c208                	sw	a0,0(a2)
6000107a:	0330000f          	fence	rw,rw
6000107e:	c20c                	sw	a1,0(a2)
60001080:	0330000f          	fence	rw,rw
}
60001084:	8082                	ret

60001086 <betrusted_boot::ramtest_fast_specialcase1>:
unsafe fn ramtest_fast_specialcase1<T>(test_slice: &mut [T], test_index: u32)
60001086:	4581                	li	a1,0
60001088:	4881                	li	a7,0
6000108a:	4681                	li	a3,0
6000108c:	61008737          	lui	a4,0x61008
60001090:	6609                	lui	a2,0x2
60001092:	80060613          	addi	a2,a2,-2048 # 1800 <_hart_stack_size+0x1000>
60001096:	4821                	li	a6,8
60001098:	87b2                	mv	a5,a2
6000109a:	01066363          	bltu	a2,a6,600010a0 <betrusted_boot::ramtest_fast_specialcase1+0x1a>
6000109e:	47a1                	li	a5,8
600010a0:	8e1d                	sub	a2,a2,a5
600010a2:	078a                	slli	a5,a5,0x2
600010a4:	c314                	sw	a3,0(a4)
600010a6:	c354                	sw	a3,4(a4)
600010a8:	973e                	add	a4,a4,a5
600010aa:	0685                	addi	a3,a3,1
        sum += TryInto::<u32>::try_into(idxp1).unwrap();
600010ac:	98ae                	add	a7,a7,a1
600010ae:	0589                	addi	a1,a1,2
600010b0:	f665                	bnez	a2,60001098 <betrusted_boot::ramtest_fast_specialcase1+0x12>
600010b2:	4581                	li	a1,0
600010b4:	610086b7          	lui	a3,0x61008
600010b8:	6609                	lui	a2,0x2
600010ba:	80060613          	addi	a2,a2,-2048 # 1800 <_hart_stack_size+0x1000>
600010be:	47a1                	li	a5,8
600010c0:	8732                	mv	a4,a2
600010c2:	00f66363          	bltu	a2,a5,600010c8 <betrusted_boot::ramtest_fast_specialcase1+0x42>
600010c6:	4721                	li	a4,8
600010c8:	00271813          	slli	a6,a4,0x2
600010cc:	4288                	lw	a0,0(a3)
600010ce:	42dc                	lw	a5,4(a3)
600010d0:	96c2                	add	a3,a3,a6
600010d2:	8e19                	sub	a2,a2,a4
        checksum += (d.as_ptr() as *const T)
600010d4:	952e                	add	a0,a0,a1
        checksum += (d.as_ptr().add(1) as *const T)
600010d6:	00f505b3          	add	a1,a0,a5
600010da:	f275                	bnez	a2,600010be <betrusted_boot::ramtest_fast_specialcase1+0x38>
    if sum == checksum {
600010dc:	00b89663          	bne	a7,a1,600010e8 <betrusted_boot::ramtest_fast_specialcase1+0x62>
600010e0:	600d05b7          	lui	a1,0x600d0
600010e4:	05a1                	addi	a1,a1,8 # 600d0008 <_etext+0xcc824>
600010e6:	a811                	j	600010fa <betrusted_boot::ramtest_fast_specialcase1+0x74>
600010e8:	40108537          	lui	a0,0x40108
600010ec:	c10c                	sw	a1,0(a0)
600010ee:	0330000f          	fence	rw,rw
600010f2:	0bad0537          	lui	a0,0xbad0
600010f6:	00850593          	addi	a1,a0,8 # bad0008 <.Lline_table_start0+0xbacb092>
600010fa:	40108537          	lui	a0,0x40108
600010fe:	01152023          	sw	a7,0(a0) # 40108000 <.Lline_table_start0+0x4010308a>
60001102:	0330000f          	fence	rw,rw
60001106:	c10c                	sw	a1,0(a0)
60001108:	0330000f          	fence	rw,rw
}
6000110c:	8082                	ret

6000110e <betrusted_boot::ramtest_fast>:
unsafe fn ramtest_fast<T>(test_slice: &mut [T], test_index: u32)
6000110e:	4801                	li	a6,0
60001110:	610086b7          	lui	a3,0x61008
60001114:	4585                	li	a1,1
60001116:	6609                	lui	a2,0x2
60001118:	80060613          	addi	a2,a2,-2048 # 1800 <_hart_stack_size+0x1000>
6000111c:	47a1                	li	a5,8
6000111e:	8732                	mv	a4,a2
60001120:	00f66363          	bltu	a2,a5,60001126 <betrusted_boot::ramtest_fast+0x18>
60001124:	4721                	li	a4,8
60001126:	fff58793          	addi	a5,a1,-1
6000112a:	8e19                	sub	a2,a2,a4
6000112c:	070a                	slli	a4,a4,0x2
6000112e:	c29c                	sw	a5,0(a3)
60001130:	c2cc                	sw	a1,4(a3)
60001132:	96ba                	add	a3,a3,a4
        sum += TryInto::<u32>::try_into(index).unwrap();
60001134:	00f80533          	add	a0,a6,a5
        sum += TryInto::<u32>::try_into(idxp1).unwrap();
60001138:	00b50833          	add	a6,a0,a1
6000113c:	0585                	addi	a1,a1,1
6000113e:	fe79                	bnez	a2,6000111c <betrusted_boot::ramtest_fast+0xe>
60001140:	4581                	li	a1,0
60001142:	610086b7          	lui	a3,0x61008
60001146:	6609                	lui	a2,0x2
60001148:	80060613          	addi	a2,a2,-2048 # 1800 <_hart_stack_size+0x1000>
6000114c:	47a1                	li	a5,8
6000114e:	8732                	mv	a4,a2
60001150:	00f66363          	bltu	a2,a5,60001156 <betrusted_boot::ramtest_fast+0x48>
60001154:	4721                	li	a4,8
60001156:	00271893          	slli	a7,a4,0x2
6000115a:	4288                	lw	a0,0(a3)
6000115c:	42dc                	lw	a5,4(a3)
6000115e:	96c6                	add	a3,a3,a7
60001160:	8e19                	sub	a2,a2,a4
        checksum = checksum + a + b;
60001162:	952e                	add	a0,a0,a1
60001164:	00f505b3          	add	a1,a0,a5
60001168:	f275                	bnez	a2,6000114c <betrusted_boot::ramtest_fast+0x3e>
    if sum == checksum {
6000116a:	00b81663          	bne	a6,a1,60001176 <betrusted_boot::ramtest_fast+0x68>
6000116e:	600d05b7          	lui	a1,0x600d0
60001172:	059d                	addi	a1,a1,7 # 600d0007 <_etext+0xcc823>
60001174:	a811                	j	60001188 <betrusted_boot::ramtest_fast+0x7a>
60001176:	40108537          	lui	a0,0x40108
6000117a:	c10c                	sw	a1,0(a0)
6000117c:	0330000f          	fence	rw,rw
60001180:	0bad0537          	lui	a0,0xbad0
60001184:	00750593          	addi	a1,a0,7 # bad0007 <.Lline_table_start0+0xbacb091>
60001188:	40108537          	lui	a0,0x40108
6000118c:	01052023          	sw	a6,0(a0) # 40108000 <.Lline_table_start0+0x4010308a>
60001190:	0330000f          	fence	rw,rw
60001194:	c10c                	sw	a1,0(a0)
60001196:	0330000f          	fence	rw,rw
}
6000119a:	8082                	ret

6000119c <betrusted_boot::ramtest_fast>:
unsafe fn ramtest_fast<T>(test_slice: &mut [T], test_index: u32)
6000119c:	4581                	li	a1,0
6000119e:	610086b7          	lui	a3,0x61008
600011a2:	20000513          	li	a0,512
600011a6:	02000813          	li	a6,32
600011aa:	47c1                	li	a5,16
600011ac:	872a                	mv	a4,a0
600011ae:	00f56363          	bltu	a0,a5,600011b4 <betrusted_boot::ramtest_fast+0x18>
600011b2:	4741                	li	a4,16
600011b4:	00171793          	slli	a5,a4,0x1
600011b8:	00158613          	addi	a2,a1,1
600011bc:	00b69023          	sh	a1,0(a3) # 61008000 <_estack+0x4000>
600011c0:	00c69123          	sh	a2,2(a3)
600011c4:	96be                	add	a3,a3,a5
600011c6:	8d19                	sub	a0,a0,a4
600011c8:	85b2                	mv	a1,a2
600011ca:	ff0610e3          	bne	a2,a6,600011aa <betrusted_boot::ramtest_fast+0xe>
600011ce:	4501                	li	a0,0
600011d0:	61008637          	lui	a2,0x61008
600011d4:	20000593          	li	a1,512
600011d8:	4741                	li	a4,16
600011da:	86ae                	mv	a3,a1
600011dc:	00e5e363          	bltu	a1,a4,600011e2 <betrusted_boot::ramtest_fast+0x46>
600011e0:	46c1                	li	a3,16
600011e2:	00169813          	slli	a6,a3,0x1
600011e6:	00065783          	lhu	a5,0(a2) # 61008000 <_estack+0x4000>
600011ea:	00265703          	lhu	a4,2(a2)
600011ee:	9642                	add	a2,a2,a6
600011f0:	8d95                	sub	a1,a1,a3
        checksum = checksum + a + b;
600011f2:	953e                	add	a0,a0,a5
600011f4:	953a                	add	a0,a0,a4
600011f6:	f1ed                	bnez	a1,600011d8 <betrusted_boot::ramtest_fast+0x3c>
600011f8:	40000593          	li	a1,1024
    if sum == checksum {
600011fc:	00b51563          	bne	a0,a1,60001206 <betrusted_boot::ramtest_fast+0x6a>
60001200:	600d0537          	lui	a0,0x600d0
60001204:	a801                	j	60001214 <betrusted_boot::ramtest_fast+0x78>
60001206:	40108637          	lui	a2,0x40108
6000120a:	c208                	sw	a0,0(a2)
6000120c:	0330000f          	fence	rw,rw
60001210:	0bad0537          	lui	a0,0xbad0
60001214:	0519                	addi	a0,a0,6 # bad0006 <.Lline_table_start0+0xbacb090>
60001216:	40108637          	lui	a2,0x40108
6000121a:	c20c                	sw	a1,0(a2)
6000121c:	0330000f          	fence	rw,rw
60001220:	c208                	sw	a0,0(a2)
60001222:	0330000f          	fence	rw,rw
}
60001226:	8082                	ret

60001228 <betrusted_boot::ramtest_fast>:
unsafe fn ramtest_fast<T>(test_slice: &mut [T], test_index: u32)
60001228:	4601                	li	a2,0
6000122a:	610086b7          	lui	a3,0x61008
6000122e:	10000513          	li	a0,256
60001232:	45a1                	li	a1,8
60001234:	02000793          	li	a5,32
60001238:	872a                	mv	a4,a0
6000123a:	00f56463          	bltu	a0,a5,60001242 <betrusted_boot::ramtest_fast+0x1a>
6000123e:	02000713          	li	a4,32
60001242:	00160793          	addi	a5,a2,1 # 40108001 <.Lline_table_start0+0x4010308b>
60001246:	00c68023          	sb	a2,0(a3) # 61008000 <_estack+0x4000>
6000124a:	00f680a3          	sb	a5,1(a3)
6000124e:	96ba                	add	a3,a3,a4
60001250:	8d19                	sub	a0,a0,a4
60001252:	863e                	mv	a2,a5
60001254:	feb790e3          	bne	a5,a1,60001234 <betrusted_boot::ramtest_fast+0xc>
60001258:	4501                	li	a0,0
6000125a:	61008637          	lui	a2,0x61008
6000125e:	10000593          	li	a1,256
60001262:	02000713          	li	a4,32
60001266:	86ae                	mv	a3,a1
60001268:	00e5e463          	bltu	a1,a4,60001270 <betrusted_boot::ramtest_fast+0x48>
6000126c:	02000693          	li	a3,32
60001270:	00064703          	lbu	a4,0(a2) # 61008000 <_estack+0x4000>
60001274:	00164783          	lbu	a5,1(a2)
60001278:	9636                	add	a2,a2,a3
6000127a:	8d95                	sub	a1,a1,a3
        checksum = checksum + a + b;
6000127c:	953a                	add	a0,a0,a4
6000127e:	953e                	add	a0,a0,a5
60001280:	f1ed                	bnez	a1,60001262 <betrusted_boot::ramtest_fast+0x3a>
60001282:	04000593          	li	a1,64
    if sum == checksum {
60001286:	00b51563          	bne	a0,a1,60001290 <betrusted_boot::ramtest_fast+0x68>
6000128a:	600d0537          	lui	a0,0x600d0
6000128e:	a801                	j	6000129e <betrusted_boot::ramtest_fast+0x76>
60001290:	40108637          	lui	a2,0x40108
60001294:	c208                	sw	a0,0(a2)
60001296:	0330000f          	fence	rw,rw
6000129a:	0bad0537          	lui	a0,0xbad0
6000129e:	0515                	addi	a0,a0,5 # bad0005 <.Lline_table_start0+0xbacb08f>
600012a0:	40108637          	lui	a2,0x40108
600012a4:	c20c                	sw	a1,0(a2)
600012a6:	0330000f          	fence	rw,rw
600012aa:	c208                	sw	a0,0(a2)
600012ac:	0330000f          	fence	rw,rw
}
600012b0:	8082                	ret

600012b2 <betrusted_boot::ramtest_fast>:
unsafe fn ramtest_fast<T>(test_slice: &mut [T], test_index: u32)
600012b2:	4881                	li	a7,0
600012b4:	610086b7          	lui	a3,0x61008
600012b8:	4585                	li	a1,1
600012ba:	6505                	lui	a0,0x1
600012bc:	c0050613          	addi	a2,a0,-1024 # c00 <_hart_stack_size+0x400>
600012c0:	4711                	li	a4,4
600012c2:	8532                	mv	a0,a2
600012c4:	00e66363          	bltu	a2,a4,600012ca <betrusted_boot::ramtest_fast+0x18>
600012c8:	4511                	li	a0,4
600012ca:	fff58713          	addi	a4,a1,-1
600012ce:	8e09                	sub	a2,a2,a0
600012d0:	050e                	slli	a0,a0,0x3
600012d2:	0006a223          	sw	zero,4(a3) # 61008004 <_estack+0x4004>
600012d6:	c298                	sw	a4,0(a3)
600012d8:	0006a623          	sw	zero,12(a3)
600012dc:	c68c                	sw	a1,8(a3)
600012de:	96aa                	add	a3,a3,a0
        sum += TryInto::<u32>::try_into(index).unwrap();
600012e0:	00e88533          	add	a0,a7,a4
        sum += TryInto::<u32>::try_into(idxp1).unwrap();
600012e4:	00b508b3          	add	a7,a0,a1
600012e8:	0585                	addi	a1,a1,1
600012ea:	fa79                	bnez	a2,600012c0 <betrusted_boot::ramtest_fast+0xe>
600012ec:	4301                	li	t1,0
600012ee:	61008637          	lui	a2,0x61008
600012f2:	6505                	lui	a0,0x1
600012f4:	c0050693          	addi	a3,a0,-1024 # c00 <_hart_stack_size+0x400>
600012f8:	4805                	li	a6,1
600012fa:	4511                	li	a0,4
600012fc:	87b6                	mv	a5,a3
600012fe:	00a6e363          	bltu	a3,a0,60001304 <betrusted_boot::ramtest_fast+0x52>
60001302:	4791                	li	a5,4
60001304:	4248                	lw	a0,4(a2)
60001306:	420c                	lw	a1,0(a2)
60001308:	4658                	lw	a4,12(a2)
6000130a:	00862283          	lw	t0,8(a2) # 61008008 <_estack+0x4008>
6000130e:	c509                	beqz	a0,60001318 <betrusted_boot::ramtest_fast+0x66>
60001310:	859a                	mv	a1,t1
        checksum = checksum + a + b;
60001312:	01051663          	bne	a0,a6,6000131e <betrusted_boot::ramtest_fast+0x6c>
60001316:	a029                	j	60001320 <betrusted_boot::ramtest_fast+0x6e>
60001318:	959a                	add	a1,a1,t1
6000131a:	01050363          	beq	a0,a6,60001320 <betrusted_boot::ramtest_fast+0x6e>
6000131e:	832e                	mv	t1,a1
60001320:	c709                	beqz	a4,6000132a <betrusted_boot::ramtest_fast+0x78>
60001322:	851a                	mv	a0,t1
60001324:	01071763          	bne	a4,a6,60001332 <betrusted_boot::ramtest_fast+0x80>
60001328:	a031                	j	60001334 <betrusted_boot::ramtest_fast+0x82>
6000132a:	00530533          	add	a0,t1,t0
6000132e:	01070363          	beq	a4,a6,60001334 <betrusted_boot::ramtest_fast+0x82>
60001332:	832a                	mv	t1,a0
60001334:	00379513          	slli	a0,a5,0x3
60001338:	8e9d                	sub	a3,a3,a5
6000133a:	962a                	add	a2,a2,a0
6000133c:	fedd                	bnez	a3,600012fa <betrusted_boot::ramtest_fast+0x48>
    if sum == checksum {
6000133e:	00689563          	bne	a7,t1,60001348 <betrusted_boot::ramtest_fast+0x96>
60001342:	600d0537          	lui	a0,0x600d0
60001346:	a809                	j	60001358 <betrusted_boot::ramtest_fast+0xa6>
60001348:	40108537          	lui	a0,0x40108
6000134c:	00652023          	sw	t1,0(a0) # 40108000 <.Lline_table_start0+0x4010308a>
60001350:	0330000f          	fence	rw,rw
60001354:	0bad0537          	lui	a0,0xbad0
60001358:	0525                	addi	a0,a0,9 # bad0009 <.Lline_table_start0+0xbacb093>
6000135a:	401085b7          	lui	a1,0x40108
6000135e:	0115a023          	sw	a7,0(a1) # 40108000 <.Lline_table_start0+0x4010308a>
60001362:	0330000f          	fence	rw,rw
60001366:	c188                	sw	a0,0(a1)
60001368:	0330000f          	fence	rw,rw
}
6000136c:	8082                	ret

6000136e <betrusted_boot::ramtest_lfsr>:

/// uses an LFSR to cycle through "random" locations. The slice length
/// should equal the (LFSR period+1), so that we guarantee that each entry
/// is visited once.
#[cfg(feature="sim")]
unsafe fn ramtest_lfsr<T>(test_slice: &mut [T], test_index: u32)
6000136e:	4501                	li	a0,0
60001370:	610085b7          	lui	a1,0x61008
60001374:	0005a023          	sw	zero,0(a1) # 61008000 <_estack+0x4000>
60001378:	4685                	li	a3,1
6000137a:	5fd00613          	li	a2,1533
    (&mut test_slice[0] as *mut T).write_volatile(
        0.try_into().unwrap_or_default()
    ); // the 0 index is never written to by this, initialize it to 0
    for i in 0..MAX_STATES {
        let wr_val = i * 3;
        (&mut test_slice[state as usize] as *mut T).write_volatile(wr_val.try_into().unwrap_or_default());
6000137e:	01069713          	slli	a4,a3,0x10
60001382:	8341                	srli	a4,a4,0x10
60001384:	00271793          	slli	a5,a4,0x2
60001388:	97ae                	add	a5,a5,a1
6000138a:	c388                	sw	a0,0(a5)
    let bit = ((state >> 8) ^
6000138c:	00875793          	srli	a5,a4,0x8
               (state >>  4)) & 1;
60001390:	8311                	srli	a4,a4,0x4
    let bit = ((state >> 8) ^
60001392:	8f3d                	xor	a4,a4,a5
60001394:	8b05                	andi	a4,a4,1
    ((state << 1) + bit) & 0x1_FF
60001396:	06e2                	slli	a3,a3,0x18
60001398:	82dd                	srli	a3,a3,0x17
6000139a:	050d                	addi	a0,a0,3
6000139c:	8ed9                	or	a3,a3,a4
6000139e:	fec510e3          	bne	a0,a2,6000137e <betrusted_boot::ramtest_lfsr+0x10>
600013a2:	4581                	li	a1,0
600013a4:	4501                	li	a0,0
600013a6:	ff010637          	lui	a2,0xff010
600013aa:	f0060613          	addi	a2,a2,-256 # ff00ff00 <_lcdfb+0x4f00ff00>
600013ae:	401086b7          	lui	a3,0x40108
600013b2:	c290                	sw	a2,0(a3)
600013b4:	0330000f          	fence	rw,rw
        state = lfsr_next(state);
    }

    // flush cache
    report.wfo(utra::main::REPORT_REPORT, 0xff00_ff00);
    core::arch::asm!(
600013b8:	0000500f          	.4byte	0x500f
600013bc:	0f0f1637          	lui	a2,0xf0f1
600013c0:	f0f60613          	addi	a2,a2,-241 # f0f0f0f <.Lline_table_start0+0xf0ebf99>
600013c4:	c290                	sw	a2,0(a3)
600013c6:	0330000f          	fence	rw,rw
600013ca:	61008637          	lui	a2,0x61008
600013ce:	6685                	lui	a3,0x1
600013d0:	80068693          	addi	a3,a3,-2048 # 800 <_hart_stack_size>
600013d4:	00c58733          	add	a4,a1,a2
600013d8:	4318                	lw	a4,0(a4)
600013da:	0591                	addi	a1,a1,4
    for d in test_slice.iter() {
        let a = (d as *const T)
            .read_volatile()
            .try_into()
            .unwrap_or_default();
        checksum += a;
600013dc:	953a                	add	a0,a0,a4
600013de:	fed59be3          	bne	a1,a3,600013d4 <betrusted_boot::ramtest_lfsr+0x66>
600013e2:	0005f5b7          	lui	a1,0x5f
600013e6:	70358593          	addi	a1,a1,1795 # 5f703 <.Lline_table_start0+0x5a78d>
        // report.wfo(utra::main::REPORT_REPORT, a);
    }

    if sum == checksum {
600013ea:	00b51563          	bne	a0,a1,600013f4 <betrusted_boot::ramtest_lfsr+0x86>
600013ee:	600d0537          	lui	a0,0x600d0
600013f2:	a801                	j	60001402 <betrusted_boot::ramtest_lfsr+0x94>
600013f4:	40108637          	lui	a2,0x40108
600013f8:	c208                	sw	a0,0(a2)
600013fa:	0330000f          	fence	rw,rw
600013fe:	0bad0537          	lui	a0,0xbad0
60001402:	050d                	addi	a0,a0,3 # bad0003 <.Lline_table_start0+0xbacb08d>
60001404:	40108637          	lui	a2,0x40108
60001408:	c20c                	sw	a1,0(a2)
6000140a:	0330000f          	fence	rw,rw
6000140e:	c208                	sw	a0,0(a2)
60001410:	0330000f          	fence	rw,rw
    } else {
        report.wfo(utra::main::REPORT_REPORT, checksum as u32);
        report.wfo(utra::main::REPORT_REPORT, sum as u32);
        report.wfo(utra::main::REPORT_REPORT, 0x0bad_0000 + test_index);
    }
}
60001414:	8082                	ret

60001416 <rust_entry>:
        duart.puts("DUART up!\n");
    }
}

#[export_name = "rust_entry"]
pub unsafe extern "C" fn rust_entry(_unused1: *const usize, _unused2: u32) -> ! {
60001416:	ce010113          	addi	sp,sp,-800
6000141a:	30112e23          	sw	ra,796(sp)
6000141e:	30812c23          	sw	s0,792(sp)
60001422:	30912a23          	sw	s1,788(sp)
60001426:	31212823          	sw	s2,784(sp)
6000142a:	31312623          	sw	s3,780(sp)
6000142e:	31412423          	sw	s4,776(sp)
60001432:	31512223          	sw	s5,772(sp)
60001436:	31612023          	sw	s6,768(sp)
6000143a:	2f712e23          	sw	s7,764(sp)
6000143e:	2f812c23          	sw	s8,760(sp)
60001442:	2f912a23          	sw	s9,756(sp)
60001446:	2fa12823          	sw	s10,752(sp)
6000144a:	2fb12623          	sw	s11,748(sp)
6000144e:	600dc537          	lui	a0,0x600dc
60001452:	0de50513          	addi	a0,a0,222 # 600dc0de <_etext+0xd88fa>
60001456:	40108437          	lui	s0,0x40108
6000145a:	c008                	sw	a0,0(s0)
6000145c:	0330000f          	fence	rw,rw
60001460:	5801a537          	lui	a0,0x5801a
60001464:	4108                	lw	a0,0(a0)
60001466:	c008                	sw	a0,0(s0)
60001468:	0330000f          	fence	rw,rw
6000146c:	0d100537          	lui	a0,0xd100
60001470:	5d150513          	addi	a0,a0,1489 # d1005d1 <.Lline_table_start0+0xd0fb65b>
60001474:	c008                	sw	a0,0(s0)
60001476:	0330000f          	fence	rw,rw
6000147a:	6541                	lui	a0,0x10
6000147c:	d82a                	sw	a0,48(sp)
6000147e:	657d                	lui	a0,0x1f
60001480:	da2a                	sw	a0,52(sp)
60001482:	420c0537          	lui	a0,0x420c0
60001486:	dc2a                	sw	a0,56(sp)
60001488:	de02                	sw	zero,60(sp)
6000148a:	40202537          	lui	a0,0x40202
6000148e:	c0aa                	sw	a0,64(sp)
60001490:	c282                	sw	zero,68(sp)
60001492:	4505                	li	a0,1
60001494:	c4aa                	sw	a0,72(sp)
60001496:	510165b7          	lui	a1,0x51016
6000149a:	10158593          	addi	a1,a1,257 # 51016101 <.Lline_table_start0+0x5101118b>
        ".side_set 1",
        "out x, 1    side 0", // Stall here on empty (keep SCK deasserted)
        "mov pins, x side 1 [1]", // Output data, assert SCK (mov pins uses OUT mapping)
        "in pins, 1  side 0" // Input data, deassert SCK
    );
    let prog_cpha0 = LoadedProg::load(spi_cpha0_prog.program, &mut pio_sm).unwrap();
6000149e:	c52e                	sw	a1,136(sp)
600014a0:	4489                	li	s1,2
600014a2:	c5a6                	sw	s1,200(sp)
600014a4:	10100c13          	li	s8,257
600014a8:	c7e2                	sw	s8,204(sp)
600014aa:	0ca11823          	sh	a0,208(sp)
600014ae:	0c010923          	sb	zero,210(sp)
600014b2:	1388                	addi	a0,sp,480
600014b4:	012c                	addi	a1,sp,136
600014b6:	1810                	addi	a2,sp,48
600014b8:	fffff097          	auipc	ra,0xfffff
600014bc:	f66080e7          	jalr	-154(ra) # 6000041e <betrusted_boot::pio::LoadedProg::load>
600014c0:	22a14b03          	lbu	s6,554(sp)
600014c4:	009b1f63          	bne	s6,s1,600014e2 <rust_entry+0xcc>
600014c8:	1e010503          	lb	a0,480(sp)
600014cc:	08a10423          	sb	a0,136(sp)
600014d0:	60003537          	lui	a0,0x60003
600014d4:	e6850593          	addi	a1,a0,-408 # 60002e68 <.Lanon.01042f9e07bac0588b13af07786e0e0c.3>
600014d8:	60003537          	lui	a0,0x60003
600014dc:	fc850613          	addi	a2,a0,-56 # 60002fc8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.28>
600014e0:	a051                	j	60001564 <rust_entry+0x14e>
600014e2:	1e012a03          	lw	s4,480(sp)
600014e6:	22814903          	lbu	s2,552(sp)
600014ea:	22b14983          	lbu	s3,555(sp)
600014ee:	22c14a83          	lbu	s5,556(sp)
600014f2:	22d14b83          	lbu	s7,557(sp)
600014f6:	05d10cb7          	lui	s9,0x5d10
600014fa:	01942023          	sw	s9,0(s0) # 40108000 <.Lline_table_start0+0x4010308a>
600014fe:	0330000f          	fence	rw,rw
60001502:	b1016537          	lui	a0,0xb1016
60001506:	02150513          	addi	a0,a0,33 # b1016021 <_lcdfb+0x1016021>
    report.wfo(utra::main::REPORT_REPORT, 0x05D1_0000);
    let prog_cpha1 = LoadedProg::load(spi_cpha1_prog.program, &mut pio_sm).unwrap();
6000150a:	c52a                	sw	a0,136(sp)
6000150c:	6511                	lui	a0,0x4
6000150e:	0505                	addi	a0,a0,1 # 4001 <_stack_size+0x1>
60001510:	08a11623          	sh	a0,140(sp)
60001514:	08e10513          	addi	a0,sp,142
60001518:	04e10593          	addi	a1,sp,78
6000151c:	03a00613          	li	a2,58
60001520:	00001097          	auipc	ra,0x1
60001524:	7d6080e7          	jalr	2006(ra) # 60002cf6 <memcpy>
60001528:	450d                	li	a0,3
6000152a:	c5aa                	sw	a0,200(sp)
6000152c:	c7e2                	sw	s8,204(sp)
6000152e:	0c911823          	sh	s1,208(sp)
60001532:	0c010923          	sb	zero,210(sp)
60001536:	1388                	addi	a0,sp,480
60001538:	012c                	addi	a1,sp,136
6000153a:	1810                	addi	a2,sp,48
6000153c:	fffff097          	auipc	ra,0xfffff
60001540:	ee2080e7          	jalr	-286(ra) # 6000041e <betrusted_boot::pio::LoadedProg::load>
60001544:	22a14c03          	lbu	s8,554(sp)
60001548:	029c1463          	bne	s8,s1,60001570 <rust_entry+0x15a>
6000154c:	1e010503          	lb	a0,480(sp)
60001550:	08a10423          	sb	a0,136(sp)
60001554:	60003537          	lui	a0,0x60003
60001558:	e6850593          	addi	a1,a0,-408 # 60002e68 <.Lanon.01042f9e07bac0588b13af07786e0e0c.3>
6000155c:	60003537          	lui	a0,0x60003
60001560:	fd850613          	addi	a2,a0,-40 # 60002fd8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.29>
60001564:	0128                	addi	a0,sp,136
60001566:	00001097          	auipc	ra,0x1
6000156a:	6fa080e7          	jalr	1786(ra) # 60002c60 <core::result::unwrap_failed>
6000156e:	0000                	unimp
60001570:	1e012703          	lw	a4,480(sp)
60001574:	22814603          	lbu	a2,552(sp)
60001578:	22b14683          	lbu	a3,555(sp)
6000157c:	22c14783          	lbu	a5,556(sp)
60001580:	22d14483          	lbu	s1,557(sp)
60001584:	001c8513          	addi	a0,s9,1 # 5d10001 <.Lline_table_start0+0x5d0b08b>
60001588:	401085b7          	lui	a1,0x40108
6000158c:	c188                	sw	a0,0(a1)
6000158e:	0330000f          	fence	rw,rw
60001592:	002c8513          	addi	a0,s9,2
60001596:	c188                	sw	a0,0(a1)
60001598:	0330000f          	fence	rw,rw
        self.program.wrap.target as usize + self.offset
6000159c:	017a0433          	add	s0,s4,s7
        self.program.wrap.source as usize + self.offset
600015a0:	015a0533          	add	a0,s4,s5
            .unwrap_or_default()
    }
    /// Shift & mask a value to its final field position
    pub fn ms(&self, field: Field, value: T) -> T {
        let value_as_usize: usize = value.try_into().unwrap_or_default();
        ((value_as_usize & field.mask) << field.offset)
600015a4:	056e                	slli	a0,a0,0x1b
600015a6:	813d                	srli	a0,a0,0xf
600015a8:	01b41593          	slli	a1,s0,0x1b
600015ac:	81d1                	srli	a1,a1,0x14
        self.config.execctl =
600015ae:	8d4d                	or	a0,a0,a1
600015b0:	da2a                	sw	a0,52(sp)
        if self.program.side_set.bits() > 0 {
600015b2:	00091d63          	bnez	s2,600015cc <rust_entry+0x1b6>
600015b6:	c422                	sw	s0,8(sp)
600015b8:	c826                	sw	s1,16(sp)
600015ba:	ca3e                	sw	a5,20(sp)
600015bc:	cc3a                	sw	a4,24(sp)
600015be:	c036                	sw	a3,0(sp)
600015c0:	ce32                	sw	a2,28(sp)
600015c2:	00185537          	lui	a0,0x185
600015c6:	81050513          	addi	a0,a0,-2032 # 184810 <.Lline_table_start0+0x17f89a>
600015ca:	a891                	j	6000161e <rust_entry+0x208>
600015cc:	4595                	li	a1,5
        assert!(bit_count < 5);
600015ce:	02b96063          	bltu	s2,a1,600015ee <rust_entry+0x1d8>
600015d2:	60003537          	lui	a0,0x60003
600015d6:	f6850513          	addi	a0,a0,-152 # 60002f68 <.Lanon.01042f9e07bac0588b13af07786e0e0c.16>
600015da:	600035b7          	lui	a1,0x60003
600015de:	f8858613          	addi	a2,a1,-120 # 60002f88 <.Lanon.01042f9e07bac0588b13af07786e0e0c.17>
600015e2:	45fd                	li	a1,31
600015e4:	00001097          	auipc	ra,0x1
600015e8:	638080e7          	jalr	1592(ra) # 60002c1c <core::panicking::panic>
600015ec:	0000                	unimp
            self.pio.zf(rp_pio::SFR_SM0_EXECCTRL_SIDE_PINDIR,
600015ee:	000b0563          	beqz	s6,600015f8 <rust_entry+0x1e2>
600015f2:	400005b7          	lui	a1,0x40000
600015f6:	8d4d                	or	a0,a0,a1
600015f8:	ce32                	sw	a2,28(sp)
600015fa:	01d91593          	slli	a1,s2,0x1d
        self.config.execctl =
600015fe:	00098563          	beqz	s3,60001608 <rust_entry+0x1f2>
60001602:	20000637          	lui	a2,0x20000
60001606:	8d51                	or	a0,a0,a2
60001608:	c422                	sw	s0,8(sp)
6000160a:	c826                	sw	s1,16(sp)
6000160c:	ca3e                	sw	a5,20(sp)
6000160e:	cc3a                	sw	a4,24(sp)
60001610:	c036                	sw	a3,0(sp)
60001612:	da2a                	sw	a0,52(sp)
60001614:	00185537          	lui	a0,0x185
60001618:	81050513          	addi	a0,a0,-2032 # 184810 <.Lline_table_start0+0x17f89a>
        if self.program.side_set.bits() > 0 {
6000161c:	8d4d                	or	a0,a0,a1
        self.config.pinctl =
6000161e:	de2a                	sw	a0,60(sp)
60001620:	50830537          	lui	a0,0x50830
        self.config.shiftctl =
60001624:	dc2a                	sw	a0,56(sp)
60001626:	00254537          	lui	a0,0x254
        self.config.clkdiv =
6000162a:	d82a                	sw	a0,48(sp)
        match self.sm {
6000162c:	4526                	lw	a0,72(sp)
6000162e:	6585                	lui	a1,0x1
60001630:	050a                	slli	a0,a0,0x2
60001632:	60003637          	lui	a2,0x60003
60001636:	41860613          	addi	a2,a2,1048 # 60003418 <.Lanon.01042f9e07bac0588b13af07786e0e0c.42+0xc>
6000163a:	9532                	add	a0,a0,a2
6000163c:	ffc52503          	lw	a0,-4(a0) # 253ffc <.Lline_table_start0+0x24f086>
            let pinctrl_saved = self.pio.base.add(rp_pio::SFR_SM0_PINCTRL.offset() + sm_offset).read_volatile();
60001640:	4606                	lw	a2,64(sp)
60001642:	f8058593          	addi	a1,a1,-128 # f80 <_hart_stack_size+0x780>
60001646:	c62e                	sw	a1,12(sp)
60001648:	7581                	lui	a1,0xfffe0
6000164a:	050a                	slli	a0,a0,0x2
6000164c:	c232                	sw	a2,4(sp)
6000164e:	00c50b33          	add	s6,a0,a2
60001652:	0dcb2503          	lw	a0,220(s6)
60001656:	d22a                	sw	a0,36(sp)
60001658:	0ccb2503          	lw	a0,204(s6)
6000165c:	d02a                	sw	a0,32(sp)
6000165e:	0ccb2503          	lw	a0,204(s6)
60001662:	15fd                	addi	a1,a1,-1 # fffdffff <_lcdfb+0x4ffdffff>
60001664:	0dcb0d13          	addi	s10,s6,220
60001668:	0ccb0613          	addi	a2,s6,204
6000166c:	d632                	sw	a2,44(sp)
6000166e:	d42e                	sw	a1,40(sp)
        (value_as_usize & !(field.mask << field.offset))
60001670:	8d6d                	and	a0,a0,a1
60001672:	0cab2623          	sw	a0,204(s6)
60001676:	00050437          	lui	s0,0x50
6000167a:	55555537          	lui	a0,0x55555
6000167e:	55550b93          	addi	s7,a0,1365 # 55555555 <.Lline_table_start0+0x555505df>
60001682:	33333537          	lui	a0,0x33333
60001686:	33350d93          	addi	s11,a0,819 # 33333333 <.Lline_table_start0+0x3332e3bd>
6000168a:	0f0f1537          	lui	a0,0xf0f1
6000168e:	f0f50c93          	addi	s9,a0,-241 # f0f0f0f <.Lline_table_start0+0xf0ebf99>
60001692:	01010537          	lui	a0,0x1010
60001696:	10150913          	addi	s2,a0,257 # 1010101 <.Lline_table_start0+0x100b18b>
6000169a:	04000ab7          	lui	s5,0x4000
6000169e:	19010993          	addi	s3,sp,400
600016a2:	0d8b0a13          	addi	s4,s6,216
600016a6:	fff40493          	addi	s1,s0,-1 # 4ffff <.Lline_table_start0+0x4b089>
600016aa:	fff44513          	not	a0,s0
600016ae:	8d65                	and	a0,a0,s1
600016b0:	00155593          	srli	a1,a0,0x1
600016b4:	0175f5b3          	and	a1,a1,s7
600016b8:	8d0d                	sub	a0,a0,a1
600016ba:	01b575b3          	and	a1,a0,s11
600016be:	8109                	srli	a0,a0,0x2
600016c0:	01b57533          	and	a0,a0,s11
600016c4:	952e                	add	a0,a0,a1
600016c6:	00455593          	srli	a1,a0,0x4
600016ca:	952e                	add	a0,a0,a1
600016cc:	01957533          	and	a0,a0,s9
600016d0:	03250533          	mul	a0,a0,s2
        ((value_as_usize & field.mask) << field.offset)
600016d4:	814d                	srli	a0,a0,0x13
600016d6:	01556533          	or	a0,a0,s5
                    self.pio.ms(rp_pio::SFR_SM0_PINCTRL_PINS_SET_COUNT, 1)
600016da:	9901                	andi	a0,a0,-32
600016dc:	00ad2023          	sw	a0,0(s10)
        Assembler {
600016e0:	18012423          	sw	zero,392(sp)
600016e4:	18012623          	sw	zero,396(sp)
        $(#[$inner $($args)*])*
        pub fn $name(
            &mut $self
            $(, $( $arg_name : $arg_ty , )*)?
        ) {
            $self.instructions.push(Instruction {
600016e8:	0128                	addi	a0,sp,136
600016ea:	080005b7          	lui	a1,0x8000
600016ee:	4601                	li	a2,0
600016f0:	fffff097          	auipc	ra,0xfffff
600016f4:	ce0080e7          	jalr	-800(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
                let p= a.assemble_program();
600016f8:	1388                	addi	a0,sp,480
600016fa:	012c                	addi	a1,sp,136
600016fc:	10800613          	li	a2,264
60001700:	00001097          	auipc	ra,0x1
60001704:	5f6080e7          	jalr	1526(ra) # 60002cf6 <memcpy>
60001708:	0b08                	addi	a0,sp,400
6000170a:	138c                	addi	a1,sp,480
6000170c:	fffff097          	auipc	ra,0xfffff
60001710:	950080e7          	jalr	-1712(ra) # 6000005c <pio::Assembler<_>::assemble_program>
                self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001714:	1da14583          	lbu	a1,474(sp)
60001718:	4501                	li	a0,0
6000171a:	c199                	beqz	a1,60001720 <rust_entry+0x30a>
6000171c:	1db10503          	lb	a0,475(sp)
60001720:	1d012583          	lw	a1,464(sp)
60001724:	0ff57513          	zext.b	a0,a0
60001728:	64b57363          	bgeu	a0,a1,60001d6e <rust_entry+0x958>
6000172c:	0506                	slli	a0,a0,0x1
6000172e:	954e                	add	a0,a0,s3
60001730:	00055503          	lhu	a0,0(a0)
                pin_mask &= pin_mask - 1;
60001734:	8c65                	and	s0,s0,s1
60001736:	0cab2c23          	sw	a0,216(s6)
            while pin_mask != 0 {
6000173a:	f435                	bnez	s0,600016a6 <rust_entry+0x290>
6000173c:	5512                	lw	a0,36(sp)
6000173e:	00ad2023          	sw	a0,0(s10)
60001742:	5632                	lw	a2,44(sp)
60001744:	5502                	lw	a0,32(sp)
60001746:	c208                	sw	a0,0(a2)
60001748:	000d2503          	lw	a0,0(s10)
6000174c:	d22a                	sw	a0,36(sp)
6000174e:	4208                	lw	a0,0(a2)
60001750:	d02a                	sw	a0,32(sp)
60001752:	4208                	lw	a0,0(a2)
        (value_as_usize & !(field.mask << field.offset))
60001754:	55a2                	lw	a1,40(sp)
60001756:	8d6d                	and	a0,a0,a1
60001758:	c208                	sw	a0,0(a2)
6000175a:	000509b7          	lui	s3,0x50
6000175e:	55555537          	lui	a0,0x55555
60001762:	55550b13          	addi	s6,a0,1365 # 55555555 <.Lline_table_start0+0x555505df>
60001766:	33333537          	lui	a0,0x33333
6000176a:	33350493          	addi	s1,a0,819 # 33333333 <.Lline_table_start0+0x3332e3bd>
6000176e:	0f0f1537          	lui	a0,0xf0f1
60001772:	f0f50c93          	addi	s9,a0,-241 # f0f0f0f <.Lline_table_start0+0xf0ebf99>
60001776:	01010537          	lui	a0,0x1010
6000177a:	10150413          	addi	s0,a0,257 # 1010101 <.Lline_table_start0+0x100b18b>
6000177e:	04000937          	lui	s2,0x4000
60001782:	19010d93          	addi	s11,sp,400
60001786:	00050ab7          	lui	s5,0x50
6000178a:	fffa8b93          	addi	s7,s5,-1 # 4ffff <.Lline_table_start0+0x4b089>
6000178e:	fffac513          	not	a0,s5
60001792:	01757533          	and	a0,a0,s7
60001796:	00155593          	srli	a1,a0,0x1
6000179a:	0165f5b3          	and	a1,a1,s6
6000179e:	8d0d                	sub	a0,a0,a1
600017a0:	009575b3          	and	a1,a0,s1
600017a4:	8109                	srli	a0,a0,0x2
600017a6:	8d65                	and	a0,a0,s1
600017a8:	952e                	add	a0,a0,a1
600017aa:	00455593          	srli	a1,a0,0x4
600017ae:	952e                	add	a0,a0,a1
600017b0:	01957533          	and	a0,a0,s9
600017b4:	02850533          	mul	a0,a0,s0
600017b8:	8161                	srli	a0,a0,0x18
        ((value_as_usize & field.mask) << field.offset)
600017ba:	00551593          	slli	a1,a0,0x5
                    self.pio.ms(rp_pio::SFR_SM0_PINCTRL_PINS_SET_COUNT, 1)
600017be:	0125e5b3          	or	a1,a1,s2
600017c2:	00bd2023          	sw	a1,0(s10)
        Assembler {
600017c6:	18012423          	sw	zero,392(sp)
600017ca:	18012623          	sw	zero,396(sp)
                a.set(pio::SetDestination::PINDIRS, ((pindirs >> base) & 1) as u8);
600017ce:	00a9d533          	srl	a0,s3,a0
            $self.instructions.push(Instruction {
600017d2:	8905                	andi	a0,a0,1
600017d4:	40000593          	li	a1,1024
600017d8:	00b56633          	or	a2,a0,a1
600017dc:	0128                	addi	a0,sp,136
600017de:	080005b7          	lui	a1,0x8000
600017e2:	fffff097          	auipc	ra,0xfffff
600017e6:	bee080e7          	jalr	-1042(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
                let p= a.assemble_program();
600017ea:	1388                	addi	a0,sp,480
600017ec:	012c                	addi	a1,sp,136
600017ee:	10800613          	li	a2,264
600017f2:	00001097          	auipc	ra,0x1
600017f6:	504080e7          	jalr	1284(ra) # 60002cf6 <memcpy>
600017fa:	0b08                	addi	a0,sp,400
600017fc:	138c                	addi	a1,sp,480
600017fe:	fffff097          	auipc	ra,0xfffff
60001802:	85e080e7          	jalr	-1954(ra) # 6000005c <pio::Assembler<_>::assemble_program>
                self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001806:	1da14583          	lbu	a1,474(sp)
6000180a:	4501                	li	a0,0
6000180c:	c199                	beqz	a1,60001812 <rust_entry+0x3fc>
6000180e:	1db10503          	lb	a0,475(sp)
60001812:	1d012583          	lw	a1,464(sp)
60001816:	0ff57513          	zext.b	a0,a0
6000181a:	56b57363          	bgeu	a0,a1,60001d80 <rust_entry+0x96a>
6000181e:	0506                	slli	a0,a0,0x1
60001820:	956e                	add	a0,a0,s11
60001822:	00055503          	lhu	a0,0(a0)
                pin_mask &= pin_mask - 1;
60001826:	015bfab3          	and	s5,s7,s5
6000182a:	00aa2023          	sw	a0,0(s4)
            while pin_mask != 0 {
6000182e:	f40a9ee3          	bnez	s5,6000178a <rust_entry+0x374>
60001832:	5512                	lw	a0,36(sp)
60001834:	00ad2023          	sw	a0,0(s10)
60001838:	5532                	lw	a0,44(sp)
6000183a:	5582                	lw	a1,32(sp)
6000183c:	c10c                	sw	a1,0(a0)
6000183e:	6541                	lui	a0,0x10
60001840:	4592                	lw	a1,4(sp)
60001842:	dd88                	sw	a0,56(a1)
60001844:	0330000f          	fence	rw,rw
60001848:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
6000184c:	4506                	lw	a0,64(sp)
6000184e:	410c                	lw	a1,0(a0)
                self.pio.rf(rp_pio::SFR_CTRL_EN) & !(self.sm as u32)
60001850:	4626                	lw	a2,72(sp)
60001852:	4114                	lw	a3,0(a0)
60001854:	fff64613          	not	a2,a2
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
60001858:	8df1                	and	a1,a1,a2
6000185a:	89bd                	andi	a1,a1,15
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
6000185c:	ff06f613          	andi	a2,a3,-16
60001860:	8dd1                	or	a1,a1,a2
60001862:	c10c                	sw	a1,0(a0)
60001864:	0330000f          	fence	rw,rw
        match self.sm {
60001868:	4526                	lw	a0,72(sp)
6000186a:	00251593          	slli	a1,a0,0x2
6000186e:	60003637          	lui	a2,0x60003
60001872:	41860613          	addi	a2,a2,1048 # 60003418 <.Lanon.01042f9e07bac0588b13af07786e0e0c.42+0xc>
60001876:	95b2                	add	a1,a1,a2
60001878:	ffc5a583          	lw	a1,-4(a1) # 7fffffc <.Lline_table_start0+0x7ffb086>
            self.pio.base.add(rp_pio::SFR_SM0_CLKDIV.offset() + sm_offset).write_volatile(self.config.clkdiv);
6000187c:	4606                	lw	a2,64(sp)
6000187e:	56c2                	lw	a3,48(sp)
60001880:	058a                	slli	a1,a1,0x2
60001882:	95b2                	add	a1,a1,a2
60001884:	0cd5a423          	sw	a3,200(a1)
            self.pio.base.add(rp_pio::SFR_SM0_EXECCTRL.offset() + sm_offset).write_volatile(self.config.execctl);
60001888:	56d2                	lw	a3,52(sp)
6000188a:	0cd5a623          	sw	a3,204(a1)
            self.pio.base.add(rp_pio::SFR_SM0_SHIFTCTRL.offset() + sm_offset).write_volatile(self.config.shiftctl);
6000188e:	56e2                	lw	a3,56(sp)
60001890:	0cd5a823          	sw	a3,208(a1)
            self.pio.base.add(rp_pio::SFR_SM0_PINCTRL.offset() + sm_offset).write_volatile(self.config.pinctl);
60001894:	56f2                	lw	a3,60(sp)
60001896:	0cd5ae23          	sw	a3,220(a1)
6000189a:	0d05a683          	lw	a3,208(a1)
6000189e:	80000737          	lui	a4,0x80000
                baseval ^ bitval
600018a2:	8f35                	xor	a4,a4,a3
600018a4:	0ce5a823          	sw	a4,208(a1)
600018a8:	0cd5a823          	sw	a3,208(a1)
        ((value_as_usize & field.mask) << field.offset)
600018ac:	01851593          	slli	a1,a0,0x18
600018b0:	01051693          	slli	a3,a0,0x10
600018b4:	00851713          	slli	a4,a0,0x8
            self.pio.ms(rp_pio::SFR_FDEBUG_TXSTALL, self.sm as u32)
600018b8:	8d55                	or	a0,a0,a3
600018ba:	8d4d                	or	a0,a0,a1
600018bc:	8d59                	or	a0,a0,a4
600018be:	c608                	sw	a0,8(a2)
600018c0:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
600018c4:	4506                	lw	a0,64(sp)
        self.pio.rmwf(rp_pio::SFR_CTRL_RESTART, self.sm as u32);
600018c6:	45a6                	lw	a1,72(sp)
600018c8:	4110                	lw	a2,0(a0)
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
600018ca:	0592                	slli	a1,a1,0x4
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
600018cc:	f0f67613          	andi	a2,a2,-241
                .write_volatile(previous | value_as_usize)
600018d0:	8dd1                	or	a1,a1,a2
600018d2:	c10c                	sw	a1,0(a0)
600018d4:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
600018d8:	4506                	lw	a0,64(sp)
        self.pio.rmwf(rp_pio::SFR_CTRL_CLKDIV_RESTART, self.sm as u32);
600018da:	45a6                	lw	a1,72(sp)
600018dc:	4110                	lw	a2,0(a0)
600018de:	76fd                	lui	a3,0xfffff
600018e0:	0ff68693          	addi	a3,a3,255 # fffff0ff <_lcdfb+0x4ffff0ff>
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
600018e4:	05a2                	slli	a1,a1,0x8
600018e6:	d636                	sw	a3,44(sp)
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
600018e8:	8e75                	and	a2,a2,a3
                .write_volatile(previous | value_as_usize)
600018ea:	8dd1                	or	a1,a1,a2
600018ec:	c10c                	sw	a1,0(a0)
600018ee:	0330000f          	fence	rw,rw
        Assembler {
600018f2:	18012423          	sw	zero,392(sp)
600018f6:	18012623          	sw	zero,396(sp)
            $self.instructions.push(Instruction {
600018fa:	00814603          	lbu	a2,8(sp)
600018fe:	0128                	addi	a0,sp,136
60001900:	4581                	li	a1,0
60001902:	fffff097          	auipc	ra,0xfffff
60001906:	ace080e7          	jalr	-1330(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
        let p= a.assemble_program();
6000190a:	1388                	addi	a0,sp,480
6000190c:	012c                	addi	a1,sp,136
6000190e:	10800613          	li	a2,264
60001912:	00001097          	auipc	ra,0x1
60001916:	3e4080e7          	jalr	996(ra) # 60002cf6 <memcpy>
6000191a:	0b08                	addi	a0,sp,400
6000191c:	138c                	addi	a1,sp,480
6000191e:	ffffe097          	auipc	ra,0xffffe
60001922:	73e080e7          	jalr	1854(ra) # 6000005c <pio::Assembler<_>::assemble_program>
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001926:	1da14603          	lbu	a2,474(sp)
6000192a:	1d012583          	lw	a1,464(sp)
6000192e:	4501                	li	a0,0
60001930:	c219                	beqz	a2,60001936 <rust_entry+0x520>
60001932:	1db10503          	lb	a0,475(sp)
60001936:	0ff57513          	zext.b	a0,a0
6000193a:	44b57863          	bgeu	a0,a1,60001d8a <rust_entry+0x974>
        match self.sm {
6000193e:	45a6                	lw	a1,72(sp)
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001940:	0506                	slli	a0,a0,0x1
60001942:	19010913          	addi	s2,sp,400
60001946:	954a                	add	a0,a0,s2
        match self.sm {
60001948:	058a                	slli	a1,a1,0x2
6000194a:	60003637          	lui	a2,0x60003
6000194e:	41860993          	addi	s3,a2,1048 # 60003418 <.Lanon.01042f9e07bac0588b13af07786e0e0c.42+0xc>
60001952:	95ce                	add	a1,a1,s3
60001954:	ffc5a583          	lw	a1,-4(a1)
            self.pio.base.add(rp_pio::SFR_SM0_INSTR.offset() + sm_offset)
60001958:	4606                	lw	a2,64(sp)
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
6000195a:	00055503          	lhu	a0,0(a0) # 10000 <.Lline_table_start0+0xb08a>
            self.pio.base.add(rp_pio::SFR_SM0_INSTR.offset() + sm_offset)
6000195e:	058a                	slli	a1,a1,0x2
60001960:	95b2                	add	a1,a1,a2
60001962:	0ca5ac23          	sw	a0,216(a1)
60001966:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
6000196a:	4506                	lw	a0,64(sp)
6000196c:	410c                	lw	a1,0(a0)
                self.pio.rf(rp_pio::SFR_CTRL_EN) | (self.sm as u32)
6000196e:	4626                	lw	a2,72(sp)
60001970:	4114                	lw	a3,0(a0)
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
60001972:	89bd                	andi	a1,a1,15
60001974:	8dd1                	or	a1,a1,a2
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001976:	ff06f613          	andi	a2,a3,-16
6000197a:	8dd1                	or	a1,a1,a2
6000197c:	c10c                	sw	a1,0(a0)
6000197e:	0330000f          	fence	rw,rw
60001982:	05d10437          	lui	s0,0x5d10
60001986:	00340513          	addi	a0,s0,3 # 5d10003 <.Lline_table_start0+0x5d0b08d>
6000198a:	401084b7          	lui	s1,0x40108
6000198e:	c088                	sw	a0,0(s1)
60001990:	0330000f          	fence	rw,rw
        PIN_SCK,
        PIN_MOSI,
        PIN_MISO
    );
    report.wfo(utra::main::REPORT_REPORT, 0x05D1_0003);
    if spi_test_core(&mut pio_sm) == false {
60001994:	1808                	addi	a0,sp,48
60001996:	fffff097          	auipc	ra,0xfffff
6000199a:	bbe080e7          	jalr	-1090(ra) # 60000554 <betrusted_boot::pio::spi_test_core>
6000199e:	d22a                	sw	a0,36(sp)
600019a0:	00440513          	addi	a0,s0,4
600019a4:	c088                	sw	a0,0(s1)
600019a6:	0330000f          	fence	rw,rw
600019aa:	4562                	lw	a0,24(sp)
        self.program.wrap.target as usize + self.offset
600019ac:	45c2                	lw	a1,16(sp)
600019ae:	00b50633          	add	a2,a0,a1
        self.program.wrap.source as usize + self.offset
600019b2:	45d2                	lw	a1,20(sp)
600019b4:	952e                	add	a0,a0,a1
        ((value_as_usize & field.mask) << field.offset)
600019b6:	056e                	slli	a0,a0,0x1b
600019b8:	813d                	srli	a0,a0,0xf
600019ba:	d032                	sw	a2,32(sp)
600019bc:	00761593          	slli	a1,a2,0x7
600019c0:	4632                	lw	a2,12(sp)
600019c2:	8df1                	and	a1,a1,a2
        self.config.execctl =
600019c4:	8d4d                	or	a0,a0,a1
600019c6:	da2a                	sw	a0,52(sp)
        if self.program.side_set.bits() > 0 {
600019c8:	45f2                	lw	a1,28(sp)
600019ca:	e591                	bnez	a1,600019d6 <rust_entry+0x5c0>
600019cc:	00185537          	lui	a0,0x185
600019d0:	81050513          	addi	a0,a0,-2032 # 184810 <.Lline_table_start0+0x17f89a>
600019d4:	a03d                	j	60001a02 <rust_entry+0x5ec>
600019d6:	4595                	li	a1,5
        assert!(bit_count < 5);
600019d8:	4672                	lw	a2,28(sp)
600019da:	beb67ce3          	bgeu	a2,a1,600015d2 <rust_entry+0x1bc>
            self.pio.zf(rp_pio::SFR_SM0_EXECCTRL_SIDE_PINDIR,
600019de:	000c0563          	beqz	s8,600019e8 <rust_entry+0x5d2>
600019e2:	400005b7          	lui	a1,0x40000
600019e6:	8d4d                	or	a0,a0,a1
600019e8:	45f2                	lw	a1,28(sp)
600019ea:	05f6                	slli	a1,a1,0x1d
        self.config.execctl =
600019ec:	4602                	lw	a2,0(sp)
600019ee:	c601                	beqz	a2,600019f6 <rust_entry+0x5e0>
600019f0:	20000637          	lui	a2,0x20000
600019f4:	8d51                	or	a0,a0,a2
600019f6:	da2a                	sw	a0,52(sp)
600019f8:	00185537          	lui	a0,0x185
600019fc:	81050513          	addi	a0,a0,-2032 # 184810 <.Lline_table_start0+0x17f89a>
        if self.program.side_set.bits() > 0 {
60001a00:	8d4d                	or	a0,a0,a1
        self.config.pinctl =
60001a02:	de2a                	sw	a0,60(sp)
60001a04:	50830537          	lui	a0,0x50830
        self.config.shiftctl =
60001a08:	dc2a                	sw	a0,56(sp)
60001a0a:	00254537          	lui	a0,0x254
        self.config.clkdiv =
60001a0e:	d82a                	sw	a0,48(sp)
        match self.sm {
60001a10:	4526                	lw	a0,72(sp)
60001a12:	050a                	slli	a0,a0,0x2
60001a14:	954e                	add	a0,a0,s3
60001a16:	ffc52503          	lw	a0,-4(a0) # 253ffc <.Lline_table_start0+0x24f086>
            let pinctrl_saved = self.pio.base.add(rp_pio::SFR_SM0_PINCTRL.offset() + sm_offset).read_volatile();
60001a1a:	4a06                	lw	s4,64(sp)
60001a1c:	050a                	slli	a0,a0,0x2
60001a1e:	01450ab3          	add	s5,a0,s4
60001a22:	0dcaa503          	lw	a0,220(s5)
60001a26:	cc2a                	sw	a0,24(sp)
60001a28:	0ccaa503          	lw	a0,204(s5)
60001a2c:	ca2a                	sw	a0,20(sp)
60001a2e:	0ccaa503          	lw	a0,204(s5)
60001a32:	0dca8d93          	addi	s11,s5,220
60001a36:	0cca8593          	addi	a1,s5,204
        (value_as_usize & !(field.mask << field.offset))
60001a3a:	ce2e                	sw	a1,28(sp)
60001a3c:	55a2                	lw	a1,40(sp)
60001a3e:	8d6d                	and	a0,a0,a1
60001a40:	0caaa623          	sw	a0,204(s5)
60001a44:	00050c37          	lui	s8,0x50
60001a48:	55555537          	lui	a0,0x55555
60001a4c:	55550c93          	addi	s9,a0,1365 # 55555555 <.Lline_table_start0+0x555505df>
60001a50:	33333537          	lui	a0,0x33333
60001a54:	33350493          	addi	s1,a0,819 # 33333333 <.Lline_table_start0+0x3332e3bd>
60001a58:	0f0f1537          	lui	a0,0xf0f1
60001a5c:	f0f50993          	addi	s3,a0,-241 # f0f0f0f <.Lline_table_start0+0xf0ebf99>
60001a60:	01010537          	lui	a0,0x1010
60001a64:	10150b13          	addi	s6,a0,257 # 1010101 <.Lline_table_start0+0x100b18b>
60001a68:	04000d37          	lui	s10,0x4000
60001a6c:	0d8a8b93          	addi	s7,s5,216
60001a70:	fffc0413          	addi	s0,s8,-1 # 4ffff <.Lline_table_start0+0x4b089>
60001a74:	fffc4513          	not	a0,s8
60001a78:	8d61                	and	a0,a0,s0
60001a7a:	00155593          	srli	a1,a0,0x1
60001a7e:	0195f5b3          	and	a1,a1,s9
60001a82:	8d0d                	sub	a0,a0,a1
60001a84:	009575b3          	and	a1,a0,s1
60001a88:	8109                	srli	a0,a0,0x2
60001a8a:	8d65                	and	a0,a0,s1
60001a8c:	952e                	add	a0,a0,a1
60001a8e:	00455593          	srli	a1,a0,0x4
60001a92:	952e                	add	a0,a0,a1
60001a94:	01357533          	and	a0,a0,s3
60001a98:	03650533          	mul	a0,a0,s6
        ((value_as_usize & field.mask) << field.offset)
60001a9c:	814d                	srli	a0,a0,0x13
60001a9e:	01a56533          	or	a0,a0,s10
                    self.pio.ms(rp_pio::SFR_SM0_PINCTRL_PINS_SET_COUNT, 1)
60001aa2:	9901                	andi	a0,a0,-32
60001aa4:	00ada023          	sw	a0,0(s11)
        Assembler {
60001aa8:	18012423          	sw	zero,392(sp)
60001aac:	18012623          	sw	zero,396(sp)
            $self.instructions.push(Instruction {
60001ab0:	0128                	addi	a0,sp,136
60001ab2:	080005b7          	lui	a1,0x8000
60001ab6:	4601                	li	a2,0
60001ab8:	fffff097          	auipc	ra,0xfffff
60001abc:	918080e7          	jalr	-1768(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
                let p= a.assemble_program();
60001ac0:	1388                	addi	a0,sp,480
60001ac2:	012c                	addi	a1,sp,136
60001ac4:	10800613          	li	a2,264
60001ac8:	00001097          	auipc	ra,0x1
60001acc:	22e080e7          	jalr	558(ra) # 60002cf6 <memcpy>
60001ad0:	0b08                	addi	a0,sp,400
60001ad2:	138c                	addi	a1,sp,480
60001ad4:	ffffe097          	auipc	ra,0xffffe
60001ad8:	588080e7          	jalr	1416(ra) # 6000005c <pio::Assembler<_>::assemble_program>
                self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001adc:	1da14583          	lbu	a1,474(sp)
60001ae0:	4501                	li	a0,0
60001ae2:	c199                	beqz	a1,60001ae8 <rust_entry+0x6d2>
60001ae4:	1db10503          	lb	a0,475(sp)
60001ae8:	1d012583          	lw	a1,464(sp)
60001aec:	0ff57513          	zext.b	a0,a0
60001af0:	26b57f63          	bgeu	a0,a1,60001d6e <rust_entry+0x958>
60001af4:	0506                	slli	a0,a0,0x1
60001af6:	954a                	add	a0,a0,s2
60001af8:	00055503          	lhu	a0,0(a0)
                pin_mask &= pin_mask - 1;
60001afc:	01847c33          	and	s8,s0,s8
60001b00:	0caaac23          	sw	a0,216(s5)
            while pin_mask != 0 {
60001b04:	f60c16e3          	bnez	s8,60001a70 <rust_entry+0x65a>
60001b08:	4562                	lw	a0,24(sp)
60001b0a:	00ada023          	sw	a0,0(s11)
60001b0e:	4672                	lw	a2,28(sp)
60001b10:	4552                	lw	a0,20(sp)
60001b12:	c208                	sw	a0,0(a2)
60001b14:	000da503          	lw	a0,0(s11)
60001b18:	cc2a                	sw	a0,24(sp)
60001b1a:	4208                	lw	a0,0(a2)
60001b1c:	ca2a                	sw	a0,20(sp)
60001b1e:	4208                	lw	a0,0(a2)
        (value_as_usize & !(field.mask << field.offset))
60001b20:	55a2                	lw	a1,40(sp)
60001b22:	8d6d                	and	a0,a0,a1
60001b24:	c208                	sw	a0,0(a2)
60001b26:	00050d37          	lui	s10,0x50
60001b2a:	55555537          	lui	a0,0x55555
60001b2e:	55550c13          	addi	s8,a0,1365 # 55555555 <.Lline_table_start0+0x555505df>
60001b32:	33333537          	lui	a0,0x33333
60001b36:	33350413          	addi	s0,a0,819 # 33333333 <.Lline_table_start0+0x3332e3bd>
60001b3a:	0f0f1537          	lui	a0,0xf0f1
60001b3e:	f0f50993          	addi	s3,a0,-241 # f0f0f0f <.Lline_table_start0+0xf0ebf99>
60001b42:	01010537          	lui	a0,0x1010
60001b46:	10150a93          	addi	s5,a0,257 # 1010101 <.Lline_table_start0+0x100b18b>
60001b4a:	04000cb7          	lui	s9,0x4000
60001b4e:	19010913          	addi	s2,sp,400
60001b52:	000504b7          	lui	s1,0x50
60001b56:	fff48b13          	addi	s6,s1,-1 # 4ffff <.Lline_table_start0+0x4b089>
60001b5a:	fff4c513          	not	a0,s1
60001b5e:	01657533          	and	a0,a0,s6
60001b62:	00155593          	srli	a1,a0,0x1
60001b66:	0185f5b3          	and	a1,a1,s8
60001b6a:	8d0d                	sub	a0,a0,a1
60001b6c:	008575b3          	and	a1,a0,s0
60001b70:	8109                	srli	a0,a0,0x2
60001b72:	8d61                	and	a0,a0,s0
60001b74:	952e                	add	a0,a0,a1
60001b76:	00455593          	srli	a1,a0,0x4
60001b7a:	952e                	add	a0,a0,a1
60001b7c:	01357533          	and	a0,a0,s3
60001b80:	03550533          	mul	a0,a0,s5
60001b84:	8161                	srli	a0,a0,0x18
        ((value_as_usize & field.mask) << field.offset)
60001b86:	00551593          	slli	a1,a0,0x5
                    self.pio.ms(rp_pio::SFR_SM0_PINCTRL_PINS_SET_COUNT, 1)
60001b8a:	0195e5b3          	or	a1,a1,s9
60001b8e:	00bda023          	sw	a1,0(s11)
        Assembler {
60001b92:	18012423          	sw	zero,392(sp)
60001b96:	18012623          	sw	zero,396(sp)
                a.set(pio::SetDestination::PINDIRS, ((pindirs >> base) & 1) as u8);
60001b9a:	00ad5533          	srl	a0,s10,a0
            $self.instructions.push(Instruction {
60001b9e:	8905                	andi	a0,a0,1
60001ba0:	40000593          	li	a1,1024
60001ba4:	00b56633          	or	a2,a0,a1
60001ba8:	0128                	addi	a0,sp,136
60001baa:	080005b7          	lui	a1,0x8000
60001bae:	fffff097          	auipc	ra,0xfffff
60001bb2:	822080e7          	jalr	-2014(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
                let p= a.assemble_program();
60001bb6:	1388                	addi	a0,sp,480
60001bb8:	012c                	addi	a1,sp,136
60001bba:	10800613          	li	a2,264
60001bbe:	00001097          	auipc	ra,0x1
60001bc2:	138080e7          	jalr	312(ra) # 60002cf6 <memcpy>
60001bc6:	0b08                	addi	a0,sp,400
60001bc8:	138c                	addi	a1,sp,480
60001bca:	ffffe097          	auipc	ra,0xffffe
60001bce:	492080e7          	jalr	1170(ra) # 6000005c <pio::Assembler<_>::assemble_program>
                self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001bd2:	1da14583          	lbu	a1,474(sp)
60001bd6:	4501                	li	a0,0
60001bd8:	c199                	beqz	a1,60001bde <rust_entry+0x7c8>
60001bda:	1db10503          	lb	a0,475(sp)
60001bde:	1d012583          	lw	a1,464(sp)
60001be2:	0ff57513          	zext.b	a0,a0
60001be6:	18b57d63          	bgeu	a0,a1,60001d80 <rust_entry+0x96a>
60001bea:	0506                	slli	a0,a0,0x1
60001bec:	954a                	add	a0,a0,s2
60001bee:	00055503          	lhu	a0,0(a0)
                pin_mask &= pin_mask - 1;
60001bf2:	009b74b3          	and	s1,s6,s1
60001bf6:	00aba023          	sw	a0,0(s7)
            while pin_mask != 0 {
60001bfa:	fcb1                	bnez	s1,60001b56 <rust_entry+0x740>
60001bfc:	4562                	lw	a0,24(sp)
60001bfe:	00ada023          	sw	a0,0(s11)
60001c02:	4572                	lw	a0,28(sp)
60001c04:	45d2                	lw	a1,20(sp)
60001c06:	c10c                	sw	a1,0(a0)
60001c08:	6541                	lui	a0,0x10
60001c0a:	02aa2c23          	sw	a0,56(s4)
60001c0e:	0330000f          	fence	rw,rw
60001c12:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001c16:	4506                	lw	a0,64(sp)
60001c18:	410c                	lw	a1,0(a0)
                self.pio.rf(rp_pio::SFR_CTRL_EN) & !(self.sm as u32)
60001c1a:	4626                	lw	a2,72(sp)
60001c1c:	4114                	lw	a3,0(a0)
60001c1e:	fff64613          	not	a2,a2
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
60001c22:	8df1                	and	a1,a1,a2
60001c24:	89bd                	andi	a1,a1,15
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001c26:	ff06f613          	andi	a2,a3,-16
60001c2a:	8dd1                	or	a1,a1,a2
60001c2c:	c10c                	sw	a1,0(a0)
60001c2e:	0330000f          	fence	rw,rw
        match self.sm {
60001c32:	4526                	lw	a0,72(sp)
60001c34:	00251593          	slli	a1,a0,0x2
60001c38:	60003637          	lui	a2,0x60003
60001c3c:	41860613          	addi	a2,a2,1048 # 60003418 <.Lanon.01042f9e07bac0588b13af07786e0e0c.42+0xc>
60001c40:	95b2                	add	a1,a1,a2
60001c42:	ffc5a583          	lw	a1,-4(a1) # 7fffffc <.Lline_table_start0+0x7ffb086>
            self.pio.base.add(rp_pio::SFR_SM0_CLKDIV.offset() + sm_offset).write_volatile(self.config.clkdiv);
60001c46:	4606                	lw	a2,64(sp)
60001c48:	56c2                	lw	a3,48(sp)
60001c4a:	058a                	slli	a1,a1,0x2
60001c4c:	95b2                	add	a1,a1,a2
60001c4e:	0cd5a423          	sw	a3,200(a1)
            self.pio.base.add(rp_pio::SFR_SM0_EXECCTRL.offset() + sm_offset).write_volatile(self.config.execctl);
60001c52:	56d2                	lw	a3,52(sp)
60001c54:	0cd5a623          	sw	a3,204(a1)
            self.pio.base.add(rp_pio::SFR_SM0_SHIFTCTRL.offset() + sm_offset).write_volatile(self.config.shiftctl);
60001c58:	56e2                	lw	a3,56(sp)
60001c5a:	0cd5a823          	sw	a3,208(a1)
            self.pio.base.add(rp_pio::SFR_SM0_PINCTRL.offset() + sm_offset).write_volatile(self.config.pinctl);
60001c5e:	56f2                	lw	a3,60(sp)
60001c60:	0cd5ae23          	sw	a3,220(a1)
60001c64:	0d05a683          	lw	a3,208(a1)
60001c68:	80000737          	lui	a4,0x80000
                baseval ^ bitval
60001c6c:	8f35                	xor	a4,a4,a3
60001c6e:	0ce5a823          	sw	a4,208(a1)
60001c72:	0cd5a823          	sw	a3,208(a1)
        ((value_as_usize & field.mask) << field.offset)
60001c76:	01851593          	slli	a1,a0,0x18
60001c7a:	01051693          	slli	a3,a0,0x10
60001c7e:	00851713          	slli	a4,a0,0x8
            self.pio.ms(rp_pio::SFR_FDEBUG_TXSTALL, self.sm as u32)
60001c82:	8d55                	or	a0,a0,a3
60001c84:	8d4d                	or	a0,a0,a1
60001c86:	8d59                	or	a0,a0,a4
60001c88:	c608                	sw	a0,8(a2)
60001c8a:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001c8e:	4506                	lw	a0,64(sp)
        self.pio.rmwf(rp_pio::SFR_CTRL_RESTART, self.sm as u32);
60001c90:	45a6                	lw	a1,72(sp)
60001c92:	4110                	lw	a2,0(a0)
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
60001c94:	0592                	slli	a1,a1,0x4
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001c96:	f0f67613          	andi	a2,a2,-241
                .write_volatile(previous | value_as_usize)
60001c9a:	8dd1                	or	a1,a1,a2
60001c9c:	c10c                	sw	a1,0(a0)
60001c9e:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001ca2:	4506                	lw	a0,64(sp)
        self.pio.rmwf(rp_pio::SFR_CTRL_CLKDIV_RESTART, self.sm as u32);
60001ca4:	45a6                	lw	a1,72(sp)
60001ca6:	4110                	lw	a2,0(a0)
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
60001ca8:	05a2                	slli	a1,a1,0x8
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001caa:	56b2                	lw	a3,44(sp)
60001cac:	8e75                	and	a2,a2,a3
                .write_volatile(previous | value_as_usize)
60001cae:	8dd1                	or	a1,a1,a2
60001cb0:	c10c                	sw	a1,0(a0)
60001cb2:	0330000f          	fence	rw,rw
        Assembler {
60001cb6:	18012423          	sw	zero,392(sp)
60001cba:	18012623          	sw	zero,396(sp)
            $self.instructions.push(Instruction {
60001cbe:	02014603          	lbu	a2,32(sp)
60001cc2:	0128                	addi	a0,sp,136
60001cc4:	4581                	li	a1,0
60001cc6:	ffffe097          	auipc	ra,0xffffe
60001cca:	70a080e7          	jalr	1802(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
        let p= a.assemble_program();
60001cce:	1388                	addi	a0,sp,480
60001cd0:	012c                	addi	a1,sp,136
60001cd2:	10800613          	li	a2,264
60001cd6:	00001097          	auipc	ra,0x1
60001cda:	020080e7          	jalr	32(ra) # 60002cf6 <memcpy>
60001cde:	0b08                	addi	a0,sp,400
60001ce0:	138c                	addi	a1,sp,480
60001ce2:	ffffe097          	auipc	ra,0xffffe
60001ce6:	37a080e7          	jalr	890(ra) # 6000005c <pio::Assembler<_>::assemble_program>
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001cea:	1da14603          	lbu	a2,474(sp)
60001cee:	1d012583          	lw	a1,464(sp)
60001cf2:	4501                	li	a0,0
60001cf4:	c219                	beqz	a2,60001cfa <rust_entry+0x8e4>
60001cf6:	1db10503          	lb	a0,475(sp)
60001cfa:	0ff57513          	zext.b	a0,a0
60001cfe:	08b57663          	bgeu	a0,a1,60001d8a <rust_entry+0x974>
        match self.sm {
60001d02:	45a6                	lw	a1,72(sp)
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001d04:	0506                	slli	a0,a0,0x1
60001d06:	0b10                	addi	a2,sp,400
60001d08:	9532                	add	a0,a0,a2
        match self.sm {
60001d0a:	058a                	slli	a1,a1,0x2
60001d0c:	60003637          	lui	a2,0x60003
60001d10:	41860613          	addi	a2,a2,1048 # 60003418 <.Lanon.01042f9e07bac0588b13af07786e0e0c.42+0xc>
60001d14:	95b2                	add	a1,a1,a2
60001d16:	ffc5a583          	lw	a1,-4(a1)
            self.pio.base.add(rp_pio::SFR_SM0_INSTR.offset() + sm_offset)
60001d1a:	4606                	lw	a2,64(sp)
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001d1c:	00055503          	lhu	a0,0(a0) # 10000 <.Lline_table_start0+0xb08a>
            self.pio.base.add(rp_pio::SFR_SM0_INSTR.offset() + sm_offset)
60001d20:	058a                	slli	a1,a1,0x2
60001d22:	95b2                	add	a1,a1,a2
60001d24:	0ca5ac23          	sw	a0,216(a1)
60001d28:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001d2c:	4506                	lw	a0,64(sp)
60001d2e:	410c                	lw	a1,0(a0)
                self.pio.rf(rp_pio::SFR_CTRL_EN) | (self.sm as u32)
60001d30:	4626                	lw	a2,72(sp)
60001d32:	4114                	lw	a3,0(a0)
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
60001d34:	89bd                	andi	a1,a1,15
60001d36:	8dd1                	or	a1,a1,a2
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001d38:	ff06f613          	andi	a2,a3,-16
60001d3c:	8dd1                	or	a1,a1,a2
60001d3e:	c10c                	sw	a1,0(a0)
60001d40:	0330000f          	fence	rw,rw
60001d44:	05d10537          	lui	a0,0x5d10
60001d48:	0515                	addi	a0,a0,5 # 5d10005 <.Lline_table_start0+0x5d0b08f>
60001d4a:	40108437          	lui	s0,0x40108
60001d4e:	c008                	sw	a0,0(s0)
60001d50:	0330000f          	fence	rw,rw
        PIN_SCK,
        PIN_MOSI,
        PIN_MISO
    );
    report.wfo(utra::main::REPORT_REPORT, 0x05D1_0005);
    if spi_test_core(&mut pio_sm) == false {
60001d54:	1808                	addi	a0,sp,48
60001d56:	ffffe097          	auipc	ra,0xffffe
60001d5a:	7fe080e7          	jalr	2046(ra) # 60000554 <betrusted_boot::pio::spi_test_core>
60001d5e:	5592                	lw	a1,36(sp)
60001d60:	8d6d                	and	a0,a0,a1
        passing = false;
    };

    if passing {
60001d62:	e90d                	bnez	a0,60001d94 <rust_entry+0x97e>
60001d64:	05d1e537          	lui	a0,0x5d1e
60001d68:	ead50513          	addi	a0,a0,-339 # 5d1dead <.Lline_table_start0+0x5d18f37>
60001d6c:	a03d                	j	60001d9a <rust_entry+0x984>
60001d6e:	60003637          	lui	a2,0x60003
60001d72:	fa860613          	addi	a2,a2,-88 # 60002fa8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.24>
60001d76:	00000097          	auipc	ra,0x0
60001d7a:	756080e7          	jalr	1878(ra) # 600024cc <core::panicking::panic_bounds_check>
60001d7e:	0000                	unimp
60001d80:	60003637          	lui	a2,0x60003
60001d84:	f9860613          	addi	a2,a2,-104 # 60002f98 <.Lanon.01042f9e07bac0588b13af07786e0e0c.23>
60001d88:	b7fd                	j	60001d76 <rust_entry+0x960>
60001d8a:	60003637          	lui	a2,0x60003
60001d8e:	fb860613          	addi	a2,a2,-72 # 60002fb8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.27>
60001d92:	b7d5                	j	60001d76 <rust_entry+0x960>
60001d94:	05d16537          	lui	a0,0x5d16
60001d98:	0535                	addi	a0,a0,13 # 5d1600d <.Lline_table_start0+0x5d11097>
60001d9a:	c008                	sw	a0,0(s0)
60001d9c:	0330000f          	fence	rw,rw
        ahb_tests();
        #[cfg(feature="pio-test")]
        pio::pio_tests();

        // ---------- vm setup -------------------------
        satp::satp_setup(); // at the conclusion of this, we are running in "supervisor" (kernel) mode, with Sv32 semantics
60001da0:	fffff097          	auipc	ra,0xfffff
60001da4:	a3e080e7          	jalr	-1474(ra) # 600007de <betrusted_boot::satp::satp_setup>
60001da8:	5a1d6537          	lui	a0,0x5a1d6
60001dac:	06050513          	addi	a0,a0,96 # 5a1d6060 <.Lline_table_start0+0x5a1d10ea>
60001db0:	c008                	sw	a0,0(s0)
60001db2:	0330000f          	fence	rw,rw

60001db6 <.Lpcrel_hi1>:
        core::arch::asm!(
60001db6:	fffff297          	auipc	t0,0xfffff
60001dba:	c5a28293          	addi	t0,t0,-934 # 60000a10 <_start_trap>

60001dbe <.Lpcrel_hi2>:
60001dbe:	fffff297          	auipc	t0,0xfffff
60001dc2:	cb428293          	addi	t0,t0,-844 # 60000a72 <_start_trap_aligned>
60001dc6:	10529073          	csrw	stvec,t0
60001dca:	1dcd0537          	lui	a0,0x1dcd0
60001dce:	c008                	sw	a0,0(s0)
60001dd0:	0330000f          	fence	rw,rw
60001dd4:	58004537          	lui	a0,0x58004
60001dd8:	459d                	li	a1,7
60001dda:	c54c                	sw	a1,12(a0)
60001ddc:	0330000f          	fence	rw,rw
60001de0:	58005537          	lui	a0,0x58005
60001de4:	45bd                	li	a1,15
60001de6:	c54c                	sw	a1,12(a0)
60001de8:	0330000f          	fence	rw,rw
60001dec:	58010537          	lui	a0,0x58010
60001df0:	54fd                	li	s1,-1
60001df2:	c544                	sw	s1,12(a0)
60001df4:	0330000f          	fence	rw,rw
                    $asm_fn(bits);
60001df8:	4501                	li	a0,0
60001dfa:	00001097          	auipc	ra,0x1
60001dfe:	ee8080e7          	jalr	-280(ra) # 60002ce2 <__write_vsim>
                    $asm_fn()
60001e02:	00001097          	auipc	ra,0x1
60001e06:	eda080e7          	jalr	-294(ra) # 60002cdc <__read_vsim>
    sim::write(sim::read() | (1 << irq_no));
60001e0a:	00156513          	ori	a0,a0,1
                    $asm_fn(bits);
60001e0e:	00001097          	auipc	ra,0x1
60001e12:	ed4080e7          	jalr	-300(ra) # 60002ce2 <__write_vsim>
                    $asm_fn()
60001e16:	00001097          	auipc	ra,0x1
60001e1a:	ec6080e7          	jalr	-314(ra) # 60002cdc <__read_vsim>
60001e1e:	00256513          	ori	a0,a0,2
                    $asm_fn(bits);
60001e22:	00001097          	auipc	ra,0x1
60001e26:	ec0080e7          	jalr	-320(ra) # 60002ce2 <__write_vsim>
                    $asm_fn()
60001e2a:	00001097          	auipc	ra,0x1
60001e2e:	eb2080e7          	jalr	-334(ra) # 60002cdc <__read_vsim>
60001e32:	00456513          	ori	a0,a0,4
                    $asm_fn(bits);
60001e36:	00001097          	auipc	ra,0x1
60001e3a:	eac080e7          	jalr	-340(ra) # 60002ce2 <__write_vsim>
60001e3e:	5800f537          	lui	a0,0x5800f
60001e42:	c544                	sw	s1,12(a0)
60001e44:	0330000f          	fence	rw,rw
                    $asm_fn()
60001e48:	00001097          	auipc	ra,0x1
60001e4c:	e94080e7          	jalr	-364(ra) # 60002cdc <__read_vsim>
60001e50:	000805b7          	lui	a1,0x80
60001e54:	8d4d                	or	a0,a0,a1
                    $asm_fn(bits);
60001e56:	00001097          	auipc	ra,0x1
60001e5a:	e8c080e7          	jalr	-372(ra) # 60002ce2 <__write_vsim>
                    $asm_fn(bits);
60001e5e:	20000513          	li	a0,512
60001e62:	20000493          	li	s1,512
60001e66:	00001097          	auipc	ra,0x1
60001e6a:	e5e080e7          	jalr	-418(ra) # 60002cc4 <__set_sie>
60001e6e:	4501                	li	a0,0
60001e70:	1dcd65b7          	lui	a1,0x1dcd6
60001e74:	05b5                	addi	a1,a1,13 # 1dcd600d <.Lline_table_start0+0x1dcd1097>
60001e76:	c00c                	sw	a1,0(s0)
60001e78:	0330000f          	fence	rw,rw
60001e7c:	5a1d05b7          	lui	a1,0x5a1d0
60001e80:	c00c                	sw	a1,0(s0)
60001e82:	0330000f          	fence	rw,rw
60001e86:	580025b7          	lui	a1,0x58002
60001e8a:	00150613          	addi	a2,a0,1 # 5800f001 <.Lline_table_start0+0x5800a08b>
60001e8e:	c188                	sw	a0,0(a1)
60001e90:	0330000f          	fence	rw,rw
60001e94:	8532                	mv	a0,a2
60001e96:	fe961ae3          	bne	a2,s1,60001e8a <.Lpcrel_hi2+0xcc>
60001e9a:	4501                	li	a0,0
60001e9c:	4585                	li	a1,1
        );
    }

    // set some ASIDs to trusted. Values picked to somewhat challenge the decoding
    let trusted_asids = [1, 0x17, 0x18, 0x52, 0x57, 0x5A, 0x5F, 0x60, 0x61, 0x62, 0x116, 0x18F];
    for asid in trusted_asids {
60001e9e:	1eb12023          	sw	a1,480(sp)
60001ea2:	45dd                	li	a1,23
60001ea4:	1eb12223          	sw	a1,484(sp)
60001ea8:	45e1                	li	a1,24
60001eaa:	1eb12423          	sw	a1,488(sp)
60001eae:	05200593          	li	a1,82
60001eb2:	1eb12623          	sw	a1,492(sp)
60001eb6:	05700593          	li	a1,87
60001eba:	1eb12823          	sw	a1,496(sp)
60001ebe:	05a00593          	li	a1,90
60001ec2:	1eb12a23          	sw	a1,500(sp)
60001ec6:	05f00593          	li	a1,95
60001eca:	1eb12c23          	sw	a1,504(sp)
60001ece:	06000593          	li	a1,96
60001ed2:	1eb12e23          	sw	a1,508(sp)
60001ed6:	06100593          	li	a1,97
60001eda:	20b12023          	sw	a1,512(sp)
60001ede:	06200593          	li	a1,98
60001ee2:	20b12223          	sw	a1,516(sp)
60001ee6:	11600593          	li	a1,278
60001eea:	20b12423          	sw	a1,520(sp)
60001eee:	18f00593          	li	a1,399
60001ef2:	20b12623          	sw	a1,524(sp)
60001ef6:	45b1                	li	a1,12
60001ef8:	20b12a23          	sw	a1,532(sp)
60001efc:	138c                	addi	a1,sp,480
60001efe:	58002637          	lui	a2,0x58002
60001f02:	00150693          	addi	a3,a0,1
60001f06:	20d12823          	sw	a3,528(sp)
60001f0a:	050a                	slli	a0,a0,0x2
60001f0c:	952e                	add	a0,a0,a1
60001f0e:	4108                	lw	a0,0(a0)
        ((value_as_usize & field.mask) << field.offset)
60001f10:	1ff57513          	andi	a0,a0,511
        coreuser.wo(utra::coreuser::SET_ASID,
            coreuser.ms(utra::coreuser::SET_ASID_ASID, asid)
60001f14:	20056513          	ori	a0,a0,512
60001f18:	c208                	sw	a0,0(a2)
60001f1a:	0330000f          	fence	rw,rw
60001f1e:	21412683          	lw	a3,532(sp)
60001f22:	21012503          	lw	a0,528(sp)
60001f26:	fca69ee3          	bne	a3,a0,60001f02 <.Lpcrel_hi2+0x144>
60001f2a:	4681                	li	a3,0
60001f2c:	58002537          	lui	a0,0x58002
60001f30:	401085b7          	lui	a1,0x40108
60001f34:	20000613          	li	a2,512
60001f38:	c154                	sw	a3,4(a0)
60001f3a:	0330000f          	fence	rw,rw
60001f3e:	4518                	lw	a4,8(a0)
60001f40:	00168793          	addi	a5,a3,1
    }
    // readback of table
    for asid in 0..512 {
        coreuser.wfo(utra::coreuser::GET_ASID_ADDR_ASID, asid);
        report.wfo(utra::main::REPORT_REPORT,
            coreuser.rf(utra::coreuser::GET_ASID_VALUE_VALUE) << 16 | asid
60001f44:	077e                	slli	a4,a4,0x1f
60001f46:	833d                	srli	a4,a4,0xf
60001f48:	8ed9                	or	a3,a3,a4
60001f4a:	c194                	sw	a3,0(a1)
60001f4c:	0330000f          	fence	rw,rw
60001f50:	86be                	mv	a3,a5
60001f52:	fec793e3          	bne	a5,a2,60001f38 <.Lpcrel_hi2+0x17a>
60001f56:	4581                	li	a1,0
60001f58:	58002537          	lui	a0,0x58002
60001f5c:	00061637          	lui	a2,0x61
60001f60:	cd50                	sw	a2,28(a0)
60001f62:	0330000f          	fence	rw,rw
60001f66:	cd10                	sw	a2,24(a0)
60001f68:	0330000f          	fence	rw,rw
60001f6c:	461d                	li	a2,7
60001f6e:	c910                	sw	a2,16(a0)
60001f70:	0330000f          	fence	rw,rw
60001f74:	4605                	li	a2,1
60001f76:	c950                	sw	a2,20(a0)
60001f78:	0330000f          	fence	rw,rw
60001f7c:	00052a23          	sw	zero,20(a0) # 58002014 <.Lline_table_start0+0x57ffd09e>
60001f80:	0330000f          	fence	rw,rw
60001f84:	20200613          	li	a2,514
60001f88:	c110                	sw	a2,0(a0)
60001f8a:	0330000f          	fence	rw,rw
60001f8e:	6641                	lui	a2,0x10
60001f90:	ace60613          	addi	a2,a2,-1330 # face <.Lline_table_start0+0xab58>
60001f94:	cd50                	sw	a2,28(a0)
60001f96:	0330000f          	fence	rw,rw
60001f9a:	6639                	lui	a2,0xe
60001f9c:	ead60613          	addi	a2,a2,-339 # dead <.Lline_table_start0+0x8f37>
60001fa0:	cd10                	sw	a2,24(a0)
60001fa2:	0330000f          	fence	rw,rw
60001fa6:	40108637          	lui	a2,0x40108
60001faa:	4691                	li	a3,4
60001fac:	c14c                	sw	a1,4(a0)
60001fae:	0330000f          	fence	rw,rw
60001fb2:	4518                	lw	a4,8(a0)
60001fb4:	00158793          	addi	a5,a1,1 # 40108001 <.Lline_table_start0+0x4010308b>
    coreuser.wfo(utra::coreuser::WINDOW_AL_PPN, 0xdead as u32);
    // partial readback of table; `2` should not be trusted
    for asid in 0..4 {
        coreuser.wfo(utra::coreuser::GET_ASID_ADDR_ASID, asid);
        report.wfo(utra::main::REPORT_REPORT,
    coreuser.rf(utra::coreuser::GET_ASID_VALUE_VALUE) << 16 | asid
60001fb8:	077e                	slli	a4,a4,0x1f
60001fba:	833d                	srli	a4,a4,0xf
60001fbc:	8dd9                	or	a1,a1,a4
60001fbe:	c20c                	sw	a1,0(a2)
60001fc0:	0330000f          	fence	rw,rw
60001fc4:	85be                	mv	a1,a5
60001fc6:	fed793e3          	bne	a5,a3,60001fac <.Lpcrel_hi2+0x1ee>
60001fca:	4501                	li	a0,0
60001fcc:	5a1d05b7          	lui	a1,0x5a1d0
60001fd0:	0585                	addi	a1,a1,1 # 5a1d0001 <.Lline_table_start0+0x5a1cb08b>
60001fd2:	40108637          	lui	a2,0x40108
60001fd6:	c20c                	sw	a1,0(a2)
60001fd8:	0330000f          	fence	rw,rw
60001fdc:	20000593          	li	a1,512
60001fe0:	80061637          	lui	a2,0x80061
60001fe4:	004006b7          	lui	a3,0x400
    // since we are in supervisor mode we can diddle with this at will, normally
    // user processes can't change this
    report.wfo(utra::main::REPORT_REPORT, 0x5a1d_0001);
    for asid in 0..512 {
        let satp: u32 =
        0x8000_0000
60001fe8:	00c56733          	or	a4,a0,a2
        | asid << 22
        | (ROOT_PT_PA as u32 >> 12);
        unsafe {
            core::arch::asm!(
60001fec:	18071073          	csrw	satp,a4
60001ff0:	12000073          	sfence.vma
60001ff4:	15fd                	addi	a1,a1,-1
60001ff6:	9536                	add	a0,a0,a3
60001ff8:	f9e5                	bnez	a1,60001fe8 <.Lpcrel_hi2+0x22a>
60001ffa:	80461537          	lui	a0,0x80461
    let satp: u32 =
    0x8000_0000
    | 1 << 22
    | (ROOT_PT_PA as u32 >> 12);
    unsafe {
        core::arch::asm!(
60001ffe:	18051073          	csrw	satp,a0
60002002:	12000073          	sfence.vma
60002006:	5a1d04b7          	lui	s1,0x5a1d0
6000200a:	00248513          	addi	a0,s1,2 # 5a1d0002 <.Lline_table_start0+0x5a1cb08c>
6000200e:	40108437          	lui	s0,0x40108
60002012:	c008                	sw	a0,0(s0)
60002014:	0330000f          	fence	rw,rw
        );
    }

    // switch to user mode
    report.wfo(utra::main::REPORT_REPORT, 0x5a1d_0002);
    to_user_mode();
60002018:	fffff097          	auipc	ra,0xfffff
6000201c:	9ee080e7          	jalr	-1554(ra) # 60000a06 <betrusted_boot::satp::to_user_mode>
60002020:	4501                	li	a0,0
60002022:	00348593          	addi	a1,s1,3
60002026:	c00c                	sw	a1,0(s0)
60002028:	0330000f          	fence	rw,rw
6000202c:	810615b7          	lui	a1,0x81061
    let satp: u32 =
    0x8000_0000
    | 4 << 22
    | (ROOT_PT_PA as u32 >> 12);
    unsafe {
        core::arch::asm!(
60002030:	18059073          	csrw	satp,a1
60002034:	12000073          	sfence.vma
60002038:	0001                	nop
6000203a:	0001                	nop
6000203c:	0001                	nop
6000203e:	00448593          	addi	a1,s1,4
60002042:	c00c                	sw	a1,0(s0)
60002044:	0330000f          	fence	rw,rw
60002048:	5a1d65b7          	lui	a1,0x5a1d6
6000204c:	05b5                	addi	a1,a1,13 # 5a1d600d <.Lline_table_start0+0x5a1d1097>
6000204e:	c00c                	sw	a1,0(s0)
60002050:	0330000f          	fence	rw,rw
60002054:	3dcd06b7          	lui	a3,0x3dcd0
60002058:	c014                	sw	a3,0(s0)
6000205a:	0330000f          	fence	rw,rw
6000205e:	00168593          	addi	a1,a3,1 # 3dcd0001 <.Lline_table_start0+0x3dccb08b>
60002062:	c00c                	sw	a1,0(s0)
60002064:	0330000f          	fence	rw,rw
60002068:	4591                	li	a1,4
6000206a:	cc0c                	sw	a1,24(s0)
6000206c:	0330000f          	fence	rw,rw
60002070:	00268613          	addi	a2,a3,2
60002074:	c010                	sw	a2,0(s0)
60002076:	0330000f          	fence	rw,rw
6000207a:	4605                	li	a2,1
6000207c:	cc50                	sw	a2,28(s0)
6000207e:	0330000f          	fence	rw,rw
60002082:	068d                	addi	a3,a3,3
60002084:	c014                	sw	a3,0(s0)
60002086:	0330000f          	fence	rw,rw
6000208a:	580106b7          	lui	a3,0x58010
6000208e:	08000713          	li	a4,128
60002092:	c298                	sw	a4,0(a3)
60002094:	0330000f          	fence	rw,rw
60002098:	3dcd66b7          	lui	a3,0x3dcd6
6000209c:	06b5                	addi	a3,a3,13 # 3dcd600d <.Lline_table_start0+0x3dcd1097>
6000209e:	c014                	sw	a3,0(s0)
600020a0:	0330000f          	fence	rw,rw
600020a4:	c52006b7          	lui	a3,0xc5200
600020a8:	c014                	sw	a3,0(s0)
600020aa:	0330000f          	fence	rw,rw
600020ae:	c410                	sw	a2,8(s0)
600020b0:	0330000f          	fence	rw,rw
600020b4:	580036b7          	lui	a3,0x58003
600020b8:	10000737          	lui	a4,0x10000
600020bc:	c288                	sw	a0,0(a3)
600020be:	0330000f          	fence	rw,rw
600020c2:	42dc                	lw	a5,4(a3)
600020c4:	c01c                	sw	a5,0(s0)
600020c6:	0330000f          	fence	rw,rw
            csrtest.wfo(utra::csrtest::WTEST_WTEST, i);
            let val = csrtest.rf(utra::csrtest::RTEST_RTEST);
            report.wfo(utra::main::REPORT_REPORT,
                val
            );
            if val != i + 0x1000_0000 {
600020ca:	00e504b3          	add	s1,a0,a4
600020ce:	8fa5                	xor	a5,a5,s1
600020d0:	0017b793          	seqz	a5,a5
600020d4:	0505                	addi	a0,a0,1 # 80461001 <_lcdfb+0xd0461001>
600020d6:	8e7d                	and	a2,a2,a5
600020d8:	feb512e3          	bne	a0,a1,600020bc <.Lpcrel_hi2+0x2fe>
                passing = false;
            }
        }
        if passing {
600020dc:	e611                	bnez	a2,600020e8 <.Lpcrel_hi2+0x32a>
600020de:	c520e537          	lui	a0,0xc520e
600020e2:	ead50593          	addi	a1,a0,-339 # c520dead <_lcdfb+0x1520dead>
600020e6:	a029                	j	600020f0 <.Lpcrel_hi2+0x332>
600020e8:	c5206537          	lui	a0,0xc5206
600020ec:	00d50593          	addi	a1,a0,13 # c520600d <_lcdfb+0x1520600d>
600020f0:	40108537          	lui	a0,0x40108
600020f4:	c10c                	sw	a1,0(a0)
600020f6:	0330000f          	fence	rw,rw
600020fa:	03f105b7          	lui	a1,0x3f10
600020fe:	c10c                	sw	a1,0(a0)
60002100:	0330000f          	fence	rw,rw
    unsafe { core::arch::asm!(
60002104:	10500073          	wfi
60002108:	03f165b7          	lui	a1,0x3f16
6000210c:	05b5                	addi	a1,a1,13 # 3f1600d <.Lline_table_start0+0x3f11097>
6000210e:	c10c                	sw	a1,0(a0)
60002110:	0330000f          	fence	rw,rw
60002114:	000cb5b7          	lui	a1,0xcb
60002118:	c7e58593          	addi	a1,a1,-898 # cac7e <.Lline_table_start0+0xc5d08>
6000211c:	c10c                	sw	a1,0(a0)
6000211e:	0330000f          	fence	rw,rw
60002122:	4591                	li	a1,4
60002124:	61000637          	lui	a2,0x61000
60002128:	001116b7          	lui	a3,0x111
6000212c:	11168493          	addi	s1,a3,273 # 111111 <.Lline_table_start0+0x10c19b>
60002130:	6705                	lui	a4,0x1
60002132:	610007b7          	lui	a5,0x61000
60002136:	86a6                	mv	a3,s1
60002138:	c110                	sw	a2,0(a0)
6000213a:	0330000f          	fence	rw,rw
6000213e:	c394                	sw	a3,0(a5)
60002140:	15fd                	addi	a1,a1,-1
60002142:	96a6                	add	a3,a3,s1
60002144:	97ba                	add	a5,a5,a4
60002146:	963a                	add	a2,a2,a4
60002148:	f9e5                	bnez	a1,60002138 <.Lpcrel_hi2+0x37a>
6000214a:	4511                	li	a0,4
6000214c:	110025b7          	lui	a1,0x11002
60002150:	22258493          	addi	s1,a1,546 # 11002222 <.Lline_table_start0+0x10ffd2ac>
60002154:	610015b7          	lui	a1,0x61001
60002158:	ffc58613          	addi	a2,a1,-4 # 61000ffc <_ebss+0xffc>
6000215c:	401086b7          	lui	a3,0x40108
60002160:	6705                	lui	a4,0x1
60002162:	87b2                	mv	a5,a2
60002164:	85a6                	mv	a1,s1
60002166:	c290                	sw	a2,0(a3)
60002168:	0330000f          	fence	rw,rw
6000216c:	c38c                	sw	a1,0(a5)
6000216e:	157d                	addi	a0,a0,-1 # 40107fff <.Lline_table_start0+0x40103089>
60002170:	95a6                	add	a1,a1,s1
60002172:	97ba                	add	a5,a5,a4
60002174:	963a                	add	a2,a2,a4
60002176:	f965                	bnez	a0,60002166 <.Lpcrel_hi2+0x3a8>
60002178:	4505                	li	a0,1
6000217a:	b1d006b7          	lui	a3,0xb1d00
6000217e:	00168713          	addi	a4,a3,1 # b1d00001 <_lcdfb+0x1d00001>
60002182:	401085b7          	lui	a1,0x40108
60002186:	6605                	lui	a2,0x1
60002188:	0689                	addi	a3,a3,2
6000218a:	c198                	sw	a4,0(a1)
6000218c:	0330000f          	fence	rw,rw
60002190:	4711                	li	a4,4
60002192:	610007b7          	lui	a5,0x61000
60002196:	4384                	lw	s1,0(a5)
60002198:	7ff78413          	addi	s0,a5,2047 # 610007ff <_ebss+0x7ff>
6000219c:	c184                	sw	s1,0(a1)
6000219e:	0330000f          	fence	rw,rw
600021a2:	7fd42483          	lw	s1,2045(s0) # 401087fd <.Lline_table_start0+0x40103887>
600021a6:	c184                	sw	s1,0(a1)
600021a8:	0330000f          	fence	rw,rw
600021ac:	177d                	addi	a4,a4,-1 # fff <_hart_stack_size+0x7ff>
600021ae:	97b2                	add	a5,a5,a2
600021b0:	f37d                	bnez	a4,60002196 <.Lpcrel_hi2+0x3d8>
600021b2:	00157793          	andi	a5,a0,1
600021b6:	8736                	mv	a4,a3
600021b8:	4501                	li	a0,0
600021ba:	fbe1                	bnez	a5,6000218a <.Lpcrel_hi2+0x3cc>
600021bc:	ff010537          	lui	a0,0xff010
600021c0:	f0050593          	addi	a1,a0,-256 # ff00ff00 <_lcdfb+0x4f00ff00>
600021c4:	40108537          	lui	a0,0x40108
600021c8:	c10c                	sw	a1,0(a0)
600021ca:	0330000f          	fence	rw,rw
                report.wfo(utra::main::REPORT_REPORT, b);
            }
        }
        // flush cache
        report.wfo(utra::main::REPORT_REPORT, 0xff00_ff00);
        core::arch::asm!(
600021ce:	0000500f          	.4byte	0x500f
600021d2:	0f0f15b7          	lui	a1,0xf0f1
600021d6:	f0f58593          	addi	a1,a1,-241 # f0f0f0f <.Lline_table_start0+0xf0ebf99>
600021da:	c10c                	sw	a1,0(a0)
600021dc:	0330000f          	fence	rw,rw
600021e0:	4585                	li	a1,1
600021e2:	b2d006b7          	lui	a3,0xb2d00
600021e6:	00168713          	addi	a4,a3,1 # b2d00001 <_lcdfb+0x2d00001>
600021ea:	6605                	lui	a2,0x1
600021ec:	0689                	addi	a3,a3,2
600021ee:	c118                	sw	a4,0(a0)
600021f0:	0330000f          	fence	rw,rw
600021f4:	4711                	li	a4,4
600021f6:	610007b7          	lui	a5,0x61000
600021fa:	4384                	lw	s1,0(a5)
600021fc:	7ff78413          	addi	s0,a5,2047 # 610007ff <_ebss+0x7ff>
60002200:	c104                	sw	s1,0(a0)
60002202:	0330000f          	fence	rw,rw
60002206:	7fd42483          	lw	s1,2045(s0)
6000220a:	c104                	sw	s1,0(a0)
6000220c:	0330000f          	fence	rw,rw
60002210:	177d                	addi	a4,a4,-1
60002212:	97b2                	add	a5,a5,a2
60002214:	f37d                	bnez	a4,600021fa <.Lpcrel_hi2+0x43c>
60002216:	0015f793          	andi	a5,a1,1
6000221a:	8736                	mv	a4,a3
6000221c:	4581                	li	a1,0
6000221e:	fbe1                	bnez	a5,600021ee <.Lpcrel_hi2+0x430>
60002220:	600cb537          	lui	a0,0x600cb
60002224:	c7e50593          	addi	a1,a0,-898 # 600cac7e <_etext+0xc749a>
60002228:	40108537          	lui	a0,0x40108
6000222c:	c10c                	sw	a1,0(a0)
6000222e:	0330000f          	fence	rw,rw
60002232:	123405b7          	lui	a1,0x12340
60002236:	c54c                	sw	a1,12(a0)
60002238:	0330000f          	fence	rw,rw
6000223c:	06400613          	li	a2,100
60002240:	0330000f          	fence	rw,rw
60002244:	490c                	lw	a1,16(a0)
60002246:	c54c                	sw	a1,12(a0)
60002248:	167d                	addi	a2,a2,-1 # fff <_hart_stack_size+0x7ff>
6000224a:	0330000f          	fence	rw,rw
6000224e:	fa6d                	bnez	a2,60002240 <.Lpcrel_hi2+0x482>
60002250:	12340537          	lui	a0,0x12340
60002254:	1f450613          	addi	a2,a0,500 # 123401f4 <.Lline_table_start0+0x1233b27e>
60002258:	40108537          	lui	a0,0x40108
6000225c:	c110                	sw	a2,0(a0)
6000225e:	0330000f          	fence	rw,rw
            checkdata = report.rf(utra::main::RDATA_RDATA); // RDATA = WDATA + 5, computed in hardware
            report.wfo(utra::main::WDATA_WDATA, checkdata);
            // report.wfo(utra::main::REPORT_REPORT, checkdata);
            checkstate += 5;
        }
        if checkdata == checkstate {
60002262:	00c59563          	bne	a1,a2,6000226c <.Lpcrel_hi2+0x4ae>
60002266:	600d05b7          	lui	a1,0x600d0
6000226a:	a031                	j	60002276 <.Lpcrel_hi2+0x4b8>
6000226c:	c10c                	sw	a1,0(a0)
6000226e:	0330000f          	fence	rw,rw
60002272:	0bad05b7          	lui	a1,0xbad0
60002276:	00158613          	addi	a2,a1,1 # bad0001 <.Lline_table_start0+0xbacb08b>
6000227a:	4581                	li	a1,0
6000227c:	c110                	sw	a2,0(a0)
6000227e:	0330000f          	fence	rw,rw
60002282:	4651                	li	a2,20
60002284:	0330000f          	fence	rw,rw
60002288:	4954                	lw	a3,20(a0)
6000228a:	167d                	addi	a2,a2,-1
        let mut checkdata = 0; // tracked value via simulation
        let mut computed = 0; // computed value by reading the hardare block
        let mut devstate = 0; // what the state should be
        for _ in 0..20 {
            let readout = report.rf(utra::main::RINC_RINC);
            computed += readout;
6000228c:	95b6                	add	a1,a1,a3
6000228e:	fa7d                	bnez	a2,60002284 <.Lpcrel_hi2+0x4c6>
60002290:	40108437          	lui	s0,0x40108
60002294:	23a00513          	li	a0,570
60002298:	c008                	sw	a0,0(s0)
6000229a:	0330000f          	fence	rw,rw
            // report.wfo(utra::main::REPORT_REPORT, readout);
            checkdata += devstate;
            devstate += 3;
        }
        if checkdata == computed {
6000229e:	00a59563          	bne	a1,a0,600022a8 <.Lpcrel_hi2+0x4ea>
600022a2:	600d0537          	lui	a0,0x600d0
600022a6:	a031                	j	600022b2 <.Lpcrel_hi2+0x4f4>
600022a8:	c00c                	sw	a1,0(s0)
600022aa:	0330000f          	fence	rw,rw
600022ae:	0bad0537          	lui	a0,0xbad0
600022b2:	0509                	addi	a0,a0,2 # bad0002 <.Lline_table_start0+0xbacb08c>
600022b4:	c008                	sw	a0,0(s0)
600022b6:	0330000f          	fence	rw,rw

        // ----------- bus tests -------------
        const BASE_ADDR: u32 = satp::PT_LIMIT as u32; // don't overwrite our PT data
        // 'random' access test
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u32, 512);
        ramtest_lfsr(&mut test_slice, 3);
600022ba:	fffff097          	auipc	ra,0xfffff
600022be:	0b4080e7          	jalr	180(ra) # 6000136e <betrusted_boot::ramtest_lfsr>

        // now some basic memory read/write tests
        // entirely within cache access test
        // 256-entry by 32-bit slice at start of RAM
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u32, 256);
        ramtest_all(&mut test_slice, 4);
600022c2:	fffff097          	auipc	ra,0xfffff
600022c6:	d60080e7          	jalr	-672(ra) # 60001022 <betrusted_boot::ramtest_all>
        // byte access test
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u8, 256);
        ramtest_fast(&mut test_slice, 5);
600022ca:	fffff097          	auipc	ra,0xfffff
600022ce:	f5e080e7          	jalr	-162(ra) # 60001228 <betrusted_boot::ramtest_fast>
        // word access test
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u16, 512);
        ramtest_fast(&mut test_slice, 6); // 1ff00
600022d2:	fffff097          	auipc	ra,0xfffff
600022d6:	eca080e7          	jalr	-310(ra) # 6000119c <betrusted_boot::ramtest_fast>

        // outside cache test
        // 6144-entry by 32-bit slice at start of RAM - should cross outside cache boundary
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u32, 0x1800);
        ramtest_fast(&mut test_slice, 7);  // c7f600
600022da:	fffff097          	auipc	ra,0xfffff
600022de:	e34080e7          	jalr	-460(ra) # 6000110e <betrusted_boot::ramtest_fast>

        // this passed, now that the AXI state machine is fixed.
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u32, 0x1800);
        ramtest_fast_specialcase1(&mut test_slice, 8);  // c7f600
600022e2:	fffff097          	auipc	ra,0xfffff
600022e6:	da4080e7          	jalr	-604(ra) # 60001086 <betrusted_boot::ramtest_fast_specialcase1>

        // u64 access test
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u64, 0xC00);
        ramtest_fast(&mut test_slice, 9);
600022ea:	fffff097          	auipc	ra,0xfffff
600022ee:	fc8080e7          	jalr	-56(ra) # 600012b2 <betrusted_boot::ramtest_fast>
600022f2:	4505                	li	a0,1
600022f4:	c408                	sw	a0,8(s0)
600022f6:	0330000f          	fence	rw,rw
600022fa:	000a0537          	lui	a0,0xa0
600022fe:	0529                	addi	a0,a0,10 # a000a <.Lline_table_start0+0x9b094>

        // conjure the signature struct directly out of memory. super unsafe.
        let sig_ptr = LOADER_SIG_OFFSET as *const SignatureInFlash;
        let sig: &SignatureInFlash = sig_ptr.as_ref().unwrap();
    }
    let mut cursor = Point {x: LEFT_MARGIN, y: 10};
60002300:	c52a                	sw	a0,136(sp)
60002302:	60003537          	lui	a0,0x60003
60002306:	3b850513          	addi	a0,a0,952 # 600033b8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.37>
6000230a:	401025b7          	lui	a1,0x40102
6000230e:	00250613          	addi	a2,a0,2
60002312:	00054683          	lbu	a3,0(a0)
60002316:	0330000f          	fence	rw,rw
6000231a:	41d8                	lw	a4,4(a1)
6000231c:	ff6d                	bnez	a4,60002316 <.Lpcrel_hi2+0x558>
6000231e:	0505                	addi	a0,a0,1
60002320:	c194                	sw	a3,0(a1)
60002322:	0330000f          	fence	rw,rw
60002326:	fec516e3          	bne	a0,a2,60002312 <.Lpcrel_hi2+0x554>
6000232a:	40107537          	lui	a0,0x40107
    // initial banner
    let mut uart = debug::Uart {};
    uart.tiny_write_str("  ");

    // clear screen to all black
    let mut gfx = Gfx {
6000232e:	1ea12423          	sw	a0,488(sp)
60002332:	420005b7          	lui	a1,0x42000
60002336:	1eb12023          	sw	a1,480(sp)
6000233a:	6585                	lui	a1,0x1
6000233c:	70858593          	addi	a1,a1,1800 # 1708 <_hart_stack_size+0xf08>
60002340:	1eb12223          	sw	a1,484(sp)
60002344:	03100593          	li	a1,49
60002348:	c50c                	sw	a1,8(a0)
6000234a:	0330000f          	fence	rw,rw
        csr: CSR::new(utra::memlcd::HW_MEMLCD_BASE as *mut u32),
        fb: core::slice::from_raw_parts_mut(utralib::HW_MEMLCD_MEM as *mut u32, FB_SIZE), // unsafe but inside an unsafe already
    };
    gfx.init(100_000_000);

    for word in gfx.fb.iter_mut() {
6000234e:	1e412583          	lw	a1,484(sp)
60002352:	c991                	beqz	a1,60002366 <.Lpcrel_hi2+0x5a8>
60002354:	1e012503          	lw	a0,480(sp)
60002358:	00259613          	slli	a2,a1,0x2
        *word = 0x0; // set to all black
6000235c:	4581                	li	a1,0
6000235e:	00001097          	auipc	ra,0x1
60002362:	990080e7          	jalr	-1648(ra) # 60002cee <memset>
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60002366:	1e812503          	lw	a0,488(sp)
6000236a:	4589                	li	a1,2
6000236c:	c10c                	sw	a1,0(a0)
6000236e:	0330000f          	fence	rw,rw
60002372:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60002376:	1e812503          	lw	a0,488(sp)
6000237a:	4148                	lw	a0,4(a0)
        if self.csr.rf(utra::memlcd::BUSY_BUSY) == 1 {
6000237c:	8905                	andi	a0,a0,1
    }
    gfx.update_all();
    while gfx.busy() { }
6000237e:	f975                	bnez	a0,60002372 <.Lpcrel_hi2+0x5b4>
60002380:	60003537          	lui	a0,0x60003
60002384:	3ba50513          	addi	a0,a0,954 # 600033ba <.Lanon.01042f9e07bac0588b13af07786e0e0c.38>
60002388:	401025b7          	lui	a1,0x40102
6000238c:	02750613          	addi	a2,a0,39
60002390:	00054683          	lbu	a3,0(a0)
60002394:	0330000f          	fence	rw,rw
60002398:	41d8                	lw	a4,4(a1)
6000239a:	ff6d                	bnez	a4,60002394 <.Lpcrel_hi2+0x5d6>
6000239c:	0505                	addi	a0,a0,1
6000239e:	c194                	sw	a3,0(a1)
600023a0:	0330000f          	fence	rw,rw
600023a4:	fec516e3          	bne	a0,a2,60002390 <.Lpcrel_hi2+0x5d2>
    // power on the curve engine -- give it >16 cycles to sync up
    engine.wfo(utra::engine::POWER_ON, 1);

    // now characters should actually be able to print
    uart.tiny_write_str(VERSION_STR);
    gfx.msg(VERSION_STR, &mut cursor);
600023a8:	60003537          	lui	a0,0x60003
600023ac:	3ba50593          	addi	a1,a0,954 # 600033ba <.Lanon.01042f9e07bac0588b13af07786e0e0c.38>
600023b0:	1388                	addi	a0,sp,480
600023b2:	02700613          	li	a2,39
600023b6:	0134                	addi	a3,sp,136
600023b8:	fffff097          	auipc	ra,0xfffff
600023bc:	9e6080e7          	jalr	-1562(ra) # 60000d9e <betrusted_boot::Gfx::msg>
600023c0:	4481                	li	s1,0
600023c2:	40ffe537          	lui	a0,0x40ffe
600023c6:	0571                	addi	a0,a0,28 # 40ffe01c <.Lline_table_start0+0x40ff90a6>
600023c8:	deadc5b7          	lui	a1,0xdeadc
600023cc:	0de58593          	addi	a1,a1,222 # deadc0de <_lcdfb+0x2eadc0de>
600023d0:	41000637          	lui	a2,0x41000
    }

    // check the stack usage
    let stack: &[u32] = core::slice::from_raw_parts(STACK_TOP as *const u32, (STACK_LEN as usize / core::mem::size_of::<u32>()) as usize);
    let mut unused_stack_words = 0;
    for &word in stack.iter() {
600023d4:	4114                	lw	a3,0(a0)
        if word != 0xDEAD_C0DE {
600023d6:	00b69663          	bne	a3,a1,600023e2 <.Lpcrel_hi2+0x624>
600023da:	0511                	addi	a0,a0,4
            break;
        }
        unused_stack_words += 1;
600023dc:	0485                	addi	s1,s1,1
600023de:	fec51be3          	bne	a0,a2,600023d4 <.Lpcrel_hi2+0x616>
    }
    uart.tiny_write_str("Free stack: 0x");
600023e2:	60003537          	lui	a0,0x60003
600023e6:	3e150413          	addi	s0,a0,993 # 600033e1 <.Lanon.01042f9e07bac0588b13af07786e0e0c.39>
600023ea:	45b9                	li	a1,14
600023ec:	8522                	mv	a0,s0
600023ee:	ffffe097          	auipc	ra,0xffffe
600023f2:	3d0080e7          	jalr	976(ra) # 600007be <betrusted_boot::debug::Uart::tiny_write_str>
    uart.print_hex_word(unused_stack_words * 4);
600023f6:	048a                	slli	s1,s1,0x2
600023f8:	8526                	mv	a0,s1
600023fa:	ffffe097          	auipc	ra,0xffffe
600023fe:	32c080e7          	jalr	812(ra) # 60000726 <betrusted_boot::debug::Uart::print_hex_word>
    gfx.msg("Free stack: 0x", &mut cursor);
60002402:	1388                	addi	a0,sp,480
60002404:	4639                	li	a2,14
60002406:	0134                	addi	a3,sp,136
60002408:	85a2                	mv	a1,s0
6000240a:	fffff097          	auipc	ra,0xfffff
6000240e:	994080e7          	jalr	-1644(ra) # 60000d9e <betrusted_boot::Gfx::msg>
    gfx.hex_word(unused_stack_words * 4, &mut cursor);
60002412:	1388                	addi	a0,sp,480
60002414:	0130                	addi	a2,sp,136
60002416:	85a6                	mv	a1,s1
60002418:	fffff097          	auipc	ra,0xfffff
6000241c:	8ca080e7          	jalr	-1846(ra) # 60000ce2 <betrusted_boot::Gfx::hex_word>
    uart.newline();
60002420:	ffffe097          	auipc	ra,0xffffe
60002424:	2d8080e7          	jalr	728(ra) # 600006f8 <betrusted_boot::debug::Uart::newline>
                }
                last_char = c;
            }
        }
    }
    gfx.msg("\n\r\n\rJumping to loader...\n\r", &mut cursor);
60002428:	60003537          	lui	a0,0x60003
6000242c:	3ef50413          	addi	s0,a0,1007 # 600033ef <.Lanon.01042f9e07bac0588b13af07786e0e0c.40>
60002430:	1388                	addi	a0,sp,480
60002432:	4669                	li	a2,26
60002434:	0134                	addi	a3,sp,136
60002436:	85a2                	mv	a1,s0
60002438:	fffff097          	auipc	ra,0xfffff
6000243c:	966080e7          	jalr	-1690(ra) # 60000d9e <betrusted_boot::Gfx::msg>
    uart.tiny_write_str("\n\r\n\rJumping to loader...\n\r");
60002440:	45e9                	li	a1,26
60002442:	8522                	mv	a0,s0
60002444:	ffffe097          	auipc	ra,0xffffe
60002448:	37a080e7          	jalr	890(ra) # 600007be <betrusted_boot::debug::Uart::tiny_write_str>
        // note that removing power does *not* clear the RF or microcode state -- data can leak from the bootloader
        // into other areas because of this! (but I think it's OK because we just mess around with public keys here)
    }

    // now jump to the loader once everything checks out.
    start_loader(
6000244c:	fffff097          	auipc	ra,0xfffff
60002450:	81e080e7          	jalr	-2018(ra) # 60000c6a <start_loader>
	...

60002456 <<betrusted_boot::pio::PioError as core::fmt::Debug>::fmt>:
#[derive(Debug)]
60002456:	00054503          	lbu	a0,0(a0)
6000245a:	c519                	beqz	a0,60002468 <<betrusted_boot::pio::PioError as core::fmt::Debug>::fmt+0x12>
6000245c:	460d                	li	a2,3
6000245e:	60003537          	lui	a0,0x60003
60002462:	40950693          	addi	a3,a0,1033 # 60003409 <.Lanon.01042f9e07bac0588b13af07786e0e0c.41>
60002466:	a031                	j	60002472 <<betrusted_boot::pio::PioError as core::fmt::Debug>::fmt+0x1c>
60002468:	4625                	li	a2,9
6000246a:	60003537          	lui	a0,0x60003
6000246e:	40c50693          	addi	a3,a0,1036 # 6000340c <.Lanon.01042f9e07bac0588b13af07786e0e0c.42>
60002472:	41d8                	lw	a4,4(a1)
60002474:	4188                	lw	a0,0(a1)
60002476:	475c                	lw	a5,12(a4)
60002478:	85b6                	mv	a1,a3
6000247a:	8782                	jr	a5

6000247c <arrayvec::arrayvec::extend_panic>:
    panic!("ArrayVec: capacity exceeded in extend/from_iter");
6000247c:	60003537          	lui	a0,0x60003
60002480:	47850513          	addi	a0,a0,1144 # 60003478 <.Lanon.0b5387455a7f645a1ce2665442eced5a.0>
60002484:	600035b7          	lui	a1,0x60003
60002488:	50458613          	addi	a2,a1,1284 # 60003504 <.Lanon.0b5387455a7f645a1ce2665442eced5a.2>
6000248c:	02f00593          	li	a1,47
60002490:	00000097          	auipc	ra,0x0
60002494:	78c080e7          	jalr	1932(ra) # 60002c1c <core::panicking::panic>
	...

6000249a <core::panicking::panic_fmt>:
6000249a:	1141                	addi	sp,sp,-16
6000249c:	c606                	sw	ra,12(sp)
6000249e:	60003537          	lui	a0,0x60003
600024a2:	51450513          	addi	a0,a0,1300 # 60003514 <.Lanon.2158d0578dda08147993e5787a6dfcb6.207>
600024a6:	600035b7          	lui	a1,0x60003
600024aa:	53858593          	addi	a1,a1,1336 # 60003538 <.Lanon.2158d0578dda08147993e5787a6dfcb6.271>
600024ae:	ffffe097          	auipc	ra,0xffffe
600024b2:	7c0080e7          	jalr	1984(ra) # 60000c6e <rust_begin_unwind>
	...

600024b8 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>>:
600024b8:	8082                	ret

600024ba <<T as core::any::Any>::type_id>:
600024ba:	e7caf537          	lui	a0,0xe7caf
600024be:	a6d50513          	addi	a0,a0,-1427 # e7caea6d <_lcdfb+0x37caea6d>
600024c2:	31c065b7          	lui	a1,0x31c06
600024c6:	9bc58593          	addi	a1,a1,-1604 # 31c059bc <.Lline_table_start0+0x31c00a46>
600024ca:	8082                	ret

600024cc <core::panicking::panic_bounds_check>:
600024cc:	7139                	addi	sp,sp,-64
600024ce:	de06                	sw	ra,60(sp)
600024d0:	c42a                	sw	a0,8(sp)
600024d2:	c62e                	sw	a1,12(sp)
600024d4:	0068                	addi	a0,sp,12
600024d6:	d42a                	sw	a0,40(sp)
600024d8:	60002537          	lui	a0,0x60002
600024dc:	50c50513          	addi	a0,a0,1292 # 6000250c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
600024e0:	d62a                	sw	a0,44(sp)
600024e2:	002c                	addi	a1,sp,8
600024e4:	d82e                	sw	a1,48(sp)
600024e6:	da2a                	sw	a0,52(sp)
600024e8:	60003537          	lui	a0,0x60003
600024ec:	52850513          	addi	a0,a0,1320 # 60003528 <.Lanon.2158d0578dda08147993e5787a6dfcb6.208>
600024f0:	cc2a                	sw	a0,24(sp)
600024f2:	4509                	li	a0,2
600024f4:	ce2a                	sw	a0,28(sp)
600024f6:	c802                	sw	zero,16(sp)
600024f8:	102c                	addi	a1,sp,40
600024fa:	d02e                	sw	a1,32(sp)
600024fc:	d22a                	sw	a0,36(sp)
600024fe:	0808                	addi	a0,sp,16
60002500:	85b2                	mv	a1,a2
60002502:	00000097          	auipc	ra,0x0
60002506:	f98080e7          	jalr	-104(ra) # 6000249a <core::panicking::panic_fmt>
	...

6000250c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>:
6000250c:	4108                	lw	a0,0(a0)
6000250e:	00000317          	auipc	t1,0x0
60002512:	00830067          	jr	8(t1) # 60002516 <core::fmt::num::imp::fmt_u32>

60002516 <core::fmt::num::imp::fmt_u32>:
60002516:	711d                	addi	sp,sp,-96
60002518:	ce86                	sw	ra,92(sp)
6000251a:	cca2                	sw	s0,88(sp)
6000251c:	caa6                	sw	s1,84(sp)
6000251e:	c8ca                	sw	s2,80(sp)
60002520:	c6ce                	sw	s3,76(sp)
60002522:	c4d2                	sw	s4,72(sp)
60002524:	c2d6                	sw	s5,68(sp)
60002526:	c0da                	sw	s6,64(sp)
60002528:	de5e                	sw	s7,60(sp)
6000252a:	dc62                	sw	s8,56(sp)
6000252c:	da66                	sw	s9,52(sp)
6000252e:	d86a                	sw	s10,48(sp)
60002530:	d66e                	sw	s11,44(sp)
60002532:	8bae                	mv	s7,a1
60002534:	00455613          	srli	a2,a0,0x4
60002538:	27100693          	li	a3,625
6000253c:	02700593          	li	a1,39
60002540:	02d67363          	bgeu	a2,a3,60002566 <core::fmt::num::imp::fmt_u32+0x50>
60002544:	06300613          	li	a2,99
60002548:	0aa66963          	bltu	a2,a0,600025fa <core::fmt::num::imp::fmt_u32+0xe4>
6000254c:	4629                	li	a2,10
6000254e:	0ec57b63          	bgeu	a0,a2,60002644 <core::fmt::num::imp::fmt_u32+0x12e>
60002552:	fff58413          	addi	s0,a1,-1
60002556:	00510593          	addi	a1,sp,5
6000255a:	95a2                	add	a1,a1,s0
6000255c:	03050513          	addi	a0,a0,48
60002560:	00a58023          	sb	a0,0(a1)
60002564:	a219                	j	6000266a <core::fmt::num::imp::fmt_u32+0x154>
60002566:	4581                	li	a1,0
60002568:	d1b71637          	lui	a2,0xd1b71
6000256c:	75960293          	addi	t0,a2,1881 # d1b71759 <_lcdfb+0x21b71759>
60002570:	66b9                	lui	a3,0xe
60002572:	8f068313          	addi	t1,a3,-1808 # d8f0 <.Lline_table_start0+0x897a>
60002576:	6705                	lui	a4,0x1
60002578:	47b70393          	addi	t2,a4,1147 # 147b <_hart_stack_size+0xc7b>
6000257c:	f9c00813          	li	a6,-100
60002580:	600037b7          	lui	a5,0x60003
60002584:	55c78e93          	addi	t4,a5,1372 # 6000355c <.Lanon.2158d0578dda08147993e5787a6dfcb6.324>
60002588:	00510893          	addi	a7,sp,5
6000258c:	05f5e7b7          	lui	a5,0x5f5e
60002590:	0ff78e13          	addi	t3,a5,255 # 5f5e0ff <.Lline_table_start0+0x5f59189>
60002594:	842a                	mv	s0,a0
60002596:	02553533          	mulhu	a0,a0,t0
6000259a:	8135                	srli	a0,a0,0xd
6000259c:	02650633          	mul	a2,a0,t1
600025a0:	9622                	add	a2,a2,s0
600025a2:	01061693          	slli	a3,a2,0x10
600025a6:	82c9                	srli	a3,a3,0x12
600025a8:	027686b3          	mul	a3,a3,t2
600025ac:	0116d713          	srli	a4,a3,0x11
600025b0:	82c1                	srli	a3,a3,0x10
600025b2:	7fe6f693          	andi	a3,a3,2046
600025b6:	03070733          	mul	a4,a4,a6
600025ba:	963a                	add	a2,a2,a4
600025bc:	0646                	slli	a2,a2,0x11
600025be:	8241                	srli	a2,a2,0x10
600025c0:	96f6                	add	a3,a3,t4
600025c2:	00b88733          	add	a4,a7,a1
600025c6:	0006c783          	lbu	a5,0(a3)
600025ca:	00168683          	lb	a3,1(a3)
600025ce:	9676                	add	a2,a2,t4
600025d0:	00160483          	lb	s1,1(a2)
600025d4:	00064603          	lbu	a2,0(a2)
600025d8:	02d70223          	sb	a3,36(a4)
600025dc:	02f701a3          	sb	a5,35(a4)
600025e0:	02970323          	sb	s1,38(a4)
600025e4:	02c702a3          	sb	a2,37(a4)
600025e8:	15f1                	addi	a1,a1,-4
600025ea:	fa8e65e3          	bltu	t3,s0,60002594 <core::fmt::num::imp::fmt_u32+0x7e>
600025ee:	02758593          	addi	a1,a1,39
600025f2:	06300613          	li	a2,99
600025f6:	f4a67be3          	bgeu	a2,a0,6000254c <core::fmt::num::imp::fmt_u32+0x36>
600025fa:	01051613          	slli	a2,a0,0x10
600025fe:	8249                	srli	a2,a2,0x12
60002600:	6685                	lui	a3,0x1
60002602:	47b68693          	addi	a3,a3,1147 # 147b <_hart_stack_size+0xc7b>
60002606:	02d60633          	mul	a2,a2,a3
6000260a:	8245                	srli	a2,a2,0x11
6000260c:	f9c00693          	li	a3,-100
60002610:	02d606b3          	mul	a3,a2,a3
60002614:	9536                	add	a0,a0,a3
60002616:	0546                	slli	a0,a0,0x11
60002618:	8141                	srli	a0,a0,0x10
6000261a:	15f9                	addi	a1,a1,-2
6000261c:	600036b7          	lui	a3,0x60003
60002620:	55c68693          	addi	a3,a3,1372 # 6000355c <.Lanon.2158d0578dda08147993e5787a6dfcb6.324>
60002624:	9536                	add	a0,a0,a3
60002626:	00150683          	lb	a3,1(a0)
6000262a:	00054503          	lbu	a0,0(a0)
6000262e:	00510713          	addi	a4,sp,5
60002632:	972e                	add	a4,a4,a1
60002634:	00d700a3          	sb	a3,1(a4)
60002638:	00a70023          	sb	a0,0(a4)
6000263c:	8532                	mv	a0,a2
6000263e:	4629                	li	a2,10
60002640:	f0c569e3          	bltu	a0,a2,60002552 <core::fmt::num::imp::fmt_u32+0x3c>
60002644:	0506                	slli	a0,a0,0x1
60002646:	ffe58413          	addi	s0,a1,-2
6000264a:	600035b7          	lui	a1,0x60003
6000264e:	55c58593          	addi	a1,a1,1372 # 6000355c <.Lanon.2158d0578dda08147993e5787a6dfcb6.324>
60002652:	952e                	add	a0,a0,a1
60002654:	00150583          	lb	a1,1(a0)
60002658:	00054503          	lbu	a0,0(a0)
6000265c:	00510613          	addi	a2,sp,5
60002660:	9622                	add	a2,a2,s0
60002662:	00b600a3          	sb	a1,1(a2)
60002666:	00a60023          	sb	a0,0(a2)
6000266a:	018ba503          	lw	a0,24(s7)
6000266e:	00510593          	addi	a1,sp,5
60002672:	02700613          	li	a2,39
60002676:	00157493          	andi	s1,a0,1
6000267a:	00110a37          	lui	s4,0x110
6000267e:	c099                	beqz	s1,60002684 <core::fmt::num::imp::fmt_u32+0x16e>
60002680:	02b00a13          	li	s4,43
60002684:	408609b3          	sub	s3,a2,s0
60002688:	00858933          	add	s2,a1,s0
6000268c:	01d51593          	slli	a1,a0,0x1d
60002690:	008ba603          	lw	a2,8(s7)
60002694:	85fd                	srai	a1,a1,0x1f
60002696:	600036b7          	lui	a3,0x60003
6000269a:	51468693          	addi	a3,a3,1300 # 60003514 <.Lanon.2158d0578dda08147993e5787a6dfcb6.207>
6000269e:	00d5fab3          	and	s5,a1,a3
600026a2:	ca15                	beqz	a2,600026d6 <core::fmt::num::imp::fmt_u32+0x1c0>
600026a4:	00cbac83          	lw	s9,12(s7)
600026a8:	009985b3          	add	a1,s3,s1
600026ac:	0395f563          	bgeu	a1,s9,600026d6 <core::fmt::num::imp::fmt_u32+0x1c0>
600026b0:	8921                	andi	a0,a0,8
600026b2:	e535                	bnez	a0,6000271e <core::fmt::num::imp::fmt_u32+0x208>
600026b4:	020bc603          	lbu	a2,32(s7)
600026b8:	468d                	li	a3,3
600026ba:	4505                	li	a0,1
600026bc:	00d60363          	beq	a2,a3,600026c2 <core::fmt::num::imp::fmt_u32+0x1ac>
600026c0:	8532                	mv	a0,a2
600026c2:	00357613          	andi	a2,a0,3
600026c6:	40bc8533          	sub	a0,s9,a1
600026ca:	c255                	beqz	a2,6000276e <core::fmt::num::imp::fmt_u32+0x258>
600026cc:	4585                	li	a1,1
600026ce:	0ab61363          	bne	a2,a1,60002774 <core::fmt::num::imp::fmt_u32+0x25e>
600026d2:	4c81                	li	s9,0
600026d4:	a06d                	j	6000277e <core::fmt::num::imp::fmt_u32+0x268>
600026d6:	000ba403          	lw	s0,0(s7)
600026da:	004ba483          	lw	s1,4(s7)
600026de:	8522                	mv	a0,s0
600026e0:	85a6                	mv	a1,s1
600026e2:	8652                	mv	a2,s4
600026e4:	86d6                	mv	a3,s5
600026e6:	00000097          	auipc	ra,0x0
600026ea:	124080e7          	jalr	292(ra) # 6000280a <core::fmt::Formatter::pad_integral::write_prefix>
600026ee:	4b05                	li	s6,1
600026f0:	e519                	bnez	a0,600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
600026f2:	44d4                	lw	a3,12(s1)
600026f4:	8522                	mv	a0,s0
600026f6:	85ca                	mv	a1,s2
600026f8:	864e                	mv	a2,s3
600026fa:	9682                	jalr	a3
600026fc:	8b2a                	mv	s6,a0
600026fe:	855a                	mv	a0,s6
60002700:	40f6                	lw	ra,92(sp)
60002702:	4466                	lw	s0,88(sp)
60002704:	44d6                	lw	s1,84(sp)
60002706:	4946                	lw	s2,80(sp)
60002708:	49b6                	lw	s3,76(sp)
6000270a:	4a26                	lw	s4,72(sp)
6000270c:	4a96                	lw	s5,68(sp)
6000270e:	4b06                	lw	s6,64(sp)
60002710:	5bf2                	lw	s7,60(sp)
60002712:	5c62                	lw	s8,56(sp)
60002714:	5cd2                	lw	s9,52(sp)
60002716:	5d42                	lw	s10,48(sp)
60002718:	5db2                	lw	s11,44(sp)
6000271a:	6125                	addi	sp,sp,96
6000271c:	8082                	ret
6000271e:	01cba503          	lw	a0,28(s7)
60002722:	c02a                	sw	a0,0(sp)
60002724:	03000513          	li	a0,48
60002728:	020bcd03          	lbu	s10,32(s7)
6000272c:	000bac03          	lw	s8,0(s7)
60002730:	004bad83          	lw	s11,4(s7)
60002734:	00abae23          	sw	a0,28(s7)
60002738:	4b05                	li	s6,1
6000273a:	036b8023          	sb	s6,32(s7)
6000273e:	8562                	mv	a0,s8
60002740:	85ee                	mv	a1,s11
60002742:	8652                	mv	a2,s4
60002744:	86d6                	mv	a3,s5
60002746:	00000097          	auipc	ra,0x0
6000274a:	0c4080e7          	jalr	196(ra) # 6000280a <core::fmt::Formatter::pad_integral::write_prefix>
6000274e:	f945                	bnez	a0,600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
60002750:	01940533          	add	a0,s0,s9
60002754:	8d05                	sub	a0,a0,s1
60002756:	fda50413          	addi	s0,a0,-38
6000275a:	147d                	addi	s0,s0,-1 # 40107fff <.Lline_table_start0+0x40103089>
6000275c:	c449                	beqz	s0,600027e6 <core::fmt::num::imp::fmt_u32+0x2d0>
6000275e:	010da603          	lw	a2,16(s11)
60002762:	03000593          	li	a1,48
60002766:	8562                	mv	a0,s8
60002768:	9602                	jalr	a2
6000276a:	d965                	beqz	a0,6000275a <core::fmt::num::imp::fmt_u32+0x244>
6000276c:	bf49                	j	600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
6000276e:	8caa                	mv	s9,a0
60002770:	8532                	mv	a0,a2
60002772:	a031                	j	6000277e <core::fmt::num::imp::fmt_u32+0x268>
60002774:	00150593          	addi	a1,a0,1
60002778:	8105                	srli	a0,a0,0x1
6000277a:	0015dc93          	srli	s9,a1,0x1
6000277e:	000bac03          	lw	s8,0(s7)
60002782:	004bad03          	lw	s10,4(s7)
60002786:	01cba483          	lw	s1,28(s7)
6000278a:	00150413          	addi	s0,a0,1
6000278e:	147d                	addi	s0,s0,-1
60002790:	c809                	beqz	s0,600027a2 <core::fmt::num::imp::fmt_u32+0x28c>
60002792:	010d2603          	lw	a2,16(s10) # 50010 <.Lline_table_start0+0x4b09a>
60002796:	8562                	mv	a0,s8
60002798:	85a6                	mv	a1,s1
6000279a:	9602                	jalr	a2
6000279c:	d96d                	beqz	a0,6000278e <core::fmt::num::imp::fmt_u32+0x278>
6000279e:	4b05                	li	s6,1
600027a0:	bfb9                	j	600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
600027a2:	00110537          	lui	a0,0x110
600027a6:	4b05                	li	s6,1
600027a8:	f4a48be3          	beq	s1,a0,600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
600027ac:	8562                	mv	a0,s8
600027ae:	85ea                	mv	a1,s10
600027b0:	8652                	mv	a2,s4
600027b2:	86d6                	mv	a3,s5
600027b4:	00000097          	auipc	ra,0x0
600027b8:	056080e7          	jalr	86(ra) # 6000280a <core::fmt::Formatter::pad_integral::write_prefix>
600027bc:	f129                	bnez	a0,600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
600027be:	00cd2683          	lw	a3,12(s10)
600027c2:	8562                	mv	a0,s8
600027c4:	85ca                	mv	a1,s2
600027c6:	864e                	mv	a2,s3
600027c8:	9682                	jalr	a3
600027ca:	f915                	bnez	a0,600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
600027cc:	4401                	li	s0,0
600027ce:	028c8a63          	beq	s9,s0,60002802 <core::fmt::num::imp::fmt_u32+0x2ec>
600027d2:	010d2603          	lw	a2,16(s10)
600027d6:	0405                	addi	s0,s0,1
600027d8:	8562                	mv	a0,s8
600027da:	85a6                	mv	a1,s1
600027dc:	9602                	jalr	a2
600027de:	d965                	beqz	a0,600027ce <core::fmt::num::imp::fmt_u32+0x2b8>
600027e0:	fff40513          	addi	a0,s0,-1
600027e4:	a005                	j	60002804 <core::fmt::num::imp::fmt_u32+0x2ee>
600027e6:	00cda683          	lw	a3,12(s11)
600027ea:	8562                	mv	a0,s8
600027ec:	85ca                	mv	a1,s2
600027ee:	864e                	mv	a2,s3
600027f0:	9682                	jalr	a3
600027f2:	f511                	bnez	a0,600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
600027f4:	4b01                	li	s6,0
600027f6:	4502                	lw	a0,0(sp)
600027f8:	00abae23          	sw	a0,28(s7)
600027fc:	03ab8023          	sb	s10,32(s7)
60002800:	bdfd                	j	600026fe <core::fmt::num::imp::fmt_u32+0x1e8>
60002802:	8566                	mv	a0,s9
60002804:	01953b33          	sltu	s6,a0,s9
60002808:	bddd                	j	600026fe <core::fmt::num::imp::fmt_u32+0x1e8>

6000280a <core::fmt::Formatter::pad_integral::write_prefix>:
6000280a:	1141                	addi	sp,sp,-16
6000280c:	c606                	sw	ra,12(sp)
6000280e:	c422                	sw	s0,8(sp)
60002810:	c226                	sw	s1,4(sp)
60002812:	c04a                	sw	s2,0(sp)
60002814:	00110737          	lui	a4,0x110
60002818:	8436                	mv	s0,a3
6000281a:	84ae                	mv	s1,a1
6000281c:	892a                	mv	s2,a0
6000281e:	00e60963          	beq	a2,a4,60002830 <core::fmt::Formatter::pad_integral::write_prefix+0x26>
60002822:	4894                	lw	a3,16(s1)
60002824:	854a                	mv	a0,s2
60002826:	85b2                	mv	a1,a2
60002828:	9682                	jalr	a3
6000282a:	85aa                	mv	a1,a0
6000282c:	4505                	li	a0,1
6000282e:	ed89                	bnez	a1,60002848 <core::fmt::Formatter::pad_integral::write_prefix+0x3e>
60002830:	c819                	beqz	s0,60002846 <core::fmt::Formatter::pad_integral::write_prefix+0x3c>
60002832:	44dc                	lw	a5,12(s1)
60002834:	854a                	mv	a0,s2
60002836:	85a2                	mv	a1,s0
60002838:	4601                	li	a2,0
6000283a:	40b2                	lw	ra,12(sp)
6000283c:	4422                	lw	s0,8(sp)
6000283e:	4492                	lw	s1,4(sp)
60002840:	4902                	lw	s2,0(sp)
60002842:	0141                	addi	sp,sp,16
60002844:	8782                	jr	a5
60002846:	4501                	li	a0,0
60002848:	40b2                	lw	ra,12(sp)
6000284a:	4422                	lw	s0,8(sp)
6000284c:	4492                	lw	s1,4(sp)
6000284e:	4902                	lw	s2,0(sp)
60002850:	0141                	addi	sp,sp,16
60002852:	8082                	ret

60002854 <core::fmt::Formatter::pad>:
60002854:	7179                	addi	sp,sp,-48
60002856:	d606                	sw	ra,44(sp)
60002858:	d422                	sw	s0,40(sp)
6000285a:	d226                	sw	s1,36(sp)
6000285c:	d04a                	sw	s2,32(sp)
6000285e:	ce4e                	sw	s3,28(sp)
60002860:	cc52                	sw	s4,24(sp)
60002862:	ca56                	sw	s5,20(sp)
60002864:	c85a                	sw	s6,16(sp)
60002866:	c65e                	sw	s7,12(sp)
60002868:	00852283          	lw	t0,8(a0) # 110008 <.Lline_table_start0+0x10b092>
6000286c:	4914                	lw	a3,16(a0)
6000286e:	fff28713          	addi	a4,t0,-1
60002872:	00e03733          	snez	a4,a4
60002876:	fff68793          	addi	a5,a3,-1
6000287a:	00f037b3          	snez	a5,a5
6000287e:	8f7d                	and	a4,a4,a5
60002880:	8932                	mv	s2,a2
60002882:	89ae                	mv	s3,a1
60002884:	1a071663          	bnez	a4,60002a30 <core::fmt::Formatter::pad+0x1dc>
60002888:	4585                	li	a1,1
6000288a:	10b69b63          	bne	a3,a1,600029a0 <core::fmt::Formatter::pad+0x14c>
6000288e:	4950                	lw	a2,20(a0)
60002890:	4581                	li	a1,0
60002892:	01298e33          	add	t3,s3,s2
60002896:	00160793          	addi	a5,a2,1
6000289a:	00110337          	lui	t1,0x110
6000289e:	0df00893          	li	a7,223
600028a2:	0f000813          	li	a6,240
600028a6:	864e                	mv	a2,s3
600028a8:	a801                	j	600028b8 <core::fmt::Formatter::pad+0x64>
600028aa:	00160693          	addi	a3,a2,1
600028ae:	8d91                	sub	a1,a1,a2
600028b0:	95b6                	add	a1,a1,a3
600028b2:	8636                	mv	a2,a3
600028b4:	0e640663          	beq	s0,t1,600029a0 <core::fmt::Formatter::pad+0x14c>
600028b8:	17fd                	addi	a5,a5,-1
600028ba:	cba5                	beqz	a5,6000292a <core::fmt::Formatter::pad+0xd6>
600028bc:	0fc60263          	beq	a2,t3,600029a0 <core::fmt::Formatter::pad+0x14c>
600028c0:	00060683          	lb	a3,0(a2)
600028c4:	0ff6f413          	zext.b	s0,a3
600028c8:	fe06d1e3          	bgez	a3,600028aa <core::fmt::Formatter::pad+0x56>
600028cc:	00164683          	lbu	a3,1(a2)
600028d0:	01f47493          	andi	s1,s0,31
600028d4:	03f6f713          	andi	a4,a3,63
600028d8:	0288fc63          	bgeu	a7,s0,60002910 <core::fmt::Formatter::pad+0xbc>
600028dc:	00264683          	lbu	a3,2(a2)
600028e0:	071a                	slli	a4,a4,0x6
600028e2:	03f6f693          	andi	a3,a3,63
600028e6:	00d763b3          	or	t2,a4,a3
600028ea:	03046963          	bltu	s0,a6,6000291c <core::fmt::Formatter::pad+0xc8>
600028ee:	00364683          	lbu	a3,3(a2)
600028f2:	01d49713          	slli	a4,s1,0x1d
600028f6:	832d                	srli	a4,a4,0xb
600028f8:	00639493          	slli	s1,t2,0x6
600028fc:	03f6f693          	andi	a3,a3,63
60002900:	8ec5                	or	a3,a3,s1
60002902:	00e6e433          	or	s0,a3,a4
60002906:	08640d63          	beq	s0,t1,600029a0 <core::fmt::Formatter::pad+0x14c>
6000290a:	00460693          	addi	a3,a2,4
6000290e:	b745                	j	600028ae <core::fmt::Formatter::pad+0x5a>
60002910:	00260693          	addi	a3,a2,2
60002914:	049a                	slli	s1,s1,0x6
60002916:	00e4e433          	or	s0,s1,a4
6000291a:	bf51                	j	600028ae <core::fmt::Formatter::pad+0x5a>
6000291c:	00360693          	addi	a3,a2,3
60002920:	00c49713          	slli	a4,s1,0xc
60002924:	00e3e433          	or	s0,t2,a4
60002928:	b759                	j	600028ae <core::fmt::Formatter::pad+0x5a>
6000292a:	07c60b63          	beq	a2,t3,600029a0 <core::fmt::Formatter::pad+0x14c>
6000292e:	00060683          	lb	a3,0(a2)
60002932:	0406d363          	bgez	a3,60002978 <core::fmt::Formatter::pad+0x124>
60002936:	0ff6f693          	zext.b	a3,a3
6000293a:	0e000713          	li	a4,224
6000293e:	02e6ed63          	bltu	a3,a4,60002978 <core::fmt::Formatter::pad+0x124>
60002942:	0f000713          	li	a4,240
60002946:	02e6e963          	bltu	a3,a4,60002978 <core::fmt::Formatter::pad+0x124>
6000294a:	00164703          	lbu	a4,1(a2)
6000294e:	00264783          	lbu	a5,2(a2)
60002952:	03f77713          	andi	a4,a4,63
60002956:	03f7f793          	andi	a5,a5,63
6000295a:	00364603          	lbu	a2,3(a2)
6000295e:	06f6                	slli	a3,a3,0x1d
60002960:	82ad                	srli	a3,a3,0xb
60002962:	0732                	slli	a4,a4,0xc
60002964:	079a                	slli	a5,a5,0x6
60002966:	8f5d                	or	a4,a4,a5
60002968:	03f67613          	andi	a2,a2,63
6000296c:	8e59                	or	a2,a2,a4
6000296e:	8e55                	or	a2,a2,a3
60002970:	001106b7          	lui	a3,0x110
60002974:	02d60663          	beq	a2,a3,600029a0 <core::fmt::Formatter::pad+0x14c>
60002978:	c185                	beqz	a1,60002998 <core::fmt::Formatter::pad+0x144>
6000297a:	0125fd63          	bgeu	a1,s2,60002994 <core::fmt::Formatter::pad+0x140>
6000297e:	00b98633          	add	a2,s3,a1
60002982:	00060603          	lb	a2,0(a2)
60002986:	fc000693          	li	a3,-64
6000298a:	00d65763          	bge	a2,a3,60002998 <core::fmt::Formatter::pad+0x144>
6000298e:	4601                	li	a2,0
60002990:	e611                	bnez	a2,6000299c <core::fmt::Formatter::pad+0x148>
60002992:	a039                	j	600029a0 <core::fmt::Formatter::pad+0x14c>
60002994:	ff259de3          	bne	a1,s2,6000298e <core::fmt::Formatter::pad+0x13a>
60002998:	864e                	mv	a2,s3
6000299a:	c219                	beqz	a2,600029a0 <core::fmt::Formatter::pad+0x14c>
6000299c:	892e                	mv	s2,a1
6000299e:	89b2                	mv	s3,a2
600029a0:	08028863          	beqz	t0,60002a30 <core::fmt::Formatter::pad+0x1dc>
600029a4:	00c52803          	lw	a6,12(a0)
600029a8:	45c1                	li	a1,16
600029aa:	02b97263          	bgeu	s2,a1,600029ce <core::fmt::Formatter::pad+0x17a>
600029ae:	4601                	li	a2,0
600029b0:	04090e63          	beqz	s2,60002a0c <core::fmt::Formatter::pad+0x1b8>
600029b4:	85ca                	mv	a1,s2
600029b6:	86ce                	mv	a3,s3
600029b8:	00068703          	lb	a4,0(a3) # 110000 <.Lline_table_start0+0x10b08a>
600029bc:	0685                	addi	a3,a3,1
600029be:	fc072713          	slti	a4,a4,-64
600029c2:	00174713          	xori	a4,a4,1
600029c6:	15fd                	addi	a1,a1,-1
600029c8:	963a                	add	a2,a2,a4
600029ca:	f5fd                	bnez	a1,600029b8 <core::fmt::Formatter::pad+0x164>
600029cc:	a081                	j	60002a0c <core::fmt::Formatter::pad+0x1b8>
600029ce:	00398593          	addi	a1,s3,3 # 50003 <.Lline_table_start0+0x4b08d>
600029d2:	ffc5f793          	andi	a5,a1,-4
600029d6:	413786b3          	sub	a3,a5,s3
600029da:	00d96c63          	bltu	s2,a3,600029f2 <core::fmt::Formatter::pad+0x19e>
600029de:	40d905b3          	sub	a1,s2,a3
600029e2:	0045b613          	sltiu	a2,a1,4
600029e6:	0056b713          	sltiu	a4,a3,5
600029ea:	00174713          	xori	a4,a4,1
600029ee:	8e59                	or	a2,a2,a4
600029f0:	c279                	beqz	a2,60002ab6 <core::fmt::Formatter::pad+0x262>
600029f2:	4601                	li	a2,0
600029f4:	85ca                	mv	a1,s2
600029f6:	86ce                	mv	a3,s3
600029f8:	00068703          	lb	a4,0(a3)
600029fc:	0685                	addi	a3,a3,1
600029fe:	fc072713          	slti	a4,a4,-64
60002a02:	00174713          	xori	a4,a4,1
60002a06:	15fd                	addi	a1,a1,-1
60002a08:	963a                	add	a2,a2,a4
60002a0a:	f5fd                	bnez	a1,600029f8 <core::fmt::Formatter::pad+0x1a4>
60002a0c:	03067263          	bgeu	a2,a6,60002a30 <core::fmt::Formatter::pad+0x1dc>
60002a10:	02054583          	lbu	a1,32(a0)
60002a14:	470d                	li	a4,3
60002a16:	4681                	li	a3,0
60002a18:	00e58363          	beq	a1,a4,60002a1e <core::fmt::Formatter::pad+0x1ca>
60002a1c:	86ae                	mv	a3,a1
60002a1e:	8a8d                	andi	a3,a3,3
60002a20:	40c805b3          	sub	a1,a6,a2
60002a24:	c695                	beqz	a3,60002a50 <core::fmt::Formatter::pad+0x1fc>
60002a26:	4605                	li	a2,1
60002a28:	02c69763          	bne	a3,a2,60002a56 <core::fmt::Formatter::pad+0x202>
60002a2c:	4a81                	li	s5,0
60002a2e:	a80d                	j	60002a60 <core::fmt::Formatter::pad+0x20c>
60002a30:	414c                	lw	a1,4(a0)
60002a32:	4108                	lw	a0,0(a0)
60002a34:	45dc                	lw	a5,12(a1)
60002a36:	85ce                	mv	a1,s3
60002a38:	864a                	mv	a2,s2
60002a3a:	50b2                	lw	ra,44(sp)
60002a3c:	5422                	lw	s0,40(sp)
60002a3e:	5492                	lw	s1,36(sp)
60002a40:	5902                	lw	s2,32(sp)
60002a42:	49f2                	lw	s3,28(sp)
60002a44:	4a62                	lw	s4,24(sp)
60002a46:	4ad2                	lw	s5,20(sp)
60002a48:	4b42                	lw	s6,16(sp)
60002a4a:	4bb2                	lw	s7,12(sp)
60002a4c:	6145                	addi	sp,sp,48
60002a4e:	8782                	jr	a5
60002a50:	8aae                	mv	s5,a1
60002a52:	85b6                	mv	a1,a3
60002a54:	a031                	j	60002a60 <core::fmt::Formatter::pad+0x20c>
60002a56:	00158613          	addi	a2,a1,1
60002a5a:	8185                	srli	a1,a1,0x1
60002a5c:	00165a93          	srli	s5,a2,0x1
60002a60:	00052b03          	lw	s6,0(a0)
60002a64:	00452b83          	lw	s7,4(a0)
60002a68:	4d44                	lw	s1,28(a0)
60002a6a:	00158413          	addi	s0,a1,1
60002a6e:	147d                	addi	s0,s0,-1
60002a70:	c809                	beqz	s0,60002a82 <core::fmt::Formatter::pad+0x22e>
60002a72:	010ba603          	lw	a2,16(s7)
60002a76:	855a                	mv	a0,s6
60002a78:	85a6                	mv	a1,s1
60002a7a:	9602                	jalr	a2
60002a7c:	d96d                	beqz	a0,60002a6e <core::fmt::Formatter::pad+0x21a>
60002a7e:	4a05                	li	s4,1
60002a80:	a2b5                	j	60002bec <core::fmt::Formatter::pad+0x398>
60002a82:	00110537          	lui	a0,0x110
60002a86:	4a05                	li	s4,1
60002a88:	16a48263          	beq	s1,a0,60002bec <core::fmt::Formatter::pad+0x398>
60002a8c:	00cba683          	lw	a3,12(s7)
60002a90:	855a                	mv	a0,s6
60002a92:	85ce                	mv	a1,s3
60002a94:	864a                	mv	a2,s2
60002a96:	9682                	jalr	a3
60002a98:	14051a63          	bnez	a0,60002bec <core::fmt::Formatter::pad+0x398>
60002a9c:	4401                	li	s0,0
60002a9e:	148a8463          	beq	s5,s0,60002be6 <core::fmt::Formatter::pad+0x392>
60002aa2:	010ba603          	lw	a2,16(s7)
60002aa6:	0405                	addi	s0,s0,1
60002aa8:	855a                	mv	a0,s6
60002aaa:	85a6                	mv	a1,s1
60002aac:	9602                	jalr	a2
60002aae:	d965                	beqz	a0,60002a9e <core::fmt::Formatter::pad+0x24a>
60002ab0:	fff40513          	addi	a0,s0,-1
60002ab4:	aa15                	j	60002be8 <core::fmt::Formatter::pad+0x394>
60002ab6:	0035f713          	andi	a4,a1,3
60002aba:	4601                	li	a2,0
60002abc:	01378f63          	beq	a5,s3,60002ada <core::fmt::Formatter::pad+0x286>
60002ac0:	40f987b3          	sub	a5,s3,a5
60002ac4:	84ce                	mv	s1,s3
60002ac6:	00048403          	lb	s0,0(s1)
60002aca:	0485                	addi	s1,s1,1
60002acc:	fc042413          	slti	s0,s0,-64
60002ad0:	00144413          	xori	s0,s0,1
60002ad4:	0785                	addi	a5,a5,1
60002ad6:	9622                	add	a2,a2,s0
60002ad8:	f7fd                	bnez	a5,60002ac6 <core::fmt::Formatter::pad+0x272>
60002ada:	96ce                	add	a3,a3,s3
60002adc:	4481                	li	s1,0
60002ade:	cf11                	beqz	a4,60002afa <core::fmt::Formatter::pad+0x2a6>
60002ae0:	ffc5f793          	andi	a5,a1,-4
60002ae4:	97b6                	add	a5,a5,a3
60002ae6:	00078403          	lb	s0,0(a5)
60002aea:	0785                	addi	a5,a5,1
60002aec:	fc042413          	slti	s0,s0,-64
60002af0:	00144413          	xori	s0,s0,1
60002af4:	177d                	addi	a4,a4,-1 # 10ffff <.Lline_table_start0+0x10b089>
60002af6:	94a2                	add	s1,s1,s0
60002af8:	f77d                	bnez	a4,60002ae6 <core::fmt::Formatter::pad+0x292>
60002afa:	0025d713          	srli	a4,a1,0x2
60002afe:	010105b7          	lui	a1,0x1010
60002b02:	10158793          	addi	a5,a1,257 # 1010101 <.Lline_table_start0+0x100b18b>
60002b06:	00ff05b7          	lui	a1,0xff0
60002b0a:	0ff58293          	addi	t0,a1,255 # ff00ff <.Lline_table_start0+0xfeb189>
60002b0e:	65c1                	lui	a1,0x10
60002b10:	00158893          	addi	a7,a1,1 # 10001 <.Lline_table_start0+0xb08b>
60002b14:	9626                	add	a2,a2,s1
60002b16:	a01d                	j	60002b3c <core::fmt::Formatter::pad+0x2e8>
60002b18:	002e1693          	slli	a3,t3,0x2
60002b1c:	969a                	add	a3,a3,t1
60002b1e:	41c38733          	sub	a4,t2,t3
60002b22:	003e7493          	andi	s1,t3,3
60002b26:	0055f433          	and	s0,a1,t0
60002b2a:	81a1                	srli	a1,a1,0x8
60002b2c:	0055f5b3          	and	a1,a1,t0
60002b30:	95a2                	add	a1,a1,s0
60002b32:	031585b3          	mul	a1,a1,a7
60002b36:	81c1                	srli	a1,a1,0x10
60002b38:	962e                	add	a2,a2,a1
60002b3a:	ecad                	bnez	s1,60002bb4 <core::fmt::Formatter::pad+0x360>
60002b3c:	ec0708e3          	beqz	a4,60002a0c <core::fmt::Formatter::pad+0x1b8>
60002b40:	83ba                	mv	t2,a4
60002b42:	8336                	mv	t1,a3
60002b44:	0c000593          	li	a1,192
60002b48:	8e3a                	mv	t3,a4
60002b4a:	00b76463          	bltu	a4,a1,60002b52 <core::fmt::Formatter::pad+0x2fe>
60002b4e:	0c000e13          	li	t3,192
60002b52:	0fce7593          	andi	a1,t3,252
60002b56:	00259693          	slli	a3,a1,0x2
60002b5a:	00d30eb3          	add	t4,t1,a3
60002b5e:	ddcd                	beqz	a1,60002b18 <core::fmt::Formatter::pad+0x2c4>
60002b60:	4581                	li	a1,0
60002b62:	869a                	mv	a3,t1
60002b64:	dad5                	beqz	a3,60002b18 <core::fmt::Formatter::pad+0x2c4>
60002b66:	4298                	lw	a4,0(a3)
60002b68:	fff74493          	not	s1,a4
60002b6c:	809d                	srli	s1,s1,0x7
60002b6e:	8319                	srli	a4,a4,0x6
60002b70:	42c0                	lw	s0,4(a3)
60002b72:	8f45                	or	a4,a4,s1
60002b74:	8f7d                	and	a4,a4,a5
60002b76:	95ba                	add	a1,a1,a4
60002b78:	fff44713          	not	a4,s0
60002b7c:	831d                	srli	a4,a4,0x7
60002b7e:	00645493          	srli	s1,s0,0x6
60002b82:	4680                	lw	s0,8(a3)
60002b84:	8f45                	or	a4,a4,s1
60002b86:	8f7d                	and	a4,a4,a5
60002b88:	95ba                	add	a1,a1,a4
60002b8a:	fff44713          	not	a4,s0
60002b8e:	831d                	srli	a4,a4,0x7
60002b90:	00645493          	srli	s1,s0,0x6
60002b94:	46c0                	lw	s0,12(a3)
60002b96:	8f45                	or	a4,a4,s1
60002b98:	8f7d                	and	a4,a4,a5
60002b9a:	95ba                	add	a1,a1,a4
60002b9c:	fff44713          	not	a4,s0
60002ba0:	831d                	srli	a4,a4,0x7
60002ba2:	00645493          	srli	s1,s0,0x6
60002ba6:	8f45                	or	a4,a4,s1
60002ba8:	8f7d                	and	a4,a4,a5
60002baa:	06c1                	addi	a3,a3,16
60002bac:	95ba                	add	a1,a1,a4
60002bae:	fbd69be3          	bne	a3,t4,60002b64 <core::fmt::Formatter::pad+0x310>
60002bb2:	b79d                	j	60002b18 <core::fmt::Formatter::pad+0x2c4>
60002bb4:	04030863          	beqz	t1,60002c04 <core::fmt::Formatter::pad+0x3b0>
60002bb8:	0c000593          	li	a1,192
60002bbc:	00b3e463          	bltu	t2,a1,60002bc4 <core::fmt::Formatter::pad+0x370>
60002bc0:	0c000393          	li	t2,192
60002bc4:	4581                	li	a1,0
60002bc6:	0033f693          	andi	a3,t2,3
60002bca:	068a                	slli	a3,a3,0x2
60002bcc:	000ea703          	lw	a4,0(t4)
60002bd0:	0e91                	addi	t4,t4,4
60002bd2:	fff74493          	not	s1,a4
60002bd6:	809d                	srli	s1,s1,0x7
60002bd8:	8319                	srli	a4,a4,0x6
60002bda:	8f45                	or	a4,a4,s1
60002bdc:	8f7d                	and	a4,a4,a5
60002bde:	16f1                	addi	a3,a3,-4
60002be0:	95ba                	add	a1,a1,a4
60002be2:	f6ed                	bnez	a3,60002bcc <core::fmt::Formatter::pad+0x378>
60002be4:	a00d                	j	60002c06 <core::fmt::Formatter::pad+0x3b2>
60002be6:	8556                	mv	a0,s5
60002be8:	01553a33          	sltu	s4,a0,s5
60002bec:	8552                	mv	a0,s4
60002bee:	50b2                	lw	ra,44(sp)
60002bf0:	5422                	lw	s0,40(sp)
60002bf2:	5492                	lw	s1,36(sp)
60002bf4:	5902                	lw	s2,32(sp)
60002bf6:	49f2                	lw	s3,28(sp)
60002bf8:	4a62                	lw	s4,24(sp)
60002bfa:	4ad2                	lw	s5,20(sp)
60002bfc:	4b42                	lw	s6,16(sp)
60002bfe:	4bb2                	lw	s7,12(sp)
60002c00:	6145                	addi	sp,sp,48
60002c02:	8082                	ret
60002c04:	4581                	li	a1,0
60002c06:	0055f6b3          	and	a3,a1,t0
60002c0a:	81a1                	srli	a1,a1,0x8
60002c0c:	0055f5b3          	and	a1,a1,t0
60002c10:	95b6                	add	a1,a1,a3
60002c12:	031585b3          	mul	a1,a1,a7
60002c16:	81c1                	srli	a1,a1,0x10
60002c18:	962e                	add	a2,a2,a1
60002c1a:	bbcd                	j	60002a0c <core::fmt::Formatter::pad+0x1b8>

60002c1c <core::panicking::panic>:
60002c1c:	7179                	addi	sp,sp,-48
60002c1e:	d606                	sw	ra,44(sp)
60002c20:	d02a                	sw	a0,32(sp)
60002c22:	d22e                	sw	a1,36(sp)
60002c24:	1008                	addi	a0,sp,32
60002c26:	c82a                	sw	a0,16(sp)
60002c28:	4505                	li	a0,1
60002c2a:	ca2a                	sw	a0,20(sp)
60002c2c:	c402                	sw	zero,8(sp)
60002c2e:	60003537          	lui	a0,0x60003
60002c32:	51450513          	addi	a0,a0,1300 # 60003514 <.Lanon.2158d0578dda08147993e5787a6dfcb6.207>
60002c36:	cc2a                	sw	a0,24(sp)
60002c38:	ce02                	sw	zero,28(sp)
60002c3a:	0028                	addi	a0,sp,8
60002c3c:	85b2                	mv	a1,a2
60002c3e:	00000097          	auipc	ra,0x0
60002c42:	85c080e7          	jalr	-1956(ra) # 6000249a <core::panicking::panic_fmt>
	...

60002c48 <<&T as core::fmt::Display>::fmt>:
60002c48:	4114                	lw	a3,0(a0)
60002c4a:	4150                	lw	a2,4(a0)
60002c4c:	852e                	mv	a0,a1
60002c4e:	85b6                	mv	a1,a3
60002c50:	00000317          	auipc	t1,0x0
60002c54:	c0430067          	jr	-1020(t1) # 60002854 <core::fmt::Formatter::pad>

60002c58 <<&T as core::fmt::Debug>::fmt>:
60002c58:	4150                	lw	a2,4(a0)
60002c5a:	4108                	lw	a0,0(a0)
60002c5c:	465c                	lw	a5,12(a2)
60002c5e:	8782                	jr	a5

60002c60 <core::result::unwrap_failed>:
60002c60:	7139                	addi	sp,sp,-64
60002c62:	de06                	sw	ra,60(sp)
60002c64:	600036b7          	lui	a3,0x60003
60002c68:	e2c68693          	addi	a3,a3,-468 # 60002e2c <.Lanon.01042f9e07bac0588b13af07786e0e0c.1>
60002c6c:	c036                	sw	a3,0(sp)
60002c6e:	02b00693          	li	a3,43
60002c72:	c236                	sw	a3,4(sp)
60002c74:	c42a                	sw	a0,8(sp)
60002c76:	c62e                	sw	a1,12(sp)
60002c78:	850a                	mv	a0,sp
60002c7a:	d42a                	sw	a0,40(sp)
60002c7c:	60003537          	lui	a0,0x60003
60002c80:	c4850513          	addi	a0,a0,-952 # 60002c48 <<&T as core::fmt::Display>::fmt>
60002c84:	d62a                	sw	a0,44(sp)
60002c86:	0028                	addi	a0,sp,8
60002c88:	d82a                	sw	a0,48(sp)
60002c8a:	60003537          	lui	a0,0x60003
60002c8e:	c5850513          	addi	a0,a0,-936 # 60002c58 <<&T as core::fmt::Debug>::fmt>
60002c92:	da2a                	sw	a0,52(sp)
60002c94:	60003537          	lui	a0,0x60003
60002c98:	54c50513          	addi	a0,a0,1356 # 6000354c <.Lanon.2158d0578dda08147993e5787a6dfcb6.288>
60002c9c:	cc2a                	sw	a0,24(sp)
60002c9e:	4509                	li	a0,2
60002ca0:	ce2a                	sw	a0,28(sp)
60002ca2:	c802                	sw	zero,16(sp)
60002ca4:	102c                	addi	a1,sp,40
60002ca6:	d02e                	sw	a1,32(sp)
60002ca8:	d22a                	sw	a0,36(sp)
60002caa:	0808                	addi	a0,sp,16
60002cac:	85b2                	mv	a1,a2
60002cae:	fffff097          	auipc	ra,0xfffff
60002cb2:	7ec080e7          	jalr	2028(ra) # 6000249a <core::panicking::panic_fmt>
	...

60002cb8 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>:
60002cb8:	00054503          	lbu	a0,0(a0)
60002cbc:	00000317          	auipc	t1,0x0
60002cc0:	85a30067          	jr	-1958(t1) # 60002516 <core::fmt::num::imp::fmt_u32>

60002cc4 <__set_sie>:
60002cc4:	10452073          	csrs	sie,a0
60002cc8:	8082                	ret

60002cca <__read_sepc>:
60002cca:	14102573          	csrr	a0,sepc
60002cce:	8082                	ret

60002cd0 <__read_scause>:
60002cd0:	14202573          	csrr	a0,scause
60002cd4:	8082                	ret

60002cd6 <__read_stval>:
60002cd6:	14302573          	csrr	a0,stval
60002cda:	8082                	ret

60002cdc <__read_vsim>:
60002cdc:	9c002573          	csrr	a0,0x9c0
60002ce0:	8082                	ret

60002ce2 <__write_vsim>:
60002ce2:	9c051073          	csrw	0x9c0,a0
60002ce6:	8082                	ret

60002ce8 <__read_vsip>:
60002ce8:	dc002573          	csrr	a0,0xdc0
60002cec:	8082                	ret

60002cee <memset>:
60002cee:	00000317          	auipc	t1,0x0
60002cf2:	0be30067          	jr	190(t1) # 60002dac <compiler_builtins::mem::memset>

60002cf6 <memcpy>:
60002cf6:	00000317          	auipc	t1,0x0
60002cfa:	00830067          	jr	8(t1) # 60002cfe <compiler_builtins::mem::memcpy>

60002cfe <compiler_builtins::mem::memcpy>:
60002cfe:	46bd                	li	a3,15
60002d00:	06c6fa63          	bgeu	a3,a2,60002d74 <compiler_builtins::mem::memcpy+0x76>
60002d04:	40a006b3          	neg	a3,a0
60002d08:	0036f813          	andi	a6,a3,3
60002d0c:	010503b3          	add	t2,a0,a6
60002d10:	00080c63          	beqz	a6,60002d28 <compiler_builtins::mem::memcpy+0x2a>
60002d14:	87aa                	mv	a5,a0
60002d16:	86ae                	mv	a3,a1
60002d18:	00068703          	lb	a4,0(a3)
60002d1c:	00e78023          	sb	a4,0(a5)
60002d20:	0785                	addi	a5,a5,1
60002d22:	0685                	addi	a3,a3,1
60002d24:	fe77eae3          	bltu	a5,t2,60002d18 <compiler_builtins::mem::memcpy+0x1a>
60002d28:	010588b3          	add	a7,a1,a6
60002d2c:	41060833          	sub	a6,a2,a6
60002d30:	ffc87293          	andi	t0,a6,-4
60002d34:	0038f593          	andi	a1,a7,3
60002d38:	005386b3          	add	a3,t2,t0
60002d3c:	cd9d                	beqz	a1,60002d7a <compiler_builtins::mem::memcpy+0x7c>
60002d3e:	04505863          	blez	t0,60002d8e <compiler_builtins::mem::memcpy+0x90>
60002d42:	00359313          	slli	t1,a1,0x3
60002d46:	ffc8f713          	andi	a4,a7,-4
60002d4a:	4310                	lw	a2,0(a4)
60002d4c:	406005b3          	neg	a1,t1
60002d50:	0185fe13          	andi	t3,a1,24
60002d54:	00470793          	addi	a5,a4,4
60002d58:	4398                	lw	a4,0(a5)
60002d5a:	00665633          	srl	a2,a2,t1
60002d5e:	01c715b3          	sll	a1,a4,t3
60002d62:	8dd1                	or	a1,a1,a2
60002d64:	00b3a023          	sw	a1,0(t2)
60002d68:	0391                	addi	t2,t2,4
60002d6a:	0791                	addi	a5,a5,4
60002d6c:	863a                	mv	a2,a4
60002d6e:	fed3e5e3          	bltu	t2,a3,60002d58 <compiler_builtins::mem::memcpy+0x5a>
60002d72:	a831                	j	60002d8e <compiler_builtins::mem::memcpy+0x90>
60002d74:	86aa                	mv	a3,a0
60002d76:	e20d                	bnez	a2,60002d98 <compiler_builtins::mem::memcpy+0x9a>
60002d78:	a80d                	j	60002daa <compiler_builtins::mem::memcpy+0xac>
60002d7a:	00505a63          	blez	t0,60002d8e <compiler_builtins::mem::memcpy+0x90>
60002d7e:	85c6                	mv	a1,a7
60002d80:	4190                	lw	a2,0(a1)
60002d82:	00c3a023          	sw	a2,0(t2)
60002d86:	0391                	addi	t2,t2,4
60002d88:	0591                	addi	a1,a1,4
60002d8a:	fed3ebe3          	bltu	t2,a3,60002d80 <compiler_builtins::mem::memcpy+0x82>
60002d8e:	005885b3          	add	a1,a7,t0
60002d92:	00387613          	andi	a2,a6,3
60002d96:	ca11                	beqz	a2,60002daa <compiler_builtins::mem::memcpy+0xac>
60002d98:	9636                	add	a2,a2,a3
60002d9a:	00058703          	lb	a4,0(a1)
60002d9e:	00e68023          	sb	a4,0(a3)
60002da2:	0685                	addi	a3,a3,1
60002da4:	0585                	addi	a1,a1,1
60002da6:	fec6eae3          	bltu	a3,a2,60002d9a <compiler_builtins::mem::memcpy+0x9c>
60002daa:	8082                	ret

60002dac <compiler_builtins::mem::memset>:
60002dac:	46bd                	li	a3,15
60002dae:	04c6f463          	bgeu	a3,a2,60002df6 <compiler_builtins::mem::memset+0x4a>
60002db2:	40a006b3          	neg	a3,a0
60002db6:	8a8d                	andi	a3,a3,3
60002db8:	00d50733          	add	a4,a0,a3
60002dbc:	c699                	beqz	a3,60002dca <compiler_builtins::mem::memset+0x1e>
60002dbe:	87aa                	mv	a5,a0
60002dc0:	00b78023          	sb	a1,0(a5)
60002dc4:	0785                	addi	a5,a5,1
60002dc6:	fee7ede3          	bltu	a5,a4,60002dc0 <compiler_builtins::mem::memset+0x14>
60002dca:	8e15                	sub	a2,a2,a3
60002dcc:	ffc67793          	andi	a5,a2,-4
60002dd0:	00f706b3          	add	a3,a4,a5
60002dd4:	00f05e63          	blez	a5,60002df0 <compiler_builtins::mem::memset+0x44>
60002dd8:	0ff5f813          	zext.b	a6,a1
60002ddc:	010107b7          	lui	a5,0x1010
60002de0:	10178793          	addi	a5,a5,257 # 1010101 <.Lline_table_start0+0x100b18b>
60002de4:	02f807b3          	mul	a5,a6,a5
60002de8:	c31c                	sw	a5,0(a4)
60002dea:	0711                	addi	a4,a4,4
60002dec:	fed76ee3          	bltu	a4,a3,60002de8 <compiler_builtins::mem::memset+0x3c>
60002df0:	8a0d                	andi	a2,a2,3
60002df2:	e601                	bnez	a2,60002dfa <compiler_builtins::mem::memset+0x4e>
60002df4:	a809                	j	60002e06 <compiler_builtins::mem::memset+0x5a>
60002df6:	86aa                	mv	a3,a0
60002df8:	c619                	beqz	a2,60002e06 <compiler_builtins::mem::memset+0x5a>
60002dfa:	9636                	add	a2,a2,a3
60002dfc:	00b68023          	sb	a1,0(a3)
60002e00:	0685                	addi	a3,a3,1
60002e02:	fec6ede3          	bltu	a3,a2,60002dfc <compiler_builtins::mem::memset+0x50>
60002e06:	8082                	ret
