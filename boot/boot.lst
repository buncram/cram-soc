
target/riscv32imac-unknown-none-elf/release/betrusted-boot:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text.dummy   00000000  60000000  60000000  00000134  2**0
                  ALLOC, READONLY
  1 .text         0000008c  60000000  60000000  00001000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  6000008c  6000008c  0000108c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000000  61000000  61000000  00001098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000000  61000000  61000000  00002000  2**0
                  ALLOC
  5 .stack        00004000  61000000  61000000  00002000  2**0
                  ALLOC
  6 .heap         00000000  61004000  61004000  00002000  2**0
                  ALLOC
  7 .debug_loc    000005e3  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000003c7  00000000  00000000  000025e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000259e  00000000  00000000  000029aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000070  00000000  00000000  00004f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000000c0  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    00001c6b  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_pubnames 00000e6e  00000000  00000000  00006ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_pubtypes 0000091d  00000000  00000000  00007b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .riscv.attributes 0000002b  00000000  00000000  0000846e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000f8  00000000  00000000  0000849c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006e9  00000000  00000000  00008594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000013  00000000  00000000  00008c7d  2**0
                  CONTENTS, READONLY
60000038 00000054 T rust_entry
60000000 00000034 T _start
60000034 00000004 T abort

target/riscv32imac-unknown-none-elf/release/betrusted-boot:     file format elf32-littleriscv


Disassembly of section .text:

60000000 <_start>:
// Assembly stubs for entering into the loader, and exiting it.

// Note: inline constants are not yet stable in Rust: https://github.com/rust-lang/rust/pull/104087
#[link_section = ".text.init"]
#[export_name = "_start"]
pub extern "C" fn _start() {
60000000:	6100e537          	lui	a0,0x6100e
60000004:	0571                	addi	a0,a0,28 # 6100e01c <_estack+0xa01c>
60000006:	610105b7          	lui	a1,0x61010
    unsafe {
        asm! (
6000000a:	deadc337          	lui	t1,0xdeadc
6000000e:	0de30313          	addi	t1,t1,222 # deadc0de <_lcdfb+0x2eadc0de>
60000012:	82aa                	mv	t0,a0
60000014:	83ae                	mv	t2,a1
60000016:	0062a023          	sw	t1,0(t0)
6000001a:	0291                	addi	t0,t0,4
6000001c:	fe72ede3          	bltu	t0,t2,60000016 <_start+0x16>
60000020:	812e                	mv	sp,a1

60000022 <.Lpcrel_hi0>:
60000022:	00000297          	auipc	t0,0x0
60000026:	fde28293          	addi	t0,t0,-34 # 60000000 <_start>
6000002a:	30529073          	csrw	mtvec,t0
6000002e:	00a0006f          	j	60000038 <rust_entry>
	...

60000034 <abort>:
#[link_section = ".text.init"]
#[export_name = "abort"]
/// This is only used in debug mode
pub extern "C" fn abort() {
    unsafe {
        asm! (
60000034:	a001                	j	60000034 <abort>
	...

60000038 <rust_entry>:
        duart.puts("hello world\n");
    }
}

#[export_name = "rust_entry"]
pub unsafe extern "C" fn rust_entry(_unused1: *const usize, _unused2: u32) -> ! {
60000038:	600dc537          	lui	a0,0x600dc
6000003c:	0de50513          	addi	a0,a0,222 # 600dc0de <_etext+0xdc046>
60000040:	401085b7          	lui	a1,0x40108
60000044:	c188                	sw	a0,0(a1)
60000046:	0330000f          	fence	rw,rw
6000004a:	5801a537          	lui	a0,0x5801a
6000004e:	4108                	lw	a0,0(a0)
60000050:	c188                	sw	a0,0(a1)
60000052:	0330000f          	fence	rw,rw
60000056:	40001537          	lui	a0,0x40001
6000005a:	4585                	li	a1,1
6000005c:	c14c                	sw	a1,4(a0)
6000005e:	0330000f          	fence	rw,rw
60000062:	600005b7          	lui	a1,0x60000
60000066:	08c58593          	addi	a1,a1,140 # 6000008c <.Lanon.01042f9e07bac0588b13af07786e0e0c.1>
6000006a:	00c58613          	addi	a2,a1,12
6000006e:	86ae                	mv	a3,a1
        }
        unsafe {(duart::HW_DUART_BASE as *mut u32).write_volatile(ch as u32) };
    }
    pub fn puts(&mut self, s: &str) {
        for c in s.as_bytes() {
            self.putc(*c as char);
60000070:	0006c703          	lbu	a4,0(a3)
60000074:	0330000f          	fence	rw,rw
60000078:	451c                	lw	a5,8(a0)
        while self.csr.rf(duart::UART_BUSY_BUSY) != 0 {
6000007a:	8b85                	andi	a5,a5,1
6000007c:	ffe5                	bnez	a5,60000074 <rust_entry+0x3c>
6000007e:	451c                	lw	a5,8(a0)
        while unsafe{(duart::HW_DUART_BASE as *mut u32).add(2).read_volatile()} != 0 {
60000080:	fffd                	bnez	a5,6000007e <rust_entry+0x46>
60000082:	0685                	addi	a3,a3,1
60000084:	c118                	sw	a4,0(a0)
60000086:	fec695e3          	bne	a3,a2,60000070 <rust_entry+0x38>
6000008a:	b7d5                	j	6000006e <rust_entry+0x36>
