
target/riscv32imac-unknown-none-elf/release/betrusted-boot:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text.dummy   00000000  60000000  60000000  00000134  2**0
                  ALLOC, READONLY
  1 .text         00002d9a  60000000  60000000  00001000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  60002d9c  60002d9c  00003d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000000  61000000  61000000  00004784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000000  61000000  61000000  00005000  2**0
                  ALLOC
  5 .stack        00004000  61000000  61000000  00005000  2**0
                  ALLOC
  6 .heap         00000000  61004000  61004000  00005000  2**0
                  ALLOC
  7 .debug_loc    00005e9f  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000893  00000000  00000000  0000ae9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001514f  00000000  00000000  0000b732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000002b0  00000000  00000000  00020881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000025a0  00000000  00000000  00020b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    0000f2bd  00000000  00000000  000230d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_pubnames 000047aa  00000000  00000000  0003238e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_pubtypes 000031a7  00000000  00000000  00036b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .riscv.attributes 0000002b  00000000  00000000  00039cdf  2**0
                  CONTENTS, READONLY
 16 .debug_line   00005a15  00000000  00000000  00039d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000013  00000000  00000000  0003f71f  2**0
                  CONTENTS, READONLY
600013fe 00000fea T rust_entry
600027e6 000003c8 t core::fmt::Formatter::pad
600024a8 000002f4 t core::fmt::num::imp::fmt_u32
6000005c 000002d0 t pio::Assembler<_>::assemble_program
60000d86 00000284 t betrusted_boot::Gfx::msg
600007c6 00000228 t betrusted_boot::satp::satp_setup
60000562 0000017e t betrusted_boot::pio::spi_test_core
60000afa 00000158 T _start_trap_rust
60000466 000000fc t betrusted_boot::pio::PioSm::add_program
60000cca 000000bc t betrusted_boot::Gfx::hex_word
6000129a 000000bc t betrusted_boot::ramtest_fast
60002c90 000000ae t compiler_builtins::mem::memcpy
60001356 000000a8 t betrusted_boot::ramtest_lfsr
6000070e 00000098 t betrusted_boot::debug::Uart::print_hex_word
6000033e 00000092 t <arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt
600010f6 0000008e t betrusted_boot::ramtest_fast
60001184 0000008c t betrusted_boot::ramtest_fast
60001210 0000008a t betrusted_boot::ramtest_fast
6000106e 00000088 t betrusted_boot::ramtest_fast_specialcase1
60000c56 00000074 t rust_begin_unwind
6000100a 00000064 t betrusted_boot::ramtest_all
600009f8 00000062 T _start_trap
60002d3e 0000005c t compiler_builtins::mem::memset
60000a5a 0000005a T _start_trap_aligned
60002bf2 00000058 t core::result::unwrap_failed
600003d0 0000004e t arrayvec::arrayvec::ArrayVec<T,_>::push
6000279c 0000004a t core::fmt::Formatter::pad_integral::write_prefix
6000041e 00000048 t betrusted_boot::pio::PioSm::find_offset_for_program
60000ab4 00000046 T _resume_context
6000245e 00000040 t core::panicking::panic_bounds_check
60000000 00000034 T _start
600006e0 0000002e t betrusted_boot::debug::Uart::newline
60002bae 0000002c t core::panicking::panic
600023e8 00000026 t <betrusted_boot::pio::PioError as core::fmt::Debug>::fmt
600007a6 00000020 t betrusted_boot::debug::Uart::tiny_write_str
6000240e 0000001e t arrayvec::arrayvec::extend_panic
6000242c 0000001e t core::panicking::panic_fmt
6000244c 00000012 t <T as core::any::Any>::type_id
6000032c 00000010 t <&T as core::fmt::Display>::fmt
60002bda 00000010 t <&T as core::fmt::Display>::fmt
60002c4a 0000000c t core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
60000038 0000000c t xous_riscv::register::sie::set_sext
6000249e 0000000a t core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt
600009ee 0000000a t betrusted_boot::satp::to_user_mode
60002c80 00000008 t memset
60002c88 00000008 t memcpy
60002bea 00000008 t <&T as core::fmt::Debug>::fmt
60000054 00000008 t xous_riscv::register::vexriscv::sim::read
6000004c 00000008 t xous_riscv::register::stval::read
60000044 00000008 t xous_riscv::register::sepc::read
60000c52 00000004 T start_loader
60000034 00000004 T abort
6000033c 00000002 t core::ptr::drop_in_place<betrusted_boot::pio::PioError>
6000244a 00000002 t core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>

target/riscv32imac-unknown-none-elf/release/betrusted-boot:     file format elf32-littleriscv


Disassembly of section .text:

60000000 <_start>:
// Assembly stubs for entering into the loader, and exiting it.

// Note: inline constants are not yet stable in Rust: https://github.com/rust-lang/rust/pull/104087
#[link_section = ".text.init"]
#[export_name = "_start"]
pub extern "C" fn _start() {
60000000:	6100e537          	lui	a0,0x6100e
60000004:	0571                	addi	a0,a0,28 # 6100e01c <_estack+0xa01c>
60000006:	610105b7          	lui	a1,0x61010
    unsafe {
        asm! (
6000000a:	deadc337          	lui	t1,0xdeadc
6000000e:	0de30313          	addi	t1,t1,222 # deadc0de <_lcdfb+0x2eadc0de>
60000012:	82aa                	mv	t0,a0
60000014:	83ae                	mv	t2,a1
60000016:	0062a023          	sw	t1,0(t0)
6000001a:	0291                	addi	t0,t0,4
6000001c:	fe72ede3          	bltu	t0,t2,60000016 <_start+0x16>
60000020:	812e                	mv	sp,a1

60000022 <.Lpcrel_hi0>:
60000022:	00000297          	auipc	t0,0x0
60000026:	fde28293          	addi	t0,t0,-34 # 60000000 <_start>
6000002a:	30529073          	csrw	mtvec,t0
6000002e:	3d00106f          	j	600013fe <rust_entry>
	...

60000034 <abort>:
#[link_section = ".text.init"]
#[export_name = "abort"]
/// This is only used in debug mode
pub extern "C" fn abort() {
    unsafe {
        asm! (
60000034:	a001                	j	60000034 <abort>
	...

60000038 <xous_riscv::register::sie::set_sext>:
                () => {
                    extern "C" {
                        fn $asm_fn(bits: usize);
                    }

                    $asm_fn(bits);
60000038:	20000513          	li	a0,512
6000003c:	00003317          	auipc	t1,0x3
60000040:	c1a30067          	jr	-998(t1) # 60002c56 <__set_sie>

60000044 <xous_riscv::register::sepc::read>:
                    $asm_fn()
60000044:	00003317          	auipc	t1,0x3
60000048:	c1830067          	jr	-1000(t1) # 60002c5c <__read_sepc>

6000004c <xous_riscv::register::stval::read>:
6000004c:	00003317          	auipc	t1,0x3
60000050:	c1c30067          	jr	-996(t1) # 60002c68 <__read_stval>

60000054 <xous_riscv::register::vexriscv::sim::read>:
60000054:	00003317          	auipc	t1,0x3
60000058:	c1a30067          	jr	-998(t1) # 60002c6e <__read_vsim>

6000005c <pio::Assembler<_>::assemble_program>:
    /// Assemble the program into [`Program`].
    ///
    /// The program contains the instructions and side-set info set. You can directly compile into a program with
    /// correct wrapping with [`Self::assemble_with_wrap`], or you can set the wrapping after the compilation with
    /// [`Program::set_wrap`].
    pub fn assemble_program(self) -> Program<PROGRAM_SIZE> {
6000005c:	7175                	addi	sp,sp,-144
    /// let mut array = ArrayVec::from([1, 2, 3]);
    /// array.pop();
    /// assert_eq!(array.len(), 2);
    /// ```
    #[inline(always)]
    pub const fn len(&self) -> usize { self.len as usize }
6000005e:	c706                	sw	ra,140(sp)
60000060:	c522                	sw	s0,136(sp)
60000062:	c326                	sw	s1,132(sp)
60000064:	c14a                	sw	s2,128(sp)
60000066:	dece                	sw	s3,124(sp)
60000068:	1005a703          	lw	a4,256(a1) # 61010100 <_estack+0xc100>
        let side_set = self.side_set;
6000006c:	1045a983          	lw	s3,260(a1)
60000070:	892a                	mv	s2,a0
60000072:	cb25                	beqz	a4,600000e2 <pio::Assembler<_>::assemble_program+0x86>
60000074:	4e81                	li	t4,0
60000076:	10058813          	addi	a6,a1,256
6000007a:	0ff9f513          	zext.b	a0,s3
6000007e:	4615                	li	a2,5
60000080:	41360633          	sub	a2,a2,s3
60000084:	00767693          	andi	a3,a2,7
60000088:	57fd                	li	a5,-1
6000008a:	00d796b3          	sll	a3,a5,a3
6000008e:	fff6c693          	not	a3,a3
60000092:	0089d293          	srli	t0,s3,0x8
60000096:	00f67313          	andi	t1,a2,15
6000009a:	00ff0637          	lui	a2,0xff0
6000009e:	00c9f3b3          	and	t2,s3,a2
600000a2:	0013b613          	seqz	a2,t2
600000a6:	00a03533          	snez	a0,a0
600000aa:	00c578b3          	and	a7,a0,a2
        match self {
600000ae:	059d                	addi	a1,a1,7
600000b0:	ffc5c503          	lbu	a0,-4(a1)
600000b4:	00371413          	slli	s0,a4,0x3
600000b8:	60003637          	lui	a2,0x60003
600000bc:	77060613          	addi	a2,a2,1904 # 60003770 <.Lswitch.table.pio::Assembler<_>::assemble_program>
600000c0:	00151713          	slli	a4,a0,0x1
600000c4:	963a                	add	a2,a2,a4
600000c6:	050a                	slli	a0,a0,0x2
600000c8:	60003737          	lui	a4,0x60003
600000cc:	d9c70713          	addi	a4,a4,-612 # 60002d9c <.LJTI4_0>
600000d0:	953a                	add	a0,a0,a4
600000d2:	4108                	lw	a0,0(a0)
600000d4:	00065e03          	lhu	t3,0(a2)
600000d8:	8f0a                	mv	t5,sp
600000da:	c4ce                	sw	s3,72(sp)
        let delay_max = (1 << (5 - side_set.bits)) - 1;
600000dc:	04d107a3          	sb	a3,79(sp)
600000e0:	8502                	jr	a0
            ArrayVec { xs: MaybeUninit::uninit().assume_init(), len: 0 }
600000e2:	04010813          	addi	a6,sp,64
600000e6:	aa81                	j	60000236 <.LBB4_24+0xe>

600000e8 <.LBB4_3>:
                ((*if_full as u8) << 1 | (*block as u8), 0)
600000e8:	ffd58603          	lb	a2,-3(a1)
600000ec:	ffe58783          	lb	a5,-2(a1)
600000f0:	4501                	li	a0,0
600000f2:	0606                	slli	a2,a2,0x1
600000f4:	00f664b3          	or	s1,a2,a5
600000f8:	a065                	j	600001a0 <.LBB4_12+0x32>

600000fa <.LBB4_4>:
                (1 << 2 | (*if_empty as u8) << 1 | (*block as u8), 0)
600000fa:	ffd58603          	lb	a2,-3(a1)
600000fe:	ffe58783          	lb	a5,-2(a1)
60000102:	4501                	li	a0,0
60000104:	0606                	slli	a2,a2,0x1
60000106:	8e5d                	or	a2,a2,a5
60000108:	00466493          	ori	s1,a2,4
6000010c:	a851                	j	600001a0 <.LBB4_12+0x32>

6000010e <.LBB4_5>:
            } => (*destination as u8, (*op as u8) << 3 | (*source as u8)),
6000010e:	fff58503          	lb	a0,-1(a1)
60000112:	ffe58603          	lb	a2,-2(a1)
60000116:	ffd5c483          	lbu	s1,-3(a1)
6000011a:	050e                	slli	a0,a0,0x3
6000011c:	8d51                	or	a0,a0,a2
6000011e:	a049                	j	600001a0 <.LBB4_12+0x32>

60000120 <.LBB4_6>:
60000120:	ffe5c483          	lbu	s1,-2(a1)
60000124:	ffd5c503          	lbu	a0,-3(a1)
60000128:	a8a5                	j	600001a0 <.LBB4_12+0x32>

6000012a <.LBB4_7>:
                if *index > 7 {
6000012a:	ffd5c503          	lbu	a0,-3(a1)
6000012e:	461d                	li	a2,7
60000130:	00a66d63          	bltu	a2,a0,6000014a <.LBB4_7+0x20>
                    (*clear as u8) << 1 | (*wait as u8),
60000134:	ffe58603          	lb	a2,-2(a1)
60000138:	fff58783          	lb	a5,-1(a1)
                    *index | (if *relative { 0b10000 } else { 0 }),
6000013c:	0005c703          	lbu	a4,0(a1)
                    (*clear as u8) << 1 | (*wait as u8),
60000140:	0606                	slli	a2,a2,0x1
60000142:	00f664b3          	or	s1,a2,a5
                    *index | (if *relative { 0b10000 } else { 0 }),
60000146:	cf29                	beqz	a4,600001a0 <.LBB4_12+0x32>
60000148:	a819                	j	6000015e <.LBB4_7+0x34>
                    panic!("invalid interrupt flags");
6000014a:	60003537          	lui	a0,0x60003
6000014e:	5c450513          	addi	a0,a0,1476 # 600035c4 <.Lanon.5512643252fccb46d23d1b099a6fce8b.8>
60000152:	600035b7          	lui	a1,0x60003
60000156:	62c58613          	addi	a2,a1,1580 # 6000362c <.Lanon.5512643252fccb46d23d1b099a6fce8b.10>
6000015a:	45dd                	li	a1,23
6000015c:	a021                	j	60000164 <.LBB4_7+0x3a>
6000015e:	01056513          	ori	a0,a0,16
60000162:	a83d                	j	600001a0 <.LBB4_12+0x32>
60000164:	00003097          	auipc	ra,0x3
60000168:	a4a080e7          	jalr	-1462(ra) # 60002bae <core::panicking::panic>
	...

6000016e <.LBB4_12>:
                if *relative && !matches!(*source, WaitSource::IRQ) {
6000016e:	0005c783          	lbu	a5,0(a1)
60000172:	fff5c483          	lbu	s1,-1(a1)
60000176:	0017b513          	seqz	a0,a5
6000017a:	ffe48613          	addi	a2,s1,-2
6000017e:	00163613          	seqz	a2,a2
60000182:	8d51                	or	a0,a0,a2
60000184:	c575                	beqz	a0,60000270 <.LBB4_24+0x48>
                if matches!(*source, WaitSource::IRQ) && *index > 7 {
60000186:	ffe5c503          	lbu	a0,-2(a1)
6000018a:	00853713          	sltiu	a4,a0,8
6000018e:	00174713          	xori	a4,a4,1
60000192:	8e79                	and	a2,a2,a4
60000194:	ea6d                	bnez	a2,60000286 <.LBB4_24+0x5e>
                    (*polarity) << 2 | (*source as u8),
60000196:	ffd58603          	lb	a2,-3(a1)
6000019a:	060a                	slli	a2,a2,0x2
6000019c:	8cd1                	or	s1,s1,a2
                    *index | (if *relative { 0b10000 } else { 0 }),
6000019e:	f3e1                	bnez	a5,6000015e <.LBB4_7+0x34>
        if self.delay > delay_max {
600001a0:	ffb5c783          	lbu	a5,-5(a1)
600001a4:	0ef6ec63          	bltu	a3,a5,6000029c <.LBB4_24+0x74>
600001a8:	0ff4f613          	zext.b	a2,s1
        let side_set = if let Some(s) = self.side_set {
600001ac:	ff95c703          	lbu	a4,-7(a1)
600001b0:	0616                	slli	a2,a2,0x5
600001b2:	01c66633          	or	a2,a2,t3
600001b6:	0ff57513          	zext.b	a0,a0
600001ba:	8d51                	or	a0,a0,a2
600001bc:	cf11                	beqz	a4,600001d8 <.LBB4_12+0x6a>
600001be:	ffa5c603          	lbu	a2,-6(a1)
600001c2:	0ff2f713          	zext.b	a4,t0
            if s > side_set.max {
600001c6:	10c76c63          	bltu	a4,a2,600002de <.LBB4_24+0xb6>
            let s = (s as u16) << (5 - side_set.bits);
600001ca:	006614b3          	sll	s1,a2,t1
600001ce:	00038863          	beqz	t2,600001de <.LBB4_12+0x70>
600001d2:	0104e493          	ori	s1,s1,16
600001d6:	a021                	j	600001de <.LBB4_12+0x70>
600001d8:	4481                	li	s1,0
        } else if side_set.bits > 0 && !side_set.opt {
600001da:	12089f63          	bnez	a7,60000318 <.LBB4_24+0xf0>
600001de:	02000613          	li	a2,32
600001e2:	0ece8963          	beq	t4,a2,600002d4 <.LBB4_24+0xac>
        data |= ((self.delay as u16) | side_set) << 8;
600001e6:	00f4e633          	or	a2,s1,a5
600001ea:	0622                	slli	a2,a2,0x8
600001ec:	8d51                	or	a0,a0,a2
600001ee:	00af1023          	sh	a0,0(t5)
600001f2:	1461                	addi	s0,s0,-8
600001f4:	0e85                	addi	t4,t4,1
600001f6:	cc1d                	beqz	s0,60000234 <.LBB4_24+0xc>
600001f8:	05a1                	addi	a1,a1,8
        match self {
600001fa:	ffc5c503          	lbu	a0,-4(a1)
600001fe:	60003637          	lui	a2,0x60003
60000202:	77060613          	addi	a2,a2,1904 # 60003770 <.Lswitch.table.pio::Assembler<_>::assemble_program>
60000206:	00151793          	slli	a5,a0,0x1
6000020a:	963e                	add	a2,a2,a5
6000020c:	050a                	slli	a0,a0,0x2
6000020e:	600037b7          	lui	a5,0x60003
60000212:	d9c78793          	addi	a5,a5,-612 # 60002d9c <.LJTI4_0>
60000216:	953e                	add	a0,a0,a5
60000218:	4108                	lw	a0,0(a0)
6000021a:	00065e03          	lhu	t3,0(a2)
6000021e:	0f09                	addi	t5,t5,2
60000220:	c4ce                	sw	s3,72(sp)
        let delay_max = (1 << (5 - side_set.bits)) - 1;
60000222:	04d107a3          	sb	a3,79(sp)
60000226:	8502                	jr	a0

60000228 <.LBB4_24>:
            } => (*destination as u8, *bit_count & 0b11111),
60000228:	ffd5c503          	lbu	a0,-3(a1)
6000022c:	ffe5c483          	lbu	s1,-2(a1)
60000230:	897d                	andi	a0,a0,31
60000232:	b7bd                	j	600001a0 <.LBB4_12+0x32>
        // user's iterator, without dropping any elements on the floor.
        let mut guard = ScopeExitGuard {
            value: &mut self.len,
            data: len,
            f: move |&len, self_len| {
                **self_len = len as LenUint;
60000234:	c0f6                	sw	t4,64(sp)
60000236:	00082023          	sw	zero,0(a6)
    pub const fn len(&self) -> usize { self.len as usize }
6000023a:	04010503          	lb	a0,64(sp)
    }
6000023e:	fff50413          	addi	s0,a0,-1
            source: (code.len() - 1) as u8,
            target: 0,
        };

        Program {
            code,
60000242:	858a                	mv	a1,sp
60000244:	04400613          	li	a2,68
60000248:	854a                	mv	a0,s2
6000024a:	00003097          	auipc	ra,0x3
6000024e:	a3e080e7          	jalr	-1474(ra) # 60002c88 <memcpy>
        Program {
60000252:	04090523          	sb	zero,74(s2)
60000256:	04890423          	sb	s0,72(s2)
6000025a:	040904a3          	sb	zero,73(s2)
6000025e:	05392223          	sw	s3,68(s2)
            origin: None,
            side_set,
            wrap,
        }
    }
60000262:	40ba                	lw	ra,140(sp)
60000264:	442a                	lw	s0,136(sp)
60000266:	449a                	lw	s1,132(sp)
60000268:	490a                	lw	s2,128(sp)
6000026a:	59f6                	lw	s3,124(sp)
6000026c:	6149                	addi	sp,sp,144
6000026e:	8082                	ret
                    panic!("relative flag should only be used with WaitSource::IRQ");
60000270:	60003537          	lui	a0,0x60003
60000274:	63c50513          	addi	a0,a0,1596 # 6000363c <.Lanon.5512643252fccb46d23d1b099a6fce8b.11>
60000278:	600035b7          	lui	a1,0x60003
6000027c:	67458613          	addi	a2,a1,1652 # 60003674 <.Lanon.5512643252fccb46d23d1b099a6fce8b.12>
60000280:	03600593          	li	a1,54
60000284:	b5c5                	j	60000164 <.LBB4_7+0x3a>
                    panic!("Index for WaitSource::IRQ should be in range 0..=7");
60000286:	60003537          	lui	a0,0x60003
6000028a:	68450513          	addi	a0,a0,1668 # 60003684 <.Lanon.5512643252fccb46d23d1b099a6fce8b.13>
6000028e:	600035b7          	lui	a1,0x60003
60000292:	6b858613          	addi	a2,a1,1720 # 600036b8 <.Lanon.5512643252fccb46d23d1b099a6fce8b.14>
60000296:	03200593          	li	a1,50
6000029a:	b5e9                	j	60000164 <.LBB4_7+0x3a>
            panic!(
6000029c:	ffb58513          	addi	a0,a1,-5
600002a0:	c8aa                	sw	a0,80(sp)
600002a2:	60003537          	lui	a0,0x60003
600002a6:	c4a50513          	addi	a0,a0,-950 # 60002c4a <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
600002aa:	caaa                	sw	a0,84(sp)
600002ac:	04f10593          	addi	a1,sp,79
600002b0:	ccae                	sw	a1,88(sp)
600002b2:	ceaa                	sw	a0,92(sp)
600002b4:	60003537          	lui	a0,0x60003
600002b8:	6e850513          	addi	a0,a0,1768 # 600036e8 <.Lanon.5512643252fccb46d23d1b099a6fce8b.17>
600002bc:	d4aa                	sw	a0,104(sp)
600002be:	4509                	li	a0,2
600002c0:	d6aa                	sw	a0,108(sp)
600002c2:	d082                	sw	zero,96(sp)
600002c4:	088c                	addi	a1,sp,80
600002c6:	d8ae                	sw	a1,112(sp)
600002c8:	daaa                	sw	a0,116(sp)
600002ca:	60003537          	lui	a0,0x60003
600002ce:	6f850593          	addi	a1,a0,1784 # 600036f8 <.Lanon.5512643252fccb46d23d1b099a6fce8b.18>
600002d2:	a82d                	j	6000030c <.LBB4_24+0xe4>
            }
        };
        let mut iter = iterable.into_iter();
        loop {
            if let Some(elt) = iter.next() {
                if ptr == end_ptr && CHECK { extend_panic(); }
600002d4:	00002097          	auipc	ra,0x2
600002d8:	13a080e7          	jalr	314(ra) # 6000240e <arrayvec::arrayvec::extend_panic>
600002dc:	0000                	unimp
            if s > side_set.max {
600002de:	04910513          	addi	a0,sp,73
                panic!("'side' set must be >=0 and <={}", side_set.max);
600002e2:	c8aa                	sw	a0,80(sp)
600002e4:	60003537          	lui	a0,0x60003
600002e8:	c4a50513          	addi	a0,a0,-950 # 60002c4a <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
600002ec:	caaa                	sw	a0,84(sp)
600002ee:	60003537          	lui	a0,0x60003
600002f2:	75850513          	addi	a0,a0,1880 # 60003758 <.Lanon.5512643252fccb46d23d1b099a6fce8b.22>
600002f6:	d4aa                	sw	a0,104(sp)
600002f8:	4505                	li	a0,1
600002fa:	d6aa                	sw	a0,108(sp)
600002fc:	d082                	sw	zero,96(sp)
600002fe:	088c                	addi	a1,sp,80
60000300:	d8ae                	sw	a1,112(sp)
60000302:	daaa                	sw	a0,116(sp)
60000304:	60003537          	lui	a0,0x60003
60000308:	76050593          	addi	a1,a0,1888 # 60003760 <.Lanon.5512643252fccb46d23d1b099a6fce8b.23>
6000030c:	1088                	addi	a0,sp,96
6000030e:	00002097          	auipc	ra,0x2
60000312:	11e080e7          	jalr	286(ra) # 6000242c <core::panicking::panic_fmt>
60000316:	0000                	unimp
            panic!("instruction requires 'side' set");
60000318:	60003537          	lui	a0,0x60003
6000031c:	70850513          	addi	a0,a0,1800 # 60003708 <.Lanon.5512643252fccb46d23d1b099a6fce8b.19>
60000320:	600035b7          	lui	a1,0x60003
60000324:	72858613          	addi	a2,a1,1832 # 60003728 <.Lanon.5512643252fccb46d23d1b099a6fce8b.20>
60000328:	45fd                	li	a1,31
6000032a:	bd2d                	j	60000164 <.LBB4_7+0x3a>

6000032c <<&T as core::fmt::Display>::fmt>:
6000032c:	4114                	lw	a3,0(a0)
6000032e:	4150                	lw	a2,4(a0)
60000330:	852e                	mv	a0,a1
60000332:	85b6                	mv	a1,a3
60000334:	00002317          	auipc	t1,0x2
60000338:	4b230067          	jr	1202(t1) # 600027e6 <core::fmt::Formatter::pad>

6000033c <core::ptr::drop_in_place<betrusted_boot::pio::PioError>>:
6000033c:	8082                	ret

6000033e <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt>:
        write!(f, "{}", CAPERROR)
    }
}

impl<T> fmt::Debug for CapacityError<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
6000033e:	715d                	addi	sp,sp,-80
60000340:	c686                	sw	ra,76(sp)
60000342:	c4a2                	sw	s0,72(sp)
60000344:	c2a6                	sw	s1,68(sp)
60000346:	c0ca                	sw	s2,64(sp)
60000348:	de4e                	sw	s3,60(sp)
6000034a:	4401                	li	s0,0
        write!(f, "{}: {}", "CapacityError", CAPERROR)
6000034c:	60003537          	lui	a0,0x60003
60000350:	e4850513          	addi	a0,a0,-440 # 60002e48 <.Lanon.01042f9e07bac0588b13af07786e0e0c.8>
60000354:	c42a                	sw	a0,8(sp)
60000356:	60000537          	lui	a0,0x60000
6000035a:	32c50513          	addi	a0,a0,812 # 6000032c <<&T as core::fmt::Display>::fmt>
6000035e:	c62a                	sw	a0,12(sp)
60000360:	60003637          	lui	a2,0x60003
60000364:	e6860613          	addi	a2,a2,-408 # 60002e68 <.Lanon.01042f9e07bac0588b13af07786e0e0c.10>
60000368:	c832                	sw	a2,16(sp)
6000036a:	ca2a                	sw	a0,20(sp)
6000036c:	4188                	lw	a0,0(a1)
6000036e:	41cc                	lw	a1,4(a1)
60000370:	d802                	sw	zero,48(sp)
60000372:	02000613          	li	a2,32
60000376:	da32                	sw	a2,52(sp)
60000378:	460d                	li	a2,3
6000037a:	02c10c23          	sb	a2,56(sp)
6000037e:	d002                	sw	zero,32(sp)
60000380:	d402                	sw	zero,40(sp)
60000382:	cc2a                	sw	a0,24(sp)
60000384:	ce2e                	sw	a1,28(sp)
60000386:	00810913          	addi	s2,sp,8
6000038a:	60003537          	lui	a0,0x60003
6000038e:	4ec50493          	addi	s1,a0,1260 # 600034ec <.Lanon.2158d0578dda08147993e5787a6dfcb6.288>
60000392:	49c1                	li	s3,16
60000394:	008485b3          	add	a1,s1,s0
60000398:	41d0                	lw	a2,4(a1)
6000039a:	c619                	beqz	a2,600003a8 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x6a>
6000039c:	46f2                	lw	a3,28(sp)
6000039e:	4562                	lw	a0,24(sp)
600003a0:	418c                	lw	a1,0(a1)
600003a2:	46d4                	lw	a3,12(a3)
600003a4:	9682                	jalr	a3
600003a6:	ed09                	bnez	a0,600003c0 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x82>
600003a8:	00890533          	add	a0,s2,s0
600003ac:	4150                	lw	a2,4(a0)
600003ae:	4108                	lw	a0,0(a0)
600003b0:	082c                	addi	a1,sp,24
600003b2:	9602                	jalr	a2
600003b4:	e511                	bnez	a0,600003c0 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x82>
600003b6:	0421                	addi	s0,s0,8
600003b8:	fd341ee3          	bne	s0,s3,60000394 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x56>
600003bc:	4501                	li	a0,0
600003be:	a011                	j	600003c2 <<arrayvec::errors::CapacityError<T> as core::fmt::Debug>::fmt+0x84>
600003c0:	4505                	li	a0,1
    }
600003c2:	40b6                	lw	ra,76(sp)
600003c4:	4426                	lw	s0,72(sp)
600003c6:	4496                	lw	s1,68(sp)
600003c8:	4906                	lw	s2,64(sp)
600003ca:	59f2                	lw	s3,60(sp)
600003cc:	6161                	addi	sp,sp,80
600003ce:	8082                	ret

600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>:
    pub fn push(&mut self, element: T) {
600003d0:	1141                	addi	sp,sp,-16
    pub const fn len(&self) -> usize { self.len as usize }
600003d2:	10052683          	lw	a3,256(a0)
600003d6:	477d                	li	a4,31
    fn push(&mut self, element: Self::Item) {
        self.try_push(element).unwrap()
    }

    fn try_push(&mut self, element: Self::Item) -> Result<(), CapacityError<Self::Item>> {
        if self.len() < Self::CAPACITY {
600003d8:	00d76c63          	bltu	a4,a3,600003f0 <arrayvec::arrayvec::ArrayVec<T,_>::push+0x20>
600003dc:	00369713          	slli	a4,a3,0x3
600003e0:	972a                	add	a4,a4,a0
600003e2:	c350                	sw	a2,4(a4)
600003e4:	c30c                	sw	a1,0(a4)

    unsafe fn push_unchecked(&mut self, element: Self::Item) {
        let len = self.len();
        debug_assert!(len < Self::CAPACITY);
        ptr::write(self.as_mut_ptr().add(len), element);
        self.set_len(len + 1);
600003e6:	00168593          	addi	a1,a3,1
        self.len = length as LenUint;
600003ea:	10b52023          	sw	a1,256(a0)
600003ee:	a031                	j	600003fa <arrayvec::arrayvec::ArrayVec<T,_>::push+0x2a>
            Err(CapacityError::new(element))
600003f0:	0ff5f513          	zext.b	a0,a1
600003f4:	4689                	li	a3,2
600003f6:	00d51463          	bne	a0,a3,600003fe <arrayvec::arrayvec::ArrayVec<T,_>::push+0x2e>
    }
600003fa:	0141                	addi	sp,sp,16
600003fc:	8082                	ret
600003fe:	c42e                	sw	a1,8(sp)
60000400:	c632                	sw	a2,12(sp)
60000402:	60003537          	lui	a0,0x60003
60000406:	e1850593          	addi	a1,a0,-488 # 60002e18 <.Lanon.01042f9e07bac0588b13af07786e0e0c.3>
6000040a:	60003537          	lui	a0,0x60003
6000040e:	ed050613          	addi	a2,a0,-304 # 60002ed0 <.Lanon.01042f9e07bac0588b13af07786e0e0c.12>
60000412:	0028                	addi	a0,sp,8
60000414:	00002097          	auipc	ra,0x2
60000418:	7de080e7          	jalr	2014(ra) # 60002bf2 <core::result::unwrap_failed>
	...

6000041e <betrusted_boot::pio::PioSm::find_offset_for_program>:
    pub const fn len(&self) -> usize { self.len as usize }
6000041e:	41b4                	lw	a3,64(a1)
            SmBit::Sm3 => self.pio.r(rp_pio::SFR_RXF0),
        }
    }
    fn find_offset_for_program(&self, program: &Program<RP2040_MAX_PROGRAM_SIZE>) -> Option<usize> {
        let prog_mask = (1 << program.code.len() as u32) - 1;
        if let Some(origin) = program.origin {
60000420:	04a5c703          	lbu	a4,74(a1)
60000424:	567d                	li	a2,-1
        let prog_mask = (1 << program.code.len() as u32) - 1;
60000426:	00d61633          	sll	a2,a2,a3
6000042a:	fff64613          	not	a2,a2
        if let Some(origin) = program.origin {
6000042e:	cb19                	beqz	a4,60000444 <betrusted_boot::pio::PioSm::find_offset_for_program+0x26>
60000430:	04b5c583          	lbu	a1,75(a1)
60000434:	02000713          	li	a4,32
            if origin as usize > RP2040_MAX_PROGRAM_SIZE - program.code.len() {
60000438:	40d706b3          	sub	a3,a4,a3
6000043c:	00b6ff63          	bgeu	a3,a1,6000045a <betrusted_boot::pio::PioSm::find_offset_for_program+0x3c>
60000440:	4501                	li	a0,0
                    return Some(i)
                }
            }
            None
        }
    }
60000442:	8082                	ret
60000444:	02000593          	li	a1,32
            for i in (0..(32 - program.code.len())).rev() {
60000448:	8d95                	sub	a1,a1,a3
6000044a:	d9fd                	beqz	a1,60000440 <betrusted_boot::pio::PioSm::find_offset_for_program+0x22>
6000044c:	15fd                	addi	a1,a1,-1
                if (self.used_mask & (prog_mask << i)) == 0 {
6000044e:	00b616b3          	sll	a3,a2,a1
60000452:	8ee9                	and	a3,a3,a0
60000454:	fafd                	bnez	a3,6000044a <betrusted_boot::pio::PioSm::find_offset_for_program+0x2c>
60000456:	4505                	li	a0,1
    }
60000458:	8082                	ret
                if (self.used_mask & (prog_mask << origin as u32)) != 0 {
6000045a:	00b61633          	sll	a2,a2,a1
6000045e:	8d71                	and	a0,a0,a2
60000460:	00153513          	seqz	a0,a0
    }
60000464:	8082                	ret

60000466 <betrusted_boot::pio::PioSm::add_program>:
        unsafe {
            self.pio.base.add(offset + rp_pio::SFR_INSTR_MEM0.offset()).write_volatile(data as _);
        }
    }
    /// returns the offset of the program once loaded
    pub fn add_program(
60000466:	7159                	addi	sp,sp,-112
60000468:	d686                	sw	ra,108(sp)
6000046a:	d4a2                	sw	s0,104(sp)
6000046c:	d2a6                	sw	s1,100(sp)
6000046e:	d0ca                	sw	s2,96(sp)
60000470:	cece                	sw	s3,92(sp)
60000472:	ccd2                	sw	s4,88(sp)
60000474:	cad6                	sw	s5,84(sp)
60000476:	8a2e                	mv	s4,a1
        self.find_offset_for_program(program).is_some()
60000478:	0145a983          	lw	s3,20(a1)
6000047c:	84b2                	mv	s1,a2
6000047e:	892a                	mv	s2,a0
60000480:	854e                	mv	a0,s3
60000482:	85b2                	mv	a1,a2
60000484:	00000097          	auipc	ra,0x0
60000488:	f9a080e7          	jalr	-102(ra) # 6000041e <betrusted_boot::pio::PioSm::find_offset_for_program>
6000048c:	4405                	li	s0,1
        &mut self,
        program: Program<RP2040_MAX_PROGRAM_SIZE>,
    ) -> Result<Program<RP2040_MAX_PROGRAM_SIZE>, PioError> {
        if self.can_add_program(&program) {
6000048e:	06851563          	bne	a0,s0,600004f8 <betrusted_boot::pio::PioSm::add_program+0x92>
60000492:	8aae                	mv	s5,a1
            if let Some(origin) = self.find_offset_for_program(&program) {
                let program = program.set_origin(Some(origin as u8));
60000494:	0028                	addi	a0,sp,8
60000496:	04400613          	li	a2,68
6000049a:	85a6                	mv	a1,s1
6000049c:	00002097          	auipc	ra,0x2
600004a0:	7ec080e7          	jalr	2028(ra) # 60002c88 <memcpy>
600004a4:	04849503          	lh	a0,72(s1)
600004a8:	40ec                	lw	a1,68(s1)
impl<const PROGRAM_SIZE: usize> Program<PROGRAM_SIZE> {
    /// Set the program loading location.
    ///
    /// If `None`, the program can be loaded at any location in the instruction memory.
    pub fn set_origin(self, origin: Option<u8>) -> Self {
        Self { origin, ..self }
600004aa:	04810923          	sb	s0,82(sp)
600004ae:	055109a3          	sb	s5,83(sp)
600004b2:	04a11823          	sh	a0,80(sp)
600004b6:	c6ae                	sw	a1,76(sp)
600004b8:	45a6                	lw	a1,72(sp)
600004ba:	c9a9                	beqz	a1,6000050c <betrusted_boot::pio::PioSm::add_program+0xa6>
600004bc:	010a2503          	lw	a0,16(s4)
600004c0:	002a9613          	slli	a2,s5,0x2
600004c4:	02000693          	li	a3,32
600004c8:	9532                	add	a0,a0,a2
600004ca:	8656                	mv	a2,s5
600004cc:	00dae463          	bltu	s5,a3,600004d4 <betrusted_boot::pio::PioSm::add_program+0x6e>
600004d0:	02000613          	li	a2,32
600004d4:	04850693          	addi	a3,a0,72
600004d8:	fdf60513          	addi	a0,a2,-33
600004dc:	0586                	slli	a1,a1,0x1
600004de:	0030                	addi	a2,sp,8
        assert!(offset < 32);
600004e0:	0505                	addi	a0,a0,1
600004e2:	c135                	beqz	a0,60000546 <betrusted_boot::pio::PioSm::add_program+0xe0>
                for (i, &instr) in program.code.iter().enumerate() {
600004e4:	00065703          	lhu	a4,0(a2)
600004e8:	c298                	sw	a4,0(a3)
600004ea:	0691                	addi	a3,a3,4
600004ec:	15f9                	addi	a1,a1,-2
600004ee:	0609                	addi	a2,a2,2
600004f0:	f9e5                	bnez	a1,600004e0 <betrusted_boot::pio::PioSm::add_program+0x7a>
600004f2:	4526                	lw	a0,72(sp)
600004f4:	897d                	andi	a0,a0,31
600004f6:	a821                	j	6000050e <betrusted_boot::pio::PioSm::add_program+0xa8>
600004f8:	40a8                	lw	a0,64(s1)
600004fa:	00890023          	sb	s0,0(s2)
600004fe:	4589                	li	a1,2
60000500:	04b90323          	sb	a1,70(s2)
    }

    fn truncate(&mut self, new_len: usize) {
        unsafe {
            let len = self.len();
            if new_len < len {
60000504:	c905                	beqz	a0,60000534 <betrusted_boot::pio::PioSm::add_program+0xce>
        self.len = length as LenUint;
60000506:	0404a023          	sw	zero,64(s1)
6000050a:	a02d                	j	60000534 <betrusted_boot::pio::PioSm::add_program+0xce>
6000050c:	4501                	li	a0,0
6000050e:	55fd                	li	a1,-1
                    self.write_progmem(origin + i, instr);
                }
                let prog_mask = (1 << program.code.len()) - 1;
60000510:	00a59533          	sll	a0,a1,a0
60000514:	fff54513          	not	a0,a0
                self.used_mask |= prog_mask << origin as u32;
60000518:	01551533          	sll	a0,a0,s5
6000051c:	01356533          	or	a0,a0,s3
60000520:	00aa2a23          	sw	a0,20(s4)
                Ok(program)
60000524:	002c                	addi	a1,sp,8
60000526:	04c00613          	li	a2,76
6000052a:	854a                	mv	a0,s2
6000052c:	00002097          	auipc	ra,0x2
60000530:	75c080e7          	jalr	1884(ra) # 60002c88 <memcpy>
                Err(PioError::Oom)
            }
        } else {
            Err(PioError::Oom)
        }
    }
60000534:	50b6                	lw	ra,108(sp)
60000536:	5426                	lw	s0,104(sp)
60000538:	5496                	lw	s1,100(sp)
6000053a:	5906                	lw	s2,96(sp)
6000053c:	49f6                	lw	s3,92(sp)
6000053e:	4a66                	lw	s4,88(sp)
60000540:	4ad6                	lw	s5,84(sp)
60000542:	6165                	addi	sp,sp,112
60000544:	8082                	ret
        assert!(offset < 32);
60000546:	60003537          	lui	a0,0x60003
6000054a:	ee050513          	addi	a0,a0,-288 # 60002ee0 <.Lanon.01042f9e07bac0588b13af07786e0e0c.13>
6000054e:	600035b7          	lui	a1,0x60003
60000552:	f1858613          	addi	a2,a1,-232 # 60002f18 <.Lanon.01042f9e07bac0588b13af07786e0e0c.15>
60000556:	45f5                	li	a1,29
60000558:	00002097          	auipc	ra,0x2
6000055c:	656080e7          	jalr	1622(ra) # 60002bae <core::panicking::panic>
	...

60000562 <betrusted_boot::pio::spi_test_core>:
            break
        }
    }
}

pub fn spi_test_core(pio_sm: &mut PioSm) -> bool {
60000562:	7139                	addi	sp,sp,-64
60000564:	de06                	sw	ra,60(sp)
60000566:	dc22                	sw	s0,56(sp)
60000568:	da26                	sw	s1,52(sp)
6000056a:	d84a                	sw	s2,48(sp)
6000056c:	d64e                	sw	s3,44(sp)
6000056e:	d452                	sw	s4,40(sp)
60000570:	8a2a                	mv	s4,a0
60000572:	0d100537          	lui	a0,0xd100
60000576:	5d150513          	addi	a0,a0,1489 # d1005d1 <.Lline_table_start0+0xd0fb76e>
6000057a:	40108937          	lui	s2,0x40108
6000057e:	00a92023          	sw	a0,0(s2) # 40108000 <.Lline_table_start0+0x4010319d>
60000582:	0330000f          	fence	rw,rw
60000586:	898a                	mv	s3,sp
    let mut report = CSR::new(utra::main::HW_MAIN_BASE as *mut u32);
    report.wfo(utra::main::REPORT_REPORT, 0x0D10_05D1);

    const BUF_SIZE: usize = 20;
    let mut state: u16 = 1;
    let mut tx_buf = [0u8; BUF_SIZE];
60000588:	850a                	mv	a0,sp
6000058a:	4651                	li	a2,20
6000058c:	44d1                	li	s1,20
6000058e:	4581                	li	a1,0
60000590:	00002097          	auipc	ra,0x2
60000594:	6f0080e7          	jalr	1776(ra) # 60002c80 <memset>
    let mut rx_buf = [0u8; BUF_SIZE];
60000598:	0848                	addi	a0,sp,20
6000059a:	4651                	li	a2,20
6000059c:	4581                	li	a1,0
6000059e:	00002097          	auipc	ra,0x2
600005a2:	6e2080e7          	jalr	1762(ra) # 60002c80 <memset>
600005a6:	4501                	li	a0,0
600005a8:	4585                	li	a1,1
600005aa:	00a98633          	add	a2,s3,a0
600005ae:	0505                	addi	a0,a0,1

*/
#[cfg(feature="sim")]
/// our desired test length is 512 entries, so pick an LFSR with a period of 2^9-1...
pub fn lfsr_next(state: u16) -> u16 {
    let bit = ((state >> 8) ^
600005b0:	01059693          	slli	a3,a1,0x10
600005b4:	82c1                	srli	a3,a3,0x10
600005b6:	0086d713          	srli	a4,a3,0x8
               (state >>  4)) & 1;
600005ba:	8291                	srli	a3,a3,0x4
    let bit = ((state >> 8) ^
600005bc:	8eb9                	xor	a3,a3,a4
600005be:	8a85                	andi	a3,a3,1

    ((state << 1) + bit) & 0x1_FF
600005c0:	05e2                	slli	a1,a1,0x18
600005c2:	81dd                	srli	a1,a1,0x17
600005c4:	8dd5                	or	a1,a1,a3
    // init the TX buf
    for d in tx_buf.iter_mut() {
        state = crate::lfsr_next(state);
        *d = state as u8;
600005c6:	00b60023          	sb	a1,0(a2)
        report.wfo(utra::main::REPORT_REPORT, *d as u32);
600005ca:	0ff5f613          	zext.b	a2,a1
600005ce:	00c92023          	sw	a2,0(s2)
600005d2:	0330000f          	fence	rw,rw
600005d6:	fc951ae3          	bne	a0,s1,600005aa <betrusted_boot::pio::spi_test_core+0x48>
600005da:	4301                	li	t1,0
600005dc:	4781                	li	a5,0
600005de:	4701                	li	a4,0
600005e0:	4501                	li	a0,0
600005e2:	01410813          	addi	a6,sp,20
600005e6:	888a                	mv	a7,sp
600005e8:	600035b7          	lui	a1,0x60003
600005ec:	3f858293          	addi	t0,a1,1016 # 600033f8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.40+0x4c>
600005f0:	0330000f          	fence	rw,rw
    /// Read a field from this CSR
    pub fn rf(&self, field: Field) -> T {
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);

        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
600005f4:	010a2583          	lw	a1,16(s4)
600005f8:	41d4                	lw	a3,4(a1)
        (self.pio.rf(rp_pio::SFR_FSTAT_TX_FULL) & (self.sm as u32)) != 0
600005fa:	018a2403          	lw	s0,24(s4)
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
600005fe:	82c1                	srli	a3,a3,0x10
60000600:	0086f633          	and	a2,a3,s0
60000604:	84aa                	mv	s1,a0
60000606:	869a                	mv	a3,t1
        if !pio_sm.txfifo_is_full() {
60000608:	c219                	beqz	a2,6000060e <betrusted_boot::pio::spi_test_core+0xac>
6000060a:	8336                	mv	t1,a3
6000060c:	a02d                	j	60000636 <betrusted_boot::pio::spi_test_core+0xd4>
6000060e:	4351                	li	t1,20
60000610:	4505                	li	a0,1
60000612:	02668363          	beq	a3,t1,60000638 <betrusted_boot::pio::spi_test_core+0xd6>
        match self.sm {
60000616:	00241513          	slli	a0,s0,0x2
6000061a:	9516                	add	a0,a0,t0
6000061c:	ffc52503          	lw	a0,-4(a0)
60000620:	00d88633          	add	a2,a7,a3
            if let Some(&s) = src_iter.next() {
60000624:	00064603          	lbu	a2,0(a2)
60000628:	00168313          	addi	t1,a3,1
6000062c:	050a                	slli	a0,a0,0x2
6000062e:	952e                	add	a0,a0,a1
60000630:	c110                	sw	a2,0(a0)
60000632:	0330000f          	fence	rw,rw
60000636:	8526                	mv	a0,s1
60000638:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
6000063c:	010a2583          	lw	a1,16(s4)
60000640:	41cc                	lw	a1,4(a1)
        (self.pio.rf(rp_pio::SFR_FSTAT_RX_EMPTY) & (self.sm as u32)) != 0
60000642:	018a2603          	lw	a2,24(s4)
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
60000646:	81a1                	srli	a1,a1,0x8
60000648:	8df1                	and	a1,a1,a2
        if !pio_sm.rxfifo_is_empty() {
6000064a:	c199                	beqz	a1,60000650 <betrusted_boot::pio::spi_test_core+0xee>
6000064c:	85be                	mv	a1,a5
6000064e:	a005                	j	6000066e <betrusted_boot::pio::spi_test_core+0x10c>
60000650:	45d1                	li	a1,20
60000652:	4685                	li	a3,1
60000654:	00b78e63          	beq	a5,a1,60000670 <betrusted_boot::pio::spi_test_core+0x10e>
60000658:	0330000f          	fence	rw,rw
6000065c:	010a2583          	lw	a1,16(s4)
60000660:	5190                	lw	a2,32(a1)
60000662:	00f806b3          	add	a3,a6,a5
60000666:	00178593          	addi	a1,a5,1
                *d = pio_sm.rxfifo_pull() as u8;
6000066a:	00c68023          	sb	a2,0(a3)
6000066e:	86ba                	mv	a3,a4
        if tx_done && rx_done {
60000670:	00d57633          	and	a2,a0,a3
60000674:	8a05                	andi	a2,a2,1
60000676:	87ae                	mv	a5,a1
60000678:	8736                	mv	a4,a3
6000067a:	da3d                	beqz	a2,600005f0 <betrusted_boot::pio::spi_test_core+0x8e>
6000067c:	4501                	li	a0,0
6000067e:	4785                	li	a5,1
60000680:	858a                	mv	a1,sp
60000682:	0850                	addi	a2,sp,20
60000684:	46d1                	li	a3,20
60000686:	dead0837          	lui	a6,0xdead0
6000068a:	401088b7          	lui	a7,0x40108
6000068e:	00a58733          	add	a4,a1,a0
60000692:	00a604b3          	add	s1,a2,a0
    }
    pio_spi_write8_read8_blocking(pio_sm, &tx_buf, &mut rx_buf);
    let mut pass = true;
    for (&s, &d) in tx_buf.iter().zip(rx_buf.iter()) {
60000696:	00074403          	lbu	s0,0(a4)
6000069a:	0004c703          	lbu	a4,0(s1)
6000069e:	00e40b63          	beq	s0,a4,600006b4 <betrusted_boot::pio::spi_test_core+0x152>
600006a2:	4781                	li	a5,0
        if s != d {
            report.wfo(utra::main::REPORT_REPORT, 0xDEAD_0000 | s as u32 | ((d as u32) << 8));
600006a4:	0722                	slli	a4,a4,0x8
600006a6:	8f41                	or	a4,a4,s0
600006a8:	01076733          	or	a4,a4,a6
600006ac:	00e8a023          	sw	a4,0(a7) # 40108000 <.Lline_table_start0+0x4010319d>
600006b0:	0330000f          	fence	rw,rw
600006b4:	0505                	addi	a0,a0,1
600006b6:	fcd51ce3          	bne	a0,a3,6000068e <betrusted_boot::pio::spi_test_core+0x12c>
600006ba:	600d0537          	lui	a0,0x600d0
600006be:	5d150513          	addi	a0,a0,1489 # 600d05d1 <_etext+0xcce4d>
600006c2:	401085b7          	lui	a1,0x40108
600006c6:	c188                	sw	a0,0(a1)
            pass = false;
        }
    }
    report.wfo(utra::main::REPORT_REPORT, 0x600D_05D1);
    pass
}
600006c8:	0017f513          	andi	a0,a5,1
600006cc:	0330000f          	fence	rw,rw
600006d0:	50f2                	lw	ra,60(sp)
600006d2:	5462                	lw	s0,56(sp)
600006d4:	54d2                	lw	s1,52(sp)
600006d6:	5942                	lw	s2,48(sp)
600006d8:	59b2                	lw	s3,44(sp)
600006da:	5a22                	lw	s4,40(sp)
600006dc:	6121                	addi	sp,sp,64
600006de:	8082                	ret

600006e0 <betrusted_boot::debug::Uart::newline>:
    }
    pub fn put_hex(&mut self, c: u8) {
        self.put_digit(c >> 4);
        self.put_digit(c & 0xF);
    }
    pub fn newline(&mut self) {
600006e0:	40102537          	lui	a0,0x40102
600006e4:	0330000f          	fence	rw,rw
600006e8:	414c                	lw	a1,4(a0)

    pub fn putc(&self, c: u8) {
        let base = utra::uart::HW_UART_BASE as *mut u32;
        let mut uart = CSR::new(base);
        // Wait until TXFULL is `0`
        while uart.r(utra::uart::TXFULL) != 0 {}
600006ea:	fded                	bnez	a1,600006e4 <betrusted_boot::debug::Uart::newline+0x4>
600006ec:	40102537          	lui	a0,0x40102
600006f0:	45a9                	li	a1,10
600006f2:	c10c                	sw	a1,0(a0)
600006f4:	0330000f          	fence	rw,rw
600006f8:	0330000f          	fence	rw,rw
600006fc:	414c                	lw	a1,4(a0)
600006fe:	fded                	bnez	a1,600006f8 <betrusted_boot::debug::Uart::newline+0x18>
60000700:	40102537          	lui	a0,0x40102
60000704:	45b5                	li	a1,13
60000706:	c10c                	sw	a1,0(a0)
60000708:	0330000f          	fence	rw,rw
    }
6000070c:	8082                	ret

6000070e <betrusted_boot::debug::Uart::print_hex_word>:
    pub fn print_hex_word(&mut self, word: u32) {
6000070e:	1141                	addi	sp,sp,-16
60000710:	4581                	li	a1,0
60000712:	00855613          	srli	a2,a0,0x8
60000716:	66c1                	lui	a3,0x10
60000718:	f0068693          	addi	a3,a3,-256 # ff00 <.Lline_table_start0+0xb09d>
6000071c:	8e75                	and	a2,a2,a3
6000071e:	01855693          	srli	a3,a0,0x18
60000722:	8e55                	or	a2,a2,a3
60000724:	00851693          	slli	a3,a0,0x8
60000728:	00ff0737          	lui	a4,0xff0
6000072c:	8ef9                	and	a3,a3,a4
6000072e:	0562                	slli	a0,a0,0x18
60000730:	8d55                	or	a0,a0,a3
60000732:	8d51                	or	a0,a0,a2
        for &byte in word.to_be_bytes().iter() {
60000734:	c62a                	sw	a0,12(sp)
60000736:	00c10813          	addi	a6,sp,12
6000073a:	0a000893          	li	a7,160
6000073e:	401026b7          	lui	a3,0x40102
60000742:	42a9                	li	t0,10
60000744:	4791                	li	a5,4
60000746:	00b80533          	add	a0,a6,a1
6000074a:	00054503          	lbu	a0,0(a0) # 40102000 <.Lline_table_start0+0x400fd19d>
        self.put_digit(c >> 4);
6000074e:	00455613          	srli	a2,a0,0x4
        if nyb < 10 {
60000752:	01157963          	bgeu	a0,a7,60000764 <betrusted_boot::debug::Uart::print_hex_word+0x56>
60000756:	0330000f          	fence	rw,rw
6000075a:	42d8                	lw	a4,4(a3)
        while uart.r(utra::uart::TXFULL) != 0 {}
6000075c:	ff6d                	bnez	a4,60000756 <betrusted_boot::debug::Uart::print_hex_word+0x48>
            self.putc(nyb + 0x30);
6000075e:	03066613          	ori	a2,a2,48
60000762:	a039                	j	60000770 <betrusted_boot::debug::Uart::print_hex_word+0x62>
60000764:	0330000f          	fence	rw,rw
60000768:	42d8                	lw	a4,4(a3)
        while uart.r(utra::uart::TXFULL) != 0 {}
6000076a:	ff6d                	bnez	a4,60000764 <betrusted_boot::debug::Uart::print_hex_word+0x56>
            self.putc(nyb + 0x61 - 10);
6000076c:	05760613          	addi	a2,a2,87
60000770:	c290                	sw	a2,0(a3)
        self.put_digit(c & 0xF);
60000772:	893d                	andi	a0,a0,15
60000774:	0330000f          	fence	rw,rw
        if nyb < 10 {
60000778:	00557963          	bgeu	a0,t0,6000078a <betrusted_boot::debug::Uart::print_hex_word+0x7c>
6000077c:	0330000f          	fence	rw,rw
60000780:	42d0                	lw	a2,4(a3)
        while uart.r(utra::uart::TXFULL) != 0 {}
60000782:	fe6d                	bnez	a2,6000077c <betrusted_boot::debug::Uart::print_hex_word+0x6e>
            self.putc(nyb + 0x30);
60000784:	03056513          	ori	a0,a0,48
60000788:	a039                	j	60000796 <betrusted_boot::debug::Uart::print_hex_word+0x88>
6000078a:	0330000f          	fence	rw,rw
6000078e:	42d0                	lw	a2,4(a3)
        while uart.r(utra::uart::TXFULL) != 0 {}
60000790:	fe6d                	bnez	a2,6000078a <betrusted_boot::debug::Uart::print_hex_word+0x7c>
            self.putc(nyb + 0x61 - 10);
60000792:	05750513          	addi	a0,a0,87
60000796:	0585                	addi	a1,a1,1 # 40108001 <.Lline_table_start0+0x4010319e>
60000798:	c288                	sw	a0,0(a3)
6000079a:	0330000f          	fence	rw,rw
6000079e:	faf594e3          	bne	a1,a5,60000746 <betrusted_boot::debug::Uart::print_hex_word+0x38>
    }
600007a2:	0141                	addi	sp,sp,16
600007a4:	8082                	ret

600007a6 <betrusted_boot::debug::Uart::tiny_write_str>:
600007a6:	95aa                	add	a1,a1,a0
600007a8:	40102637          	lui	a2,0x40102
600007ac:	00054683          	lbu	a3,0(a0)
600007b0:	0330000f          	fence	rw,rw
600007b4:	4258                	lw	a4,4(a2)
        while uart.r(utra::uart::TXFULL) != 0 {}
600007b6:	ff6d                	bnez	a4,600007b0 <betrusted_boot::debug::Uart::tiny_write_str+0xa>
600007b8:	0505                	addi	a0,a0,1
600007ba:	c214                	sw	a3,0(a2)
600007bc:	0330000f          	fence	rw,rw
600007c0:	feb516e3          	bne	a0,a1,600007ac <betrusted_boot::debug::Uart::tiny_write_str+0x6>

    pub fn tiny_write_str(&mut self, s: &str) {
        for c in s.bytes() {
            self.putc(c);
        }
    }
600007c4:	8082                	ret

600007c6 <betrusted_boot::satp::satp_setup>:
}

/// Very simple Sv32 setup that drops into supervisor (kernel) mode, with most
/// mappings being 1:1 between VA->PA, except for code which is remapped to address 0x0 in VA space.
#[inline(never)] // correct behavior depends on RA being set.
pub fn satp_setup() {
600007c6:	4701                	li	a4,0
600007c8:	4601                	li	a2,0
600007ca:	40000537          	lui	a0,0x40000
600007ce:	f0050513          	addi	a0,a0,-256 # 3fffff00 <.Lline_table_start0+0x3fffb09d>
600007d2:	184015b7          	lui	a1,0x18401
600007d6:	80158693          	addi	a3,a1,-2047 # 18400801 <.Lline_table_start0+0x183fb99e>
600007da:	610007b7          	lui	a5,0x61000
    root_pt.entries[index] =
600007de:	c394                	sw	a3,0(a5)
600007e0:	c0158693          	addi	a3,a1,-1023
600007e4:	c3d4                	sw	a3,4(a5)
600007e6:	00158693          	addi	a3,a1,1
600007ea:	58d7a023          	sw	a3,1408(a5) # 61000580 <_ebss+0x580>
600007ee:	40158593          	addi	a1,a1,1025
600007f2:	40b7a023          	sw	a1,1024(a5)
600007f6:	184005b7          	lui	a1,0x18400
600007fa:	40158593          	addi	a1,a1,1025 # 18400401 <.Lline_table_start0+0x183fb59e>
600007fe:	60b7a823          	sw	a1,1552(a5)
60000802:	6585                	lui	a1,0x1
60000804:	15fd                	addi	a1,a1,-1 # fff <_hart_stack_size+0x7ff>
60000806:	000656b7          	lui	a3,0x65
6000080a:	53668693          	addi	a3,a3,1334 # 65536 <.Lline_table_start0+0x606d3>
6000080e:	60000837          	lui	a6,0x60000
60000812:	610028b7          	lui	a7,0x61002
60000816:	8b05                	andi	a4,a4,1
60000818:	cf09                	beqz	a4,60000832 <betrusted_boot::satp::satp_setup+0x6c>
6000081a:	00b60733          	add	a4,a2,a1
6000081e:	00c73633          	sltu	a2,a4,a2
60000822:	fff64613          	not	a2,a2
60000826:	00d737b3          	sltu	a5,a4,a3
    set_l1_pte(PERI_VA, PERI_PT_PA, &mut root_pt);
    set_l1_pte(SRAM_VA, SRAM_PT_PA, &mut root_pt); // L1 covers 16MiB, so SP_VA will cover all of SRAM

    // map code space. This is the only one that has a difference on VA->PA
    const CODE_LEN: usize = 0x65536;
    for offset in (0..CODE_LEN).step_by(PAGE_SIZE) {
6000082a:	8ff1                	and	a5,a5,a2
6000082c:	863a                	mv	a2,a4
6000082e:	e781                	bnez	a5,60000836 <betrusted_boot::satp::satp_setup+0x70>
60000830:	a00d                	j	60000852 <betrusted_boot::satp::satp_setup+0x8c>
60000832:	02d67063          	bgeu	a2,a3,60000852 <betrusted_boot::satp::satp_setup+0x8c>
        set_l2_pte(CODE_VA + offset, RERAM_PA + offset, &mut code_pt, FLG_X | FLG_R | FLG_U);
60000836:	01060733          	add	a4,a2,a6
    l2_pt.entries[index] =
6000083a:	00a65793          	srli	a5,a2,0xa
6000083e:	0605                	addi	a2,a2,1 # 40102001 <.Lline_table_start0+0x400fd19e>
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
60000840:	8309                	srli	a4,a4,0x2
60000842:	8f69                	and	a4,a4,a0
    l2_pt.entries[index] =
60000844:	9bf1                	andi	a5,a5,-4
60000846:	97c6                	add	a5,a5,a7
60000848:	01b76713          	ori	a4,a4,27
6000084c:	c398                	sw	a4,0(a5)
6000084e:	4705                	li	a4,1
60000850:	b7d9                	j	60000816 <betrusted_boot::satp::satp_setup+0x50>
60000852:	4781                	li	a5,0
60000854:	005006b7          	lui	a3,0x500
60000858:	6705                	lui	a4,0x1
6000085a:	fff70293          	addi	t0,a4,-1 # fff <_hart_stack_size+0x7ff>
6000085e:	00565637          	lui	a2,0x565
60000862:	53660613          	addi	a2,a2,1334 # 565536 <.Lline_table_start0+0x5606d3>
60000866:	60000837          	lui	a6,0x60000
6000086a:	1771                	addi	a4,a4,-4
6000086c:	610038b7          	lui	a7,0x61003
60000870:	8b85                	andi	a5,a5,1
60000872:	cf89                	beqz	a5,6000088c <betrusted_boot::satp::satp_setup+0xc6>
60000874:	005687b3          	add	a5,a3,t0
60000878:	00d7b6b3          	sltu	a3,a5,a3
6000087c:	fff6c693          	not	a3,a3
60000880:	00c7b5b3          	sltu	a1,a5,a2
    }
    const SPI_OFFSET: usize = 0x50_0000;
    for offset in (SPI_OFFSET..SPI_OFFSET + CODE_LEN).step_by(PAGE_SIZE) {
60000884:	8df5                	and	a1,a1,a3
60000886:	86be                	mv	a3,a5
60000888:	e581                	bnez	a1,60000890 <betrusted_boot::satp::satp_setup+0xca>
6000088a:	a015                	j	600008ae <betrusted_boot::satp::satp_setup+0xe8>
6000088c:	02c6f163          	bgeu	a3,a2,600008ae <betrusted_boot::satp::satp_setup+0xe8>
        set_l2_pte(CODE_VA + offset, RERAM_PA + offset, &mut code2_pt, FLG_X | FLG_R | FLG_U);
60000890:	010685b3          	add	a1,a3,a6
    l2_pt.entries[index] =
60000894:	00a6d793          	srli	a5,a3,0xa
60000898:	0685                	addi	a3,a3,1 # 500001 <.Lline_table_start0+0x4fb19e>
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
6000089a:	8189                	srli	a1,a1,0x2
6000089c:	8de9                	and	a1,a1,a0
    l2_pt.entries[index] =
6000089e:	8ff9                	and	a5,a5,a4
600008a0:	0117e7b3          	or	a5,a5,a7
600008a4:	01b5e593          	ori	a1,a1,27
600008a8:	c38c                	sw	a1,0(a5)
600008aa:	4785                	li	a5,1
600008ac:	b7d1                	j	60000870 <betrusted_boot::satp::satp_setup+0xaa>
600008ae:	4781                	li	a5,0
600008b0:	4601                	li	a2,0
600008b2:	6685                	lui	a3,0x1
600008b4:	fff68593          	addi	a1,a3,-1 # fff <_hart_stack_size+0x7ff>
600008b8:	61000837          	lui	a6,0x61000
600008bc:	16f1                	addi	a3,a3,-4
600008be:	610018b7          	lui	a7,0x61001
600008c2:	8a05                	andi	a2,a2,1
600008c4:	ce19                	beqz	a2,600008e2 <betrusted_boot::satp::satp_setup+0x11c>
600008c6:	00b78633          	add	a2,a5,a1
600008ca:	00f637b3          	sltu	a5,a2,a5
600008ce:	fff7c793          	not	a5,a5
600008d2:	01065713          	srli	a4,a2,0x10
600008d6:	00173713          	seqz	a4,a4
    }

    // map sram. Mapping is 1:1, so we use _VA and _PA targets for both args
    const SRAM_LEN: usize = 65536;
    for offset in (0..SRAM_LEN).step_by(PAGE_SIZE) {
600008da:	8f7d                	and	a4,a4,a5
600008dc:	87b2                	mv	a5,a2
600008de:	e709                	bnez	a4,600008e8 <betrusted_boot::satp::satp_setup+0x122>
600008e0:	a01d                	j	60000906 <betrusted_boot::satp::satp_setup+0x140>
600008e2:	0107d613          	srli	a2,a5,0x10
600008e6:	e205                	bnez	a2,60000906 <betrusted_boot::satp::satp_setup+0x140>
        set_l2_pte(SRAM_VA + offset, SRAM_VA + offset, &mut sram_pt, FLG_W | FLG_R | FLG_U);
600008e8:	01078633          	add	a2,a5,a6
600008ec:	0785                	addi	a5,a5,1
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
600008ee:	00265713          	srli	a4,a2,0x2
600008f2:	8f69                	and	a4,a4,a0
    l2_pt.entries[index] =
600008f4:	8229                	srli	a2,a2,0xa
600008f6:	8e75                	and	a2,a2,a3
600008f8:	01166633          	or	a2,a2,a7
600008fc:	01776713          	ori	a4,a4,23
60000900:	c218                	sw	a4,0(a2)
60000902:	4605                	li	a2,1
60000904:	bf7d                	j	600008c2 <betrusted_boot::satp::satp_setup+0xfc>
60000906:	4781                	li	a5,0
60000908:	4601                	li	a2,0
6000090a:	6685                	lui	a3,0x1
6000090c:	fff68593          	addi	a1,a3,-1 # fff <_hart_stack_size+0x7ff>
60000910:	58000837          	lui	a6,0x58000
60000914:	16f1                	addi	a3,a3,-4
60000916:	610048b7          	lui	a7,0x61004
6000091a:	8a05                	andi	a2,a2,1
6000091c:	ce19                	beqz	a2,6000093a <betrusted_boot::satp::satp_setup+0x174>
6000091e:	00b78633          	add	a2,a5,a1
60000922:	00f637b3          	sltu	a5,a2,a5
60000926:	fff7c793          	not	a5,a5
6000092a:	01165713          	srli	a4,a2,0x11
6000092e:	00173713          	seqz	a4,a4
    }
    // map peripherals
    const CSR_LEN: usize = 0x2_0000;
    const PERI_LEN: usize = 0xA000;
    for offset in (0..CSR_LEN).step_by(PAGE_SIZE) {
60000932:	8f7d                	and	a4,a4,a5
60000934:	87b2                	mv	a5,a2
60000936:	e709                	bnez	a4,60000940 <betrusted_boot::satp::satp_setup+0x17a>
60000938:	a01d                	j	6000095e <betrusted_boot::satp::satp_setup+0x198>
6000093a:	0117d613          	srli	a2,a5,0x11
6000093e:	e205                	bnez	a2,6000095e <betrusted_boot::satp::satp_setup+0x198>
        set_l2_pte(CSR_VA + offset, CSR_VA + offset, &mut csr_pt, FLG_W | FLG_R | FLG_U);
60000940:	01078633          	add	a2,a5,a6
60000944:	0785                	addi	a5,a5,1
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
60000946:	00265713          	srli	a4,a2,0x2
6000094a:	8f69                	and	a4,a4,a0
    l2_pt.entries[index] =
6000094c:	8229                	srli	a2,a2,0xa
6000094e:	8e75                	and	a2,a2,a3
60000950:	01166633          	or	a2,a2,a7
60000954:	01776713          	ori	a4,a4,23
60000958:	c218                	sw	a4,0(a2)
6000095a:	4605                	li	a2,1
6000095c:	bf7d                	j	6000091a <betrusted_boot::satp::satp_setup+0x154>
6000095e:	4781                	li	a5,0
60000960:	4601                	li	a2,0
60000962:	6685                	lui	a3,0x1
60000964:	fff68593          	addi	a1,a3,-1 # fff <_hart_stack_size+0x7ff>
60000968:	401008b7          	lui	a7,0x40100
6000096c:	16f1                	addi	a3,a3,-4
6000096e:	610052b7          	lui	t0,0x61005
60000972:	4815                	li	a6,5
60000974:	8a05                	andi	a2,a2,1
60000976:	ce19                	beqz	a2,60000994 <betrusted_boot::satp::satp_setup+0x1ce>
60000978:	00b78633          	add	a2,a5,a1
6000097c:	00f637b3          	sltu	a5,a2,a5
60000980:	fff7c793          	not	a5,a5
60000984:	00d65713          	srli	a4,a2,0xd
60000988:	00573713          	sltiu	a4,a4,5
    }
    for offset in (0..PERI_LEN).step_by(PAGE_SIZE) {
6000098c:	8f7d                	and	a4,a4,a5
6000098e:	87b2                	mv	a5,a2
60000990:	e711                	bnez	a4,6000099c <betrusted_boot::satp::satp_setup+0x1d6>
60000992:	a025                	j	600009ba <betrusted_boot::satp::satp_setup+0x1f4>
60000994:	00d7d613          	srli	a2,a5,0xd
60000998:	03067163          	bgeu	a2,a6,600009ba <betrusted_boot::satp::satp_setup+0x1f4>
        set_l2_pte(PERI_VA + offset, PERI_VA + offset, &mut peri_pt, FLG_W | FLG_R | FLG_U);
6000099c:	01178633          	add	a2,a5,a7
600009a0:	0785                	addi	a5,a5,1
        ((to_pa & 0xFFFF_FC00) >> 2) // top 2 bits of PA are not used, we don't do 34-bit PA featured by Sv32
600009a2:	00265713          	srli	a4,a2,0x2
600009a6:	8f69                	and	a4,a4,a0
    l2_pt.entries[index] =
600009a8:	8229                	srli	a2,a2,0xa
600009aa:	8e75                	and	a2,a2,a3
600009ac:	00566633          	or	a2,a2,t0
600009b0:	01776713          	ori	a4,a4,23
600009b4:	c218                	sw	a4,0(a2)
600009b6:	4605                	li	a2,1
600009b8:	bf75                	j	60000974 <betrusted_boot::satp::satp_setup+0x1ae>
600009ba:	80461537          	lui	a0,0x80461
        0x8000_0000
        | asid << 22
        | (ROOT_PT_PA as u32 >> 12);

    unsafe {
        core::arch::asm!(
600009be:	52fd                	li	t0,-1
600009c0:	30329073          	csrw	mideleg,t0
600009c4:	30229073          	csrw	medeleg,t0
600009c8:	000412b7          	lui	t0,0x41
600009cc:	80028293          	addi	t0,t0,-2048 # 40800 <.Lline_table_start0+0x3b99d>
600009d0:	30029073          	csrw	mstatus,t0
600009d4:	18051073          	csrw	satp,a0
600009d8:	12000073          	sfence.vma
600009dc:	600002b7          	lui	t0,0x60000
600009e0:	40508733          	sub	a4,ra,t0
600009e4:	34171073          	csrw	mepc,a4
600009e8:	30200073          	mret
            // Issue the return, which will jump to $mepc in Supervisor mode
            "mret",
            satp_val = in(reg) satp,
        );
    }
}
600009ec:	8082                	ret

600009ee <betrusted_boot::satp::to_user_mode>:

#[inline(never)] // correct behavior depends on RA being set.
pub fn to_user_mode() {
    unsafe {
        core::arch::asm!(
600009ee:	14109073          	csrw	sepc,ra
600009f2:	10200073          	sret
            "csrw   sepc, ra",
            "sret",
        );
    }
}
600009f6:	8082                	ret

600009f8 <_start_trap>:
// #[repr(align(4))] // can't do this yet.
#[inline(never)]
pub unsafe extern "C" fn _start_trap() -> ! {
    loop {
        // install a NOP sled before _start_trap() until https://github.com/rust-lang/rust/issues/82232 is stable
        core::arch::asm!(
600009f8:	0001                	nop
600009fa:	0001                	nop
            "nop",
            "nop",
        );
        #[export_name = "_start_trap_aligned"]
        pub unsafe extern "C" fn _start_trap_aligned() {
            core::arch::asm!(
600009fc:	14011073          	csrw	sscratch,sp
60000a00:	61006137          	lui	sp,0x61006
60000a04:	c006                	sw	ra,0(sp)
60000a06:	c40e                	sw	gp,8(sp)
60000a08:	c612                	sw	tp,12(sp)
60000a0a:	c816                	sw	t0,16(sp)
60000a0c:	ca1a                	sw	t1,20(sp)
60000a0e:	cc1e                	sw	t2,24(sp)
60000a10:	ce22                	sw	s0,28(sp)
60000a12:	d026                	sw	s1,32(sp)
60000a14:	d22a                	sw	a0,36(sp)
60000a16:	d42e                	sw	a1,40(sp)
60000a18:	d632                	sw	a2,44(sp)
60000a1a:	d836                	sw	a3,48(sp)
60000a1c:	da3a                	sw	a4,52(sp)
60000a1e:	dc3e                	sw	a5,56(sp)
60000a20:	de42                	sw	a6,60(sp)
60000a22:	c0c6                	sw	a7,64(sp)
60000a24:	c2ca                	sw	s2,68(sp)
60000a26:	c4ce                	sw	s3,72(sp)
60000a28:	c6d2                	sw	s4,76(sp)
60000a2a:	c8d6                	sw	s5,80(sp)
60000a2c:	cada                	sw	s6,84(sp)
60000a2e:	ccde                	sw	s7,88(sp)
60000a30:	cee2                	sw	s8,92(sp)
60000a32:	d0e6                	sw	s9,96(sp)
60000a34:	d2ea                	sw	s10,100(sp)
60000a36:	d4ee                	sw	s11,104(sp)
60000a38:	d6f2                	sw	t3,108(sp)
60000a3a:	d8f6                	sw	t4,112(sp)
60000a3c:	dafa                	sw	t5,116(sp)
60000a3e:	dcfe                	sw	t6,120(sp)
60000a40:	141022f3          	csrr	t0,sepc
60000a44:	de96                	sw	t0,124(sp)
60000a46:	140022f3          	csrr	t0,sscratch
60000a4a:	c216                	sw	t0,4(sp)
60000a4c:	61008137          	lui	sp,0x61008
60000a50:	0aa0006f          	j	60000afa <_start_trap_rust>
                // Note that registers $a0-$a7 still contain the arguments
                "j           _start_trap_rust",
            );
        }
        _start_trap_aligned();
        core::arch::asm!(
60000a54:	0001                	nop
60000a56:	0001                	nop
60000a58:	b745                	j	600009f8 <_start_trap>

60000a5a <_start_trap_aligned>:
            core::arch::asm!(
60000a5a:	14011073          	csrw	sscratch,sp
60000a5e:	61006137          	lui	sp,0x61006
60000a62:	c006                	sw	ra,0(sp)
60000a64:	c40e                	sw	gp,8(sp)
60000a66:	c612                	sw	tp,12(sp)
60000a68:	c816                	sw	t0,16(sp)
60000a6a:	ca1a                	sw	t1,20(sp)
60000a6c:	cc1e                	sw	t2,24(sp)
60000a6e:	ce22                	sw	s0,28(sp)
60000a70:	d026                	sw	s1,32(sp)
60000a72:	d22a                	sw	a0,36(sp)
60000a74:	d42e                	sw	a1,40(sp)
60000a76:	d632                	sw	a2,44(sp)
60000a78:	d836                	sw	a3,48(sp)
60000a7a:	da3a                	sw	a4,52(sp)
60000a7c:	dc3e                	sw	a5,56(sp)
60000a7e:	de42                	sw	a6,60(sp)
60000a80:	c0c6                	sw	a7,64(sp)
60000a82:	c2ca                	sw	s2,68(sp)
60000a84:	c4ce                	sw	s3,72(sp)
60000a86:	c6d2                	sw	s4,76(sp)
60000a88:	c8d6                	sw	s5,80(sp)
60000a8a:	cada                	sw	s6,84(sp)
60000a8c:	ccde                	sw	s7,88(sp)
60000a8e:	cee2                	sw	s8,92(sp)
60000a90:	d0e6                	sw	s9,96(sp)
60000a92:	d2ea                	sw	s10,100(sp)
60000a94:	d4ee                	sw	s11,104(sp)
60000a96:	d6f2                	sw	t3,108(sp)
60000a98:	d8f6                	sw	t4,112(sp)
60000a9a:	dafa                	sw	t5,116(sp)
60000a9c:	dcfe                	sw	t6,120(sp)
60000a9e:	141022f3          	csrr	t0,sepc
60000aa2:	de96                	sw	t0,124(sp)
60000aa4:	140022f3          	csrr	t0,sscratch
60000aa8:	c216                	sw	t0,4(sp)
60000aaa:	61008137          	lui	sp,0x61008
60000aae:	04c0006f          	j	60000afa <_start_trap_rust>
        }
60000ab2:	8082                	ret

60000ab4 <_resume_context>:
}

#[export_name = "_resume_context"]
#[inline(never)]
pub unsafe extern "C" fn _resume_context(registers: u32) -> ! {
    core::arch::asm!(
60000ab4:	812a                	mv	sp,a0
60000ab6:	4082                	lw	ra,0(sp)
60000ab8:	41a2                	lw	gp,8(sp)
60000aba:	4232                	lw	tp,12(sp)
60000abc:	42c2                	lw	t0,16(sp)
60000abe:	4352                	lw	t1,20(sp)
60000ac0:	43e2                	lw	t2,24(sp)
60000ac2:	4472                	lw	s0,28(sp)
60000ac4:	5482                	lw	s1,32(sp)
60000ac6:	5512                	lw	a0,36(sp)
60000ac8:	55a2                	lw	a1,40(sp)
60000aca:	5632                	lw	a2,44(sp)
60000acc:	56c2                	lw	a3,48(sp)
60000ace:	5752                	lw	a4,52(sp)
60000ad0:	57e2                	lw	a5,56(sp)
60000ad2:	5872                	lw	a6,60(sp)
60000ad4:	4886                	lw	a7,64(sp)
60000ad6:	4916                	lw	s2,68(sp)
60000ad8:	49a6                	lw	s3,72(sp)
60000ada:	4a36                	lw	s4,76(sp)
60000adc:	4ac6                	lw	s5,80(sp)
60000ade:	4b56                	lw	s6,84(sp)
60000ae0:	4be6                	lw	s7,88(sp)
60000ae2:	4c76                	lw	s8,92(sp)
60000ae4:	5c86                	lw	s9,96(sp)
60000ae6:	5d16                	lw	s10,100(sp)
60000ae8:	5da6                	lw	s11,104(sp)
60000aea:	5e36                	lw	t3,108(sp)
60000aec:	5ec6                	lw	t4,112(sp)
60000aee:	5f56                	lw	t5,116(sp)
60000af0:	5fe6                	lw	t6,120(sp)
60000af2:	4112                	lw	sp,4(sp)
60000af4:	10200073          	sret
        // Restore SP
        "lw        x2, 1*4(sp)",
        "sret",
        registers = in(reg) registers,
    );
    loop {}
60000af8:	a001                	j	60000af8 <_resume_context+0x44>

60000afa <_start_trap_rust>:
}

/// Just handles specific traps for testing CPU interactions. Doesn't do anything useful with the traps.
#[export_name = "_start_trap_rust"]
pub extern "C" fn trap_handler(
60000afa:	1141                	addi	sp,sp,-16 # 61007ff0 <_estack+0x3ff0>
60000afc:	c606                	sw	ra,12(sp)
60000afe:	c422                	sw	s0,8(sp)
60000b00:	c226                	sw	s1,4(sp)
60000b02:	40108437          	lui	s0,0x40108
60000b06:	2dcd0537          	lui	a0,0x2dcd0
60000b0a:	c008                	sw	a0,0(s0)
60000b0c:	0330000f          	fence	rw,rw
60000b10:	00002097          	auipc	ra,0x2
60000b14:	152080e7          	jalr	338(ra) # 60002c62 <__read_scause>
60000b18:	c008                	sw	a0,0(s0)
60000b1a:	800005b7          	lui	a1,0x80000
60000b1e:	05a5                	addi	a1,a1,9 # 80000009 <_lcdfb+0xd0000009>
60000b20:	0330000f          	fence	rw,rw
    report.wfo(utra::main::REPORT_REPORT, 0x2dcd_0000);

    let sc = scause::read();
    report.wfo(utra::main::REPORT_REPORT, sc.bits() as u32);
    // 2 is illegal instruction
    if sc.bits() == 2 {
60000b24:	00b50b63          	beq	a0,a1,60000b3a <_start_trap_rust+0x40>
60000b28:	4589                	li	a1,2
60000b2a:	0cb51163          	bne	a0,a1,60000bec <_start_trap_rust+0xf2>
        // skip past the illegal instruction, since we are just testing that they trigger exceptions.
        unsafe {
            core::arch::asm!(
60000b2e:	141022f3          	csrr	t0,sepc
60000b32:	0291                	addi	t0,t0,4 # 60000004 <_start+0x4>
60000b34:	14129073          	csrw	sepc,t0
60000b38:	a855                	j	60000bec <_start_trap_rust+0xf2>
60000b3a:	00002097          	auipc	ra,0x2
60000b3e:	140080e7          	jalr	320(ra) # 60002c7a <__read_vsip>
60000b42:	c008                	sw	a0,0(s0)
        }
    } else if sc.bits() == 0x8000_0009 {
        // external interrupt. find out which ones triggered it, and clear the source.
        let irqs_pending = sip::read();
        report.wfo(utra::main::REPORT_REPORT, irqs_pending as u32);
        if (irqs_pending & 0x1) != 0 {
60000b44:	00157593          	andi	a1,a0,1
60000b48:	0330000f          	fence	rw,rw
60000b4c:	c195                	beqz	a1,60000b70 <_start_trap_rust+0x76>
60000b4e:	401085b7          	lui	a1,0x40108
60000b52:	0005ac23          	sw	zero,24(a1) # 40108018 <.Lline_table_start0+0x401031b5>
60000b56:	0330000f          	fence	rw,rw
60000b5a:	58004637          	lui	a2,0x58004
60000b5e:	4614                	lw	a3,8(a2)
            // handle irq0 hw test
            main.wfo(utra::main::IRQTEST0_TRIGGER, 0);
            let mut irqarray0 = CSR::new(utra::irqarray0::HW_IRQARRAY0_BASE as *mut u32);
            let pending = irqarray0.r(utra::irqarray0::EV_PENDING);
            report.wfo(utra::main::REPORT_REPORT, pending << 16 | 0); // encode the irq bank number and bit number as [bit | bank]
60000b60:	01069713          	slli	a4,a3,0x10
60000b64:	c198                	sw	a4,0(a1)
60000b66:	0330000f          	fence	rw,rw
60000b6a:	c614                	sw	a3,8(a2)
60000b6c:	0330000f          	fence	rw,rw
            irqarray0.wo(utra::irqarray0::EV_PENDING, pending);
        }
        if (irqs_pending & 0x2) != 0 {
60000b70:	00257593          	andi	a1,a0,2
60000b74:	c585                	beqz	a1,60000b9c <_start_trap_rust+0xa2>
60000b76:	401085b7          	lui	a1,0x40108
60000b7a:	0005ae23          	sw	zero,28(a1) # 4010801c <.Lline_table_start0+0x401031b9>
60000b7e:	0330000f          	fence	rw,rw
60000b82:	58005637          	lui	a2,0x58005
60000b86:	4614                	lw	a3,8(a2)
            // handle irq1 hw test
            main.wfo(utra::main::IRQTEST1_TRIGGER, 0);
            let mut irqarray1 = CSR::new(utra::irqarray1::HW_IRQARRAY1_BASE as *mut u32);
            let pending = irqarray1.r(utra::irqarray1::EV_PENDING);
            report.wfo(utra::main::REPORT_REPORT, pending << 16 | 1); // encode the irq bank number and bit number as [bit | bank]
60000b88:	01069713          	slli	a4,a3,0x10
60000b8c:	00176713          	ori	a4,a4,1
60000b90:	c198                	sw	a4,0(a1)
60000b92:	0330000f          	fence	rw,rw
60000b96:	c614                	sw	a3,8(a2)
60000b98:	0330000f          	fence	rw,rw
            irqarray1.wo(utra::irqarray1::EV_PENDING, pending);
        }
        if (irqs_pending & 4) != 0 {
60000b9c:	00457593          	andi	a1,a0,4
60000ba0:	c195                	beqz	a1,60000bc4 <_start_trap_rust+0xca>
60000ba2:	0330000f          	fence	rw,rw
60000ba6:	580105b7          	lui	a1,0x58010
60000baa:	4590                	lw	a2,8(a1)
            // handle irq2 sw trigger test
            let mut irqarray2 = CSR::new(utra::irqarray2::HW_IRQARRAY2_BASE as *mut u32);
            let pending = irqarray2.r(utra::irqarray2::EV_PENDING);
            report.wfo(utra::main::REPORT_REPORT, pending << 16 | 2); // encode the irq bank number and bit number as [bit | bank]
60000bac:	01061693          	slli	a3,a2,0x10
60000bb0:	0026e693          	ori	a3,a3,2
60000bb4:	40108737          	lui	a4,0x40108
60000bb8:	c314                	sw	a3,0(a4)
60000bba:	0330000f          	fence	rw,rw
60000bbe:	c590                	sw	a2,8(a1)
60000bc0:	0330000f          	fence	rw,rw
            irqarray2.wo(utra::irqarray2::EV_PENDING, pending);
            // software interrupt should not require a 0-write to reset it
        }
        if (irqs_pending & (1 << 19)) != 0 {
60000bc4:	0532                	slli	a0,a0,0xc
60000bc6:	02055363          	bgez	a0,60000bec <_start_trap_rust+0xf2>
60000bca:	0330000f          	fence	rw,rw
60000bce:	5800f537          	lui	a0,0x5800f
60000bd2:	450c                	lw	a1,8(a0)
            // handle wfi wakeup signal
            let mut irqarray19 = CSR::new(utra::irqarray19::HW_IRQARRAY19_BASE as *mut u32);
            let pending = irqarray19.r(utra::irqarray19::EV_PENDING);
            report.wfo(utra::main::REPORT_REPORT, pending << 16 | 19); // encode the irq bank number and bit number as [bit | bank]
60000bd4:	01059613          	slli	a2,a1,0x10
60000bd8:	01366613          	ori	a2,a2,19
60000bdc:	401086b7          	lui	a3,0x40108
60000be0:	c290                	sw	a2,0(a3)
60000be2:	0330000f          	fence	rw,rw
60000be6:	c50c                	sw	a1,8(a0)
60000be8:	0330000f          	fence	rw,rw
            irqarray19.wo(utra::irqarray19::EV_PENDING, pending);
        }
    }

    // report interrupt status
    report.wfo(utra::main::REPORT_REPORT, sepc::read() as u32);
60000bec:	fffff097          	auipc	ra,0xfffff
60000bf0:	458080e7          	jalr	1112(ra) # 60000044 <xous_riscv::register::sepc::read>
60000bf4:	40108437          	lui	s0,0x40108
60000bf8:	c008                	sw	a0,0(s0)
60000bfa:	0330000f          	fence	rw,rw
    report.wfo(utra::main::REPORT_REPORT, stval::read() as u32);
60000bfe:	fffff097          	auipc	ra,0xfffff
60000c02:	44e080e7          	jalr	1102(ra) # 6000004c <xous_riscv::register::stval::read>
60000c06:	c008                	sw	a0,0(s0)
60000c08:	0330000f          	fence	rw,rw
    report.wfo(utra::main::REPORT_REPORT, sim::read() as u32);
60000c0c:	fffff097          	auipc	ra,0xfffff
60000c10:	448080e7          	jalr	1096(ra) # 60000054 <xous_riscv::register::vexriscv::sim::read>
60000c14:	c008                	sw	a0,0(s0)
60000c16:	0330000f          	fence	rw,rw

    // re-enable interrupts
    let status: u32;
    unsafe {
        core::arch::asm!(
60000c1a:	100022f3          	csrr	t0,sstatus
60000c1e:	0032e293          	ori	t0,t0,3
60000c22:	10029073          	csrw	sstatus,t0
60000c26:	100024f3          	csrr	s1,sstatus
            "csrw        sstatus, t0",
            "csrr        {status}, sstatus",
            status = out(reg) status,
        )
    }
    unsafe{sie::set_sext()};
60000c2a:	fffff097          	auipc	ra,0xfffff
60000c2e:	40e080e7          	jalr	1038(ra) # 60000038 <xous_riscv::register::sie::set_sext>
60000c32:	c004                	sw	s1,0(s0)
60000c34:	0330000f          	fence	rw,rw
60000c38:	2dcd6537          	lui	a0,0x2dcd6
60000c3c:	0535                	addi	a0,a0,13 # 2dcd600d <.Lline_table_start0+0x2dcd11aa>
60000c3e:	c008                	sw	a0,0(s0)
60000c40:	0330000f          	fence	rw,rw
    report.wfo(utra::main::REPORT_REPORT, status);

    // drop us back to user mode
    report.wfo(utra::main::REPORT_REPORT, 0x2dcd_600d);
    unsafe {_resume_context(0x61006000)};
60000c44:	61006537          	lui	a0,0x61006
60000c48:	00000097          	auipc	ra,0x0
60000c4c:	e6c080e7          	jalr	-404(ra) # 60000ab4 <_resume_context>
	...

60000c52 <start_loader>:
    _arg_buffer: usize,
    _signature: usize,
    _loader_addr: usize,
) -> ! {
    unsafe {
        asm! (
60000c52:	8602                	jr	a2
	...

60000c56 <rust_begin_unwind>:
    fn handle_panic(arg: &PanicInfo) -> ! {
60000c56:	1141                	addi	sp,sp,-16
60000c58:	c606                	sw	ra,12(sp)
60000c5a:	c422                	sw	s0,8(sp)
60000c5c:	45cc                	lw	a1,12(a1)
60000c5e:	842a                	mv	s0,a0
60000c60:	9582                	jalr	a1
60000c62:	89a77637          	lui	a2,0x89a77
60000c66:	c3460613          	addi	a2,a2,-972 # 89a76c34 <_lcdfb+0xd9a76c34>
60000c6a:	8db1                	xor	a1,a1,a2
60000c6c:	a9f82637          	lui	a2,0xa9f82
60000c70:	ac860613          	addi	a2,a2,-1336 # a9f81ac8 <_lcdfb+0xf9f81ac8>
60000c74:	8d31                	xor	a0,a0,a2
60000c76:	8d4d                	or	a0,a0,a1
        if let Some(s) = arg.payload().downcast_ref::<&str>() {
60000c78:	e505                	bnez	a0,60000ca0 <rust_begin_unwind+0x4a>
            uart.tiny_write_str(s);
60000c7a:	404c                	lw	a1,4(s0)
60000c7c:	c5b1                	beqz	a1,60000cc8 <rust_begin_unwind+0x72>
60000c7e:	4008                	lw	a0,0(s0)
60000c80:	95aa                	add	a1,a1,a0
60000c82:	40102637          	lui	a2,0x40102
60000c86:	00054683          	lbu	a3,0(a0) # 61006000 <_estack+0x2000>
60000c8a:	0330000f          	fence	rw,rw
60000c8e:	4258                	lw	a4,4(a2)
        while uart.r(utra::uart::TXFULL) != 0 {}
60000c90:	ff6d                	bnez	a4,60000c8a <rust_begin_unwind+0x34>
60000c92:	0505                	addi	a0,a0,1
60000c94:	c214                	sw	a3,0(a2)
60000c96:	0330000f          	fence	rw,rw
60000c9a:	feb516e3          	bne	a0,a1,60000c86 <rust_begin_unwind+0x30>
60000c9e:	a02d                	j	60000cc8 <rust_begin_unwind+0x72>
60000ca0:	60003537          	lui	a0,0x60003
60000ca4:	f8850513          	addi	a0,a0,-120 # 60002f88 <.Lanon.01042f9e07bac0588b13af07786e0e0c.28>
60000ca8:	401025b7          	lui	a1,0x40102
60000cac:	01450613          	addi	a2,a0,20
60000cb0:	00054683          	lbu	a3,0(a0)
60000cb4:	0330000f          	fence	rw,rw
60000cb8:	41d8                	lw	a4,4(a1)
60000cba:	ff6d                	bnez	a4,60000cb4 <rust_begin_unwind+0x5e>
60000cbc:	0505                	addi	a0,a0,1
60000cbe:	c194                	sw	a3,0(a1)
60000cc0:	0330000f          	fence	rw,rw
60000cc4:	fec516e3          	bne	a0,a2,60000cb0 <rust_begin_unwind+0x5a>
        loop {}
60000cc8:	a001                	j	60000cc8 <rust_begin_unwind+0x72>

60000cca <betrusted_boot::Gfx::hex_word>:
    pub fn hex_word(&mut self, word: u32, pos: &mut Point) {
60000cca:	7179                	addi	sp,sp,-48
60000ccc:	d606                	sw	ra,44(sp)
60000cce:	d422                	sw	s0,40(sp)
60000cd0:	d226                	sw	s1,36(sp)
60000cd2:	d04a                	sw	s2,32(sp)
60000cd4:	ce4e                	sw	s3,28(sp)
60000cd6:	cc52                	sw	s4,24(sp)
60000cd8:	ca56                	sw	s5,20(sp)
60000cda:	c85a                	sw	s6,16(sp)
60000cdc:	c65e                	sw	s7,12(sp)
60000cde:	8932                	mv	s2,a2
60000ce0:	8baa                	mv	s7,a0
60000ce2:	4401                	li	s0,0
60000ce4:	0085d513          	srli	a0,a1,0x8
60000ce8:	6641                	lui	a2,0x10
60000cea:	f0060613          	addi	a2,a2,-256 # ff00 <.Lline_table_start0+0xb09d>
60000cee:	8d71                	and	a0,a0,a2
60000cf0:	0185d613          	srli	a2,a1,0x18
60000cf4:	8d51                	or	a0,a0,a2
60000cf6:	00859613          	slli	a2,a1,0x8
60000cfa:	00ff06b7          	lui	a3,0xff0
60000cfe:	8e75                	and	a2,a2,a3
60000d00:	05e2                	slli	a1,a1,0x18
60000d02:	8dd1                	or	a1,a1,a2
60000d04:	8d4d                	or	a0,a0,a1
        for &byte in word.to_be_bytes().iter() {
60000d06:	c02a                	sw	a0,0(sp)
60000d08:	898a                	mv	s3,sp
60000d0a:	0a000a13          	li	s4,160
60000d0e:	4aa9                	li	s5,10
60000d10:	4b11                	li	s6,4
60000d12:	00898533          	add	a0,s3,s0
60000d16:	00054483          	lbu	s1,0(a0)
        self.put_digit(c >> 4, pos);
60000d1a:	0044d513          	srli	a0,s1,0x4
        let mut buf: [u8; 4] = [0; 4]; // stack buffer for the character encoding
60000d1e:	c202                	sw	zero,4(sp)
        if nyb < 10 {
60000d20:	0144e563          	bltu	s1,s4,60000d2a <betrusted_boot::Gfx::hex_word+0x60>
60000d24:	05750513          	addi	a0,a0,87
60000d28:	a019                	j	60000d2e <betrusted_boot::Gfx::hex_word+0x64>
60000d2a:	03056513          	ori	a0,a0,48
60000d2e:	00a10223          	sb	a0,4(sp)
60000d32:	004c                	addi	a1,sp,4
60000d34:	4605                	li	a2,1
60000d36:	855e                	mv	a0,s7
60000d38:	86ca                	mv	a3,s2
60000d3a:	00000097          	auipc	ra,0x0
60000d3e:	04c080e7          	jalr	76(ra) # 60000d86 <betrusted_boot::Gfx::msg>
        self.put_digit(c & 0xF, pos);
60000d42:	00f4f513          	andi	a0,s1,15
        let mut buf: [u8; 4] = [0; 4]; // stack buffer for the character encoding
60000d46:	c402                	sw	zero,8(sp)
        if nyb < 10 {
60000d48:	01556563          	bltu	a0,s5,60000d52 <betrusted_boot::Gfx::hex_word+0x88>
60000d4c:	05750513          	addi	a0,a0,87
60000d50:	a019                	j	60000d56 <betrusted_boot::Gfx::hex_word+0x8c>
60000d52:	03056513          	ori	a0,a0,48
60000d56:	0405                	addi	s0,s0,1 # 40108001 <.Lline_table_start0+0x4010319e>
60000d58:	00a10423          	sb	a0,8(sp)
60000d5c:	002c                	addi	a1,sp,8
60000d5e:	4605                	li	a2,1
60000d60:	855e                	mv	a0,s7
60000d62:	86ca                	mv	a3,s2
60000d64:	00000097          	auipc	ra,0x0
60000d68:	022080e7          	jalr	34(ra) # 60000d86 <betrusted_boot::Gfx::msg>
60000d6c:	fb6413e3          	bne	s0,s6,60000d12 <betrusted_boot::Gfx::hex_word+0x48>
    }
60000d70:	50b2                	lw	ra,44(sp)
60000d72:	5422                	lw	s0,40(sp)
60000d74:	5492                	lw	s1,36(sp)
60000d76:	5902                	lw	s2,32(sp)
60000d78:	49f2                	lw	s3,28(sp)
60000d7a:	4a62                	lw	s4,24(sp)
60000d7c:	4ad2                	lw	s5,20(sp)
60000d7e:	4b42                	lw	s6,16(sp)
60000d80:	4bb2                	lw	s7,12(sp)
60000d82:	6145                	addi	sp,sp,48
60000d84:	8082                	ret

60000d86 <betrusted_boot::Gfx::msg>:
    pub fn msg(&mut self, text: &'a str, pos: &mut Point) {
60000d86:	715d                	addi	sp,sp,-80
60000d88:	c686                	sw	ra,76(sp)
60000d8a:	c4a2                	sw	s0,72(sp)
60000d8c:	c2a6                	sw	s1,68(sp)
60000d8e:	c0ca                	sw	s2,64(sp)
60000d90:	de4e                	sw	s3,60(sp)
60000d92:	dc52                	sw	s4,56(sp)
60000d94:	da56                	sw	s5,52(sp)
60000d96:	d85a                	sw	s6,48(sp)
60000d98:	d65e                	sw	s7,44(sp)
60000d9a:	d462                	sw	s8,40(sp)
60000d9c:	d266                	sw	s9,36(sp)
60000d9e:	d06a                	sw	s10,32(sp)
60000da0:	ce6e                	sw	s11,28(sp)
60000da2:	cc36                	sw	a3,24(sp)
60000da4:	ca02                	sw	zero,20(sp)
60000da6:	c802                	sw	zero,16(sp)
60000da8:	962e                	add	a2,a2,a1
60000daa:	c632                	sw	a2,12(sp)
60000dac:	415c                	lw	a5,4(a0)
60000dae:	c42a                	sw	a0,8(sp)
60000db0:	4110                	lw	a2,0(a0)
60000db2:	4319                	li	t1,6
60000db4:	4f29                	li	t5,10
60000db6:	4f95                	li	t6,5
60000db8:	49b5                	li	s3,13
60000dba:	06000a93          	li	s5,96
60000dbe:	44ed                	li	s1,27
60000dc0:	6a41                	lui	s4,0x10
60000dc2:	fffa0413          	addi	s0,s4,-1 # ffff <.Lline_table_start0+0xb19c>
60000dc6:	60003537          	lui	a0,0x60003
60000dca:	f9c50b13          	addi	s6,a0,-100 # 60002f9c <.Lanon.01042f9e07bac0588b13af07786e0e0c.29>
60000dce:	16000b93          	li	s7,352
60000dd2:	4c05                	li	s8,1
60000dd4:	4cad                	li	s9,11
60000dd6:	00058503          	lb	a0,0(a1) # 40102000 <.Lline_table_start0+0x400fd19d>
60000dda:	0ff57093          	zext.b	ra,a0
60000dde:	00054463          	bltz	a0,60000de6 <betrusted_boot::Gfx::msg+0x60>
60000de2:	0585                	addi	a1,a1,1
60000de4:	a08d                	j	60000e46 <betrusted_boot::Gfx::msg+0xc0>
60000de6:	0015c703          	lbu	a4,1(a1)
60000dea:	01f0f513          	andi	a0,ra,31
60000dee:	03f77713          	andi	a4,a4,63
60000df2:	0df00693          	li	a3,223
60000df6:	0216ff63          	bgeu	a3,ra,60000e34 <betrusted_boot::Gfx::msg+0xae>
60000dfa:	0025c803          	lbu	a6,2(a1)
60000dfe:	00671893          	slli	a7,a4,0x6
60000e02:	03f87713          	andi	a4,a6,63
60000e06:	00e8e733          	or	a4,a7,a4
60000e0a:	0f000693          	li	a3,240
60000e0e:	02d0e863          	bltu	ra,a3,60000e3e <betrusted_boot::Gfx::msg+0xb8>
60000e12:	0035c803          	lbu	a6,3(a1)
60000e16:	0576                	slli	a0,a0,0x1d
60000e18:	00b55893          	srli	a7,a0,0xb
60000e1c:	071a                	slli	a4,a4,0x6
60000e1e:	03f87513          	andi	a0,a6,63
60000e22:	8d59                	or	a0,a0,a4
60000e24:	011560b3          	or	ra,a0,a7
        for current_char in text.chars() {
60000e28:	00110537          	lui	a0,0x110
60000e2c:	1ca08b63          	beq	ra,a0,60001002 <betrusted_boot::Gfx::msg+0x27c>
60000e30:	0591                	addi	a1,a1,4
60000e32:	a811                	j	60000e46 <betrusted_boot::Gfx::msg+0xc0>
60000e34:	0589                	addi	a1,a1,2
60000e36:	051a                	slli	a0,a0,0x6
60000e38:	00e560b3          	or	ra,a0,a4
60000e3c:	a029                	j	60000e46 <betrusted_boot::Gfx::msg+0xc0>
60000e3e:	058d                	addi	a1,a1,3
60000e40:	0532                	slli	a0,a0,0xc
60000e42:	00a760b3          	or	ra,a4,a0
60000e46:	fe008513          	addi	a0,ra,-32
60000e4a:	05f00693          	li	a3,95
60000e4e:	00d56363          	bltu	a0,a3,60000e54 <betrusted_boot::Gfx::msg+0xce>
60000e52:	4501                	li	a0,0
60000e54:	00455713          	srli	a4,a0,0x4
60000e58:	893d                	andi	a0,a0,15
60000e5a:	02650533          	mul	a0,a0,t1
60000e5e:	48000693          	li	a3,1152
60000e62:	02d70733          	mul	a4,a4,a3
60000e66:	00e563b3          	or	t2,a0,a4
                let color = if FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
60000e6a:	0083d513          	srli	a0,t2,0x8
                let bitmap_byte = bitmap_bit_index / 8;
60000e6e:	0033d713          	srli	a4,t2,0x3
                let color = if FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
60000e72:	46e9                	li	a3,26
60000e74:	14a6ea63          	bltu	a3,a0,60000fc8 <betrusted_boot::Gfx::msg+0x242>
60000e78:	4562                	lw	a0,24(sp)
60000e7a:	00255d03          	lhu	s10,2(a0) # 110002 <.Lline_table_start0+0x10b19f>
60000e7e:	00055d83          	lhu	s11,0(a0)
60000e82:	4281                	li	t0,0
60000e84:	4e01                	li	t3,0
60000e86:	4552                	lw	a0,20(sp)
60000e88:	02650eb3          	mul	t4,a0,t1
60000e8c:	831e                	mv	t1,t2
60000e8e:	0ff0f813          	zext.b	a6,ra
60000e92:	09e80c63          	beq	a6,t5,60000f2a <betrusted_boot::Gfx::msg+0x1a4>
                if (current_char as u8 != 0xd) && (current_char as u8 != 0xa) { // don't draw CRLF specials
60000e96:	09380a63          	beq	a6,s3,60000f2a <betrusted_boot::Gfx::msg+0x1a4>
                let y = pos.y + char_walk_y as i16;
60000e9a:	01cd0533          	add	a0,s10,t3
60000e9e:	008578b3          	and	a7,a0,s0
60000ea2:	21700513          	li	a0,535
        if clip_y >= FB_LINES {
60000ea6:	00a8e463          	bltu	a7,a0,60000eae <betrusted_boot::Gfx::msg+0x128>
60000eaa:	21700893          	li	a7,535
60000eae:	005e8533          	add	a0,t4,t0
60000eb2:	956e                	add	a0,a0,s11
60000eb4:	008576b3          	and	a3,a0,s0
60000eb8:	14f00913          	li	s2,335
        if clip_x >= FB_WIDTH_PIXELS {
60000ebc:	00d96363          	bltu	s2,a3,60000ec2 <betrusted_boot::Gfx::msg+0x13c>
60000ec0:	8946                	mv	s2,a7
60000ec2:	00eb06b3          	add	a3,s6,a4
60000ec6:	0006c683          	lbu	a3,0(a3) # ff0000 <.Lline_table_start0+0xfeb19d>
60000eca:	fff34713          	not	a4,t1
60000ece:	8b1d                	andi	a4,a4,7
60000ed0:	00e6d6b3          	srl	a3,a3,a4
60000ed4:	8a85                	andi	a3,a3,1
60000ed6:	0542                	slli	a0,a0,0x10
60000ed8:	8541                	srai	a0,a0,0x10
60000eda:	03790733          	mul	a4,s2,s7
60000ede:	972a                	add	a4,a4,a0
60000ee0:	8315                	srli	a4,a4,0x5
        if color == Color::Light {
60000ee2:	ca99                	beqz	a3,60000ef8 <betrusted_boot::Gfx::msg+0x172>
            self.fb[(clip_x + clip_y * FB_WIDTH_WORDS * 32) / 32] |= 1 << (clip_x % 32)
60000ee4:	0ef77f63          	bgeu	a4,a5,60000fe2 <betrusted_boot::Gfx::msg+0x25c>
60000ee8:	00271693          	slli	a3,a4,0x2
60000eec:	96b2                	add	a3,a3,a2
60000eee:	4298                	lw	a4,0(a3)
60000ef0:	00ac1533          	sll	a0,s8,a0
60000ef4:	8d59                	or	a0,a0,a4
60000ef6:	a821                	j	60000f0e <betrusted_boot::Gfx::msg+0x188>
            self.fb[(clip_x + clip_y * FB_WIDTH_WORDS * 32) / 32] &= !(1 << (clip_x % 32))
60000ef8:	0ef77a63          	bgeu	a4,a5,60000fec <betrusted_boot::Gfx::msg+0x266>
60000efc:	00271693          	slli	a3,a4,0x2
60000f00:	96b2                	add	a3,a3,a2
60000f02:	4298                	lw	a4,0(a3)
60000f04:	00ac1533          	sll	a0,s8,a0
60000f08:	fff54513          	not	a0,a0
60000f0c:	8d79                	and	a0,a0,a4
60000f0e:	c288                	sw	a0,0(a3)
        self.fb[clip_y * FB_WIDTH_WORDS + (FB_WIDTH_WORDS - 1)] |= 0x1_0000;
60000f10:	03990533          	mul	a0,s2,s9
60000f14:	00a50713          	addi	a4,a0,10
60000f18:	0cf77063          	bgeu	a4,a5,60000fd8 <betrusted_boot::Gfx::msg+0x252>
60000f1c:	00271513          	slli	a0,a4,0x2
60000f20:	9532                	add	a0,a0,a2
60000f22:	4114                	lw	a3,0(a0)
60000f24:	0146e6b3          	or	a3,a3,s4
60000f28:	c114                	sw	a3,0(a0)
                char_walk_x += 1;
60000f2a:	0285                	addi	t0,t0,1
60000f2c:	005ff763          	bgeu	t6,t0,60000f3a <betrusted_boot::Gfx::msg+0x1b4>
                    char_walk_y += 1;
60000f30:	0e05                	addi	t3,t3,1
                    if char_walk_y >= CHAR_HEIGHT {
60000f32:	4531                	li	a0,12
60000f34:	02ae7063          	bgeu	t3,a0,60000f54 <betrusted_boot::Gfx::msg+0x1ce>
60000f38:	4281                	li	t0,0
                let bitmap_bit_index = char_x
60000f3a:	00538533          	add	a0,t2,t0
                    + (char_walk_y * FONT_IMAGE_WIDTH);
60000f3e:	035e06b3          	mul	a3,t3,s5
                let bitmap_bit_index = char_x
60000f42:	00d50333          	add	t1,a0,a3
                let color = if FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
60000f46:	00835513          	srli	a0,t1,0x8
                let bitmap_byte = bitmap_bit_index / 8;
60000f4a:	00335713          	srli	a4,t1,0x3
60000f4e:	f49560e3          	bltu	a0,s1,60000e8e <betrusted_boot::Gfx::msg+0x108>
60000f52:	a89d                	j	60000fc8 <betrusted_boot::Gfx::msg+0x242>
                        if current_char as u8 == 0xd { // '\n'
60000f54:	01e80a63          	beq	a6,t5,60000f68 <betrusted_boot::Gfx::msg+0x1e2>
60000f58:	01381e63          	bne	a6,s3,60000f74 <betrusted_boot::Gfx::msg+0x1ee>
                            pos.y += CHAR_HEIGHT as i16;
60000f5c:	00cd0513          	addi	a0,s10,12
60000f60:	46e2                	lw	a3,24(sp)
60000f62:	00a69123          	sh	a0,2(a3)
60000f66:	a829                	j	60000f80 <betrusted_boot::Gfx::msg+0x1fa>
60000f68:	c802                	sw	zero,16(sp)
60000f6a:	4da9                	li	s11,10
                            pos.x = LEFT_MARGIN as i16;
60000f6c:	4562                	lw	a0,24(sp)
60000f6e:	01b51023          	sh	s11,0(a0)
60000f72:	a039                	j	60000f80 <betrusted_boot::Gfx::msg+0x1fa>
                            idx += 1;
60000f74:	4552                	lw	a0,20(sp)
60000f76:	0505                	addi	a0,a0,1
                            x_update += CHAR_WIDTH as i16;
60000f78:	ca2a                	sw	a0,20(sp)
60000f7a:	4542                	lw	a0,16(sp)
60000f7c:	0519                	addi	a0,a0,6
60000f7e:	c82a                	sw	a0,16(sp)
60000f80:	4319                	li	t1,6
60000f82:	4532                	lw	a0,12(sp)
60000f84:	e4a599e3          	bne	a1,a0,60000dd6 <betrusted_boot::Gfx::msg+0x50>
60000f88:	4622                	lw	a2,8(sp)
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);
    }
    /// Write a given field without reading it first
    pub fn wfo(&mut self, field: Field, value: T) {
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60000f8a:	4608                	lw	a0,8(a2)
        pos.x += x_update;
60000f8c:	45c2                	lw	a1,16(sp)
60000f8e:	95ee                	add	a1,a1,s11
60000f90:	46e2                	lw	a3,24(sp)
60000f92:	00b69023          	sh	a1,0(a3)
60000f96:	4585                	li	a1,1
60000f98:	c10c                	sw	a1,0(a0)
60000f9a:	0330000f          	fence	rw,rw
60000f9e:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60000fa2:	4608                	lw	a0,8(a2)
60000fa4:	4148                	lw	a0,4(a0)
        if self.csr.rf(utra::memlcd::BUSY_BUSY) == 1 {
60000fa6:	8905                	andi	a0,a0,1
60000fa8:	f97d                	bnez	a0,60000f9e <betrusted_boot::Gfx::msg+0x218>
    }
60000faa:	40b6                	lw	ra,76(sp)
60000fac:	4426                	lw	s0,72(sp)
60000fae:	4496                	lw	s1,68(sp)
60000fb0:	4906                	lw	s2,64(sp)
60000fb2:	59f2                	lw	s3,60(sp)
60000fb4:	5a62                	lw	s4,56(sp)
60000fb6:	5ad2                	lw	s5,52(sp)
60000fb8:	5b42                	lw	s6,48(sp)
60000fba:	5bb2                	lw	s7,44(sp)
60000fbc:	5c22                	lw	s8,40(sp)
60000fbe:	5c92                	lw	s9,36(sp)
60000fc0:	5d02                	lw	s10,32(sp)
60000fc2:	4df2                	lw	s11,28(sp)
60000fc4:	6161                	addi	sp,sp,80
60000fc6:	8082                	ret
                let color = if FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
60000fc8:	60003537          	lui	a0,0x60003
60000fcc:	31850613          	addi	a2,a0,792 # 60003318 <.Lanon.01042f9e07bac0588b13af07786e0e0c.31>
60000fd0:	36000593          	li	a1,864
60000fd4:	853a                	mv	a0,a4
60000fd6:	a00d                	j	60000ff8 <betrusted_boot::Gfx::msg+0x272>
        self.fb[clip_y * FB_WIDTH_WORDS + (FB_WIDTH_WORDS - 1)] |= 0x1_0000;
60000fd8:	60003537          	lui	a0,0x60003
60000fdc:	34850613          	addi	a2,a0,840 # 60003348 <.Lanon.01042f9e07bac0588b13af07786e0e0c.34>
60000fe0:	a811                	j	60000ff4 <betrusted_boot::Gfx::msg+0x26e>
            self.fb[(clip_x + clip_y * FB_WIDTH_WORDS * 32) / 32] |= 1 << (clip_x % 32)
60000fe2:	60003537          	lui	a0,0x60003
60000fe6:	32850613          	addi	a2,a0,808 # 60003328 <.Lanon.01042f9e07bac0588b13af07786e0e0c.32>
60000fea:	a029                	j	60000ff4 <betrusted_boot::Gfx::msg+0x26e>
            self.fb[(clip_x + clip_y * FB_WIDTH_WORDS * 32) / 32] &= !(1 << (clip_x % 32))
60000fec:	60003537          	lui	a0,0x60003
60000ff0:	33850613          	addi	a2,a0,824 # 60003338 <.Lanon.01042f9e07bac0588b13af07786e0e0c.33>
60000ff4:	853a                	mv	a0,a4
60000ff6:	85be                	mv	a1,a5
60000ff8:	00001097          	auipc	ra,0x1
60000ffc:	466080e7          	jalr	1126(ra) # 6000245e <core::panicking::panic_bounds_check>
60001000:	0000                	unimp
        pos.x += x_update;
60001002:	4562                	lw	a0,24(sp)
60001004:	00055d83          	lhu	s11,0(a0)
60001008:	b741                	j	60000f88 <betrusted_boot::Gfx::msg+0x202>

6000100a <betrusted_boot::ramtest_all>:
unsafe fn ramtest_all<T>(test_slice: &mut [T], test_index: u32)
6000100a:	4501                	li	a0,0
6000100c:	4601                	li	a2,0
6000100e:	610086b7          	lui	a3,0x61008
60001012:	40068593          	addi	a1,a3,1024 # 61008400 <_estack+0x4400>
60001016:	00468713          	addi	a4,a3,4
6000101a:	c290                	sw	a2,0(a3)
6000101c:	00160693          	addi	a3,a2,1
        sum += TryInto::<u32>::try_into(index).unwrap();
60001020:	9532                	add	a0,a0,a2
60001022:	8636                	mv	a2,a3
60001024:	86ba                	mv	a3,a4
60001026:	feb718e3          	bne	a4,a1,60001016 <betrusted_boot::ramtest_all+0xc>
6000102a:	4581                	li	a1,0
6000102c:	610086b7          	lui	a3,0x61008
60001030:	40068613          	addi	a2,a3,1024 # 61008400 <_estack+0x4400>
60001034:	4298                	lw	a4,0(a3)
60001036:	00468793          	addi	a5,a3,4
        checksum += a;
6000103a:	95ba                	add	a1,a1,a4
6000103c:	86be                	mv	a3,a5
6000103e:	fec79be3          	bne	a5,a2,60001034 <betrusted_boot::ramtest_all+0x2a>
    if sum == checksum {
60001042:	00b51563          	bne	a0,a1,6000104c <betrusted_boot::ramtest_all+0x42>
60001046:	600d05b7          	lui	a1,0x600d0
6000104a:	a801                	j	6000105a <betrusted_boot::ramtest_all+0x50>
6000104c:	40108637          	lui	a2,0x40108
60001050:	c20c                	sw	a1,0(a2)
60001052:	0330000f          	fence	rw,rw
60001056:	0bad05b7          	lui	a1,0xbad0
6000105a:	0591                	addi	a1,a1,4 # bad0004 <.Lline_table_start0+0xbacb1a1>
6000105c:	40108637          	lui	a2,0x40108
60001060:	c208                	sw	a0,0(a2)
60001062:	0330000f          	fence	rw,rw
60001066:	c20c                	sw	a1,0(a2)
60001068:	0330000f          	fence	rw,rw
}
6000106c:	8082                	ret

6000106e <betrusted_boot::ramtest_fast_specialcase1>:
unsafe fn ramtest_fast_specialcase1<T>(test_slice: &mut [T], test_index: u32)
6000106e:	4581                	li	a1,0
60001070:	4881                	li	a7,0
60001072:	4681                	li	a3,0
60001074:	61008737          	lui	a4,0x61008
60001078:	6609                	lui	a2,0x2
6000107a:	80060613          	addi	a2,a2,-2048 # 1800 <_hart_stack_size+0x1000>
6000107e:	4821                	li	a6,8
60001080:	87b2                	mv	a5,a2
60001082:	01066363          	bltu	a2,a6,60001088 <betrusted_boot::ramtest_fast_specialcase1+0x1a>
60001086:	47a1                	li	a5,8
60001088:	8e1d                	sub	a2,a2,a5
6000108a:	078a                	slli	a5,a5,0x2
6000108c:	c314                	sw	a3,0(a4)
6000108e:	c354                	sw	a3,4(a4)
60001090:	973e                	add	a4,a4,a5
60001092:	0685                	addi	a3,a3,1
        sum += TryInto::<u32>::try_into(idxp1).unwrap();
60001094:	98ae                	add	a7,a7,a1
60001096:	0589                	addi	a1,a1,2
60001098:	f665                	bnez	a2,60001080 <betrusted_boot::ramtest_fast_specialcase1+0x12>
6000109a:	4581                	li	a1,0
6000109c:	610086b7          	lui	a3,0x61008
600010a0:	6609                	lui	a2,0x2
600010a2:	80060613          	addi	a2,a2,-2048 # 1800 <_hart_stack_size+0x1000>
600010a6:	47a1                	li	a5,8
600010a8:	8732                	mv	a4,a2
600010aa:	00f66363          	bltu	a2,a5,600010b0 <betrusted_boot::ramtest_fast_specialcase1+0x42>
600010ae:	4721                	li	a4,8
600010b0:	00271813          	slli	a6,a4,0x2
600010b4:	4288                	lw	a0,0(a3)
600010b6:	42dc                	lw	a5,4(a3)
600010b8:	96c2                	add	a3,a3,a6
600010ba:	8e19                	sub	a2,a2,a4
        checksum += (d.as_ptr() as *const T)
600010bc:	952e                	add	a0,a0,a1
        checksum += (d.as_ptr().add(1) as *const T)
600010be:	00f505b3          	add	a1,a0,a5
600010c2:	f275                	bnez	a2,600010a6 <betrusted_boot::ramtest_fast_specialcase1+0x38>
    if sum == checksum {
600010c4:	00b89663          	bne	a7,a1,600010d0 <betrusted_boot::ramtest_fast_specialcase1+0x62>
600010c8:	600d05b7          	lui	a1,0x600d0
600010cc:	05a1                	addi	a1,a1,8 # 600d0008 <_etext+0xcc884>
600010ce:	a811                	j	600010e2 <betrusted_boot::ramtest_fast_specialcase1+0x74>
600010d0:	40108537          	lui	a0,0x40108
600010d4:	c10c                	sw	a1,0(a0)
600010d6:	0330000f          	fence	rw,rw
600010da:	0bad0537          	lui	a0,0xbad0
600010de:	00850593          	addi	a1,a0,8 # bad0008 <.Lline_table_start0+0xbacb1a5>
600010e2:	40108537          	lui	a0,0x40108
600010e6:	01152023          	sw	a7,0(a0) # 40108000 <.Lline_table_start0+0x4010319d>
600010ea:	0330000f          	fence	rw,rw
600010ee:	c10c                	sw	a1,0(a0)
600010f0:	0330000f          	fence	rw,rw
}
600010f4:	8082                	ret

600010f6 <betrusted_boot::ramtest_fast>:
unsafe fn ramtest_fast<T>(test_slice: &mut [T], test_index: u32)
600010f6:	4801                	li	a6,0
600010f8:	610086b7          	lui	a3,0x61008
600010fc:	4585                	li	a1,1
600010fe:	6609                	lui	a2,0x2
60001100:	80060613          	addi	a2,a2,-2048 # 1800 <_hart_stack_size+0x1000>
60001104:	47a1                	li	a5,8
60001106:	8732                	mv	a4,a2
60001108:	00f66363          	bltu	a2,a5,6000110e <betrusted_boot::ramtest_fast+0x18>
6000110c:	4721                	li	a4,8
6000110e:	fff58793          	addi	a5,a1,-1
60001112:	8e19                	sub	a2,a2,a4
60001114:	070a                	slli	a4,a4,0x2
60001116:	c29c                	sw	a5,0(a3)
60001118:	c2cc                	sw	a1,4(a3)
6000111a:	96ba                	add	a3,a3,a4
        sum += TryInto::<u32>::try_into(index).unwrap();
6000111c:	00f80533          	add	a0,a6,a5
        sum += TryInto::<u32>::try_into(idxp1).unwrap();
60001120:	00b50833          	add	a6,a0,a1
60001124:	0585                	addi	a1,a1,1
60001126:	fe79                	bnez	a2,60001104 <betrusted_boot::ramtest_fast+0xe>
60001128:	4581                	li	a1,0
6000112a:	610086b7          	lui	a3,0x61008
6000112e:	6609                	lui	a2,0x2
60001130:	80060613          	addi	a2,a2,-2048 # 1800 <_hart_stack_size+0x1000>
60001134:	47a1                	li	a5,8
60001136:	8732                	mv	a4,a2
60001138:	00f66363          	bltu	a2,a5,6000113e <betrusted_boot::ramtest_fast+0x48>
6000113c:	4721                	li	a4,8
6000113e:	00271893          	slli	a7,a4,0x2
60001142:	4288                	lw	a0,0(a3)
60001144:	42dc                	lw	a5,4(a3)
60001146:	96c6                	add	a3,a3,a7
60001148:	8e19                	sub	a2,a2,a4
        checksum = checksum + a + b;
6000114a:	952e                	add	a0,a0,a1
6000114c:	00f505b3          	add	a1,a0,a5
60001150:	f275                	bnez	a2,60001134 <betrusted_boot::ramtest_fast+0x3e>
    if sum == checksum {
60001152:	00b81663          	bne	a6,a1,6000115e <betrusted_boot::ramtest_fast+0x68>
60001156:	600d05b7          	lui	a1,0x600d0
6000115a:	059d                	addi	a1,a1,7 # 600d0007 <_etext+0xcc883>
6000115c:	a811                	j	60001170 <betrusted_boot::ramtest_fast+0x7a>
6000115e:	40108537          	lui	a0,0x40108
60001162:	c10c                	sw	a1,0(a0)
60001164:	0330000f          	fence	rw,rw
60001168:	0bad0537          	lui	a0,0xbad0
6000116c:	00750593          	addi	a1,a0,7 # bad0007 <.Lline_table_start0+0xbacb1a4>
60001170:	40108537          	lui	a0,0x40108
60001174:	01052023          	sw	a6,0(a0) # 40108000 <.Lline_table_start0+0x4010319d>
60001178:	0330000f          	fence	rw,rw
6000117c:	c10c                	sw	a1,0(a0)
6000117e:	0330000f          	fence	rw,rw
}
60001182:	8082                	ret

60001184 <betrusted_boot::ramtest_fast>:
unsafe fn ramtest_fast<T>(test_slice: &mut [T], test_index: u32)
60001184:	4581                	li	a1,0
60001186:	610086b7          	lui	a3,0x61008
6000118a:	20000513          	li	a0,512
6000118e:	02000813          	li	a6,32
60001192:	47c1                	li	a5,16
60001194:	872a                	mv	a4,a0
60001196:	00f56363          	bltu	a0,a5,6000119c <betrusted_boot::ramtest_fast+0x18>
6000119a:	4741                	li	a4,16
6000119c:	00171793          	slli	a5,a4,0x1
600011a0:	00158613          	addi	a2,a1,1
600011a4:	00b69023          	sh	a1,0(a3) # 61008000 <_estack+0x4000>
600011a8:	00c69123          	sh	a2,2(a3)
600011ac:	96be                	add	a3,a3,a5
600011ae:	8d19                	sub	a0,a0,a4
600011b0:	85b2                	mv	a1,a2
600011b2:	ff0610e3          	bne	a2,a6,60001192 <betrusted_boot::ramtest_fast+0xe>
600011b6:	4501                	li	a0,0
600011b8:	61008637          	lui	a2,0x61008
600011bc:	20000593          	li	a1,512
600011c0:	4741                	li	a4,16
600011c2:	86ae                	mv	a3,a1
600011c4:	00e5e363          	bltu	a1,a4,600011ca <betrusted_boot::ramtest_fast+0x46>
600011c8:	46c1                	li	a3,16
600011ca:	00169813          	slli	a6,a3,0x1
600011ce:	00065783          	lhu	a5,0(a2) # 61008000 <_estack+0x4000>
600011d2:	00265703          	lhu	a4,2(a2)
600011d6:	9642                	add	a2,a2,a6
600011d8:	8d95                	sub	a1,a1,a3
        checksum = checksum + a + b;
600011da:	953e                	add	a0,a0,a5
600011dc:	953a                	add	a0,a0,a4
600011de:	f1ed                	bnez	a1,600011c0 <betrusted_boot::ramtest_fast+0x3c>
600011e0:	40000593          	li	a1,1024
    if sum == checksum {
600011e4:	00b51563          	bne	a0,a1,600011ee <betrusted_boot::ramtest_fast+0x6a>
600011e8:	600d0537          	lui	a0,0x600d0
600011ec:	a801                	j	600011fc <betrusted_boot::ramtest_fast+0x78>
600011ee:	40108637          	lui	a2,0x40108
600011f2:	c208                	sw	a0,0(a2)
600011f4:	0330000f          	fence	rw,rw
600011f8:	0bad0537          	lui	a0,0xbad0
600011fc:	0519                	addi	a0,a0,6 # bad0006 <.Lline_table_start0+0xbacb1a3>
600011fe:	40108637          	lui	a2,0x40108
60001202:	c20c                	sw	a1,0(a2)
60001204:	0330000f          	fence	rw,rw
60001208:	c208                	sw	a0,0(a2)
6000120a:	0330000f          	fence	rw,rw
}
6000120e:	8082                	ret

60001210 <betrusted_boot::ramtest_fast>:
unsafe fn ramtest_fast<T>(test_slice: &mut [T], test_index: u32)
60001210:	4601                	li	a2,0
60001212:	610086b7          	lui	a3,0x61008
60001216:	10000513          	li	a0,256
6000121a:	45a1                	li	a1,8
6000121c:	02000793          	li	a5,32
60001220:	872a                	mv	a4,a0
60001222:	00f56463          	bltu	a0,a5,6000122a <betrusted_boot::ramtest_fast+0x1a>
60001226:	02000713          	li	a4,32
6000122a:	00160793          	addi	a5,a2,1 # 40108001 <.Lline_table_start0+0x4010319e>
6000122e:	00c68023          	sb	a2,0(a3) # 61008000 <_estack+0x4000>
60001232:	00f680a3          	sb	a5,1(a3)
60001236:	96ba                	add	a3,a3,a4
60001238:	8d19                	sub	a0,a0,a4
6000123a:	863e                	mv	a2,a5
6000123c:	feb790e3          	bne	a5,a1,6000121c <betrusted_boot::ramtest_fast+0xc>
60001240:	4501                	li	a0,0
60001242:	61008637          	lui	a2,0x61008
60001246:	10000593          	li	a1,256
6000124a:	02000713          	li	a4,32
6000124e:	86ae                	mv	a3,a1
60001250:	00e5e463          	bltu	a1,a4,60001258 <betrusted_boot::ramtest_fast+0x48>
60001254:	02000693          	li	a3,32
60001258:	00064703          	lbu	a4,0(a2) # 61008000 <_estack+0x4000>
6000125c:	00164783          	lbu	a5,1(a2)
60001260:	9636                	add	a2,a2,a3
60001262:	8d95                	sub	a1,a1,a3
        checksum = checksum + a + b;
60001264:	953a                	add	a0,a0,a4
60001266:	953e                	add	a0,a0,a5
60001268:	f1ed                	bnez	a1,6000124a <betrusted_boot::ramtest_fast+0x3a>
6000126a:	04000593          	li	a1,64
    if sum == checksum {
6000126e:	00b51563          	bne	a0,a1,60001278 <betrusted_boot::ramtest_fast+0x68>
60001272:	600d0537          	lui	a0,0x600d0
60001276:	a801                	j	60001286 <betrusted_boot::ramtest_fast+0x76>
60001278:	40108637          	lui	a2,0x40108
6000127c:	c208                	sw	a0,0(a2)
6000127e:	0330000f          	fence	rw,rw
60001282:	0bad0537          	lui	a0,0xbad0
60001286:	0515                	addi	a0,a0,5 # bad0005 <.Lline_table_start0+0xbacb1a2>
60001288:	40108637          	lui	a2,0x40108
6000128c:	c20c                	sw	a1,0(a2)
6000128e:	0330000f          	fence	rw,rw
60001292:	c208                	sw	a0,0(a2)
60001294:	0330000f          	fence	rw,rw
}
60001298:	8082                	ret

6000129a <betrusted_boot::ramtest_fast>:
unsafe fn ramtest_fast<T>(test_slice: &mut [T], test_index: u32)
6000129a:	4881                	li	a7,0
6000129c:	610086b7          	lui	a3,0x61008
600012a0:	4585                	li	a1,1
600012a2:	6505                	lui	a0,0x1
600012a4:	c0050613          	addi	a2,a0,-1024 # c00 <_hart_stack_size+0x400>
600012a8:	4711                	li	a4,4
600012aa:	8532                	mv	a0,a2
600012ac:	00e66363          	bltu	a2,a4,600012b2 <betrusted_boot::ramtest_fast+0x18>
600012b0:	4511                	li	a0,4
600012b2:	fff58713          	addi	a4,a1,-1
600012b6:	8e09                	sub	a2,a2,a0
600012b8:	050e                	slli	a0,a0,0x3
600012ba:	0006a223          	sw	zero,4(a3) # 61008004 <_estack+0x4004>
600012be:	c298                	sw	a4,0(a3)
600012c0:	0006a623          	sw	zero,12(a3)
600012c4:	c68c                	sw	a1,8(a3)
600012c6:	96aa                	add	a3,a3,a0
        sum += TryInto::<u32>::try_into(index).unwrap();
600012c8:	00e88533          	add	a0,a7,a4
        sum += TryInto::<u32>::try_into(idxp1).unwrap();
600012cc:	00b508b3          	add	a7,a0,a1
600012d0:	0585                	addi	a1,a1,1
600012d2:	fa79                	bnez	a2,600012a8 <betrusted_boot::ramtest_fast+0xe>
600012d4:	4301                	li	t1,0
600012d6:	61008637          	lui	a2,0x61008
600012da:	6505                	lui	a0,0x1
600012dc:	c0050693          	addi	a3,a0,-1024 # c00 <_hart_stack_size+0x400>
600012e0:	4805                	li	a6,1
600012e2:	4511                	li	a0,4
600012e4:	87b6                	mv	a5,a3
600012e6:	00a6e363          	bltu	a3,a0,600012ec <betrusted_boot::ramtest_fast+0x52>
600012ea:	4791                	li	a5,4
600012ec:	4248                	lw	a0,4(a2)
600012ee:	420c                	lw	a1,0(a2)
600012f0:	4658                	lw	a4,12(a2)
600012f2:	00862283          	lw	t0,8(a2) # 61008008 <_estack+0x4008>
600012f6:	c509                	beqz	a0,60001300 <betrusted_boot::ramtest_fast+0x66>
600012f8:	859a                	mv	a1,t1
        checksum = checksum + a + b;
600012fa:	01051663          	bne	a0,a6,60001306 <betrusted_boot::ramtest_fast+0x6c>
600012fe:	a029                	j	60001308 <betrusted_boot::ramtest_fast+0x6e>
60001300:	959a                	add	a1,a1,t1
60001302:	01050363          	beq	a0,a6,60001308 <betrusted_boot::ramtest_fast+0x6e>
60001306:	832e                	mv	t1,a1
60001308:	c709                	beqz	a4,60001312 <betrusted_boot::ramtest_fast+0x78>
6000130a:	851a                	mv	a0,t1
6000130c:	01071763          	bne	a4,a6,6000131a <betrusted_boot::ramtest_fast+0x80>
60001310:	a031                	j	6000131c <betrusted_boot::ramtest_fast+0x82>
60001312:	00530533          	add	a0,t1,t0
60001316:	01070363          	beq	a4,a6,6000131c <betrusted_boot::ramtest_fast+0x82>
6000131a:	832a                	mv	t1,a0
6000131c:	00379513          	slli	a0,a5,0x3
60001320:	8e9d                	sub	a3,a3,a5
60001322:	962a                	add	a2,a2,a0
60001324:	fedd                	bnez	a3,600012e2 <betrusted_boot::ramtest_fast+0x48>
    if sum == checksum {
60001326:	00689563          	bne	a7,t1,60001330 <betrusted_boot::ramtest_fast+0x96>
6000132a:	600d0537          	lui	a0,0x600d0
6000132e:	a809                	j	60001340 <betrusted_boot::ramtest_fast+0xa6>
60001330:	40108537          	lui	a0,0x40108
60001334:	00652023          	sw	t1,0(a0) # 40108000 <.Lline_table_start0+0x4010319d>
60001338:	0330000f          	fence	rw,rw
6000133c:	0bad0537          	lui	a0,0xbad0
60001340:	0525                	addi	a0,a0,9 # bad0009 <.Lline_table_start0+0xbacb1a6>
60001342:	401085b7          	lui	a1,0x40108
60001346:	0115a023          	sw	a7,0(a1) # 40108000 <.Lline_table_start0+0x4010319d>
6000134a:	0330000f          	fence	rw,rw
6000134e:	c188                	sw	a0,0(a1)
60001350:	0330000f          	fence	rw,rw
}
60001354:	8082                	ret

60001356 <betrusted_boot::ramtest_lfsr>:

/// uses an LFSR to cycle through "random" locations. The slice length
/// should equal the (LFSR period+1), so that we guarantee that each entry
/// is visited once.
#[cfg(feature="sim")]
unsafe fn ramtest_lfsr<T>(test_slice: &mut [T], test_index: u32)
60001356:	4501                	li	a0,0
60001358:	610085b7          	lui	a1,0x61008
6000135c:	0005a023          	sw	zero,0(a1) # 61008000 <_estack+0x4000>
60001360:	4685                	li	a3,1
60001362:	5fd00613          	li	a2,1533
    (&mut test_slice[0] as *mut T).write_volatile(
        0.try_into().unwrap_or_default()
    ); // the 0 index is never written to by this, initialize it to 0
    for i in 0..MAX_STATES {
        let wr_val = i * 3;
        (&mut test_slice[state as usize] as *mut T).write_volatile(wr_val.try_into().unwrap_or_default());
60001366:	01069713          	slli	a4,a3,0x10
6000136a:	8341                	srli	a4,a4,0x10
6000136c:	00271793          	slli	a5,a4,0x2
60001370:	97ae                	add	a5,a5,a1
60001372:	c388                	sw	a0,0(a5)
    let bit = ((state >> 8) ^
60001374:	00875793          	srli	a5,a4,0x8
               (state >>  4)) & 1;
60001378:	8311                	srli	a4,a4,0x4
    let bit = ((state >> 8) ^
6000137a:	8f3d                	xor	a4,a4,a5
6000137c:	8b05                	andi	a4,a4,1
    ((state << 1) + bit) & 0x1_FF
6000137e:	06e2                	slli	a3,a3,0x18
60001380:	82dd                	srli	a3,a3,0x17
60001382:	050d                	addi	a0,a0,3
60001384:	8ed9                	or	a3,a3,a4
60001386:	fec510e3          	bne	a0,a2,60001366 <betrusted_boot::ramtest_lfsr+0x10>
6000138a:	4581                	li	a1,0
6000138c:	4501                	li	a0,0
6000138e:	ff010637          	lui	a2,0xff010
60001392:	f0060613          	addi	a2,a2,-256 # ff00ff00 <_lcdfb+0x4f00ff00>
60001396:	401086b7          	lui	a3,0x40108
6000139a:	c290                	sw	a2,0(a3)
6000139c:	0330000f          	fence	rw,rw
        state = lfsr_next(state);
    }

    // flush cache
    report.wfo(utra::main::REPORT_REPORT, 0xff00_ff00);
    core::arch::asm!(
600013a0:	0000500f          	.4byte	0x500f
600013a4:	0f0f1637          	lui	a2,0xf0f1
600013a8:	f0f60613          	addi	a2,a2,-241 # f0f0f0f <.Lline_table_start0+0xf0ec0ac>
600013ac:	c290                	sw	a2,0(a3)
600013ae:	0330000f          	fence	rw,rw
600013b2:	61008637          	lui	a2,0x61008
600013b6:	6685                	lui	a3,0x1
600013b8:	80068693          	addi	a3,a3,-2048 # 800 <_hart_stack_size>
600013bc:	00c58733          	add	a4,a1,a2
600013c0:	4318                	lw	a4,0(a4)
600013c2:	0591                	addi	a1,a1,4
    for d in test_slice.iter() {
        let a = (d as *const T)
            .read_volatile()
            .try_into()
            .unwrap_or_default();
        checksum += a;
600013c4:	953a                	add	a0,a0,a4
600013c6:	fed59be3          	bne	a1,a3,600013bc <betrusted_boot::ramtest_lfsr+0x66>
600013ca:	0005f5b7          	lui	a1,0x5f
600013ce:	70358593          	addi	a1,a1,1795 # 5f703 <.Lline_table_start0+0x5a8a0>
        // report.wfo(utra::main::REPORT_REPORT, a);
    }

    if sum == checksum {
600013d2:	00b51563          	bne	a0,a1,600013dc <betrusted_boot::ramtest_lfsr+0x86>
600013d6:	600d0537          	lui	a0,0x600d0
600013da:	a801                	j	600013ea <betrusted_boot::ramtest_lfsr+0x94>
600013dc:	40108637          	lui	a2,0x40108
600013e0:	c208                	sw	a0,0(a2)
600013e2:	0330000f          	fence	rw,rw
600013e6:	0bad0537          	lui	a0,0xbad0
600013ea:	050d                	addi	a0,a0,3 # bad0003 <.Lline_table_start0+0xbacb1a0>
600013ec:	40108637          	lui	a2,0x40108
600013f0:	c20c                	sw	a1,0(a2)
600013f2:	0330000f          	fence	rw,rw
600013f6:	c208                	sw	a0,0(a2)
600013f8:	0330000f          	fence	rw,rw
    } else {
        report.wfo(utra::main::REPORT_REPORT, checksum as u32);
        report.wfo(utra::main::REPORT_REPORT, sum as u32);
        report.wfo(utra::main::REPORT_REPORT, 0x0bad_0000 + test_index);
    }
}
600013fc:	8082                	ret

600013fe <rust_entry>:
        duart.puts("DUART up!\n");
    }
}

#[export_name = "rust_entry"]
pub unsafe extern "C" fn rust_entry(_unused1: *const usize, _unused2: u32) -> ! {
600013fe:	ca010113          	addi	sp,sp,-864
60001402:	34112e23          	sw	ra,860(sp)
60001406:	34812c23          	sw	s0,856(sp)
6000140a:	34912a23          	sw	s1,852(sp)
6000140e:	35212823          	sw	s2,848(sp)
60001412:	35312623          	sw	s3,844(sp)
60001416:	35412423          	sw	s4,840(sp)
6000141a:	35512223          	sw	s5,836(sp)
6000141e:	35612023          	sw	s6,832(sp)
60001422:	33712e23          	sw	s7,828(sp)
60001426:	33812c23          	sw	s8,824(sp)
6000142a:	33912a23          	sw	s9,820(sp)
6000142e:	33a12823          	sw	s10,816(sp)
60001432:	33b12623          	sw	s11,812(sp)
60001436:	600dc537          	lui	a0,0x600dc
6000143a:	0de50513          	addi	a0,a0,222 # 600dc0de <_etext+0xd895a>
6000143e:	40108437          	lui	s0,0x40108
60001442:	c008                	sw	a0,0(s0)
60001444:	0330000f          	fence	rw,rw
60001448:	5801a537          	lui	a0,0x5801a
6000144c:	4108                	lw	a0,0(a0)
6000144e:	c008                	sw	a0,0(s0)
60001450:	0330000f          	fence	rw,rw
60001454:	0d100537          	lui	a0,0xd100
60001458:	5d150513          	addi	a0,a0,1489 # d1005d1 <.Lline_table_start0+0xd0fb76e>
6000145c:	c008                	sw	a0,0(s0)
6000145e:	0330000f          	fence	rw,rw
60001462:	6541                	lui	a0,0x10
60001464:	d82a                	sw	a0,48(sp)
60001466:	657d                	lui	a0,0x1f
60001468:	da2a                	sw	a0,52(sp)
6000146a:	420c0537          	lui	a0,0x420c0
6000146e:	dc2a                	sw	a0,56(sp)
60001470:	de02                	sw	zero,60(sp)
60001472:	40202537          	lui	a0,0x40202
60001476:	c0aa                	sw	a0,64(sp)
60001478:	c282                	sw	zero,68(sp)
6000147a:	4485                	li	s1,1
6000147c:	c4a6                	sw	s1,72(sp)
6000147e:	05d10ab7          	lui	s5,0x5d10
60001482:	01542023          	sw	s5,0(s0) # 40108000 <.Lline_table_start0+0x4010319d>
60001486:	0330000f          	fence	rw,rw
6000148a:	51016537          	lui	a0,0x51016
6000148e:	10150513          	addi	a0,a0,257 # 51016101 <.Lline_table_start0+0x5101129e>
        "mov pins, x side 1 [1]", // Output data, assert SCK (mov pins uses OUT mapping)
        "in pins, 1  side 0" // Input data, deassert SCK
    );
    let mut prog_cpha0 = spi_cpha0_prog.program;
    report.wfo(utra::main::REPORT_REPORT, 0x05D1_0000);
    prog_cpha0 = pio_sm.add_program(prog_cpha0).unwrap();
60001492:	22a12023          	sw	a0,544(sp)
60001496:	1448                	addi	a0,sp,548
60001498:	016c                	addi	a1,sp,140
6000149a:	03c00613          	li	a2,60
6000149e:	00001097          	auipc	ra,0x1
600014a2:	7ea080e7          	jalr	2026(ra) # 60002c88 <memcpy>
600014a6:	4b09                	li	s6,2
600014a8:	27612023          	sw	s6,608(sp)
600014ac:	10100a13          	li	s4,257
600014b0:	27412223          	sw	s4,612(sp)
600014b4:	26911423          	sh	s1,616(sp)
600014b8:	26010523          	sb	zero,618(sp)
600014bc:	01a8                	addi	a0,sp,200
600014be:	180c                	addi	a1,sp,48
600014c0:	1410                	addi	a2,sp,544
600014c2:	fffff097          	auipc	ra,0xfffff
600014c6:	fa4080e7          	jalr	-92(ra) # 60000466 <betrusted_boot::pio::PioSm::add_program>
600014ca:	10e14503          	lbu	a0,270(sp)
600014ce:	01651f63          	bne	a0,s6,600014ec <rust_entry+0xee>
600014d2:	0c810503          	lb	a0,200(sp)
600014d6:	22a10023          	sb	a0,544(sp)
600014da:	60003537          	lui	a0,0x60003
600014de:	e2850593          	addi	a1,a0,-472 # 60002e28 <.Lanon.01042f9e07bac0588b13af07786e0e0c.4>
600014e2:	60003537          	lui	a0,0x60003
600014e6:	f6850613          	addi	a2,a0,-152 # 60002f68 <.Lanon.01042f9e07bac0588b13af07786e0e0c.26>
600014ea:	a851                	j	6000157e <rust_entry+0x180>
600014ec:	01ec                	addi	a1,sp,204
600014ee:	0168                	addi	a0,sp,140
600014f0:	03c00613          	li	a2,60
600014f4:	00001097          	auipc	ra,0x1
600014f8:	794080e7          	jalr	1940(ra) # 60002c88 <memcpy>
600014fc:	11014983          	lbu	s3,272(sp)
60001500:	11114903          	lbu	s2,273(sp)
60001504:	11214b83          	lbu	s7,274(sp)
60001508:	11314483          	lbu	s1,275(sp)
6000150c:	001a8513          	addi	a0,s5,1 # 5d10001 <.Lline_table_start0+0x5d0b19e>
60001510:	c008                	sw	a0,0(s0)
60001512:	0330000f          	fence	rw,rw
60001516:	b1016537          	lui	a0,0xb1016
6000151a:	02150513          	addi	a0,a0,33 # b1016021 <_lcdfb+0x1016021>
    report.wfo(utra::main::REPORT_REPORT, 0x05D1_0001);
    let mut prog_cpha1 = spi_cpha1_prog.program;
    prog_cpha1 = pio_sm.add_program(prog_cpha1).unwrap();
6000151e:	22a12023          	sw	a0,544(sp)
60001522:	6511                	lui	a0,0x4
60001524:	0505                	addi	a0,a0,1 # 4001 <_stack_size+0x1>
60001526:	22a11223          	sh	a0,548(sp)
6000152a:	22610513          	addi	a0,sp,550
6000152e:	05210593          	addi	a1,sp,82
60001532:	03a00613          	li	a2,58
60001536:	00001097          	auipc	ra,0x1
6000153a:	752080e7          	jalr	1874(ra) # 60002c88 <memcpy>
6000153e:	450d                	li	a0,3
60001540:	26a12023          	sw	a0,608(sp)
60001544:	27412223          	sw	s4,612(sp)
60001548:	27611423          	sh	s6,616(sp)
6000154c:	26010523          	sb	zero,618(sp)
60001550:	01a8                	addi	a0,sp,200
60001552:	180c                	addi	a1,sp,48
60001554:	1410                	addi	a2,sp,544
60001556:	fffff097          	auipc	ra,0xfffff
6000155a:	f10080e7          	jalr	-240(ra) # 60000466 <betrusted_boot::pio::PioSm::add_program>
6000155e:	10e14503          	lbu	a0,270(sp)
60001562:	03651463          	bne	a0,s6,6000158a <rust_entry+0x18c>
60001566:	0c810503          	lb	a0,200(sp)
6000156a:	22a10023          	sb	a0,544(sp)
6000156e:	60003537          	lui	a0,0x60003
60001572:	e2850593          	addi	a1,a0,-472 # 60002e28 <.Lanon.01042f9e07bac0588b13af07786e0e0c.4>
60001576:	60003537          	lui	a0,0x60003
6000157a:	f7850613          	addi	a2,a0,-136 # 60002f78 <.Lanon.01042f9e07bac0588b13af07786e0e0c.27>
6000157e:	1408                	addi	a0,sp,544
60001580:	00001097          	auipc	ra,0x1
60001584:	672080e7          	jalr	1650(ra) # 60002bf2 <core::result::unwrap_failed>
60001588:	0000                	unimp
6000158a:	ce5e                	sw	s7,28(sp)
6000158c:	c826                	sw	s1,16(sp)
6000158e:	11014503          	lbu	a0,272(sp)
60001592:	ca2a                	sw	a0,20(sp)
60001594:	11114503          	lbu	a0,273(sp)
60001598:	cc2a                	sw	a0,24(sp)
6000159a:	11214503          	lbu	a0,274(sp)
6000159e:	c22a                	sw	a0,4(sp)
600015a0:	11314503          	lbu	a0,275(sp)
600015a4:	c42a                	sw	a0,8(sp)
600015a6:	05d10537          	lui	a0,0x5d10
600015aa:	0509                	addi	a0,a0,2 # 5d10002 <.Lline_table_start0+0x5d0b19f>
600015ac:	401085b7          	lui	a1,0x40108
600015b0:	c188                	sw	a0,0(a1)
600015b2:	0330000f          	fence	rw,rw
            .unwrap_or_default()
    }
    /// Shift & mask a value to its final field position
    pub fn ms(&self, field: Field, value: T) -> T {
        let value_as_usize: usize = value.try_into().unwrap_or_default();
        ((value_as_usize & field.mask) << field.offset)
600015b6:	01b99513          	slli	a0,s3,0x1b
600015ba:	813d                	srli	a0,a0,0xf
600015bc:	01b91593          	slli	a1,s2,0x1b
600015c0:	81d1                	srli	a1,a1,0x14
        self.config.execctl =
600015c2:	8d4d                	or	a0,a0,a1
600015c4:	da2a                	sw	a0,52(sp)
600015c6:	00185537          	lui	a0,0x185
600015ca:	81050513          	addi	a0,a0,-2032 # 184810 <.Lline_table_start0+0x17f9ad>
        self.config.pinctl =
600015ce:	de2a                	sw	a0,60(sp)
600015d0:	50830537          	lui	a0,0x50830
        self.config.shiftctl =
600015d4:	dc2a                	sw	a0,56(sp)
600015d6:	001f4537          	lui	a0,0x1f4
        self.config.clkdiv =
600015da:	d82a                	sw	a0,48(sp)
        match self.sm {
600015dc:	4526                	lw	a0,72(sp)
600015de:	7581                	lui	a1,0xfffe0
600015e0:	050a                	slli	a0,a0,0x2
600015e2:	60003637          	lui	a2,0x60003
600015e6:	3b860613          	addi	a2,a2,952 # 600033b8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.40+0xc>
600015ea:	9532                	add	a0,a0,a2
600015ec:	ffc52503          	lw	a0,-4(a0) # 1f3ffc <.Lline_table_start0+0x1ef199>
            let pinctrl_saved = self.pio.base.add(rp_pio::SFR_SM0_PINCTRL.offset() + sm_offset).read_volatile();
600015f0:	4c06                	lw	s8,64(sp)
600015f2:	fff58613          	addi	a2,a1,-1 # fffdffff <_lcdfb+0x4ffdffff>
600015f6:	6585                	lui	a1,0x1
600015f8:	050a                	slli	a0,a0,0x2
600015fa:	01850ab3          	add	s5,a0,s8
600015fe:	0dcaa503          	lw	a0,220(s5)
60001602:	d22a                	sw	a0,36(sp)
60001604:	0ccaa503          	lw	a0,204(s5)
60001608:	d02a                	sw	a0,32(sp)
6000160a:	0ccaa503          	lw	a0,204(s5)
6000160e:	f8058593          	addi	a1,a1,-128 # f80 <_hart_stack_size+0x780>
60001612:	c62e                	sw	a1,12(sp)
60001614:	0dca8413          	addi	s0,s5,220
60001618:	0cca8593          	addi	a1,s5,204
6000161c:	d62e                	sw	a1,44(sp)
6000161e:	d432                	sw	a2,40(sp)
        (value_as_usize & !(field.mask << field.offset))
60001620:	8d71                	and	a0,a0,a2
60001622:	0caaa623          	sw	a0,204(s5)
60001626:	00050b37          	lui	s6,0x50
6000162a:	55555537          	lui	a0,0x55555
6000162e:	55550493          	addi	s1,a0,1365 # 55555555 <.Lline_table_start0+0x555506f2>
60001632:	33333537          	lui	a0,0x33333
60001636:	33350c93          	addi	s9,a0,819 # 33333333 <.Lline_table_start0+0x3332e4d0>
6000163a:	0f0f1537          	lui	a0,0xf0f1
6000163e:	f0f50b93          	addi	s7,a0,-241 # f0f0f0f <.Lline_table_start0+0xf0ec0ac>
60001642:	01010537          	lui	a0,0x1010
60001646:	10150d13          	addi	s10,a0,257 # 1010101 <.Lline_table_start0+0x100b29e>
6000164a:	04000db7          	lui	s11,0x4000
6000164e:	1d010a13          	addi	s4,sp,464
60001652:	0d8a8913          	addi	s2,s5,216
60001656:	fffb0993          	addi	s3,s6,-1 # 4ffff <.Lline_table_start0+0x4b19c>
6000165a:	fffb4513          	not	a0,s6
6000165e:	01357533          	and	a0,a0,s3
60001662:	00155593          	srli	a1,a0,0x1
60001666:	8de5                	and	a1,a1,s1
60001668:	8d0d                	sub	a0,a0,a1
6000166a:	019575b3          	and	a1,a0,s9
6000166e:	8109                	srli	a0,a0,0x2
60001670:	01957533          	and	a0,a0,s9
60001674:	952e                	add	a0,a0,a1
60001676:	00455593          	srli	a1,a0,0x4
6000167a:	952e                	add	a0,a0,a1
6000167c:	01757533          	and	a0,a0,s7
60001680:	03a50533          	mul	a0,a0,s10
        ((value_as_usize & field.mask) << field.offset)
60001684:	814d                	srli	a0,a0,0x13
60001686:	01b56533          	or	a0,a0,s11
                    self.pio.ms(rp_pio::SFR_SM0_PINCTRL_PINS_SET_COUNT, 1)
6000168a:	9901                	andi	a0,a0,-32
6000168c:	c008                	sw	a0,0(s0)
        Assembler {
6000168e:	1c012423          	sw	zero,456(sp)
60001692:	1c012623          	sw	zero,460(sp)
            $self.instructions.push(Instruction {
60001696:	01a8                	addi	a0,sp,200
60001698:	080005b7          	lui	a1,0x8000
6000169c:	4601                	li	a2,0
6000169e:	fffff097          	auipc	ra,0xfffff
600016a2:	d32080e7          	jalr	-718(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
                let p= a.assemble_program();
600016a6:	1408                	addi	a0,sp,544
600016a8:	01ac                	addi	a1,sp,200
600016aa:	10800613          	li	a2,264
600016ae:	00001097          	auipc	ra,0x1
600016b2:	5da080e7          	jalr	1498(ra) # 60002c88 <memcpy>
600016b6:	0b88                	addi	a0,sp,464
600016b8:	140c                	addi	a1,sp,544
600016ba:	fffff097          	auipc	ra,0xfffff
600016be:	9a2080e7          	jalr	-1630(ra) # 6000005c <pio::Assembler<_>::assemble_program>
                self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
600016c2:	21a14583          	lbu	a1,538(sp)
600016c6:	4501                	li	a0,0
600016c8:	c199                	beqz	a1,600016ce <rust_entry+0x2d0>
600016ca:	21b10503          	lb	a0,539(sp)
600016ce:	21012583          	lw	a1,528(sp)
600016d2:	0ff57513          	zext.b	a0,a0
600016d6:	62b57463          	bgeu	a0,a1,60001cfe <rust_entry+0x900>
600016da:	0506                	slli	a0,a0,0x1
600016dc:	9552                	add	a0,a0,s4
600016de:	00055503          	lhu	a0,0(a0)
                pin_mask &= pin_mask - 1;
600016e2:	0169fb33          	and	s6,s3,s6
600016e6:	0caaac23          	sw	a0,216(s5)
            while pin_mask != 0 {
600016ea:	f60b16e3          	bnez	s6,60001656 <rust_entry+0x258>
600016ee:	5512                	lw	a0,36(sp)
600016f0:	c008                	sw	a0,0(s0)
600016f2:	5632                	lw	a2,44(sp)
600016f4:	5502                	lw	a0,32(sp)
600016f6:	c208                	sw	a0,0(a2)
600016f8:	4008                	lw	a0,0(s0)
600016fa:	d22a                	sw	a0,36(sp)
600016fc:	4208                	lw	a0,0(a2)
600016fe:	d02a                	sw	a0,32(sp)
60001700:	4208                	lw	a0,0(a2)
        (value_as_usize & !(field.mask << field.offset))
60001702:	55a2                	lw	a1,40(sp)
60001704:	8d6d                	and	a0,a0,a1
60001706:	c208                	sw	a0,0(a2)
60001708:	000509b7          	lui	s3,0x50
6000170c:	55555537          	lui	a0,0x55555
60001710:	55550b13          	addi	s6,a0,1365 # 55555555 <.Lline_table_start0+0x555506f2>
60001714:	33333537          	lui	a0,0x33333
60001718:	33350493          	addi	s1,a0,819 # 33333333 <.Lline_table_start0+0x3332e4d0>
6000171c:	0f0f1537          	lui	a0,0xf0f1
60001720:	f0f50c93          	addi	s9,a0,-241 # f0f0f0f <.Lline_table_start0+0xf0ec0ac>
60001724:	01010537          	lui	a0,0x1010
60001728:	10150b93          	addi	s7,a0,257 # 1010101 <.Lline_table_start0+0x100b29e>
6000172c:	04000d37          	lui	s10,0x4000
60001730:	1d010d93          	addi	s11,sp,464
60001734:	00050ab7          	lui	s5,0x50
60001738:	fffa8a13          	addi	s4,s5,-1 # 4ffff <.Lline_table_start0+0x4b19c>
6000173c:	fffac513          	not	a0,s5
60001740:	01457533          	and	a0,a0,s4
60001744:	00155593          	srli	a1,a0,0x1
60001748:	0165f5b3          	and	a1,a1,s6
6000174c:	8d0d                	sub	a0,a0,a1
6000174e:	009575b3          	and	a1,a0,s1
60001752:	8109                	srli	a0,a0,0x2
60001754:	8d65                	and	a0,a0,s1
60001756:	952e                	add	a0,a0,a1
60001758:	00455593          	srli	a1,a0,0x4
6000175c:	952e                	add	a0,a0,a1
6000175e:	01957533          	and	a0,a0,s9
60001762:	03750533          	mul	a0,a0,s7
60001766:	8161                	srli	a0,a0,0x18
        ((value_as_usize & field.mask) << field.offset)
60001768:	00551593          	slli	a1,a0,0x5
                    self.pio.ms(rp_pio::SFR_SM0_PINCTRL_PINS_SET_COUNT, 1)
6000176c:	01a5e5b3          	or	a1,a1,s10
60001770:	c00c                	sw	a1,0(s0)
        Assembler {
60001772:	1c012423          	sw	zero,456(sp)
60001776:	1c012623          	sw	zero,460(sp)
                a.set(pio::SetDestination::PINDIRS, ((pindirs >> base) & 1) as u8);
6000177a:	00a9d533          	srl	a0,s3,a0
            $self.instructions.push(Instruction {
6000177e:	8905                	andi	a0,a0,1
60001780:	40000593          	li	a1,1024
60001784:	00b56633          	or	a2,a0,a1
60001788:	01a8                	addi	a0,sp,200
6000178a:	080005b7          	lui	a1,0x8000
6000178e:	fffff097          	auipc	ra,0xfffff
60001792:	c42080e7          	jalr	-958(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
                let p= a.assemble_program();
60001796:	1408                	addi	a0,sp,544
60001798:	01ac                	addi	a1,sp,200
6000179a:	10800613          	li	a2,264
6000179e:	00001097          	auipc	ra,0x1
600017a2:	4ea080e7          	jalr	1258(ra) # 60002c88 <memcpy>
600017a6:	0b88                	addi	a0,sp,464
600017a8:	140c                	addi	a1,sp,544
600017aa:	fffff097          	auipc	ra,0xfffff
600017ae:	8b2080e7          	jalr	-1870(ra) # 6000005c <pio::Assembler<_>::assemble_program>
                self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
600017b2:	21a14583          	lbu	a1,538(sp)
600017b6:	4501                	li	a0,0
600017b8:	c199                	beqz	a1,600017be <rust_entry+0x3c0>
600017ba:	21b10503          	lb	a0,539(sp)
600017be:	21012583          	lw	a1,528(sp)
600017c2:	0ff57513          	zext.b	a0,a0
600017c6:	54b57563          	bgeu	a0,a1,60001d10 <rust_entry+0x912>
600017ca:	0506                	slli	a0,a0,0x1
600017cc:	956e                	add	a0,a0,s11
600017ce:	00055503          	lhu	a0,0(a0)
                pin_mask &= pin_mask - 1;
600017d2:	015a7ab3          	and	s5,s4,s5
600017d6:	00a92023          	sw	a0,0(s2)
            while pin_mask != 0 {
600017da:	f40a9fe3          	bnez	s5,60001738 <rust_entry+0x33a>
600017de:	5512                	lw	a0,36(sp)
600017e0:	c008                	sw	a0,0(s0)
600017e2:	5532                	lw	a0,44(sp)
600017e4:	5582                	lw	a1,32(sp)
600017e6:	c10c                	sw	a1,0(a0)
600017e8:	6541                	lui	a0,0x10
600017ea:	02ac2c23          	sw	a0,56(s8)
600017ee:	0330000f          	fence	rw,rw
600017f2:	4572                	lw	a0,28(sp)
600017f4:	e105                	bnez	a0,60001814 <rust_entry+0x416>
600017f6:	60003537          	lui	a0,0x60003
600017fa:	dc050513          	addi	a0,a0,-576 # 60002dc0 <.Lanon.01042f9e07bac0588b13af07786e0e0c.1>
600017fe:	600035b7          	lui	a1,0x60003
60001802:	f5858613          	addi	a2,a1,-168 # 60002f58 <.Lanon.01042f9e07bac0588b13af07786e0e0c.25>
60001806:	02b00593          	li	a1,43
6000180a:	00001097          	auipc	ra,0x1
6000180e:	3a4080e7          	jalr	932(ra) # 60002bae <core::panicking::panic>
60001812:	0000                	unimp
60001814:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001818:	4506                	lw	a0,64(sp)
6000181a:	410c                	lw	a1,0(a0)
                self.pio.rf(rp_pio::SFR_CTRL_EN) & !(self.sm as u32)
6000181c:	4626                	lw	a2,72(sp)
6000181e:	4114                	lw	a3,0(a0)
60001820:	fff64613          	not	a2,a2
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
60001824:	8df1                	and	a1,a1,a2
60001826:	89bd                	andi	a1,a1,15
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001828:	ff06f613          	andi	a2,a3,-16
6000182c:	8dd1                	or	a1,a1,a2
6000182e:	c10c                	sw	a1,0(a0)
60001830:	0330000f          	fence	rw,rw
        match self.sm {
60001834:	4526                	lw	a0,72(sp)
60001836:	00251593          	slli	a1,a0,0x2
6000183a:	60003637          	lui	a2,0x60003
6000183e:	3b860613          	addi	a2,a2,952 # 600033b8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.40+0xc>
60001842:	95b2                	add	a1,a1,a2
60001844:	ffc5a583          	lw	a1,-4(a1)
            self.pio.base.add(rp_pio::SFR_SM0_CLKDIV.offset() + sm_offset).write_volatile(self.config.clkdiv);
60001848:	4606                	lw	a2,64(sp)
6000184a:	56c2                	lw	a3,48(sp)
6000184c:	058a                	slli	a1,a1,0x2
6000184e:	95b2                	add	a1,a1,a2
60001850:	0cd5a423          	sw	a3,200(a1)
            self.pio.base.add(rp_pio::SFR_SM0_EXECCTRL.offset() + sm_offset).write_volatile(self.config.execctl);
60001854:	56d2                	lw	a3,52(sp)
60001856:	0cd5a623          	sw	a3,204(a1)
            self.pio.base.add(rp_pio::SFR_SM0_SHIFTCTRL.offset() + sm_offset).write_volatile(self.config.shiftctl);
6000185a:	56e2                	lw	a3,56(sp)
6000185c:	0cd5a823          	sw	a3,208(a1)
            self.pio.base.add(rp_pio::SFR_SM0_PINCTRL.offset() + sm_offset).write_volatile(self.config.pinctl);
60001860:	56f2                	lw	a3,60(sp)
60001862:	0cd5ae23          	sw	a3,220(a1)
60001866:	0d05a683          	lw	a3,208(a1)
6000186a:	80000737          	lui	a4,0x80000
                baseval ^ bitval
6000186e:	8f35                	xor	a4,a4,a3
60001870:	0ce5a823          	sw	a4,208(a1)
60001874:	0cd5a823          	sw	a3,208(a1)
        ((value_as_usize & field.mask) << field.offset)
60001878:	01851593          	slli	a1,a0,0x18
6000187c:	01051693          	slli	a3,a0,0x10
60001880:	00851713          	slli	a4,a0,0x8
            self.pio.ms(rp_pio::SFR_FDEBUG_TXSTALL, self.sm as u32)
60001884:	8d55                	or	a0,a0,a3
60001886:	8d4d                	or	a0,a0,a1
60001888:	8d59                	or	a0,a0,a4
6000188a:	c608                	sw	a0,8(a2)
6000188c:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001890:	4506                	lw	a0,64(sp)
        self.pio.rmwf(rp_pio::SFR_CTRL_RESTART, self.sm as u32);
60001892:	45a6                	lw	a1,72(sp)
60001894:	4110                	lw	a2,0(a0)
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
60001896:	0592                	slli	a1,a1,0x4
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001898:	f0f67613          	andi	a2,a2,-241
                .write_volatile(previous | value_as_usize)
6000189c:	8dd1                	or	a1,a1,a2
6000189e:	c10c                	sw	a1,0(a0)
600018a0:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
600018a4:	4506                	lw	a0,64(sp)
        self.pio.rmwf(rp_pio::SFR_CTRL_CLKDIV_RESTART, self.sm as u32);
600018a6:	45a6                	lw	a1,72(sp)
600018a8:	4110                	lw	a2,0(a0)
600018aa:	76fd                	lui	a3,0xfffff
600018ac:	0ff68693          	addi	a3,a3,255 # fffff0ff <_lcdfb+0x4ffff0ff>
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
600018b0:	05a2                	slli	a1,a1,0x8
600018b2:	ce36                	sw	a3,28(sp)
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
600018b4:	8e75                	and	a2,a2,a3
                .write_volatile(previous | value_as_usize)
600018b6:	8dd1                	or	a1,a1,a2
600018b8:	c10c                	sw	a1,0(a0)
600018ba:	0330000f          	fence	rw,rw
        Assembler {
600018be:	1c012423          	sw	zero,456(sp)
600018c2:	1c012623          	sw	zero,460(sp)
            $self.instructions.push(Instruction {
600018c6:	01a8                	addi	a0,sp,200
600018c8:	4581                	li	a1,0
600018ca:	4642                	lw	a2,16(sp)
600018cc:	fffff097          	auipc	ra,0xfffff
600018d0:	b04080e7          	jalr	-1276(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
        let p= a.assemble_program();
600018d4:	1408                	addi	a0,sp,544
600018d6:	01ac                	addi	a1,sp,200
600018d8:	10800613          	li	a2,264
600018dc:	00001097          	auipc	ra,0x1
600018e0:	3ac080e7          	jalr	940(ra) # 60002c88 <memcpy>
600018e4:	0b88                	addi	a0,sp,464
600018e6:	140c                	addi	a1,sp,544
600018e8:	ffffe097          	auipc	ra,0xffffe
600018ec:	774080e7          	jalr	1908(ra) # 6000005c <pio::Assembler<_>::assemble_program>
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
600018f0:	21a14603          	lbu	a2,538(sp)
    pub const fn len(&self) -> usize { self.len as usize }
600018f4:	21012583          	lw	a1,528(sp)
600018f8:	4501                	li	a0,0
600018fa:	c219                	beqz	a2,60001900 <rust_entry+0x502>
600018fc:	21b10503          	lb	a0,539(sp)
60001900:	0ff57513          	zext.b	a0,a0
60001904:	40b57b63          	bgeu	a0,a1,60001d1a <rust_entry+0x91c>
        match self.sm {
60001908:	45a6                	lw	a1,72(sp)
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
6000190a:	0506                	slli	a0,a0,0x1
6000190c:	1d010993          	addi	s3,sp,464
60001910:	954e                	add	a0,a0,s3
        match self.sm {
60001912:	058a                	slli	a1,a1,0x2
60001914:	60003637          	lui	a2,0x60003
60001918:	3b860913          	addi	s2,a2,952 # 600033b8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.40+0xc>
6000191c:	95ca                	add	a1,a1,s2
6000191e:	ffc5a583          	lw	a1,-4(a1)
            self.pio.base.add(rp_pio::SFR_SM0_INSTR.offset() + sm_offset)
60001922:	4606                	lw	a2,64(sp)
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001924:	00055503          	lhu	a0,0(a0)
            self.pio.base.add(rp_pio::SFR_SM0_INSTR.offset() + sm_offset)
60001928:	058a                	slli	a1,a1,0x2
6000192a:	95b2                	add	a1,a1,a2
6000192c:	0ca5ac23          	sw	a0,216(a1)
60001930:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001934:	4506                	lw	a0,64(sp)
60001936:	410c                	lw	a1,0(a0)
                self.pio.rf(rp_pio::SFR_CTRL_EN) | (self.sm as u32)
60001938:	4626                	lw	a2,72(sp)
6000193a:	4114                	lw	a3,0(a0)
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
6000193c:	89bd                	andi	a1,a1,15
6000193e:	8dd1                	or	a1,a1,a2
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001940:	ff06f613          	andi	a2,a3,-16
60001944:	8dd1                	or	a1,a1,a2
60001946:	c10c                	sw	a1,0(a0)
60001948:	0330000f          	fence	rw,rw
6000194c:	05d104b7          	lui	s1,0x5d10
60001950:	00348513          	addi	a0,s1,3 # 5d10003 <.Lline_table_start0+0x5d0b1a0>
60001954:	40108437          	lui	s0,0x40108
60001958:	c008                	sw	a0,0(s0)
6000195a:	0330000f          	fence	rw,rw
        PIN_SCK,
        PIN_MOSI,
        PIN_MISO
    );
    report.wfo(utra::main::REPORT_REPORT, 0x05D1_0003);
    if spi_test_core(&mut pio_sm) == false {
6000195e:	1808                	addi	a0,sp,48
60001960:	fffff097          	auipc	ra,0xfffff
60001964:	c02080e7          	jalr	-1022(ra) # 60000562 <betrusted_boot::pio::spi_test_core>
60001968:	00448593          	addi	a1,s1,4
6000196c:	c00c                	sw	a1,0(s0)
6000196e:	0330000f          	fence	rw,rw
        ((value_as_usize & field.mask) << field.offset)
60001972:	45d2                	lw	a1,20(sp)
60001974:	05ee                	slli	a1,a1,0x1b
60001976:	81bd                	srli	a1,a1,0xf
60001978:	4662                	lw	a2,24(sp)
6000197a:	061e                	slli	a2,a2,0x7
6000197c:	46b2                	lw	a3,12(sp)
6000197e:	8e75                	and	a2,a2,a3
        self.config.execctl =
60001980:	8dd1                	or	a1,a1,a2
60001982:	da2e                	sw	a1,52(sp)
60001984:	001855b7          	lui	a1,0x185
60001988:	81058593          	addi	a1,a1,-2032 # 184810 <.Lline_table_start0+0x17f9ad>
        self.config.pinctl =
6000198c:	de2e                	sw	a1,60(sp)
6000198e:	508305b7          	lui	a1,0x50830
        self.config.shiftctl =
60001992:	dc2e                	sw	a1,56(sp)
60001994:	001f45b7          	lui	a1,0x1f4
        self.config.clkdiv =
60001998:	d82e                	sw	a1,48(sp)
        match self.sm {
6000199a:	45a6                	lw	a1,72(sp)
6000199c:	058a                	slli	a1,a1,0x2
6000199e:	95ca                	add	a1,a1,s2
600019a0:	ffc5a583          	lw	a1,-4(a1) # 1f3ffc <.Lline_table_start0+0x1ef199>
            let pinctrl_saved = self.pio.base.add(rp_pio::SFR_SM0_PINCTRL.offset() + sm_offset).read_volatile();
600019a4:	4906                	lw	s2,64(sp)
600019a6:	058a                	slli	a1,a1,0x2
600019a8:	01258cb3          	add	s9,a1,s2
600019ac:	0dcca583          	lw	a1,220(s9)
600019b0:	d22e                	sw	a1,36(sp)
600019b2:	0ccca583          	lw	a1,204(s9)
600019b6:	d02e                	sw	a1,32(sp)
600019b8:	0ccca583          	lw	a1,204(s9)
    if spi_test_core(&mut pio_sm) == false {
600019bc:	cc2a                	sw	a0,24(sp)
600019be:	0dcc8b93          	addi	s7,s9,220
600019c2:	0ccc8513          	addi	a0,s9,204
        (value_as_usize & !(field.mask << field.offset))
600019c6:	d62a                	sw	a0,44(sp)
600019c8:	5522                	lw	a0,40(sp)
600019ca:	8d6d                	and	a0,a0,a1
600019cc:	0caca623          	sw	a0,204(s9)
600019d0:	00050ab7          	lui	s5,0x50
600019d4:	55555537          	lui	a0,0x55555
600019d8:	55550b13          	addi	s6,a0,1365 # 55555555 <.Lline_table_start0+0x555506f2>
600019dc:	33333537          	lui	a0,0x33333
600019e0:	33350493          	addi	s1,a0,819 # 33333333 <.Lline_table_start0+0x3332e4d0>
600019e4:	0f0f1537          	lui	a0,0xf0f1
600019e8:	f0f50a13          	addi	s4,a0,-241 # f0f0f0f <.Lline_table_start0+0xf0ec0ac>
600019ec:	01010537          	lui	a0,0x1010
600019f0:	10150d13          	addi	s10,a0,257 # 1010101 <.Lline_table_start0+0x100b29e>
600019f4:	04000db7          	lui	s11,0x4000
600019f8:	0d8c8c13          	addi	s8,s9,216
600019fc:	fffa8413          	addi	s0,s5,-1 # 4ffff <.Lline_table_start0+0x4b19c>
60001a00:	fffac513          	not	a0,s5
60001a04:	8d61                	and	a0,a0,s0
60001a06:	00155593          	srli	a1,a0,0x1
60001a0a:	0165f5b3          	and	a1,a1,s6
60001a0e:	8d0d                	sub	a0,a0,a1
60001a10:	009575b3          	and	a1,a0,s1
60001a14:	8109                	srli	a0,a0,0x2
60001a16:	8d65                	and	a0,a0,s1
60001a18:	952e                	add	a0,a0,a1
60001a1a:	00455593          	srli	a1,a0,0x4
60001a1e:	952e                	add	a0,a0,a1
60001a20:	01457533          	and	a0,a0,s4
60001a24:	03a50533          	mul	a0,a0,s10
        ((value_as_usize & field.mask) << field.offset)
60001a28:	814d                	srli	a0,a0,0x13
60001a2a:	01b56533          	or	a0,a0,s11
                    self.pio.ms(rp_pio::SFR_SM0_PINCTRL_PINS_SET_COUNT, 1)
60001a2e:	9901                	andi	a0,a0,-32
60001a30:	00aba023          	sw	a0,0(s7)
        Assembler {
60001a34:	1c012423          	sw	zero,456(sp)
60001a38:	1c012623          	sw	zero,460(sp)
            $self.instructions.push(Instruction {
60001a3c:	01a8                	addi	a0,sp,200
60001a3e:	080005b7          	lui	a1,0x8000
60001a42:	4601                	li	a2,0
60001a44:	fffff097          	auipc	ra,0xfffff
60001a48:	98c080e7          	jalr	-1652(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
                let p= a.assemble_program();
60001a4c:	1408                	addi	a0,sp,544
60001a4e:	01ac                	addi	a1,sp,200
60001a50:	10800613          	li	a2,264
60001a54:	00001097          	auipc	ra,0x1
60001a58:	234080e7          	jalr	564(ra) # 60002c88 <memcpy>
60001a5c:	0b88                	addi	a0,sp,464
60001a5e:	140c                	addi	a1,sp,544
60001a60:	ffffe097          	auipc	ra,0xffffe
60001a64:	5fc080e7          	jalr	1532(ra) # 6000005c <pio::Assembler<_>::assemble_program>
                self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001a68:	21a14583          	lbu	a1,538(sp)
60001a6c:	4501                	li	a0,0
60001a6e:	c199                	beqz	a1,60001a74 <rust_entry+0x676>
60001a70:	21b10503          	lb	a0,539(sp)
60001a74:	21012583          	lw	a1,528(sp)
60001a78:	0ff57513          	zext.b	a0,a0
60001a7c:	28b57163          	bgeu	a0,a1,60001cfe <rust_entry+0x900>
60001a80:	0506                	slli	a0,a0,0x1
60001a82:	954e                	add	a0,a0,s3
60001a84:	00055503          	lhu	a0,0(a0)
                pin_mask &= pin_mask - 1;
60001a88:	01547ab3          	and	s5,s0,s5
60001a8c:	0cacac23          	sw	a0,216(s9)
            while pin_mask != 0 {
60001a90:	f60a96e3          	bnez	s5,600019fc <rust_entry+0x5fe>
60001a94:	5512                	lw	a0,36(sp)
60001a96:	00aba023          	sw	a0,0(s7)
60001a9a:	5632                	lw	a2,44(sp)
60001a9c:	5502                	lw	a0,32(sp)
60001a9e:	c208                	sw	a0,0(a2)
60001aa0:	000ba503          	lw	a0,0(s7)
60001aa4:	d22a                	sw	a0,36(sp)
60001aa6:	4208                	lw	a0,0(a2)
60001aa8:	d02a                	sw	a0,32(sp)
60001aaa:	4208                	lw	a0,0(a2)
        (value_as_usize & !(field.mask << field.offset))
60001aac:	55a2                	lw	a1,40(sp)
60001aae:	8d6d                	and	a0,a0,a1
60001ab0:	c208                	sw	a0,0(a2)
60001ab2:	00050cb7          	lui	s9,0x50
60001ab6:	55555537          	lui	a0,0x55555
60001aba:	55550a93          	addi	s5,a0,1365 # 55555555 <.Lline_table_start0+0x555506f2>
60001abe:	33333537          	lui	a0,0x33333
60001ac2:	33350413          	addi	s0,a0,819 # 33333333 <.Lline_table_start0+0x3332e4d0>
60001ac6:	0f0f1537          	lui	a0,0xf0f1
60001aca:	f0f50b13          	addi	s6,a0,-241 # f0f0f0f <.Lline_table_start0+0xf0ec0ac>
60001ace:	01010537          	lui	a0,0x1010
60001ad2:	10150a13          	addi	s4,a0,257 # 1010101 <.Lline_table_start0+0x100b29e>
60001ad6:	04000db7          	lui	s11,0x4000
60001ada:	1d010993          	addi	s3,sp,464
60001ade:	00050d37          	lui	s10,0x50
60001ae2:	fffd0493          	addi	s1,s10,-1 # 4ffff <.Lline_table_start0+0x4b19c>
60001ae6:	fffd4513          	not	a0,s10
60001aea:	8d65                	and	a0,a0,s1
60001aec:	00155593          	srli	a1,a0,0x1
60001af0:	0155f5b3          	and	a1,a1,s5
60001af4:	8d0d                	sub	a0,a0,a1
60001af6:	008575b3          	and	a1,a0,s0
60001afa:	8109                	srli	a0,a0,0x2
60001afc:	8d61                	and	a0,a0,s0
60001afe:	952e                	add	a0,a0,a1
60001b00:	00455593          	srli	a1,a0,0x4
60001b04:	952e                	add	a0,a0,a1
60001b06:	01657533          	and	a0,a0,s6
60001b0a:	03450533          	mul	a0,a0,s4
60001b0e:	8161                	srli	a0,a0,0x18
        ((value_as_usize & field.mask) << field.offset)
60001b10:	00551593          	slli	a1,a0,0x5
                    self.pio.ms(rp_pio::SFR_SM0_PINCTRL_PINS_SET_COUNT, 1)
60001b14:	01b5e5b3          	or	a1,a1,s11
60001b18:	00bba023          	sw	a1,0(s7)
        Assembler {
60001b1c:	1c012423          	sw	zero,456(sp)
60001b20:	1c012623          	sw	zero,460(sp)
                a.set(pio::SetDestination::PINDIRS, ((pindirs >> base) & 1) as u8);
60001b24:	00acd533          	srl	a0,s9,a0
            $self.instructions.push(Instruction {
60001b28:	8905                	andi	a0,a0,1
60001b2a:	40000593          	li	a1,1024
60001b2e:	00b56633          	or	a2,a0,a1
60001b32:	01a8                	addi	a0,sp,200
60001b34:	080005b7          	lui	a1,0x8000
60001b38:	fffff097          	auipc	ra,0xfffff
60001b3c:	898080e7          	jalr	-1896(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
                let p= a.assemble_program();
60001b40:	1408                	addi	a0,sp,544
60001b42:	01ac                	addi	a1,sp,200
60001b44:	10800613          	li	a2,264
60001b48:	00001097          	auipc	ra,0x1
60001b4c:	140080e7          	jalr	320(ra) # 60002c88 <memcpy>
60001b50:	0b88                	addi	a0,sp,464
60001b52:	140c                	addi	a1,sp,544
60001b54:	ffffe097          	auipc	ra,0xffffe
60001b58:	508080e7          	jalr	1288(ra) # 6000005c <pio::Assembler<_>::assemble_program>
                self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001b5c:	21a14583          	lbu	a1,538(sp)
60001b60:	4501                	li	a0,0
60001b62:	c199                	beqz	a1,60001b68 <rust_entry+0x76a>
60001b64:	21b10503          	lb	a0,539(sp)
60001b68:	21012583          	lw	a1,528(sp)
60001b6c:	0ff57513          	zext.b	a0,a0
60001b70:	1ab57063          	bgeu	a0,a1,60001d10 <rust_entry+0x912>
60001b74:	0506                	slli	a0,a0,0x1
60001b76:	954e                	add	a0,a0,s3
60001b78:	00055503          	lhu	a0,0(a0)
                pin_mask &= pin_mask - 1;
60001b7c:	01a4fd33          	and	s10,s1,s10
60001b80:	00ac2023          	sw	a0,0(s8)
            while pin_mask != 0 {
60001b84:	f40d1fe3          	bnez	s10,60001ae2 <rust_entry+0x6e4>
60001b88:	5512                	lw	a0,36(sp)
60001b8a:	00aba023          	sw	a0,0(s7)
60001b8e:	5532                	lw	a0,44(sp)
60001b90:	5582                	lw	a1,32(sp)
60001b92:	c10c                	sw	a1,0(a0)
60001b94:	6541                	lui	a0,0x10
60001b96:	02a92c23          	sw	a0,56(s2)
60001b9a:	0330000f          	fence	rw,rw
60001b9e:	4512                	lw	a0,4(sp)
60001ba0:	c4050be3          	beqz	a0,600017f6 <rust_entry+0x3f8>
60001ba4:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001ba8:	4506                	lw	a0,64(sp)
60001baa:	410c                	lw	a1,0(a0)
                self.pio.rf(rp_pio::SFR_CTRL_EN) & !(self.sm as u32)
60001bac:	4626                	lw	a2,72(sp)
60001bae:	4114                	lw	a3,0(a0)
60001bb0:	fff64613          	not	a2,a2
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
60001bb4:	8df1                	and	a1,a1,a2
60001bb6:	89bd                	andi	a1,a1,15
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001bb8:	ff06f613          	andi	a2,a3,-16
60001bbc:	8dd1                	or	a1,a1,a2
60001bbe:	c10c                	sw	a1,0(a0)
60001bc0:	0330000f          	fence	rw,rw
        match self.sm {
60001bc4:	4526                	lw	a0,72(sp)
60001bc6:	00251593          	slli	a1,a0,0x2
60001bca:	60003637          	lui	a2,0x60003
60001bce:	3b860613          	addi	a2,a2,952 # 600033b8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.40+0xc>
60001bd2:	95b2                	add	a1,a1,a2
60001bd4:	ffc5a583          	lw	a1,-4(a1) # 7fffffc <.Lline_table_start0+0x7ffb199>
            self.pio.base.add(rp_pio::SFR_SM0_CLKDIV.offset() + sm_offset).write_volatile(self.config.clkdiv);
60001bd8:	4606                	lw	a2,64(sp)
60001bda:	56c2                	lw	a3,48(sp)
60001bdc:	058a                	slli	a1,a1,0x2
60001bde:	95b2                	add	a1,a1,a2
60001be0:	0cd5a423          	sw	a3,200(a1)
            self.pio.base.add(rp_pio::SFR_SM0_EXECCTRL.offset() + sm_offset).write_volatile(self.config.execctl);
60001be4:	56d2                	lw	a3,52(sp)
60001be6:	0cd5a623          	sw	a3,204(a1)
            self.pio.base.add(rp_pio::SFR_SM0_SHIFTCTRL.offset() + sm_offset).write_volatile(self.config.shiftctl);
60001bea:	56e2                	lw	a3,56(sp)
60001bec:	0cd5a823          	sw	a3,208(a1)
            self.pio.base.add(rp_pio::SFR_SM0_PINCTRL.offset() + sm_offset).write_volatile(self.config.pinctl);
60001bf0:	56f2                	lw	a3,60(sp)
60001bf2:	0cd5ae23          	sw	a3,220(a1)
60001bf6:	0d05a683          	lw	a3,208(a1)
60001bfa:	80000737          	lui	a4,0x80000
                baseval ^ bitval
60001bfe:	8f35                	xor	a4,a4,a3
60001c00:	0ce5a823          	sw	a4,208(a1)
60001c04:	0cd5a823          	sw	a3,208(a1)
        ((value_as_usize & field.mask) << field.offset)
60001c08:	01851593          	slli	a1,a0,0x18
60001c0c:	01051693          	slli	a3,a0,0x10
60001c10:	00851713          	slli	a4,a0,0x8
            self.pio.ms(rp_pio::SFR_FDEBUG_TXSTALL, self.sm as u32)
60001c14:	8d55                	or	a0,a0,a3
60001c16:	8d4d                	or	a0,a0,a1
60001c18:	8d59                	or	a0,a0,a4
60001c1a:	c608                	sw	a0,8(a2)
60001c1c:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001c20:	4506                	lw	a0,64(sp)
        self.pio.rmwf(rp_pio::SFR_CTRL_RESTART, self.sm as u32);
60001c22:	45a6                	lw	a1,72(sp)
60001c24:	4110                	lw	a2,0(a0)
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
60001c26:	0592                	slli	a1,a1,0x4
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001c28:	f0f67613          	andi	a2,a2,-241
                .write_volatile(previous | value_as_usize)
60001c2c:	8dd1                	or	a1,a1,a2
60001c2e:	c10c                	sw	a1,0(a0)
60001c30:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001c34:	4506                	lw	a0,64(sp)
        self.pio.rmwf(rp_pio::SFR_CTRL_CLKDIV_RESTART, self.sm as u32);
60001c36:	45a6                	lw	a1,72(sp)
60001c38:	4110                	lw	a2,0(a0)
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
60001c3a:	05a2                	slli	a1,a1,0x8
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001c3c:	46f2                	lw	a3,28(sp)
60001c3e:	8e75                	and	a2,a2,a3
                .write_volatile(previous | value_as_usize)
60001c40:	8dd1                	or	a1,a1,a2
60001c42:	c10c                	sw	a1,0(a0)
60001c44:	0330000f          	fence	rw,rw
        Assembler {
60001c48:	1c012423          	sw	zero,456(sp)
60001c4c:	1c012623          	sw	zero,460(sp)
            $self.instructions.push(Instruction {
60001c50:	01a8                	addi	a0,sp,200
60001c52:	4581                	li	a1,0
60001c54:	4622                	lw	a2,8(sp)
60001c56:	ffffe097          	auipc	ra,0xffffe
60001c5a:	77a080e7          	jalr	1914(ra) # 600003d0 <arrayvec::arrayvec::ArrayVec<T,_>::push>
        let p= a.assemble_program();
60001c5e:	1408                	addi	a0,sp,544
60001c60:	01ac                	addi	a1,sp,200
60001c62:	10800613          	li	a2,264
60001c66:	00001097          	auipc	ra,0x1
60001c6a:	022080e7          	jalr	34(ra) # 60002c88 <memcpy>
60001c6e:	0b88                	addi	a0,sp,464
60001c70:	140c                	addi	a1,sp,544
60001c72:	ffffe097          	auipc	ra,0xffffe
60001c76:	3ea080e7          	jalr	1002(ra) # 6000005c <pio::Assembler<_>::assemble_program>
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001c7a:	21a14603          	lbu	a2,538(sp)
60001c7e:	21012583          	lw	a1,528(sp)
60001c82:	4501                	li	a0,0
60001c84:	c219                	beqz	a2,60001c8a <rust_entry+0x88c>
60001c86:	21b10503          	lb	a0,539(sp)
60001c8a:	0ff57513          	zext.b	a0,a0
60001c8e:	08b57663          	bgeu	a0,a1,60001d1a <rust_entry+0x91c>
        match self.sm {
60001c92:	45a6                	lw	a1,72(sp)
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001c94:	0506                	slli	a0,a0,0x1
60001c96:	0b90                	addi	a2,sp,464
60001c98:	9532                	add	a0,a0,a2
        match self.sm {
60001c9a:	058a                	slli	a1,a1,0x2
60001c9c:	60003637          	lui	a2,0x60003
60001ca0:	3b860613          	addi	a2,a2,952 # 600033b8 <.Lanon.01042f9e07bac0588b13af07786e0e0c.40+0xc>
60001ca4:	95b2                	add	a1,a1,a2
60001ca6:	ffc5a583          	lw	a1,-4(a1)
            self.pio.base.add(rp_pio::SFR_SM0_INSTR.offset() + sm_offset)
60001caa:	4606                	lw	a2,64(sp)
        self.sm_exec(p.code[p.origin.unwrap_or(0) as usize]);
60001cac:	00055503          	lhu	a0,0(a0) # 10000 <.Lline_table_start0+0xb19d>
            self.pio.base.add(rp_pio::SFR_SM0_INSTR.offset() + sm_offset)
60001cb0:	058a                	slli	a1,a1,0x2
60001cb2:	95b2                	add	a1,a1,a2
60001cb4:	0ca5ac23          	sw	a0,216(a1)
60001cb8:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60001cbc:	4506                	lw	a0,64(sp)
60001cbe:	410c                	lw	a1,0(a0)
                self.pio.rf(rp_pio::SFR_CTRL_EN) | (self.sm as u32)
60001cc0:	4626                	lw	a2,72(sp)
60001cc2:	4114                	lw	a3,0(a0)
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
60001cc4:	89bd                	andi	a1,a1,15
60001cc6:	8dd1                	or	a1,a1,a2
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
60001cc8:	ff06f613          	andi	a2,a3,-16
60001ccc:	8dd1                	or	a1,a1,a2
60001cce:	c10c                	sw	a1,0(a0)
60001cd0:	0330000f          	fence	rw,rw
60001cd4:	05d10537          	lui	a0,0x5d10
60001cd8:	0515                	addi	a0,a0,5 # 5d10005 <.Lline_table_start0+0x5d0b1a2>
60001cda:	40108437          	lui	s0,0x40108
60001cde:	c008                	sw	a0,0(s0)
60001ce0:	0330000f          	fence	rw,rw
        PIN_SCK,
        PIN_MOSI,
        PIN_MISO
    );
    report.wfo(utra::main::REPORT_REPORT, 0x05D1_0005);
    if spi_test_core(&mut pio_sm) == false {
60001ce4:	1808                	addi	a0,sp,48
60001ce6:	fffff097          	auipc	ra,0xfffff
60001cea:	87c080e7          	jalr	-1924(ra) # 60000562 <betrusted_boot::pio::spi_test_core>
60001cee:	45e2                	lw	a1,24(sp)
60001cf0:	8d6d                	and	a0,a0,a1
        passing = false;
    };

    if passing {
60001cf2:	e90d                	bnez	a0,60001d24 <rust_entry+0x926>
60001cf4:	05d1e537          	lui	a0,0x5d1e
60001cf8:	ead50513          	addi	a0,a0,-339 # 5d1dead <.Lline_table_start0+0x5d1904a>
60001cfc:	a03d                	j	60001d2a <rust_entry+0x92c>
60001cfe:	60003637          	lui	a2,0x60003
60001d02:	f3860613          	addi	a2,a2,-200 # 60002f38 <.Lanon.01042f9e07bac0588b13af07786e0e0c.21>
60001d06:	00000097          	auipc	ra,0x0
60001d0a:	758080e7          	jalr	1880(ra) # 6000245e <core::panicking::panic_bounds_check>
60001d0e:	0000                	unimp
60001d10:	60003637          	lui	a2,0x60003
60001d14:	f2860613          	addi	a2,a2,-216 # 60002f28 <.Lanon.01042f9e07bac0588b13af07786e0e0c.20>
60001d18:	b7fd                	j	60001d06 <rust_entry+0x908>
60001d1a:	60003637          	lui	a2,0x60003
60001d1e:	f4860613          	addi	a2,a2,-184 # 60002f48 <.Lanon.01042f9e07bac0588b13af07786e0e0c.24>
60001d22:	b7d5                	j	60001d06 <rust_entry+0x908>
60001d24:	05d16537          	lui	a0,0x5d16
60001d28:	0535                	addi	a0,a0,13 # 5d1600d <.Lline_table_start0+0x5d111aa>
60001d2a:	c008                	sw	a0,0(s0)
60001d2c:	0330000f          	fence	rw,rw
60001d30:	4505                	li	a0,1
60001d32:	c408                	sw	a0,8(s0)
60001d34:	0330000f          	fence	rw,rw
        ahb_tests();
        #[cfg(feature="pio-test")]
        pio::pio_tests();

        // ---------- vm setup -------------------------
        satp::satp_setup(); // at the conclusion of this, we are running in "supervisor" (kernel) mode, with Sv32 semantics
60001d38:	fffff097          	auipc	ra,0xfffff
60001d3c:	a8e080e7          	jalr	-1394(ra) # 600007c6 <betrusted_boot::satp::satp_setup>
60001d40:	5a1d6537          	lui	a0,0x5a1d6
60001d44:	06050513          	addi	a0,a0,96 # 5a1d6060 <.Lline_table_start0+0x5a1d11fd>
60001d48:	c008                	sw	a0,0(s0)
60001d4a:	0330000f          	fence	rw,rw

60001d4e <.Lpcrel_hi1>:
        core::arch::asm!(
60001d4e:	fffff297          	auipc	t0,0xfffff
60001d52:	caa28293          	addi	t0,t0,-854 # 600009f8 <_start_trap>

60001d56 <.Lpcrel_hi2>:
60001d56:	fffff297          	auipc	t0,0xfffff
60001d5a:	d0428293          	addi	t0,t0,-764 # 60000a5a <_start_trap_aligned>
60001d5e:	10529073          	csrw	stvec,t0
60001d62:	1dcd0537          	lui	a0,0x1dcd0
60001d66:	c008                	sw	a0,0(s0)
60001d68:	0330000f          	fence	rw,rw
60001d6c:	58004537          	lui	a0,0x58004
60001d70:	459d                	li	a1,7
60001d72:	c54c                	sw	a1,12(a0)
60001d74:	0330000f          	fence	rw,rw
60001d78:	58005537          	lui	a0,0x58005
60001d7c:	45bd                	li	a1,15
60001d7e:	c54c                	sw	a1,12(a0)
60001d80:	0330000f          	fence	rw,rw
60001d84:	58010537          	lui	a0,0x58010
60001d88:	54fd                	li	s1,-1
60001d8a:	c544                	sw	s1,12(a0)
60001d8c:	0330000f          	fence	rw,rw
                    $asm_fn(bits);
60001d90:	4501                	li	a0,0
60001d92:	00001097          	auipc	ra,0x1
60001d96:	ee2080e7          	jalr	-286(ra) # 60002c74 <__write_vsim>
                    $asm_fn()
60001d9a:	00001097          	auipc	ra,0x1
60001d9e:	ed4080e7          	jalr	-300(ra) # 60002c6e <__read_vsim>
    sim::write(sim::read() | (1 << irq_no));
60001da2:	00156513          	ori	a0,a0,1
                    $asm_fn(bits);
60001da6:	00001097          	auipc	ra,0x1
60001daa:	ece080e7          	jalr	-306(ra) # 60002c74 <__write_vsim>
                    $asm_fn()
60001dae:	00001097          	auipc	ra,0x1
60001db2:	ec0080e7          	jalr	-320(ra) # 60002c6e <__read_vsim>
60001db6:	00256513          	ori	a0,a0,2
                    $asm_fn(bits);
60001dba:	00001097          	auipc	ra,0x1
60001dbe:	eba080e7          	jalr	-326(ra) # 60002c74 <__write_vsim>
                    $asm_fn()
60001dc2:	00001097          	auipc	ra,0x1
60001dc6:	eac080e7          	jalr	-340(ra) # 60002c6e <__read_vsim>
60001dca:	00456513          	ori	a0,a0,4
                    $asm_fn(bits);
60001dce:	00001097          	auipc	ra,0x1
60001dd2:	ea6080e7          	jalr	-346(ra) # 60002c74 <__write_vsim>
60001dd6:	5800f537          	lui	a0,0x5800f
60001dda:	c544                	sw	s1,12(a0)
60001ddc:	0330000f          	fence	rw,rw
                    $asm_fn()
60001de0:	00001097          	auipc	ra,0x1
60001de4:	e8e080e7          	jalr	-370(ra) # 60002c6e <__read_vsim>
60001de8:	000805b7          	lui	a1,0x80
60001dec:	8d4d                	or	a0,a0,a1
                    $asm_fn(bits);
60001dee:	00001097          	auipc	ra,0x1
60001df2:	e86080e7          	jalr	-378(ra) # 60002c74 <__write_vsim>
                    $asm_fn(bits);
60001df6:	20000513          	li	a0,512
60001dfa:	20000493          	li	s1,512
60001dfe:	00001097          	auipc	ra,0x1
60001e02:	e58080e7          	jalr	-424(ra) # 60002c56 <__set_sie>
60001e06:	4501                	li	a0,0
60001e08:	1dcd65b7          	lui	a1,0x1dcd6
60001e0c:	05b5                	addi	a1,a1,13 # 1dcd600d <.Lline_table_start0+0x1dcd11aa>
60001e0e:	c00c                	sw	a1,0(s0)
60001e10:	0330000f          	fence	rw,rw
60001e14:	5a1d05b7          	lui	a1,0x5a1d0
60001e18:	c00c                	sw	a1,0(s0)
60001e1a:	0330000f          	fence	rw,rw
60001e1e:	580025b7          	lui	a1,0x58002
60001e22:	00150613          	addi	a2,a0,1 # 5800f001 <.Lline_table_start0+0x5800a19e>
60001e26:	c188                	sw	a0,0(a1)
60001e28:	0330000f          	fence	rw,rw
60001e2c:	8532                	mv	a0,a2
60001e2e:	fe961ae3          	bne	a2,s1,60001e22 <.Lpcrel_hi2+0xcc>
60001e32:	4501                	li	a0,0
60001e34:	4585                	li	a1,1
        );
    }

    // set some ASIDs to trusted. Values picked to somewhat challenge the decoding
    let trusted_asids = [1, 0x17, 0x18, 0x52, 0x57, 0x5A, 0x5F, 0x60, 0x61, 0x62, 0x116, 0x18F];
    for asid in trusted_asids {
60001e36:	22b12023          	sw	a1,544(sp)
60001e3a:	45dd                	li	a1,23
60001e3c:	22b12223          	sw	a1,548(sp)
60001e40:	45e1                	li	a1,24
60001e42:	22b12423          	sw	a1,552(sp)
60001e46:	05200593          	li	a1,82
60001e4a:	22b12623          	sw	a1,556(sp)
60001e4e:	05700593          	li	a1,87
60001e52:	22b12823          	sw	a1,560(sp)
60001e56:	05a00593          	li	a1,90
60001e5a:	22b12a23          	sw	a1,564(sp)
60001e5e:	05f00593          	li	a1,95
60001e62:	22b12c23          	sw	a1,568(sp)
60001e66:	06000593          	li	a1,96
60001e6a:	22b12e23          	sw	a1,572(sp)
60001e6e:	06100593          	li	a1,97
60001e72:	24b12023          	sw	a1,576(sp)
60001e76:	06200593          	li	a1,98
60001e7a:	24b12223          	sw	a1,580(sp)
60001e7e:	11600593          	li	a1,278
60001e82:	24b12423          	sw	a1,584(sp)
60001e86:	18f00593          	li	a1,399
60001e8a:	24b12623          	sw	a1,588(sp)
60001e8e:	45b1                	li	a1,12
60001e90:	24b12a23          	sw	a1,596(sp)
60001e94:	140c                	addi	a1,sp,544
60001e96:	58002637          	lui	a2,0x58002
60001e9a:	00150693          	addi	a3,a0,1
60001e9e:	24d12823          	sw	a3,592(sp)
60001ea2:	050a                	slli	a0,a0,0x2
60001ea4:	952e                	add	a0,a0,a1
60001ea6:	4108                	lw	a0,0(a0)
        ((value_as_usize & field.mask) << field.offset)
60001ea8:	1ff57513          	andi	a0,a0,511
        coreuser.wo(utra::coreuser::SET_ASID,
            coreuser.ms(utra::coreuser::SET_ASID_ASID, asid)
60001eac:	20056513          	ori	a0,a0,512
60001eb0:	c208                	sw	a0,0(a2)
60001eb2:	0330000f          	fence	rw,rw
60001eb6:	25412683          	lw	a3,596(sp)
60001eba:	25012503          	lw	a0,592(sp)
60001ebe:	fca69ee3          	bne	a3,a0,60001e9a <.Lpcrel_hi2+0x144>
60001ec2:	4681                	li	a3,0
60001ec4:	58002537          	lui	a0,0x58002
60001ec8:	401085b7          	lui	a1,0x40108
60001ecc:	20000613          	li	a2,512
60001ed0:	c154                	sw	a3,4(a0)
60001ed2:	0330000f          	fence	rw,rw
60001ed6:	4518                	lw	a4,8(a0)
60001ed8:	00168793          	addi	a5,a3,1
    }
    // readback of table
    for asid in 0..512 {
        coreuser.wfo(utra::coreuser::GET_ASID_ADDR_ASID, asid);
        report.wfo(utra::main::REPORT_REPORT,
            coreuser.rf(utra::coreuser::GET_ASID_VALUE_VALUE) << 16 | asid
60001edc:	077e                	slli	a4,a4,0x1f
60001ede:	833d                	srli	a4,a4,0xf
60001ee0:	8ed9                	or	a3,a3,a4
60001ee2:	c194                	sw	a3,0(a1)
60001ee4:	0330000f          	fence	rw,rw
60001ee8:	86be                	mv	a3,a5
60001eea:	fec793e3          	bne	a5,a2,60001ed0 <.Lpcrel_hi2+0x17a>
60001eee:	4581                	li	a1,0
60001ef0:	58002537          	lui	a0,0x58002
60001ef4:	00061637          	lui	a2,0x61
60001ef8:	cd50                	sw	a2,28(a0)
60001efa:	0330000f          	fence	rw,rw
60001efe:	cd10                	sw	a2,24(a0)
60001f00:	0330000f          	fence	rw,rw
60001f04:	461d                	li	a2,7
60001f06:	c910                	sw	a2,16(a0)
60001f08:	0330000f          	fence	rw,rw
60001f0c:	4605                	li	a2,1
60001f0e:	c950                	sw	a2,20(a0)
60001f10:	0330000f          	fence	rw,rw
60001f14:	00052a23          	sw	zero,20(a0) # 58002014 <.Lline_table_start0+0x57ffd1b1>
60001f18:	0330000f          	fence	rw,rw
60001f1c:	20200613          	li	a2,514
60001f20:	c110                	sw	a2,0(a0)
60001f22:	0330000f          	fence	rw,rw
60001f26:	6641                	lui	a2,0x10
60001f28:	ace60613          	addi	a2,a2,-1330 # face <.Lline_table_start0+0xac6b>
60001f2c:	cd50                	sw	a2,28(a0)
60001f2e:	0330000f          	fence	rw,rw
60001f32:	6639                	lui	a2,0xe
60001f34:	ead60613          	addi	a2,a2,-339 # dead <.Lline_table_start0+0x904a>
60001f38:	cd10                	sw	a2,24(a0)
60001f3a:	0330000f          	fence	rw,rw
60001f3e:	40108637          	lui	a2,0x40108
60001f42:	4691                	li	a3,4
60001f44:	c14c                	sw	a1,4(a0)
60001f46:	0330000f          	fence	rw,rw
60001f4a:	4518                	lw	a4,8(a0)
60001f4c:	00158793          	addi	a5,a1,1 # 40108001 <.Lline_table_start0+0x4010319e>
    coreuser.wfo(utra::coreuser::WINDOW_AL_PPN, 0xdead as u32);
    // partial readback of table; `2` should not be trusted
    for asid in 0..4 {
        coreuser.wfo(utra::coreuser::GET_ASID_ADDR_ASID, asid);
        report.wfo(utra::main::REPORT_REPORT,
    coreuser.rf(utra::coreuser::GET_ASID_VALUE_VALUE) << 16 | asid
60001f50:	077e                	slli	a4,a4,0x1f
60001f52:	833d                	srli	a4,a4,0xf
60001f54:	8dd9                	or	a1,a1,a4
60001f56:	c20c                	sw	a1,0(a2)
60001f58:	0330000f          	fence	rw,rw
60001f5c:	85be                	mv	a1,a5
60001f5e:	fed793e3          	bne	a5,a3,60001f44 <.Lpcrel_hi2+0x1ee>
60001f62:	4501                	li	a0,0
60001f64:	5a1d05b7          	lui	a1,0x5a1d0
60001f68:	0585                	addi	a1,a1,1 # 5a1d0001 <.Lline_table_start0+0x5a1cb19e>
60001f6a:	40108637          	lui	a2,0x40108
60001f6e:	c20c                	sw	a1,0(a2)
60001f70:	0330000f          	fence	rw,rw
60001f74:	20000593          	li	a1,512
60001f78:	80061637          	lui	a2,0x80061
60001f7c:	004006b7          	lui	a3,0x400
    // since we are in supervisor mode we can diddle with this at will, normally
    // user processes can't change this
    report.wfo(utra::main::REPORT_REPORT, 0x5a1d_0001);
    for asid in 0..512 {
        let satp: u32 =
        0x8000_0000
60001f80:	00c56733          	or	a4,a0,a2
        | asid << 22
        | (ROOT_PT_PA as u32 >> 12);
        unsafe {
            core::arch::asm!(
60001f84:	18071073          	csrw	satp,a4
60001f88:	12000073          	sfence.vma
60001f8c:	15fd                	addi	a1,a1,-1
60001f8e:	9536                	add	a0,a0,a3
60001f90:	f9e5                	bnez	a1,60001f80 <.Lpcrel_hi2+0x22a>
60001f92:	80461537          	lui	a0,0x80461
    let satp: u32 =
    0x8000_0000
    | 1 << 22
    | (ROOT_PT_PA as u32 >> 12);
    unsafe {
        core::arch::asm!(
60001f96:	18051073          	csrw	satp,a0
60001f9a:	12000073          	sfence.vma
60001f9e:	5a1d04b7          	lui	s1,0x5a1d0
60001fa2:	00248513          	addi	a0,s1,2 # 5a1d0002 <.Lline_table_start0+0x5a1cb19f>
60001fa6:	40108437          	lui	s0,0x40108
60001faa:	c008                	sw	a0,0(s0)
60001fac:	0330000f          	fence	rw,rw
        );
    }

    // switch to user mode
    report.wfo(utra::main::REPORT_REPORT, 0x5a1d_0002);
    to_user_mode();
60001fb0:	fffff097          	auipc	ra,0xfffff
60001fb4:	a3e080e7          	jalr	-1474(ra) # 600009ee <betrusted_boot::satp::to_user_mode>
60001fb8:	4501                	li	a0,0
60001fba:	00348593          	addi	a1,s1,3
60001fbe:	c00c                	sw	a1,0(s0)
60001fc0:	0330000f          	fence	rw,rw
60001fc4:	810615b7          	lui	a1,0x81061
    let satp: u32 =
    0x8000_0000
    | 4 << 22
    | (ROOT_PT_PA as u32 >> 12);
    unsafe {
        core::arch::asm!(
60001fc8:	18059073          	csrw	satp,a1
60001fcc:	12000073          	sfence.vma
60001fd0:	0001                	nop
60001fd2:	0001                	nop
60001fd4:	0001                	nop
60001fd6:	00448593          	addi	a1,s1,4
60001fda:	c00c                	sw	a1,0(s0)
60001fdc:	0330000f          	fence	rw,rw
60001fe0:	5a1d65b7          	lui	a1,0x5a1d6
60001fe4:	05b5                	addi	a1,a1,13 # 5a1d600d <.Lline_table_start0+0x5a1d11aa>
60001fe6:	c00c                	sw	a1,0(s0)
60001fe8:	0330000f          	fence	rw,rw
60001fec:	3dcd06b7          	lui	a3,0x3dcd0
60001ff0:	c014                	sw	a3,0(s0)
60001ff2:	0330000f          	fence	rw,rw
60001ff6:	00168593          	addi	a1,a3,1 # 3dcd0001 <.Lline_table_start0+0x3dccb19e>
60001ffa:	c00c                	sw	a1,0(s0)
60001ffc:	0330000f          	fence	rw,rw
60002000:	4591                	li	a1,4
60002002:	cc0c                	sw	a1,24(s0)
60002004:	0330000f          	fence	rw,rw
60002008:	00268613          	addi	a2,a3,2
6000200c:	c010                	sw	a2,0(s0)
6000200e:	0330000f          	fence	rw,rw
60002012:	4605                	li	a2,1
60002014:	cc50                	sw	a2,28(s0)
60002016:	0330000f          	fence	rw,rw
6000201a:	068d                	addi	a3,a3,3
6000201c:	c014                	sw	a3,0(s0)
6000201e:	0330000f          	fence	rw,rw
60002022:	580106b7          	lui	a3,0x58010
60002026:	08000713          	li	a4,128
6000202a:	c298                	sw	a4,0(a3)
6000202c:	0330000f          	fence	rw,rw
60002030:	3dcd66b7          	lui	a3,0x3dcd6
60002034:	06b5                	addi	a3,a3,13 # 3dcd600d <.Lline_table_start0+0x3dcd11aa>
60002036:	c014                	sw	a3,0(s0)
60002038:	0330000f          	fence	rw,rw
6000203c:	c52006b7          	lui	a3,0xc5200
60002040:	c014                	sw	a3,0(s0)
60002042:	0330000f          	fence	rw,rw
60002046:	580036b7          	lui	a3,0x58003
6000204a:	10000737          	lui	a4,0x10000
6000204e:	c288                	sw	a0,0(a3)
60002050:	0330000f          	fence	rw,rw
60002054:	42dc                	lw	a5,4(a3)
60002056:	c01c                	sw	a5,0(s0)
60002058:	0330000f          	fence	rw,rw
            csrtest.wfo(utra::csrtest::WTEST_WTEST, i);
            let val = csrtest.rf(utra::csrtest::RTEST_RTEST);
            report.wfo(utra::main::REPORT_REPORT,
                val
            );
            if val != i + 0x1000_0000 {
6000205c:	00e504b3          	add	s1,a0,a4
60002060:	8fa5                	xor	a5,a5,s1
60002062:	0017b793          	seqz	a5,a5
60002066:	0505                	addi	a0,a0,1 # 80461001 <_lcdfb+0xd0461001>
60002068:	8e7d                	and	a2,a2,a5
6000206a:	feb512e3          	bne	a0,a1,6000204e <.Lpcrel_hi2+0x2f8>
                passing = false;
            }
        }
        if passing {
6000206e:	e611                	bnez	a2,6000207a <.Lpcrel_hi2+0x324>
60002070:	c520e537          	lui	a0,0xc520e
60002074:	ead50593          	addi	a1,a0,-339 # c520dead <_lcdfb+0x1520dead>
60002078:	a029                	j	60002082 <.Lpcrel_hi2+0x32c>
6000207a:	c5206537          	lui	a0,0xc5206
6000207e:	00d50593          	addi	a1,a0,13 # c520600d <_lcdfb+0x1520600d>
60002082:	40108537          	lui	a0,0x40108
60002086:	c10c                	sw	a1,0(a0)
60002088:	0330000f          	fence	rw,rw
6000208c:	03f105b7          	lui	a1,0x3f10
60002090:	c10c                	sw	a1,0(a0)
60002092:	0330000f          	fence	rw,rw
    unsafe { core::arch::asm!(
60002096:	10500073          	wfi
6000209a:	03f165b7          	lui	a1,0x3f16
6000209e:	05b5                	addi	a1,a1,13 # 3f1600d <.Lline_table_start0+0x3f111aa>
600020a0:	c10c                	sw	a1,0(a0)
600020a2:	0330000f          	fence	rw,rw
600020a6:	000cb5b7          	lui	a1,0xcb
600020aa:	c7e58593          	addi	a1,a1,-898 # cac7e <.Lline_table_start0+0xc5e1b>
600020ae:	c10c                	sw	a1,0(a0)
600020b0:	0330000f          	fence	rw,rw
600020b4:	4591                	li	a1,4
600020b6:	61000637          	lui	a2,0x61000
600020ba:	001116b7          	lui	a3,0x111
600020be:	11168493          	addi	s1,a3,273 # 111111 <.Lline_table_start0+0x10c2ae>
600020c2:	6705                	lui	a4,0x1
600020c4:	610007b7          	lui	a5,0x61000
600020c8:	86a6                	mv	a3,s1
600020ca:	c110                	sw	a2,0(a0)
600020cc:	0330000f          	fence	rw,rw
600020d0:	c394                	sw	a3,0(a5)
600020d2:	15fd                	addi	a1,a1,-1
600020d4:	96a6                	add	a3,a3,s1
600020d6:	97ba                	add	a5,a5,a4
600020d8:	963a                	add	a2,a2,a4
600020da:	f9e5                	bnez	a1,600020ca <.Lpcrel_hi2+0x374>
600020dc:	4511                	li	a0,4
600020de:	110025b7          	lui	a1,0x11002
600020e2:	22258493          	addi	s1,a1,546 # 11002222 <.Lline_table_start0+0x10ffd3bf>
600020e6:	610015b7          	lui	a1,0x61001
600020ea:	ffc58613          	addi	a2,a1,-4 # 61000ffc <_ebss+0xffc>
600020ee:	401086b7          	lui	a3,0x40108
600020f2:	6705                	lui	a4,0x1
600020f4:	87b2                	mv	a5,a2
600020f6:	85a6                	mv	a1,s1
600020f8:	c290                	sw	a2,0(a3)
600020fa:	0330000f          	fence	rw,rw
600020fe:	c38c                	sw	a1,0(a5)
60002100:	157d                	addi	a0,a0,-1 # 40107fff <.Lline_table_start0+0x4010319c>
60002102:	95a6                	add	a1,a1,s1
60002104:	97ba                	add	a5,a5,a4
60002106:	963a                	add	a2,a2,a4
60002108:	f965                	bnez	a0,600020f8 <.Lpcrel_hi2+0x3a2>
6000210a:	4505                	li	a0,1
6000210c:	b1d006b7          	lui	a3,0xb1d00
60002110:	00168713          	addi	a4,a3,1 # b1d00001 <_lcdfb+0x1d00001>
60002114:	401085b7          	lui	a1,0x40108
60002118:	6605                	lui	a2,0x1
6000211a:	0689                	addi	a3,a3,2
6000211c:	c198                	sw	a4,0(a1)
6000211e:	0330000f          	fence	rw,rw
60002122:	4711                	li	a4,4
60002124:	610007b7          	lui	a5,0x61000
60002128:	4384                	lw	s1,0(a5)
6000212a:	7ff78413          	addi	s0,a5,2047 # 610007ff <_ebss+0x7ff>
6000212e:	c184                	sw	s1,0(a1)
60002130:	0330000f          	fence	rw,rw
60002134:	7fd42483          	lw	s1,2045(s0) # 401087fd <.Lline_table_start0+0x4010399a>
60002138:	c184                	sw	s1,0(a1)
6000213a:	0330000f          	fence	rw,rw
6000213e:	177d                	addi	a4,a4,-1 # fff <_hart_stack_size+0x7ff>
60002140:	97b2                	add	a5,a5,a2
60002142:	f37d                	bnez	a4,60002128 <.Lpcrel_hi2+0x3d2>
60002144:	00157793          	andi	a5,a0,1
60002148:	8736                	mv	a4,a3
6000214a:	4501                	li	a0,0
6000214c:	fbe1                	bnez	a5,6000211c <.Lpcrel_hi2+0x3c6>
6000214e:	ff010537          	lui	a0,0xff010
60002152:	f0050593          	addi	a1,a0,-256 # ff00ff00 <_lcdfb+0x4f00ff00>
60002156:	40108537          	lui	a0,0x40108
6000215a:	c10c                	sw	a1,0(a0)
6000215c:	0330000f          	fence	rw,rw
                report.wfo(utra::main::REPORT_REPORT, b);
            }
        }
        // flush cache
        report.wfo(utra::main::REPORT_REPORT, 0xff00_ff00);
        core::arch::asm!(
60002160:	0000500f          	.4byte	0x500f
60002164:	0f0f15b7          	lui	a1,0xf0f1
60002168:	f0f58593          	addi	a1,a1,-241 # f0f0f0f <.Lline_table_start0+0xf0ec0ac>
6000216c:	c10c                	sw	a1,0(a0)
6000216e:	0330000f          	fence	rw,rw
60002172:	4585                	li	a1,1
60002174:	b2d006b7          	lui	a3,0xb2d00
60002178:	00168713          	addi	a4,a3,1 # b2d00001 <_lcdfb+0x2d00001>
6000217c:	6605                	lui	a2,0x1
6000217e:	0689                	addi	a3,a3,2
60002180:	c118                	sw	a4,0(a0)
60002182:	0330000f          	fence	rw,rw
60002186:	4711                	li	a4,4
60002188:	610007b7          	lui	a5,0x61000
6000218c:	4384                	lw	s1,0(a5)
6000218e:	7ff78413          	addi	s0,a5,2047 # 610007ff <_ebss+0x7ff>
60002192:	c104                	sw	s1,0(a0)
60002194:	0330000f          	fence	rw,rw
60002198:	7fd42483          	lw	s1,2045(s0)
6000219c:	c104                	sw	s1,0(a0)
6000219e:	0330000f          	fence	rw,rw
600021a2:	177d                	addi	a4,a4,-1
600021a4:	97b2                	add	a5,a5,a2
600021a6:	f37d                	bnez	a4,6000218c <.Lpcrel_hi2+0x436>
600021a8:	0015f793          	andi	a5,a1,1
600021ac:	8736                	mv	a4,a3
600021ae:	4581                	li	a1,0
600021b0:	fbe1                	bnez	a5,60002180 <.Lpcrel_hi2+0x42a>
600021b2:	600cb537          	lui	a0,0x600cb
600021b6:	c7e50593          	addi	a1,a0,-898 # 600cac7e <_etext+0xc74fa>
600021ba:	40108537          	lui	a0,0x40108
600021be:	c10c                	sw	a1,0(a0)
600021c0:	0330000f          	fence	rw,rw
600021c4:	123405b7          	lui	a1,0x12340
600021c8:	c54c                	sw	a1,12(a0)
600021ca:	0330000f          	fence	rw,rw
600021ce:	06400613          	li	a2,100
600021d2:	0330000f          	fence	rw,rw
600021d6:	490c                	lw	a1,16(a0)
600021d8:	c54c                	sw	a1,12(a0)
600021da:	167d                	addi	a2,a2,-1 # fff <_hart_stack_size+0x7ff>
600021dc:	0330000f          	fence	rw,rw
600021e0:	fa6d                	bnez	a2,600021d2 <.Lpcrel_hi2+0x47c>
600021e2:	12340537          	lui	a0,0x12340
600021e6:	1f450613          	addi	a2,a0,500 # 123401f4 <.Lline_table_start0+0x1233b391>
600021ea:	40108537          	lui	a0,0x40108
600021ee:	c110                	sw	a2,0(a0)
600021f0:	0330000f          	fence	rw,rw
            checkdata = report.rf(utra::main::RDATA_RDATA); // RDATA = WDATA + 5, computed in hardware
            report.wfo(utra::main::WDATA_WDATA, checkdata);
            // report.wfo(utra::main::REPORT_REPORT, checkdata);
            checkstate += 5;
        }
        if checkdata == checkstate {
600021f4:	00c59563          	bne	a1,a2,600021fe <.Lpcrel_hi2+0x4a8>
600021f8:	600d05b7          	lui	a1,0x600d0
600021fc:	a031                	j	60002208 <.Lpcrel_hi2+0x4b2>
600021fe:	c10c                	sw	a1,0(a0)
60002200:	0330000f          	fence	rw,rw
60002204:	0bad05b7          	lui	a1,0xbad0
60002208:	00158613          	addi	a2,a1,1 # bad0001 <.Lline_table_start0+0xbacb19e>
6000220c:	4581                	li	a1,0
6000220e:	c110                	sw	a2,0(a0)
60002210:	0330000f          	fence	rw,rw
60002214:	4651                	li	a2,20
60002216:	0330000f          	fence	rw,rw
6000221a:	4954                	lw	a3,20(a0)
6000221c:	167d                	addi	a2,a2,-1
        let mut checkdata = 0; // tracked value via simulation
        let mut computed = 0; // computed value by reading the hardare block
        let mut devstate = 0; // what the state should be
        for _ in 0..20 {
            let readout = report.rf(utra::main::RINC_RINC);
            computed += readout;
6000221e:	95b6                	add	a1,a1,a3
60002220:	fa7d                	bnez	a2,60002216 <.Lpcrel_hi2+0x4c0>
60002222:	40108437          	lui	s0,0x40108
60002226:	23a00513          	li	a0,570
6000222a:	c008                	sw	a0,0(s0)
6000222c:	0330000f          	fence	rw,rw
            // report.wfo(utra::main::REPORT_REPORT, readout);
            checkdata += devstate;
            devstate += 3;
        }
        if checkdata == computed {
60002230:	00a59563          	bne	a1,a0,6000223a <.Lpcrel_hi2+0x4e4>
60002234:	600d0537          	lui	a0,0x600d0
60002238:	a031                	j	60002244 <.Lpcrel_hi2+0x4ee>
6000223a:	c00c                	sw	a1,0(s0)
6000223c:	0330000f          	fence	rw,rw
60002240:	0bad0537          	lui	a0,0xbad0
60002244:	0509                	addi	a0,a0,2 # bad0002 <.Lline_table_start0+0xbacb19f>
60002246:	c008                	sw	a0,0(s0)
60002248:	0330000f          	fence	rw,rw

        // ----------- bus tests -------------
        const BASE_ADDR: u32 = satp::PT_LIMIT as u32; // don't overwrite our PT data
        // 'random' access test
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u32, 512);
        ramtest_lfsr(&mut test_slice, 3);
6000224c:	fffff097          	auipc	ra,0xfffff
60002250:	10a080e7          	jalr	266(ra) # 60001356 <betrusted_boot::ramtest_lfsr>

        // now some basic memory read/write tests
        // entirely within cache access test
        // 256-entry by 32-bit slice at start of RAM
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u32, 256);
        ramtest_all(&mut test_slice, 4);
60002254:	fffff097          	auipc	ra,0xfffff
60002258:	db6080e7          	jalr	-586(ra) # 6000100a <betrusted_boot::ramtest_all>
        // byte access test
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u8, 256);
        ramtest_fast(&mut test_slice, 5);
6000225c:	fffff097          	auipc	ra,0xfffff
60002260:	fb4080e7          	jalr	-76(ra) # 60001210 <betrusted_boot::ramtest_fast>
        // word access test
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u16, 512);
        ramtest_fast(&mut test_slice, 6); // 1ff00
60002264:	fffff097          	auipc	ra,0xfffff
60002268:	f20080e7          	jalr	-224(ra) # 60001184 <betrusted_boot::ramtest_fast>

        // outside cache test
        // 6144-entry by 32-bit slice at start of RAM - should cross outside cache boundary
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u32, 0x1800);
        ramtest_fast(&mut test_slice, 7);  // c7f600
6000226c:	fffff097          	auipc	ra,0xfffff
60002270:	e8a080e7          	jalr	-374(ra) # 600010f6 <betrusted_boot::ramtest_fast>

        // this passed, now that the AXI state machine is fixed.
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u32, 0x1800);
        ramtest_fast_specialcase1(&mut test_slice, 8);  // c7f600
60002274:	fffff097          	auipc	ra,0xfffff
60002278:	dfa080e7          	jalr	-518(ra) # 6000106e <betrusted_boot::ramtest_fast_specialcase1>

        // u64 access test
        let mut test_slice = core::slice::from_raw_parts_mut(BASE_ADDR as *mut u64, 0xC00);
        ramtest_fast(&mut test_slice, 9);
6000227c:	fffff097          	auipc	ra,0xfffff
60002280:	01e080e7          	jalr	30(ra) # 6000129a <betrusted_boot::ramtest_fast>
60002284:	4505                	li	a0,1
60002286:	c408                	sw	a0,8(s0)
60002288:	0330000f          	fence	rw,rw
6000228c:	000a0537          	lui	a0,0xa0
60002290:	0529                	addi	a0,a0,10 # a000a <.Lline_table_start0+0x9b1a7>

        // conjure the signature struct directly out of memory. super unsafe.
        let sig_ptr = LOADER_SIG_OFFSET as *const SignatureInFlash;
        let sig: &SignatureInFlash = sig_ptr.as_ref().unwrap();
    }
    let mut cursor = Point {x: LEFT_MARGIN, y: 10};
60002292:	c5aa                	sw	a0,200(sp)
60002294:	60003537          	lui	a0,0x60003
60002298:	35850513          	addi	a0,a0,856 # 60003358 <.Lanon.01042f9e07bac0588b13af07786e0e0c.35>
6000229c:	401025b7          	lui	a1,0x40102
600022a0:	00250613          	addi	a2,a0,2
600022a4:	00054683          	lbu	a3,0(a0)
600022a8:	0330000f          	fence	rw,rw
600022ac:	41d8                	lw	a4,4(a1)
600022ae:	ff6d                	bnez	a4,600022a8 <.Lpcrel_hi2+0x552>
600022b0:	0505                	addi	a0,a0,1
600022b2:	c194                	sw	a3,0(a1)
600022b4:	0330000f          	fence	rw,rw
600022b8:	fec516e3          	bne	a0,a2,600022a4 <.Lpcrel_hi2+0x54e>
600022bc:	40107537          	lui	a0,0x40107
    // initial banner
    let mut uart = debug::Uart {};
    uart.tiny_write_str("  ");

    // clear screen to all black
    let mut gfx = Gfx {
600022c0:	22a12423          	sw	a0,552(sp)
600022c4:	420005b7          	lui	a1,0x42000
600022c8:	22b12023          	sw	a1,544(sp)
600022cc:	6585                	lui	a1,0x1
600022ce:	70858593          	addi	a1,a1,1800 # 1708 <_hart_stack_size+0xf08>
600022d2:	22b12223          	sw	a1,548(sp)
600022d6:	03100593          	li	a1,49
600022da:	c50c                	sw	a1,8(a0)
600022dc:	0330000f          	fence	rw,rw
        csr: CSR::new(utra::memlcd::HW_MEMLCD_BASE as *mut u32),
        fb: core::slice::from_raw_parts_mut(utralib::HW_MEMLCD_MEM as *mut u32, FB_SIZE), // unsafe but inside an unsafe already
    };
    gfx.init(100_000_000);

    for word in gfx.fb.iter_mut() {
600022e0:	22412583          	lw	a1,548(sp)
600022e4:	c991                	beqz	a1,600022f8 <.Lpcrel_hi2+0x5a2>
600022e6:	22012503          	lw	a0,544(sp)
600022ea:	00259613          	slli	a2,a1,0x2
        *word = 0x0; // set to all black
600022ee:	4581                	li	a1,0
600022f0:	00001097          	auipc	ra,0x1
600022f4:	990080e7          	jalr	-1648(ra) # 60002c80 <memset>
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
600022f8:	22812503          	lw	a0,552(sp)
600022fc:	4589                	li	a1,2
600022fe:	c10c                	sw	a1,0(a0)
60002300:	0330000f          	fence	rw,rw
60002304:	0330000f          	fence	rw,rw
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
60002308:	22812503          	lw	a0,552(sp)
6000230c:	4148                	lw	a0,4(a0)
        if self.csr.rf(utra::memlcd::BUSY_BUSY) == 1 {
6000230e:	8905                	andi	a0,a0,1
    }
    gfx.update_all();
    while gfx.busy() { }
60002310:	f975                	bnez	a0,60002304 <.Lpcrel_hi2+0x5ae>
60002312:	60003537          	lui	a0,0x60003
60002316:	35a50513          	addi	a0,a0,858 # 6000335a <.Lanon.01042f9e07bac0588b13af07786e0e0c.36>
6000231a:	401025b7          	lui	a1,0x40102
6000231e:	02750613          	addi	a2,a0,39
60002322:	00054683          	lbu	a3,0(a0)
60002326:	0330000f          	fence	rw,rw
6000232a:	41d8                	lw	a4,4(a1)
6000232c:	ff6d                	bnez	a4,60002326 <.Lpcrel_hi2+0x5d0>
6000232e:	0505                	addi	a0,a0,1
60002330:	c194                	sw	a3,0(a1)
60002332:	0330000f          	fence	rw,rw
60002336:	fec516e3          	bne	a0,a2,60002322 <.Lpcrel_hi2+0x5cc>
    // power on the curve engine -- give it >16 cycles to sync up
    engine.wfo(utra::engine::POWER_ON, 1);

    // now characters should actually be able to print
    uart.tiny_write_str(VERSION_STR);
    gfx.msg(VERSION_STR, &mut cursor);
6000233a:	60003537          	lui	a0,0x60003
6000233e:	35a50593          	addi	a1,a0,858 # 6000335a <.Lanon.01042f9e07bac0588b13af07786e0e0c.36>
60002342:	1408                	addi	a0,sp,544
60002344:	02700613          	li	a2,39
60002348:	01b4                	addi	a3,sp,200
6000234a:	fffff097          	auipc	ra,0xfffff
6000234e:	a3c080e7          	jalr	-1476(ra) # 60000d86 <betrusted_boot::Gfx::msg>
60002352:	4481                	li	s1,0
60002354:	40ffe537          	lui	a0,0x40ffe
60002358:	0571                	addi	a0,a0,28 # 40ffe01c <.Lline_table_start0+0x40ff91b9>
6000235a:	deadc5b7          	lui	a1,0xdeadc
6000235e:	0de58593          	addi	a1,a1,222 # deadc0de <_lcdfb+0x2eadc0de>
60002362:	41000637          	lui	a2,0x41000
    }

    // check the stack usage
    let stack: &[u32] = core::slice::from_raw_parts(STACK_TOP as *const u32, (STACK_LEN as usize / core::mem::size_of::<u32>()) as usize);
    let mut unused_stack_words = 0;
    for &word in stack.iter() {
60002366:	4114                	lw	a3,0(a0)
        if word != 0xDEAD_C0DE {
60002368:	00b69663          	bne	a3,a1,60002374 <.Lpcrel_hi2+0x61e>
6000236c:	0511                	addi	a0,a0,4
            break;
        }
        unused_stack_words += 1;
6000236e:	0485                	addi	s1,s1,1
60002370:	fec51be3          	bne	a0,a2,60002366 <.Lpcrel_hi2+0x610>
    }
    uart.tiny_write_str("Free stack: 0x");
60002374:	60003537          	lui	a0,0x60003
60002378:	38150413          	addi	s0,a0,897 # 60003381 <.Lanon.01042f9e07bac0588b13af07786e0e0c.37>
6000237c:	45b9                	li	a1,14
6000237e:	8522                	mv	a0,s0
60002380:	ffffe097          	auipc	ra,0xffffe
60002384:	426080e7          	jalr	1062(ra) # 600007a6 <betrusted_boot::debug::Uart::tiny_write_str>
    uart.print_hex_word(unused_stack_words * 4);
60002388:	048a                	slli	s1,s1,0x2
6000238a:	8526                	mv	a0,s1
6000238c:	ffffe097          	auipc	ra,0xffffe
60002390:	382080e7          	jalr	898(ra) # 6000070e <betrusted_boot::debug::Uart::print_hex_word>
    gfx.msg("Free stack: 0x", &mut cursor);
60002394:	1408                	addi	a0,sp,544
60002396:	4639                	li	a2,14
60002398:	01b4                	addi	a3,sp,200
6000239a:	85a2                	mv	a1,s0
6000239c:	fffff097          	auipc	ra,0xfffff
600023a0:	9ea080e7          	jalr	-1558(ra) # 60000d86 <betrusted_boot::Gfx::msg>
    gfx.hex_word(unused_stack_words * 4, &mut cursor);
600023a4:	1408                	addi	a0,sp,544
600023a6:	01b0                	addi	a2,sp,200
600023a8:	85a6                	mv	a1,s1
600023aa:	fffff097          	auipc	ra,0xfffff
600023ae:	920080e7          	jalr	-1760(ra) # 60000cca <betrusted_boot::Gfx::hex_word>
    uart.newline();
600023b2:	ffffe097          	auipc	ra,0xffffe
600023b6:	32e080e7          	jalr	814(ra) # 600006e0 <betrusted_boot::debug::Uart::newline>
                }
                last_char = c;
            }
        }
    }
    gfx.msg("\n\r\n\rJumping to loader...\n\r", &mut cursor);
600023ba:	60003537          	lui	a0,0x60003
600023be:	38f50413          	addi	s0,a0,911 # 6000338f <.Lanon.01042f9e07bac0588b13af07786e0e0c.38>
600023c2:	1408                	addi	a0,sp,544
600023c4:	4669                	li	a2,26
600023c6:	01b4                	addi	a3,sp,200
600023c8:	85a2                	mv	a1,s0
600023ca:	fffff097          	auipc	ra,0xfffff
600023ce:	9bc080e7          	jalr	-1604(ra) # 60000d86 <betrusted_boot::Gfx::msg>
    uart.tiny_write_str("\n\r\n\rJumping to loader...\n\r");
600023d2:	45e9                	li	a1,26
600023d4:	8522                	mv	a0,s0
600023d6:	ffffe097          	auipc	ra,0xffffe
600023da:	3d0080e7          	jalr	976(ra) # 600007a6 <betrusted_boot::debug::Uart::tiny_write_str>
        // note that removing power does *not* clear the RF or microcode state -- data can leak from the bootloader
        // into other areas because of this! (but I think it's OK because we just mess around with public keys here)
    }

    // now jump to the loader once everything checks out.
    start_loader(
600023de:	fffff097          	auipc	ra,0xfffff
600023e2:	874080e7          	jalr	-1932(ra) # 60000c52 <start_loader>
	...

600023e8 <<betrusted_boot::pio::PioError as core::fmt::Debug>::fmt>:
#[derive(Debug)]
600023e8:	00054503          	lbu	a0,0(a0)
600023ec:	c519                	beqz	a0,600023fa <<betrusted_boot::pio::PioError as core::fmt::Debug>::fmt+0x12>
600023ee:	460d                	li	a2,3
600023f0:	60003537          	lui	a0,0x60003
600023f4:	3a950693          	addi	a3,a0,937 # 600033a9 <.Lanon.01042f9e07bac0588b13af07786e0e0c.39>
600023f8:	a031                	j	60002404 <<betrusted_boot::pio::PioError as core::fmt::Debug>::fmt+0x1c>
600023fa:	4625                	li	a2,9
600023fc:	60003537          	lui	a0,0x60003
60002400:	3ac50693          	addi	a3,a0,940 # 600033ac <.Lanon.01042f9e07bac0588b13af07786e0e0c.40>
60002404:	41d8                	lw	a4,4(a1)
60002406:	4188                	lw	a0,0(a1)
60002408:	475c                	lw	a5,12(a4)
6000240a:	85b6                	mv	a1,a3
6000240c:	8782                	jr	a5

6000240e <arrayvec::arrayvec::extend_panic>:
    panic!("ArrayVec: capacity exceeded in extend/from_iter");
6000240e:	60003537          	lui	a0,0x60003
60002412:	41850513          	addi	a0,a0,1048 # 60003418 <.Lanon.0b5387455a7f645a1ce2665442eced5a.0>
60002416:	600035b7          	lui	a1,0x60003
6000241a:	4a458613          	addi	a2,a1,1188 # 600034a4 <.Lanon.0b5387455a7f645a1ce2665442eced5a.2>
6000241e:	02f00593          	li	a1,47
60002422:	00000097          	auipc	ra,0x0
60002426:	78c080e7          	jalr	1932(ra) # 60002bae <core::panicking::panic>
	...

6000242c <core::panicking::panic_fmt>:
6000242c:	1141                	addi	sp,sp,-16
6000242e:	c606                	sw	ra,12(sp)
60002430:	60003537          	lui	a0,0x60003
60002434:	4b450513          	addi	a0,a0,1204 # 600034b4 <.Lanon.2158d0578dda08147993e5787a6dfcb6.207>
60002438:	600035b7          	lui	a1,0x60003
6000243c:	4d858593          	addi	a1,a1,1240 # 600034d8 <.Lanon.2158d0578dda08147993e5787a6dfcb6.271>
60002440:	fffff097          	auipc	ra,0xfffff
60002444:	816080e7          	jalr	-2026(ra) # 60000c56 <rust_begin_unwind>
	...

6000244a <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>>:
6000244a:	8082                	ret

6000244c <<T as core::any::Any>::type_id>:
6000244c:	e7caf537          	lui	a0,0xe7caf
60002450:	a6d50513          	addi	a0,a0,-1427 # e7caea6d <_lcdfb+0x37caea6d>
60002454:	31c065b7          	lui	a1,0x31c06
60002458:	9bc58593          	addi	a1,a1,-1604 # 31c059bc <.Lline_table_start0+0x31c00b59>
6000245c:	8082                	ret

6000245e <core::panicking::panic_bounds_check>:
6000245e:	7139                	addi	sp,sp,-64
60002460:	de06                	sw	ra,60(sp)
60002462:	c42a                	sw	a0,8(sp)
60002464:	c62e                	sw	a1,12(sp)
60002466:	0068                	addi	a0,sp,12
60002468:	d42a                	sw	a0,40(sp)
6000246a:	60002537          	lui	a0,0x60002
6000246e:	49e50513          	addi	a0,a0,1182 # 6000249e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
60002472:	d62a                	sw	a0,44(sp)
60002474:	002c                	addi	a1,sp,8
60002476:	d82e                	sw	a1,48(sp)
60002478:	da2a                	sw	a0,52(sp)
6000247a:	60003537          	lui	a0,0x60003
6000247e:	4c850513          	addi	a0,a0,1224 # 600034c8 <.Lanon.2158d0578dda08147993e5787a6dfcb6.208>
60002482:	cc2a                	sw	a0,24(sp)
60002484:	4509                	li	a0,2
60002486:	ce2a                	sw	a0,28(sp)
60002488:	c802                	sw	zero,16(sp)
6000248a:	102c                	addi	a1,sp,40
6000248c:	d02e                	sw	a1,32(sp)
6000248e:	d22a                	sw	a0,36(sp)
60002490:	0808                	addi	a0,sp,16
60002492:	85b2                	mv	a1,a2
60002494:	00000097          	auipc	ra,0x0
60002498:	f98080e7          	jalr	-104(ra) # 6000242c <core::panicking::panic_fmt>
	...

6000249e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>:
6000249e:	4108                	lw	a0,0(a0)
600024a0:	00000317          	auipc	t1,0x0
600024a4:	00830067          	jr	8(t1) # 600024a8 <core::fmt::num::imp::fmt_u32>

600024a8 <core::fmt::num::imp::fmt_u32>:
600024a8:	711d                	addi	sp,sp,-96
600024aa:	ce86                	sw	ra,92(sp)
600024ac:	cca2                	sw	s0,88(sp)
600024ae:	caa6                	sw	s1,84(sp)
600024b0:	c8ca                	sw	s2,80(sp)
600024b2:	c6ce                	sw	s3,76(sp)
600024b4:	c4d2                	sw	s4,72(sp)
600024b6:	c2d6                	sw	s5,68(sp)
600024b8:	c0da                	sw	s6,64(sp)
600024ba:	de5e                	sw	s7,60(sp)
600024bc:	dc62                	sw	s8,56(sp)
600024be:	da66                	sw	s9,52(sp)
600024c0:	d86a                	sw	s10,48(sp)
600024c2:	d66e                	sw	s11,44(sp)
600024c4:	8bae                	mv	s7,a1
600024c6:	00455613          	srli	a2,a0,0x4
600024ca:	27100693          	li	a3,625
600024ce:	02700593          	li	a1,39
600024d2:	02d67363          	bgeu	a2,a3,600024f8 <core::fmt::num::imp::fmt_u32+0x50>
600024d6:	06300613          	li	a2,99
600024da:	0aa66963          	bltu	a2,a0,6000258c <core::fmt::num::imp::fmt_u32+0xe4>
600024de:	4629                	li	a2,10
600024e0:	0ec57b63          	bgeu	a0,a2,600025d6 <core::fmt::num::imp::fmt_u32+0x12e>
600024e4:	fff58413          	addi	s0,a1,-1
600024e8:	00510593          	addi	a1,sp,5
600024ec:	95a2                	add	a1,a1,s0
600024ee:	03050513          	addi	a0,a0,48
600024f2:	00a58023          	sb	a0,0(a1)
600024f6:	a219                	j	600025fc <core::fmt::num::imp::fmt_u32+0x154>
600024f8:	4581                	li	a1,0
600024fa:	d1b71637          	lui	a2,0xd1b71
600024fe:	75960293          	addi	t0,a2,1881 # d1b71759 <_lcdfb+0x21b71759>
60002502:	66b9                	lui	a3,0xe
60002504:	8f068313          	addi	t1,a3,-1808 # d8f0 <.Lline_table_start0+0x8a8d>
60002508:	6705                	lui	a4,0x1
6000250a:	47b70393          	addi	t2,a4,1147 # 147b <_hart_stack_size+0xc7b>
6000250e:	f9c00813          	li	a6,-100
60002512:	600037b7          	lui	a5,0x60003
60002516:	4fc78e93          	addi	t4,a5,1276 # 600034fc <.Lanon.2158d0578dda08147993e5787a6dfcb6.324>
6000251a:	00510893          	addi	a7,sp,5
6000251e:	05f5e7b7          	lui	a5,0x5f5e
60002522:	0ff78e13          	addi	t3,a5,255 # 5f5e0ff <.Lline_table_start0+0x5f5929c>
60002526:	842a                	mv	s0,a0
60002528:	02553533          	mulhu	a0,a0,t0
6000252c:	8135                	srli	a0,a0,0xd
6000252e:	02650633          	mul	a2,a0,t1
60002532:	9622                	add	a2,a2,s0
60002534:	01061693          	slli	a3,a2,0x10
60002538:	82c9                	srli	a3,a3,0x12
6000253a:	027686b3          	mul	a3,a3,t2
6000253e:	0116d713          	srli	a4,a3,0x11
60002542:	82c1                	srli	a3,a3,0x10
60002544:	7fe6f693          	andi	a3,a3,2046
60002548:	03070733          	mul	a4,a4,a6
6000254c:	963a                	add	a2,a2,a4
6000254e:	0646                	slli	a2,a2,0x11
60002550:	8241                	srli	a2,a2,0x10
60002552:	96f6                	add	a3,a3,t4
60002554:	00b88733          	add	a4,a7,a1
60002558:	0006c783          	lbu	a5,0(a3)
6000255c:	00168683          	lb	a3,1(a3)
60002560:	9676                	add	a2,a2,t4
60002562:	00160483          	lb	s1,1(a2)
60002566:	00064603          	lbu	a2,0(a2)
6000256a:	02d70223          	sb	a3,36(a4)
6000256e:	02f701a3          	sb	a5,35(a4)
60002572:	02970323          	sb	s1,38(a4)
60002576:	02c702a3          	sb	a2,37(a4)
6000257a:	15f1                	addi	a1,a1,-4
6000257c:	fa8e65e3          	bltu	t3,s0,60002526 <core::fmt::num::imp::fmt_u32+0x7e>
60002580:	02758593          	addi	a1,a1,39
60002584:	06300613          	li	a2,99
60002588:	f4a67be3          	bgeu	a2,a0,600024de <core::fmt::num::imp::fmt_u32+0x36>
6000258c:	01051613          	slli	a2,a0,0x10
60002590:	8249                	srli	a2,a2,0x12
60002592:	6685                	lui	a3,0x1
60002594:	47b68693          	addi	a3,a3,1147 # 147b <_hart_stack_size+0xc7b>
60002598:	02d60633          	mul	a2,a2,a3
6000259c:	8245                	srli	a2,a2,0x11
6000259e:	f9c00693          	li	a3,-100
600025a2:	02d606b3          	mul	a3,a2,a3
600025a6:	9536                	add	a0,a0,a3
600025a8:	0546                	slli	a0,a0,0x11
600025aa:	8141                	srli	a0,a0,0x10
600025ac:	15f9                	addi	a1,a1,-2
600025ae:	600036b7          	lui	a3,0x60003
600025b2:	4fc68693          	addi	a3,a3,1276 # 600034fc <.Lanon.2158d0578dda08147993e5787a6dfcb6.324>
600025b6:	9536                	add	a0,a0,a3
600025b8:	00150683          	lb	a3,1(a0)
600025bc:	00054503          	lbu	a0,0(a0)
600025c0:	00510713          	addi	a4,sp,5
600025c4:	972e                	add	a4,a4,a1
600025c6:	00d700a3          	sb	a3,1(a4)
600025ca:	00a70023          	sb	a0,0(a4)
600025ce:	8532                	mv	a0,a2
600025d0:	4629                	li	a2,10
600025d2:	f0c569e3          	bltu	a0,a2,600024e4 <core::fmt::num::imp::fmt_u32+0x3c>
600025d6:	0506                	slli	a0,a0,0x1
600025d8:	ffe58413          	addi	s0,a1,-2
600025dc:	600035b7          	lui	a1,0x60003
600025e0:	4fc58593          	addi	a1,a1,1276 # 600034fc <.Lanon.2158d0578dda08147993e5787a6dfcb6.324>
600025e4:	952e                	add	a0,a0,a1
600025e6:	00150583          	lb	a1,1(a0)
600025ea:	00054503          	lbu	a0,0(a0)
600025ee:	00510613          	addi	a2,sp,5
600025f2:	9622                	add	a2,a2,s0
600025f4:	00b600a3          	sb	a1,1(a2)
600025f8:	00a60023          	sb	a0,0(a2)
600025fc:	018ba503          	lw	a0,24(s7)
60002600:	00510593          	addi	a1,sp,5
60002604:	02700613          	li	a2,39
60002608:	00157493          	andi	s1,a0,1
6000260c:	00110a37          	lui	s4,0x110
60002610:	c099                	beqz	s1,60002616 <core::fmt::num::imp::fmt_u32+0x16e>
60002612:	02b00a13          	li	s4,43
60002616:	408609b3          	sub	s3,a2,s0
6000261a:	00858933          	add	s2,a1,s0
6000261e:	01d51593          	slli	a1,a0,0x1d
60002622:	008ba603          	lw	a2,8(s7)
60002626:	85fd                	srai	a1,a1,0x1f
60002628:	600036b7          	lui	a3,0x60003
6000262c:	4b468693          	addi	a3,a3,1204 # 600034b4 <.Lanon.2158d0578dda08147993e5787a6dfcb6.207>
60002630:	00d5fab3          	and	s5,a1,a3
60002634:	ca15                	beqz	a2,60002668 <core::fmt::num::imp::fmt_u32+0x1c0>
60002636:	00cbac83          	lw	s9,12(s7)
6000263a:	009985b3          	add	a1,s3,s1
6000263e:	0395f563          	bgeu	a1,s9,60002668 <core::fmt::num::imp::fmt_u32+0x1c0>
60002642:	8921                	andi	a0,a0,8
60002644:	e535                	bnez	a0,600026b0 <core::fmt::num::imp::fmt_u32+0x208>
60002646:	020bc603          	lbu	a2,32(s7)
6000264a:	468d                	li	a3,3
6000264c:	4505                	li	a0,1
6000264e:	00d60363          	beq	a2,a3,60002654 <core::fmt::num::imp::fmt_u32+0x1ac>
60002652:	8532                	mv	a0,a2
60002654:	00357613          	andi	a2,a0,3
60002658:	40bc8533          	sub	a0,s9,a1
6000265c:	c255                	beqz	a2,60002700 <core::fmt::num::imp::fmt_u32+0x258>
6000265e:	4585                	li	a1,1
60002660:	0ab61363          	bne	a2,a1,60002706 <core::fmt::num::imp::fmt_u32+0x25e>
60002664:	4c81                	li	s9,0
60002666:	a06d                	j	60002710 <core::fmt::num::imp::fmt_u32+0x268>
60002668:	000ba403          	lw	s0,0(s7)
6000266c:	004ba483          	lw	s1,4(s7)
60002670:	8522                	mv	a0,s0
60002672:	85a6                	mv	a1,s1
60002674:	8652                	mv	a2,s4
60002676:	86d6                	mv	a3,s5
60002678:	00000097          	auipc	ra,0x0
6000267c:	124080e7          	jalr	292(ra) # 6000279c <core::fmt::Formatter::pad_integral::write_prefix>
60002680:	4b05                	li	s6,1
60002682:	e519                	bnez	a0,60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
60002684:	44d4                	lw	a3,12(s1)
60002686:	8522                	mv	a0,s0
60002688:	85ca                	mv	a1,s2
6000268a:	864e                	mv	a2,s3
6000268c:	9682                	jalr	a3
6000268e:	8b2a                	mv	s6,a0
60002690:	855a                	mv	a0,s6
60002692:	40f6                	lw	ra,92(sp)
60002694:	4466                	lw	s0,88(sp)
60002696:	44d6                	lw	s1,84(sp)
60002698:	4946                	lw	s2,80(sp)
6000269a:	49b6                	lw	s3,76(sp)
6000269c:	4a26                	lw	s4,72(sp)
6000269e:	4a96                	lw	s5,68(sp)
600026a0:	4b06                	lw	s6,64(sp)
600026a2:	5bf2                	lw	s7,60(sp)
600026a4:	5c62                	lw	s8,56(sp)
600026a6:	5cd2                	lw	s9,52(sp)
600026a8:	5d42                	lw	s10,48(sp)
600026aa:	5db2                	lw	s11,44(sp)
600026ac:	6125                	addi	sp,sp,96
600026ae:	8082                	ret
600026b0:	01cba503          	lw	a0,28(s7)
600026b4:	c02a                	sw	a0,0(sp)
600026b6:	03000513          	li	a0,48
600026ba:	020bcd03          	lbu	s10,32(s7)
600026be:	000bac03          	lw	s8,0(s7)
600026c2:	004bad83          	lw	s11,4(s7)
600026c6:	00abae23          	sw	a0,28(s7)
600026ca:	4b05                	li	s6,1
600026cc:	036b8023          	sb	s6,32(s7)
600026d0:	8562                	mv	a0,s8
600026d2:	85ee                	mv	a1,s11
600026d4:	8652                	mv	a2,s4
600026d6:	86d6                	mv	a3,s5
600026d8:	00000097          	auipc	ra,0x0
600026dc:	0c4080e7          	jalr	196(ra) # 6000279c <core::fmt::Formatter::pad_integral::write_prefix>
600026e0:	f945                	bnez	a0,60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
600026e2:	01940533          	add	a0,s0,s9
600026e6:	8d05                	sub	a0,a0,s1
600026e8:	fda50413          	addi	s0,a0,-38
600026ec:	147d                	addi	s0,s0,-1 # 40107fff <.Lline_table_start0+0x4010319c>
600026ee:	c449                	beqz	s0,60002778 <core::fmt::num::imp::fmt_u32+0x2d0>
600026f0:	010da603          	lw	a2,16(s11) # 4000010 <.Lline_table_start0+0x3ffb1ad>
600026f4:	03000593          	li	a1,48
600026f8:	8562                	mv	a0,s8
600026fa:	9602                	jalr	a2
600026fc:	d965                	beqz	a0,600026ec <core::fmt::num::imp::fmt_u32+0x244>
600026fe:	bf49                	j	60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
60002700:	8caa                	mv	s9,a0
60002702:	8532                	mv	a0,a2
60002704:	a031                	j	60002710 <core::fmt::num::imp::fmt_u32+0x268>
60002706:	00150593          	addi	a1,a0,1
6000270a:	8105                	srli	a0,a0,0x1
6000270c:	0015dc93          	srli	s9,a1,0x1
60002710:	000bac03          	lw	s8,0(s7)
60002714:	004bad03          	lw	s10,4(s7)
60002718:	01cba483          	lw	s1,28(s7)
6000271c:	00150413          	addi	s0,a0,1
60002720:	147d                	addi	s0,s0,-1
60002722:	c809                	beqz	s0,60002734 <core::fmt::num::imp::fmt_u32+0x28c>
60002724:	010d2603          	lw	a2,16(s10)
60002728:	8562                	mv	a0,s8
6000272a:	85a6                	mv	a1,s1
6000272c:	9602                	jalr	a2
6000272e:	d96d                	beqz	a0,60002720 <core::fmt::num::imp::fmt_u32+0x278>
60002730:	4b05                	li	s6,1
60002732:	bfb9                	j	60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
60002734:	00110537          	lui	a0,0x110
60002738:	4b05                	li	s6,1
6000273a:	f4a48be3          	beq	s1,a0,60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
6000273e:	8562                	mv	a0,s8
60002740:	85ea                	mv	a1,s10
60002742:	8652                	mv	a2,s4
60002744:	86d6                	mv	a3,s5
60002746:	00000097          	auipc	ra,0x0
6000274a:	056080e7          	jalr	86(ra) # 6000279c <core::fmt::Formatter::pad_integral::write_prefix>
6000274e:	f129                	bnez	a0,60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
60002750:	00cd2683          	lw	a3,12(s10)
60002754:	8562                	mv	a0,s8
60002756:	85ca                	mv	a1,s2
60002758:	864e                	mv	a2,s3
6000275a:	9682                	jalr	a3
6000275c:	f915                	bnez	a0,60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
6000275e:	4401                	li	s0,0
60002760:	028c8a63          	beq	s9,s0,60002794 <core::fmt::num::imp::fmt_u32+0x2ec>
60002764:	010d2603          	lw	a2,16(s10)
60002768:	0405                	addi	s0,s0,1
6000276a:	8562                	mv	a0,s8
6000276c:	85a6                	mv	a1,s1
6000276e:	9602                	jalr	a2
60002770:	d965                	beqz	a0,60002760 <core::fmt::num::imp::fmt_u32+0x2b8>
60002772:	fff40513          	addi	a0,s0,-1
60002776:	a005                	j	60002796 <core::fmt::num::imp::fmt_u32+0x2ee>
60002778:	00cda683          	lw	a3,12(s11)
6000277c:	8562                	mv	a0,s8
6000277e:	85ca                	mv	a1,s2
60002780:	864e                	mv	a2,s3
60002782:	9682                	jalr	a3
60002784:	f511                	bnez	a0,60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
60002786:	4b01                	li	s6,0
60002788:	4502                	lw	a0,0(sp)
6000278a:	00abae23          	sw	a0,28(s7)
6000278e:	03ab8023          	sb	s10,32(s7)
60002792:	bdfd                	j	60002690 <core::fmt::num::imp::fmt_u32+0x1e8>
60002794:	8566                	mv	a0,s9
60002796:	01953b33          	sltu	s6,a0,s9
6000279a:	bddd                	j	60002690 <core::fmt::num::imp::fmt_u32+0x1e8>

6000279c <core::fmt::Formatter::pad_integral::write_prefix>:
6000279c:	1141                	addi	sp,sp,-16
6000279e:	c606                	sw	ra,12(sp)
600027a0:	c422                	sw	s0,8(sp)
600027a2:	c226                	sw	s1,4(sp)
600027a4:	c04a                	sw	s2,0(sp)
600027a6:	00110737          	lui	a4,0x110
600027aa:	8436                	mv	s0,a3
600027ac:	84ae                	mv	s1,a1
600027ae:	892a                	mv	s2,a0
600027b0:	00e60963          	beq	a2,a4,600027c2 <core::fmt::Formatter::pad_integral::write_prefix+0x26>
600027b4:	4894                	lw	a3,16(s1)
600027b6:	854a                	mv	a0,s2
600027b8:	85b2                	mv	a1,a2
600027ba:	9682                	jalr	a3
600027bc:	85aa                	mv	a1,a0
600027be:	4505                	li	a0,1
600027c0:	ed89                	bnez	a1,600027da <core::fmt::Formatter::pad_integral::write_prefix+0x3e>
600027c2:	c819                	beqz	s0,600027d8 <core::fmt::Formatter::pad_integral::write_prefix+0x3c>
600027c4:	44dc                	lw	a5,12(s1)
600027c6:	854a                	mv	a0,s2
600027c8:	85a2                	mv	a1,s0
600027ca:	4601                	li	a2,0
600027cc:	40b2                	lw	ra,12(sp)
600027ce:	4422                	lw	s0,8(sp)
600027d0:	4492                	lw	s1,4(sp)
600027d2:	4902                	lw	s2,0(sp)
600027d4:	0141                	addi	sp,sp,16
600027d6:	8782                	jr	a5
600027d8:	4501                	li	a0,0
600027da:	40b2                	lw	ra,12(sp)
600027dc:	4422                	lw	s0,8(sp)
600027de:	4492                	lw	s1,4(sp)
600027e0:	4902                	lw	s2,0(sp)
600027e2:	0141                	addi	sp,sp,16
600027e4:	8082                	ret

600027e6 <core::fmt::Formatter::pad>:
600027e6:	7179                	addi	sp,sp,-48
600027e8:	d606                	sw	ra,44(sp)
600027ea:	d422                	sw	s0,40(sp)
600027ec:	d226                	sw	s1,36(sp)
600027ee:	d04a                	sw	s2,32(sp)
600027f0:	ce4e                	sw	s3,28(sp)
600027f2:	cc52                	sw	s4,24(sp)
600027f4:	ca56                	sw	s5,20(sp)
600027f6:	c85a                	sw	s6,16(sp)
600027f8:	c65e                	sw	s7,12(sp)
600027fa:	00852283          	lw	t0,8(a0) # 110008 <.Lline_table_start0+0x10b1a5>
600027fe:	4914                	lw	a3,16(a0)
60002800:	fff28713          	addi	a4,t0,-1
60002804:	00e03733          	snez	a4,a4
60002808:	fff68793          	addi	a5,a3,-1
6000280c:	00f037b3          	snez	a5,a5
60002810:	8f7d                	and	a4,a4,a5
60002812:	8932                	mv	s2,a2
60002814:	89ae                	mv	s3,a1
60002816:	1a071663          	bnez	a4,600029c2 <core::fmt::Formatter::pad+0x1dc>
6000281a:	4585                	li	a1,1
6000281c:	10b69b63          	bne	a3,a1,60002932 <core::fmt::Formatter::pad+0x14c>
60002820:	4950                	lw	a2,20(a0)
60002822:	4581                	li	a1,0
60002824:	01298e33          	add	t3,s3,s2
60002828:	00160793          	addi	a5,a2,1
6000282c:	00110337          	lui	t1,0x110
60002830:	0df00893          	li	a7,223
60002834:	0f000813          	li	a6,240
60002838:	864e                	mv	a2,s3
6000283a:	a801                	j	6000284a <core::fmt::Formatter::pad+0x64>
6000283c:	00160693          	addi	a3,a2,1
60002840:	8d91                	sub	a1,a1,a2
60002842:	95b6                	add	a1,a1,a3
60002844:	8636                	mv	a2,a3
60002846:	0e640663          	beq	s0,t1,60002932 <core::fmt::Formatter::pad+0x14c>
6000284a:	17fd                	addi	a5,a5,-1
6000284c:	cba5                	beqz	a5,600028bc <core::fmt::Formatter::pad+0xd6>
6000284e:	0fc60263          	beq	a2,t3,60002932 <core::fmt::Formatter::pad+0x14c>
60002852:	00060683          	lb	a3,0(a2)
60002856:	0ff6f413          	zext.b	s0,a3
6000285a:	fe06d1e3          	bgez	a3,6000283c <core::fmt::Formatter::pad+0x56>
6000285e:	00164683          	lbu	a3,1(a2)
60002862:	01f47493          	andi	s1,s0,31
60002866:	03f6f713          	andi	a4,a3,63
6000286a:	0288fc63          	bgeu	a7,s0,600028a2 <core::fmt::Formatter::pad+0xbc>
6000286e:	00264683          	lbu	a3,2(a2)
60002872:	071a                	slli	a4,a4,0x6
60002874:	03f6f693          	andi	a3,a3,63
60002878:	00d763b3          	or	t2,a4,a3
6000287c:	03046963          	bltu	s0,a6,600028ae <core::fmt::Formatter::pad+0xc8>
60002880:	00364683          	lbu	a3,3(a2)
60002884:	01d49713          	slli	a4,s1,0x1d
60002888:	832d                	srli	a4,a4,0xb
6000288a:	00639493          	slli	s1,t2,0x6
6000288e:	03f6f693          	andi	a3,a3,63
60002892:	8ec5                	or	a3,a3,s1
60002894:	00e6e433          	or	s0,a3,a4
60002898:	08640d63          	beq	s0,t1,60002932 <core::fmt::Formatter::pad+0x14c>
6000289c:	00460693          	addi	a3,a2,4
600028a0:	b745                	j	60002840 <core::fmt::Formatter::pad+0x5a>
600028a2:	00260693          	addi	a3,a2,2
600028a6:	049a                	slli	s1,s1,0x6
600028a8:	00e4e433          	or	s0,s1,a4
600028ac:	bf51                	j	60002840 <core::fmt::Formatter::pad+0x5a>
600028ae:	00360693          	addi	a3,a2,3
600028b2:	00c49713          	slli	a4,s1,0xc
600028b6:	00e3e433          	or	s0,t2,a4
600028ba:	b759                	j	60002840 <core::fmt::Formatter::pad+0x5a>
600028bc:	07c60b63          	beq	a2,t3,60002932 <core::fmt::Formatter::pad+0x14c>
600028c0:	00060683          	lb	a3,0(a2)
600028c4:	0406d363          	bgez	a3,6000290a <core::fmt::Formatter::pad+0x124>
600028c8:	0ff6f693          	zext.b	a3,a3
600028cc:	0e000713          	li	a4,224
600028d0:	02e6ed63          	bltu	a3,a4,6000290a <core::fmt::Formatter::pad+0x124>
600028d4:	0f000713          	li	a4,240
600028d8:	02e6e963          	bltu	a3,a4,6000290a <core::fmt::Formatter::pad+0x124>
600028dc:	00164703          	lbu	a4,1(a2)
600028e0:	00264783          	lbu	a5,2(a2)
600028e4:	03f77713          	andi	a4,a4,63
600028e8:	03f7f793          	andi	a5,a5,63
600028ec:	00364603          	lbu	a2,3(a2)
600028f0:	06f6                	slli	a3,a3,0x1d
600028f2:	82ad                	srli	a3,a3,0xb
600028f4:	0732                	slli	a4,a4,0xc
600028f6:	079a                	slli	a5,a5,0x6
600028f8:	8f5d                	or	a4,a4,a5
600028fa:	03f67613          	andi	a2,a2,63
600028fe:	8e59                	or	a2,a2,a4
60002900:	8e55                	or	a2,a2,a3
60002902:	001106b7          	lui	a3,0x110
60002906:	02d60663          	beq	a2,a3,60002932 <core::fmt::Formatter::pad+0x14c>
6000290a:	c185                	beqz	a1,6000292a <core::fmt::Formatter::pad+0x144>
6000290c:	0125fd63          	bgeu	a1,s2,60002926 <core::fmt::Formatter::pad+0x140>
60002910:	00b98633          	add	a2,s3,a1
60002914:	00060603          	lb	a2,0(a2)
60002918:	fc000693          	li	a3,-64
6000291c:	00d65763          	bge	a2,a3,6000292a <core::fmt::Formatter::pad+0x144>
60002920:	4601                	li	a2,0
60002922:	e611                	bnez	a2,6000292e <core::fmt::Formatter::pad+0x148>
60002924:	a039                	j	60002932 <core::fmt::Formatter::pad+0x14c>
60002926:	ff259de3          	bne	a1,s2,60002920 <core::fmt::Formatter::pad+0x13a>
6000292a:	864e                	mv	a2,s3
6000292c:	c219                	beqz	a2,60002932 <core::fmt::Formatter::pad+0x14c>
6000292e:	892e                	mv	s2,a1
60002930:	89b2                	mv	s3,a2
60002932:	08028863          	beqz	t0,600029c2 <core::fmt::Formatter::pad+0x1dc>
60002936:	00c52803          	lw	a6,12(a0)
6000293a:	45c1                	li	a1,16
6000293c:	02b97263          	bgeu	s2,a1,60002960 <core::fmt::Formatter::pad+0x17a>
60002940:	4601                	li	a2,0
60002942:	04090e63          	beqz	s2,6000299e <core::fmt::Formatter::pad+0x1b8>
60002946:	85ca                	mv	a1,s2
60002948:	86ce                	mv	a3,s3
6000294a:	00068703          	lb	a4,0(a3) # 110000 <.Lline_table_start0+0x10b19d>
6000294e:	0685                	addi	a3,a3,1
60002950:	fc072713          	slti	a4,a4,-64
60002954:	00174713          	xori	a4,a4,1
60002958:	15fd                	addi	a1,a1,-1
6000295a:	963a                	add	a2,a2,a4
6000295c:	f5fd                	bnez	a1,6000294a <core::fmt::Formatter::pad+0x164>
6000295e:	a081                	j	6000299e <core::fmt::Formatter::pad+0x1b8>
60002960:	00398593          	addi	a1,s3,3 # 50003 <.Lline_table_start0+0x4b1a0>
60002964:	ffc5f793          	andi	a5,a1,-4
60002968:	413786b3          	sub	a3,a5,s3
6000296c:	00d96c63          	bltu	s2,a3,60002984 <core::fmt::Formatter::pad+0x19e>
60002970:	40d905b3          	sub	a1,s2,a3
60002974:	0045b613          	sltiu	a2,a1,4
60002978:	0056b713          	sltiu	a4,a3,5
6000297c:	00174713          	xori	a4,a4,1
60002980:	8e59                	or	a2,a2,a4
60002982:	c279                	beqz	a2,60002a48 <core::fmt::Formatter::pad+0x262>
60002984:	4601                	li	a2,0
60002986:	85ca                	mv	a1,s2
60002988:	86ce                	mv	a3,s3
6000298a:	00068703          	lb	a4,0(a3)
6000298e:	0685                	addi	a3,a3,1
60002990:	fc072713          	slti	a4,a4,-64
60002994:	00174713          	xori	a4,a4,1
60002998:	15fd                	addi	a1,a1,-1
6000299a:	963a                	add	a2,a2,a4
6000299c:	f5fd                	bnez	a1,6000298a <core::fmt::Formatter::pad+0x1a4>
6000299e:	03067263          	bgeu	a2,a6,600029c2 <core::fmt::Formatter::pad+0x1dc>
600029a2:	02054583          	lbu	a1,32(a0)
600029a6:	470d                	li	a4,3
600029a8:	4681                	li	a3,0
600029aa:	00e58363          	beq	a1,a4,600029b0 <core::fmt::Formatter::pad+0x1ca>
600029ae:	86ae                	mv	a3,a1
600029b0:	8a8d                	andi	a3,a3,3
600029b2:	40c805b3          	sub	a1,a6,a2
600029b6:	c695                	beqz	a3,600029e2 <core::fmt::Formatter::pad+0x1fc>
600029b8:	4605                	li	a2,1
600029ba:	02c69763          	bne	a3,a2,600029e8 <core::fmt::Formatter::pad+0x202>
600029be:	4a81                	li	s5,0
600029c0:	a80d                	j	600029f2 <core::fmt::Formatter::pad+0x20c>
600029c2:	414c                	lw	a1,4(a0)
600029c4:	4108                	lw	a0,0(a0)
600029c6:	45dc                	lw	a5,12(a1)
600029c8:	85ce                	mv	a1,s3
600029ca:	864a                	mv	a2,s2
600029cc:	50b2                	lw	ra,44(sp)
600029ce:	5422                	lw	s0,40(sp)
600029d0:	5492                	lw	s1,36(sp)
600029d2:	5902                	lw	s2,32(sp)
600029d4:	49f2                	lw	s3,28(sp)
600029d6:	4a62                	lw	s4,24(sp)
600029d8:	4ad2                	lw	s5,20(sp)
600029da:	4b42                	lw	s6,16(sp)
600029dc:	4bb2                	lw	s7,12(sp)
600029de:	6145                	addi	sp,sp,48
600029e0:	8782                	jr	a5
600029e2:	8aae                	mv	s5,a1
600029e4:	85b6                	mv	a1,a3
600029e6:	a031                	j	600029f2 <core::fmt::Formatter::pad+0x20c>
600029e8:	00158613          	addi	a2,a1,1
600029ec:	8185                	srli	a1,a1,0x1
600029ee:	00165a93          	srli	s5,a2,0x1
600029f2:	00052b03          	lw	s6,0(a0)
600029f6:	00452b83          	lw	s7,4(a0)
600029fa:	4d44                	lw	s1,28(a0)
600029fc:	00158413          	addi	s0,a1,1
60002a00:	147d                	addi	s0,s0,-1
60002a02:	c809                	beqz	s0,60002a14 <core::fmt::Formatter::pad+0x22e>
60002a04:	010ba603          	lw	a2,16(s7)
60002a08:	855a                	mv	a0,s6
60002a0a:	85a6                	mv	a1,s1
60002a0c:	9602                	jalr	a2
60002a0e:	d96d                	beqz	a0,60002a00 <core::fmt::Formatter::pad+0x21a>
60002a10:	4a05                	li	s4,1
60002a12:	a2b5                	j	60002b7e <core::fmt::Formatter::pad+0x398>
60002a14:	00110537          	lui	a0,0x110
60002a18:	4a05                	li	s4,1
60002a1a:	16a48263          	beq	s1,a0,60002b7e <core::fmt::Formatter::pad+0x398>
60002a1e:	00cba683          	lw	a3,12(s7)
60002a22:	855a                	mv	a0,s6
60002a24:	85ce                	mv	a1,s3
60002a26:	864a                	mv	a2,s2
60002a28:	9682                	jalr	a3
60002a2a:	14051a63          	bnez	a0,60002b7e <core::fmt::Formatter::pad+0x398>
60002a2e:	4401                	li	s0,0
60002a30:	148a8463          	beq	s5,s0,60002b78 <core::fmt::Formatter::pad+0x392>
60002a34:	010ba603          	lw	a2,16(s7)
60002a38:	0405                	addi	s0,s0,1
60002a3a:	855a                	mv	a0,s6
60002a3c:	85a6                	mv	a1,s1
60002a3e:	9602                	jalr	a2
60002a40:	d965                	beqz	a0,60002a30 <core::fmt::Formatter::pad+0x24a>
60002a42:	fff40513          	addi	a0,s0,-1
60002a46:	aa15                	j	60002b7a <core::fmt::Formatter::pad+0x394>
60002a48:	0035f713          	andi	a4,a1,3
60002a4c:	4601                	li	a2,0
60002a4e:	01378f63          	beq	a5,s3,60002a6c <core::fmt::Formatter::pad+0x286>
60002a52:	40f987b3          	sub	a5,s3,a5
60002a56:	84ce                	mv	s1,s3
60002a58:	00048403          	lb	s0,0(s1)
60002a5c:	0485                	addi	s1,s1,1
60002a5e:	fc042413          	slti	s0,s0,-64
60002a62:	00144413          	xori	s0,s0,1
60002a66:	0785                	addi	a5,a5,1
60002a68:	9622                	add	a2,a2,s0
60002a6a:	f7fd                	bnez	a5,60002a58 <core::fmt::Formatter::pad+0x272>
60002a6c:	96ce                	add	a3,a3,s3
60002a6e:	4481                	li	s1,0
60002a70:	cf11                	beqz	a4,60002a8c <core::fmt::Formatter::pad+0x2a6>
60002a72:	ffc5f793          	andi	a5,a1,-4
60002a76:	97b6                	add	a5,a5,a3
60002a78:	00078403          	lb	s0,0(a5)
60002a7c:	0785                	addi	a5,a5,1
60002a7e:	fc042413          	slti	s0,s0,-64
60002a82:	00144413          	xori	s0,s0,1
60002a86:	177d                	addi	a4,a4,-1 # 10ffff <.Lline_table_start0+0x10b19c>
60002a88:	94a2                	add	s1,s1,s0
60002a8a:	f77d                	bnez	a4,60002a78 <core::fmt::Formatter::pad+0x292>
60002a8c:	0025d713          	srli	a4,a1,0x2
60002a90:	010105b7          	lui	a1,0x1010
60002a94:	10158793          	addi	a5,a1,257 # 1010101 <.Lline_table_start0+0x100b29e>
60002a98:	00ff05b7          	lui	a1,0xff0
60002a9c:	0ff58293          	addi	t0,a1,255 # ff00ff <.Lline_table_start0+0xfeb29c>
60002aa0:	65c1                	lui	a1,0x10
60002aa2:	00158893          	addi	a7,a1,1 # 10001 <.Lline_table_start0+0xb19e>
60002aa6:	9626                	add	a2,a2,s1
60002aa8:	a01d                	j	60002ace <core::fmt::Formatter::pad+0x2e8>
60002aaa:	002e1693          	slli	a3,t3,0x2
60002aae:	969a                	add	a3,a3,t1
60002ab0:	41c38733          	sub	a4,t2,t3
60002ab4:	003e7493          	andi	s1,t3,3
60002ab8:	0055f433          	and	s0,a1,t0
60002abc:	81a1                	srli	a1,a1,0x8
60002abe:	0055f5b3          	and	a1,a1,t0
60002ac2:	95a2                	add	a1,a1,s0
60002ac4:	031585b3          	mul	a1,a1,a7
60002ac8:	81c1                	srli	a1,a1,0x10
60002aca:	962e                	add	a2,a2,a1
60002acc:	ecad                	bnez	s1,60002b46 <core::fmt::Formatter::pad+0x360>
60002ace:	ec0708e3          	beqz	a4,6000299e <core::fmt::Formatter::pad+0x1b8>
60002ad2:	83ba                	mv	t2,a4
60002ad4:	8336                	mv	t1,a3
60002ad6:	0c000593          	li	a1,192
60002ada:	8e3a                	mv	t3,a4
60002adc:	00b76463          	bltu	a4,a1,60002ae4 <core::fmt::Formatter::pad+0x2fe>
60002ae0:	0c000e13          	li	t3,192
60002ae4:	0fce7593          	andi	a1,t3,252
60002ae8:	00259693          	slli	a3,a1,0x2
60002aec:	00d30eb3          	add	t4,t1,a3
60002af0:	ddcd                	beqz	a1,60002aaa <core::fmt::Formatter::pad+0x2c4>
60002af2:	4581                	li	a1,0
60002af4:	869a                	mv	a3,t1
60002af6:	dad5                	beqz	a3,60002aaa <core::fmt::Formatter::pad+0x2c4>
60002af8:	4298                	lw	a4,0(a3)
60002afa:	fff74493          	not	s1,a4
60002afe:	809d                	srli	s1,s1,0x7
60002b00:	8319                	srli	a4,a4,0x6
60002b02:	42c0                	lw	s0,4(a3)
60002b04:	8f45                	or	a4,a4,s1
60002b06:	8f7d                	and	a4,a4,a5
60002b08:	95ba                	add	a1,a1,a4
60002b0a:	fff44713          	not	a4,s0
60002b0e:	831d                	srli	a4,a4,0x7
60002b10:	00645493          	srli	s1,s0,0x6
60002b14:	4680                	lw	s0,8(a3)
60002b16:	8f45                	or	a4,a4,s1
60002b18:	8f7d                	and	a4,a4,a5
60002b1a:	95ba                	add	a1,a1,a4
60002b1c:	fff44713          	not	a4,s0
60002b20:	831d                	srli	a4,a4,0x7
60002b22:	00645493          	srli	s1,s0,0x6
60002b26:	46c0                	lw	s0,12(a3)
60002b28:	8f45                	or	a4,a4,s1
60002b2a:	8f7d                	and	a4,a4,a5
60002b2c:	95ba                	add	a1,a1,a4
60002b2e:	fff44713          	not	a4,s0
60002b32:	831d                	srli	a4,a4,0x7
60002b34:	00645493          	srli	s1,s0,0x6
60002b38:	8f45                	or	a4,a4,s1
60002b3a:	8f7d                	and	a4,a4,a5
60002b3c:	06c1                	addi	a3,a3,16
60002b3e:	95ba                	add	a1,a1,a4
60002b40:	fbd69be3          	bne	a3,t4,60002af6 <core::fmt::Formatter::pad+0x310>
60002b44:	b79d                	j	60002aaa <core::fmt::Formatter::pad+0x2c4>
60002b46:	04030863          	beqz	t1,60002b96 <core::fmt::Formatter::pad+0x3b0>
60002b4a:	0c000593          	li	a1,192
60002b4e:	00b3e463          	bltu	t2,a1,60002b56 <core::fmt::Formatter::pad+0x370>
60002b52:	0c000393          	li	t2,192
60002b56:	4581                	li	a1,0
60002b58:	0033f693          	andi	a3,t2,3
60002b5c:	068a                	slli	a3,a3,0x2
60002b5e:	000ea703          	lw	a4,0(t4)
60002b62:	0e91                	addi	t4,t4,4
60002b64:	fff74493          	not	s1,a4
60002b68:	809d                	srli	s1,s1,0x7
60002b6a:	8319                	srli	a4,a4,0x6
60002b6c:	8f45                	or	a4,a4,s1
60002b6e:	8f7d                	and	a4,a4,a5
60002b70:	16f1                	addi	a3,a3,-4
60002b72:	95ba                	add	a1,a1,a4
60002b74:	f6ed                	bnez	a3,60002b5e <core::fmt::Formatter::pad+0x378>
60002b76:	a00d                	j	60002b98 <core::fmt::Formatter::pad+0x3b2>
60002b78:	8556                	mv	a0,s5
60002b7a:	01553a33          	sltu	s4,a0,s5
60002b7e:	8552                	mv	a0,s4
60002b80:	50b2                	lw	ra,44(sp)
60002b82:	5422                	lw	s0,40(sp)
60002b84:	5492                	lw	s1,36(sp)
60002b86:	5902                	lw	s2,32(sp)
60002b88:	49f2                	lw	s3,28(sp)
60002b8a:	4a62                	lw	s4,24(sp)
60002b8c:	4ad2                	lw	s5,20(sp)
60002b8e:	4b42                	lw	s6,16(sp)
60002b90:	4bb2                	lw	s7,12(sp)
60002b92:	6145                	addi	sp,sp,48
60002b94:	8082                	ret
60002b96:	4581                	li	a1,0
60002b98:	0055f6b3          	and	a3,a1,t0
60002b9c:	81a1                	srli	a1,a1,0x8
60002b9e:	0055f5b3          	and	a1,a1,t0
60002ba2:	95b6                	add	a1,a1,a3
60002ba4:	031585b3          	mul	a1,a1,a7
60002ba8:	81c1                	srli	a1,a1,0x10
60002baa:	962e                	add	a2,a2,a1
60002bac:	bbcd                	j	6000299e <core::fmt::Formatter::pad+0x1b8>

60002bae <core::panicking::panic>:
60002bae:	7179                	addi	sp,sp,-48
60002bb0:	d606                	sw	ra,44(sp)
60002bb2:	d02a                	sw	a0,32(sp)
60002bb4:	d22e                	sw	a1,36(sp)
60002bb6:	1008                	addi	a0,sp,32
60002bb8:	c82a                	sw	a0,16(sp)
60002bba:	4505                	li	a0,1
60002bbc:	ca2a                	sw	a0,20(sp)
60002bbe:	c402                	sw	zero,8(sp)
60002bc0:	60003537          	lui	a0,0x60003
60002bc4:	4b450513          	addi	a0,a0,1204 # 600034b4 <.Lanon.2158d0578dda08147993e5787a6dfcb6.207>
60002bc8:	cc2a                	sw	a0,24(sp)
60002bca:	ce02                	sw	zero,28(sp)
60002bcc:	0028                	addi	a0,sp,8
60002bce:	85b2                	mv	a1,a2
60002bd0:	00000097          	auipc	ra,0x0
60002bd4:	85c080e7          	jalr	-1956(ra) # 6000242c <core::panicking::panic_fmt>
	...

60002bda <<&T as core::fmt::Display>::fmt>:
60002bda:	4114                	lw	a3,0(a0)
60002bdc:	4150                	lw	a2,4(a0)
60002bde:	852e                	mv	a0,a1
60002be0:	85b6                	mv	a1,a3
60002be2:	00000317          	auipc	t1,0x0
60002be6:	c0430067          	jr	-1020(t1) # 600027e6 <core::fmt::Formatter::pad>

60002bea <<&T as core::fmt::Debug>::fmt>:
60002bea:	4150                	lw	a2,4(a0)
60002bec:	4108                	lw	a0,0(a0)
60002bee:	465c                	lw	a5,12(a2)
60002bf0:	8782                	jr	a5

60002bf2 <core::result::unwrap_failed>:
60002bf2:	7139                	addi	sp,sp,-64
60002bf4:	de06                	sw	ra,60(sp)
60002bf6:	600036b7          	lui	a3,0x60003
60002bfa:	deb68693          	addi	a3,a3,-533 # 60002deb <.Lanon.01042f9e07bac0588b13af07786e0e0c.2>
60002bfe:	c036                	sw	a3,0(sp)
60002c00:	02b00693          	li	a3,43
60002c04:	c236                	sw	a3,4(sp)
60002c06:	c42a                	sw	a0,8(sp)
60002c08:	c62e                	sw	a1,12(sp)
60002c0a:	850a                	mv	a0,sp
60002c0c:	d42a                	sw	a0,40(sp)
60002c0e:	60003537          	lui	a0,0x60003
60002c12:	bda50513          	addi	a0,a0,-1062 # 60002bda <<&T as core::fmt::Display>::fmt>
60002c16:	d62a                	sw	a0,44(sp)
60002c18:	0028                	addi	a0,sp,8
60002c1a:	d82a                	sw	a0,48(sp)
60002c1c:	60003537          	lui	a0,0x60003
60002c20:	bea50513          	addi	a0,a0,-1046 # 60002bea <<&T as core::fmt::Debug>::fmt>
60002c24:	da2a                	sw	a0,52(sp)
60002c26:	60003537          	lui	a0,0x60003
60002c2a:	4ec50513          	addi	a0,a0,1260 # 600034ec <.Lanon.2158d0578dda08147993e5787a6dfcb6.288>
60002c2e:	cc2a                	sw	a0,24(sp)
60002c30:	4509                	li	a0,2
60002c32:	ce2a                	sw	a0,28(sp)
60002c34:	c802                	sw	zero,16(sp)
60002c36:	102c                	addi	a1,sp,40
60002c38:	d02e                	sw	a1,32(sp)
60002c3a:	d22a                	sw	a0,36(sp)
60002c3c:	0808                	addi	a0,sp,16
60002c3e:	85b2                	mv	a1,a2
60002c40:	fffff097          	auipc	ra,0xfffff
60002c44:	7ec080e7          	jalr	2028(ra) # 6000242c <core::panicking::panic_fmt>
	...

60002c4a <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>:
60002c4a:	00054503          	lbu	a0,0(a0)
60002c4e:	00000317          	auipc	t1,0x0
60002c52:	85a30067          	jr	-1958(t1) # 600024a8 <core::fmt::num::imp::fmt_u32>

60002c56 <__set_sie>:
60002c56:	10452073          	csrs	sie,a0
60002c5a:	8082                	ret

60002c5c <__read_sepc>:
60002c5c:	14102573          	csrr	a0,sepc
60002c60:	8082                	ret

60002c62 <__read_scause>:
60002c62:	14202573          	csrr	a0,scause
60002c66:	8082                	ret

60002c68 <__read_stval>:
60002c68:	14302573          	csrr	a0,stval
60002c6c:	8082                	ret

60002c6e <__read_vsim>:
60002c6e:	9c002573          	csrr	a0,0x9c0
60002c72:	8082                	ret

60002c74 <__write_vsim>:
60002c74:	9c051073          	csrw	0x9c0,a0
60002c78:	8082                	ret

60002c7a <__read_vsip>:
60002c7a:	dc002573          	csrr	a0,0xdc0
60002c7e:	8082                	ret

60002c80 <memset>:
60002c80:	00000317          	auipc	t1,0x0
60002c84:	0be30067          	jr	190(t1) # 60002d3e <compiler_builtins::mem::memset>

60002c88 <memcpy>:
60002c88:	00000317          	auipc	t1,0x0
60002c8c:	00830067          	jr	8(t1) # 60002c90 <compiler_builtins::mem::memcpy>

60002c90 <compiler_builtins::mem::memcpy>:
60002c90:	46bd                	li	a3,15
60002c92:	06c6fa63          	bgeu	a3,a2,60002d06 <compiler_builtins::mem::memcpy+0x76>
60002c96:	40a006b3          	neg	a3,a0
60002c9a:	0036f813          	andi	a6,a3,3
60002c9e:	010503b3          	add	t2,a0,a6
60002ca2:	00080c63          	beqz	a6,60002cba <compiler_builtins::mem::memcpy+0x2a>
60002ca6:	87aa                	mv	a5,a0
60002ca8:	86ae                	mv	a3,a1
60002caa:	00068703          	lb	a4,0(a3)
60002cae:	00e78023          	sb	a4,0(a5)
60002cb2:	0785                	addi	a5,a5,1
60002cb4:	0685                	addi	a3,a3,1
60002cb6:	fe77eae3          	bltu	a5,t2,60002caa <compiler_builtins::mem::memcpy+0x1a>
60002cba:	010588b3          	add	a7,a1,a6
60002cbe:	41060833          	sub	a6,a2,a6
60002cc2:	ffc87293          	andi	t0,a6,-4
60002cc6:	0038f593          	andi	a1,a7,3
60002cca:	005386b3          	add	a3,t2,t0
60002cce:	cd9d                	beqz	a1,60002d0c <compiler_builtins::mem::memcpy+0x7c>
60002cd0:	04505863          	blez	t0,60002d20 <compiler_builtins::mem::memcpy+0x90>
60002cd4:	00359313          	slli	t1,a1,0x3
60002cd8:	ffc8f713          	andi	a4,a7,-4
60002cdc:	4310                	lw	a2,0(a4)
60002cde:	406005b3          	neg	a1,t1
60002ce2:	0185fe13          	andi	t3,a1,24
60002ce6:	00470793          	addi	a5,a4,4
60002cea:	4398                	lw	a4,0(a5)
60002cec:	00665633          	srl	a2,a2,t1
60002cf0:	01c715b3          	sll	a1,a4,t3
60002cf4:	8dd1                	or	a1,a1,a2
60002cf6:	00b3a023          	sw	a1,0(t2)
60002cfa:	0391                	addi	t2,t2,4
60002cfc:	0791                	addi	a5,a5,4
60002cfe:	863a                	mv	a2,a4
60002d00:	fed3e5e3          	bltu	t2,a3,60002cea <compiler_builtins::mem::memcpy+0x5a>
60002d04:	a831                	j	60002d20 <compiler_builtins::mem::memcpy+0x90>
60002d06:	86aa                	mv	a3,a0
60002d08:	e20d                	bnez	a2,60002d2a <compiler_builtins::mem::memcpy+0x9a>
60002d0a:	a80d                	j	60002d3c <compiler_builtins::mem::memcpy+0xac>
60002d0c:	00505a63          	blez	t0,60002d20 <compiler_builtins::mem::memcpy+0x90>
60002d10:	85c6                	mv	a1,a7
60002d12:	4190                	lw	a2,0(a1)
60002d14:	00c3a023          	sw	a2,0(t2)
60002d18:	0391                	addi	t2,t2,4
60002d1a:	0591                	addi	a1,a1,4
60002d1c:	fed3ebe3          	bltu	t2,a3,60002d12 <compiler_builtins::mem::memcpy+0x82>
60002d20:	005885b3          	add	a1,a7,t0
60002d24:	00387613          	andi	a2,a6,3
60002d28:	ca11                	beqz	a2,60002d3c <compiler_builtins::mem::memcpy+0xac>
60002d2a:	9636                	add	a2,a2,a3
60002d2c:	00058703          	lb	a4,0(a1)
60002d30:	00e68023          	sb	a4,0(a3)
60002d34:	0685                	addi	a3,a3,1
60002d36:	0585                	addi	a1,a1,1
60002d38:	fec6eae3          	bltu	a3,a2,60002d2c <compiler_builtins::mem::memcpy+0x9c>
60002d3c:	8082                	ret

60002d3e <compiler_builtins::mem::memset>:
60002d3e:	46bd                	li	a3,15
60002d40:	04c6f463          	bgeu	a3,a2,60002d88 <compiler_builtins::mem::memset+0x4a>
60002d44:	40a006b3          	neg	a3,a0
60002d48:	8a8d                	andi	a3,a3,3
60002d4a:	00d50733          	add	a4,a0,a3
60002d4e:	c699                	beqz	a3,60002d5c <compiler_builtins::mem::memset+0x1e>
60002d50:	87aa                	mv	a5,a0
60002d52:	00b78023          	sb	a1,0(a5)
60002d56:	0785                	addi	a5,a5,1
60002d58:	fee7ede3          	bltu	a5,a4,60002d52 <compiler_builtins::mem::memset+0x14>
60002d5c:	8e15                	sub	a2,a2,a3
60002d5e:	ffc67793          	andi	a5,a2,-4
60002d62:	00f706b3          	add	a3,a4,a5
60002d66:	00f05e63          	blez	a5,60002d82 <compiler_builtins::mem::memset+0x44>
60002d6a:	0ff5f813          	zext.b	a6,a1
60002d6e:	010107b7          	lui	a5,0x1010
60002d72:	10178793          	addi	a5,a5,257 # 1010101 <.Lline_table_start0+0x100b29e>
60002d76:	02f807b3          	mul	a5,a6,a5
60002d7a:	c31c                	sw	a5,0(a4)
60002d7c:	0711                	addi	a4,a4,4
60002d7e:	fed76ee3          	bltu	a4,a3,60002d7a <compiler_builtins::mem::memset+0x3c>
60002d82:	8a0d                	andi	a2,a2,3
60002d84:	e601                	bnez	a2,60002d8c <compiler_builtins::mem::memset+0x4e>
60002d86:	a809                	j	60002d98 <compiler_builtins::mem::memset+0x5a>
60002d88:	86aa                	mv	a3,a0
60002d8a:	c619                	beqz	a2,60002d98 <compiler_builtins::mem::memset+0x5a>
60002d8c:	9636                	add	a2,a2,a3
60002d8e:	00b68023          	sb	a1,0(a3)
60002d92:	0685                	addi	a3,a3,1
60002d94:	fec6ede3          	bltu	a3,a2,60002d8e <compiler_builtins::mem::memset+0x50>
60002d98:	8082                	ret
